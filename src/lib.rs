/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl <T> __BindgenUnionField<T> {
        #[inline]
        pub fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::std::mem::transmute(self)
        }
    }
    impl <T> ::std::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self { Self::new() }
    }
    impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self { Self::new() }
    }
    impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
    impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    #[allow(unused_imports)]
    use self::super::root;
    pub const M_PI: f64 = 3.141592653589793;
    pub const __MINGW_USE_UNDERSCORE_PREFIX: ::std::os::raw::c_uint = 0;
    pub const octave_oct_h: ::std::os::raw::c_uint = 1;
    pub const octave_octave_config_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CSTDINT: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: ::std::os::raw::c_uint = 1;
    pub const __GLIBCXX__: ::std::os::raw::c_uint = 20160726;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: ::std::os::raw::c_uint = 0;
    pub const _GLIBCXX_USE_DEPRECATED: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_INLINE_VERSION: ::std::os::raw::c_uint = 0;
    pub const __GTHREAD_HIDE_WIN32API: ::std::os::raw::c_uint = 1;
    pub const NOMINMAX: ::std::os::raw::c_uint = 1;
    pub const __USE_MINGW_ANSI_STDIO: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_NO_IOCTL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_LLP64: ::std::os::raw::c_uint = 1;
    pub const _GTHREAD_USE_MUTEX_INIT_FUNC: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CPU_DEFINES: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_FAST_MATH: ::std::os::raw::c_uint = 0;
    pub const _GLIBCXX_HAVE_ACOSF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ACOSL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ASINF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ASINL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ATANF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ATANL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_CEILF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_CEILL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_COSF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_COSHF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_COSHL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_COSL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ECANCELED: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ECHILD: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ENOSPC: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ENOTSUP: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_EOVERFLOW: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_EOWNERDEAD: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_EPERM: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_EPROTO: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ETIMEDOUT: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_EWOULDBLOCK: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_EXPF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_EXPL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FABSF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FABSL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FENV_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FINITE: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FLOORF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FLOORL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FMODF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FMODL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FPCLASS: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FREXPF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FREXPL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_GETS: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_HYPOT: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_IEEEFP_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_INT64_T: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_INT64_T_LONG_LONG: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ISNAN: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_LOG10F: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_LOG10L: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_LOGF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_LOGL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_MODF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_MODFF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_MODFL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_POWF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_POWL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SINCOS: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SINF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SINHF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SINHL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SINL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SLEEP: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SQRTF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SQRTL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_STRING_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_STRTOF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_TANF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_TANHF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_TANHL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_TANL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_USLEEP: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE__FINITEF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE__ISNANF: ::std::os::raw::c_uint = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\x00";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\x00";
    pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] =
        b"package-unused\x00";
    pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] =
        b"package-unused version-unused\x00";
    pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] =
        b"libstdc++\x00";
    pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\x00";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] =
        b"version-unused\x00";
    pub const STDC_HEADERS: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: ::std::os::raw::c_uint = 0;
    pub const _GLIBCXX_HOSTED: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_STDIO_EOF: ::std::os::raw::c_int = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: ::std::os::raw::c_uint = 2;
    pub const _GLIBCXX_USE_C99: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: ::std::os::raw::c_uint =
        1;
    pub const _GLIBCXX_USE_C99_MATH: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_FLOAT128: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_INT128: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_LFS: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_LONG_LONG: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_TMPNAM: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_USE_WCHAR_T: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_VERBOSE: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_X86_RDRAND: ::std::os::raw::c_uint = 1;
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_FINITEF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_HAVE_ISNANF: ::std::os::raw::c_uint = 1;
    pub const __MINGW64_VERSION_MAJOR: ::std::os::raw::c_uint = 4;
    pub const __MINGW64_VERSION_MINOR: ::std::os::raw::c_uint = 0;
    pub const __MINGW64_VERSION_RC: ::std::os::raw::c_uint = 0;
    pub const __MINGW64_VERSION_STATE: &'static [u8; 7usize] = b"stable\x00";
    pub const __MINGW32_MAJOR_VERSION: ::std::os::raw::c_uint = 3;
    pub const __MINGW32_MINOR_VERSION: ::std::os::raw::c_uint = 11;
    pub const _M_AMD64: ::std::os::raw::c_uint = 100;
    pub const _M_X64: ::std::os::raw::c_uint = 100;
    pub const __MINGW_HAVE_ANSI_C99_PRINTF: ::std::os::raw::c_uint = 1;
    pub const __MINGW_HAVE_WIDE_C99_PRINTF: ::std::os::raw::c_uint = 1;
    pub const __MINGW_HAVE_ANSI_C99_SCANF: ::std::os::raw::c_uint = 1;
    pub const __MINGW_HAVE_WIDE_C99_SCANF: ::std::os::raw::c_uint = 1;
    pub const __MINGW_SEC_WARN_STR: &'static [u8; 92usize] =
        b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\x00";
    pub const __MINGW_MSVC2005_DEPREC_STR: &'static [u8; 117usize] =
        b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\x00";
    pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: ::std::os::raw::c_uint =
        0;
    pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY:
              ::std::os::raw::c_uint =
        0;
    pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: ::std::os::raw::c_uint
              =
        0;
    pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT:
              ::std::os::raw::c_uint =
        0;
    pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY:
              ::std::os::raw::c_uint =
        0;
    pub const __USE_CRTIMP: ::std::os::raw::c_uint = 1;
    pub const USE___UUIDOF: ::std::os::raw::c_uint = 0;
    pub const __CRT__NO_INLINE: ::std::os::raw::c_uint = 1;
    pub const __MSVCRT_VERSION__: ::std::os::raw::c_uint = 1792;
    pub const _WIN32_WINNT: ::std::os::raw::c_uint = 1282;
    pub const __MINGW_HAS_DXSDK: ::std::os::raw::c_uint = 1;
    pub const MINGW_HAS_DDRAW_H: ::std::os::raw::c_uint = 1;
    pub const MINGW_DDRAW_VERSION: ::std::os::raw::c_uint = 7;
    pub const MINGW_HAS_DDK_H: ::std::os::raw::c_uint = 1;
    pub const _CRT_PACKING: ::std::os::raw::c_uint = 8;
    pub const _SECURECRT_FILL_BUFFER_PATTERN: ::std::os::raw::c_uint = 253;
    pub const _ARGMAX: ::std::os::raw::c_uint = 100;
    pub const INT8_MIN: ::std::os::raw::c_int = -128;
    pub const INT16_MIN: ::std::os::raw::c_int = -32768;
    pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
    pub const INT64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
    pub const INT8_MAX: ::std::os::raw::c_uint = 127;
    pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
    pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
    pub const INT64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
    pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
    pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
    pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
    pub const UINT64_MAX: ::std::os::raw::c_int = -1;
    pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
    pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
    pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
    pub const INT_LEAST64_MIN: ::std::os::raw::c_longlong =
        -9223372036854775808;
    pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
    pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
    pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
    pub const INT_LEAST64_MAX: ::std::os::raw::c_ulonglong =
        9223372036854775807;
    pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
    pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
    pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
    pub const UINT_LEAST64_MAX: ::std::os::raw::c_int = -1;
    pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
    pub const INT_FAST16_MIN: ::std::os::raw::c_int = -32768;
    pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
    pub const INT_FAST64_MIN: ::std::os::raw::c_longlong =
        -9223372036854775808;
    pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
    pub const INT_FAST16_MAX: ::std::os::raw::c_uint = 32767;
    pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
    pub const INT_FAST64_MAX: ::std::os::raw::c_ulonglong =
        9223372036854775807;
    pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
    pub const UINT_FAST16_MAX: ::std::os::raw::c_uint = 65535;
    pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
    pub const UINT_FAST64_MAX: ::std::os::raw::c_int = -1;
    pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
    pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
    pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
    pub const INTMAX_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
    pub const INTMAX_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
    pub const UINTMAX_MAX: ::std::os::raw::c_int = -1;
    pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
    pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
    pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
    pub const SIZE_MAX: ::std::os::raw::c_int = -1;
    pub const WCHAR_MIN: ::std::os::raw::c_uint = 0;
    pub const WCHAR_MAX: ::std::os::raw::c_uint = 65535;
    pub const WINT_MIN: ::std::os::raw::c_uint = 0;
    pub const WINT_MAX: ::std::os::raw::c_uint = 65535;
    pub const HAVE_OCTAVE_DEPRECATED_ATTR: ::std::os::raw::c_uint = 1;
    pub const HAVE_OCTAVE_NORETURN_ATTR: ::std::os::raw::c_uint = 1;
    pub const HAVE_OCTAVE_UNUSED_ATTR: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_USE_DEPRECATED_FUNCTIONS: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_ENABLE_ATOMIC_REFCOUNT: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_ENABLE_OPENMP: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_HAVE_FAST_INT_OPS: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_HAVE_LONG_LONG_INT: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES: ::std::os::raw::c_uint =
        1;
    pub const OCTAVE_INT_USE_LONG_DOUBLE: ::std::os::raw::c_uint = 1;
    pub const F77_USES_GFORTRAN_CALLING_CONVENTION: ::std::os::raw::c_uint =
        1;
    pub const octave_Matrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_base_h: ::std::os::raw::c_uint = 1;
    pub const octave_MatrixType_h: ::std::os::raw::c_uint = 1;
    pub const octave_MSparse_h: ::std::os::raw::c_uint = 1;
    pub const octave_quit_h: ::std::os::raw::c_uint = 1;
    pub const _JBLEN: ::std::os::raw::c_uint = 16;
    pub const NSIG: ::std::os::raw::c_uint = 23;
    pub const SIGINT: ::std::os::raw::c_uint = 2;
    pub const SIGILL: ::std::os::raw::c_uint = 4;
    pub const SIGABRT_COMPAT: ::std::os::raw::c_uint = 6;
    pub const SIGFPE: ::std::os::raw::c_uint = 8;
    pub const SIGSEGV: ::std::os::raw::c_uint = 11;
    pub const SIGTERM: ::std::os::raw::c_uint = 15;
    pub const SIGBREAK: ::std::os::raw::c_uint = 21;
    pub const SIGABRT: ::std::os::raw::c_uint = 22;
    pub const SIGABRT2: ::std::os::raw::c_uint = 22;
    pub const _GLIBCXX_CSIGNAL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_STRING: ::std::os::raw::c_uint = 1;
    pub const _STRINGFWD_H: ::std::os::raw::c_uint = 1;
    pub const _MEMORYFWD_H: ::std::os::raw::c_uint = 1;
    pub const _CHAR_TRAITS_H: ::std::os::raw::c_uint = 1;
    pub const _STL_ALGOBASE_H: ::std::os::raw::c_uint = 1;
    pub const _FUNCTEXCEPT_H: ::std::os::raw::c_uint = 1;
    pub const _EXCEPTION_DEFINES_H: ::std::os::raw::c_uint = 1;
    pub const _CPP_TYPE_TRAITS_H: ::std::os::raw::c_uint = 1;
    pub const _EXT_TYPE_TRAITS: ::std::os::raw::c_uint = 1;
    pub const _EXT_NUMERIC_TRAITS: ::std::os::raw::c_uint = 1;
    pub const _STL_PAIR_H: ::std::os::raw::c_uint = 1;
    pub const _MOVE_H: ::std::os::raw::c_uint = 1;
    pub const _CONCEPT_CHECK_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_TYPE_TRAITS: ::std::os::raw::c_uint = 1;
    pub const __cpp_lib_is_null_pointer: ::std::os::raw::c_uint = 201309;
    pub const __cpp_lib_result_of_sfinae: ::std::os::raw::c_uint = 201210;
    pub const _STL_ITERATOR_BASE_TYPES_H: ::std::os::raw::c_uint = 1;
    pub const _STL_ITERATOR_BASE_FUNCS_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: ::std::os::raw::c_uint = 1;
    pub const _STL_ITERATOR_H: ::std::os::raw::c_uint = 1;
    pub const _PTR_TRAITS_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_PREDEFINED_OPS_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_POSTYPES_H: ::std::os::raw::c_uint = 1;
    pub const __USE_MINGW_STRTOX: ::std::os::raw::c_uint = 1;
    pub const _UPPER: ::std::os::raw::c_uint = 1;
    pub const _LOWER: ::std::os::raw::c_uint = 2;
    pub const _DIGIT: ::std::os::raw::c_uint = 4;
    pub const _SPACE: ::std::os::raw::c_uint = 8;
    pub const _PUNCT: ::std::os::raw::c_uint = 16;
    pub const _CONTROL: ::std::os::raw::c_uint = 32;
    pub const _BLANK: ::std::os::raw::c_uint = 64;
    pub const _HEX: ::std::os::raw::c_uint = 128;
    pub const _LEADBYTE: ::std::os::raw::c_uint = 32768;
    pub const _ALPHA: ::std::os::raw::c_uint = 259;
    pub const _GLIBCXX_CWCHAR: ::std::os::raw::c_uint = 1;
    pub const _ALLOCATOR_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CXX_ALLOCATOR_H: ::std::os::raw::c_uint = 1;
    pub const _NEW_ALLOCATOR_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_ATOMIC_LOCK_FREE_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_NESTED_EXCEPTION_H: ::std::os::raw::c_uint = 1;
    pub const _LOCALE_FWD_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CXX_LOCALE_H: ::std::os::raw::c_uint = 1;
    pub const BUFSIZ: ::std::os::raw::c_uint = 512;
    pub const _NSTREAM_: ::std::os::raw::c_uint = 512;
    pub const _IOB_ENTRIES: ::std::os::raw::c_uint = 20;
    pub const EOF: ::std::os::raw::c_int = -1;
    pub const _P_tmpdir: &'static [u8; 2usize] = b"\\\x00";
    pub const _wP_tmpdir: &'static [u8; 2usize] = b"\\\x00";
    pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
    pub const SEEK_END: ::std::os::raw::c_uint = 2;
    pub const SEEK_SET: ::std::os::raw::c_uint = 0;
    pub const STDIN_FILENO: ::std::os::raw::c_uint = 0;
    pub const STDOUT_FILENO: ::std::os::raw::c_uint = 1;
    pub const STDERR_FILENO: ::std::os::raw::c_uint = 2;
    pub const FILENAME_MAX: ::std::os::raw::c_uint = 260;
    pub const FOPEN_MAX: ::std::os::raw::c_uint = 20;
    pub const _SYS_OPEN: ::std::os::raw::c_uint = 20;
    pub const TMP_MAX: ::std::os::raw::c_uint = 32767;
    pub const _IOREAD: ::std::os::raw::c_uint = 1;
    pub const _IOWRT: ::std::os::raw::c_uint = 2;
    pub const _IOFBF: ::std::os::raw::c_uint = 0;
    pub const _IOLBF: ::std::os::raw::c_uint = 64;
    pub const _IONBF: ::std::os::raw::c_uint = 4;
    pub const _IOMYBUF: ::std::os::raw::c_uint = 8;
    pub const _IOEOF: ::std::os::raw::c_uint = 16;
    pub const _IOERR: ::std::os::raw::c_uint = 32;
    pub const _IOSTRG: ::std::os::raw::c_uint = 64;
    pub const _IORW: ::std::os::raw::c_uint = 128;
    pub const _TWO_DIGIT_EXPONENT: ::std::os::raw::c_uint = 1;
    pub const P_tmpdir: &'static [u8; 2usize] = b"\\\x00";
    pub const SYS_OPEN: ::std::os::raw::c_uint = 20;
    pub const _P_WAIT: ::std::os::raw::c_uint = 0;
    pub const _P_NOWAIT: ::std::os::raw::c_uint = 1;
    pub const _OLD_P_OVERLAY: ::std::os::raw::c_uint = 2;
    pub const _P_NOWAITO: ::std::os::raw::c_uint = 3;
    pub const _P_DETACH: ::std::os::raw::c_uint = 4;
    pub const _P_OVERLAY: ::std::os::raw::c_uint = 2;
    pub const _WAIT_CHILD: ::std::os::raw::c_uint = 0;
    pub const _WAIT_GRANDCHILD: ::std::os::raw::c_uint = 1;
    pub const LC_ALL: ::std::os::raw::c_uint = 0;
    pub const LC_COLLATE: ::std::os::raw::c_uint = 1;
    pub const LC_CTYPE: ::std::os::raw::c_uint = 2;
    pub const LC_MONETARY: ::std::os::raw::c_uint = 3;
    pub const LC_NUMERIC: ::std::os::raw::c_uint = 4;
    pub const LC_TIME: ::std::os::raw::c_uint = 5;
    pub const LC_MIN: ::std::os::raw::c_uint = 0;
    pub const LC_MAX: ::std::os::raw::c_uint = 5;
    pub const _ENABLE_PER_THREAD_LOCALE: ::std::os::raw::c_uint = 1;
    pub const _DISABLE_PER_THREAD_LOCALE: ::std::os::raw::c_uint = 2;
    pub const _ENABLE_PER_THREAD_LOCALE_GLOBAL: ::std::os::raw::c_uint = 16;
    pub const _DISABLE_PER_THREAD_LOCALE_GLOBAL: ::std::os::raw::c_uint = 32;
    pub const _ENABLE_PER_THREAD_LOCALE_NEW: ::std::os::raw::c_uint = 256;
    pub const _DISABLE_PER_THREAD_LOCALE_NEW: ::std::os::raw::c_uint = 512;
    pub const _GLIBCXX_CLOCALE: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_NUM_CATEGORIES: ::std::os::raw::c_uint = 0;
    pub const _GLIBCXX_IOSFWD: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CCTYPE: ::std::os::raw::c_uint = 1;
    pub const _OSTREAM_INSERT_H: ::std::os::raw::c_uint = 1;
    pub const _CXXABI_FORCED_H: ::std::os::raw::c_uint = 1;
    pub const _STL_FUNCTION_H: ::std::os::raw::c_uint = 1;
    pub const _BACKWARD_BINDERS_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_RANGE_ACCESS_H: ::std::os::raw::c_uint = 1;
    pub const _BASIC_STRING_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_ATOMICITY_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: ::std::os::raw::c_uint = 0;
    pub const __GTHREADS: ::std::os::raw::c_uint = 1;
    pub const EPERM: ::std::os::raw::c_uint = 1;
    pub const ENOENT: ::std::os::raw::c_uint = 2;
    pub const ENOFILE: ::std::os::raw::c_uint = 2;
    pub const ESRCH: ::std::os::raw::c_uint = 3;
    pub const EINTR: ::std::os::raw::c_uint = 4;
    pub const EIO: ::std::os::raw::c_uint = 5;
    pub const ENXIO: ::std::os::raw::c_uint = 6;
    pub const E2BIG: ::std::os::raw::c_uint = 7;
    pub const ENOEXEC: ::std::os::raw::c_uint = 8;
    pub const EBADF: ::std::os::raw::c_uint = 9;
    pub const ECHILD: ::std::os::raw::c_uint = 10;
    pub const EAGAIN: ::std::os::raw::c_uint = 11;
    pub const ENOMEM: ::std::os::raw::c_uint = 12;
    pub const EACCES: ::std::os::raw::c_uint = 13;
    pub const EFAULT: ::std::os::raw::c_uint = 14;
    pub const EBUSY: ::std::os::raw::c_uint = 16;
    pub const EEXIST: ::std::os::raw::c_uint = 17;
    pub const EXDEV: ::std::os::raw::c_uint = 18;
    pub const ENODEV: ::std::os::raw::c_uint = 19;
    pub const ENOTDIR: ::std::os::raw::c_uint = 20;
    pub const EISDIR: ::std::os::raw::c_uint = 21;
    pub const ENFILE: ::std::os::raw::c_uint = 23;
    pub const EMFILE: ::std::os::raw::c_uint = 24;
    pub const ENOTTY: ::std::os::raw::c_uint = 25;
    pub const EFBIG: ::std::os::raw::c_uint = 27;
    pub const ENOSPC: ::std::os::raw::c_uint = 28;
    pub const ESPIPE: ::std::os::raw::c_uint = 29;
    pub const EROFS: ::std::os::raw::c_uint = 30;
    pub const EMLINK: ::std::os::raw::c_uint = 31;
    pub const EPIPE: ::std::os::raw::c_uint = 32;
    pub const EDOM: ::std::os::raw::c_uint = 33;
    pub const EDEADLK: ::std::os::raw::c_uint = 36;
    pub const ENAMETOOLONG: ::std::os::raw::c_uint = 38;
    pub const ENOLCK: ::std::os::raw::c_uint = 39;
    pub const ENOSYS: ::std::os::raw::c_uint = 40;
    pub const ENOTEMPTY: ::std::os::raw::c_uint = 41;
    pub const EINVAL: ::std::os::raw::c_uint = 22;
    pub const ERANGE: ::std::os::raw::c_uint = 34;
    pub const EILSEQ: ::std::os::raw::c_uint = 42;
    pub const STRUNCATE: ::std::os::raw::c_uint = 80;
    pub const EDEADLOCK: ::std::os::raw::c_uint = 36;
    pub const ENOTSUP: ::std::os::raw::c_uint = 129;
    pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 102;
    pub const EADDRINUSE: ::std::os::raw::c_uint = 100;
    pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 101;
    pub const EISCONN: ::std::os::raw::c_uint = 113;
    pub const ENOBUFS: ::std::os::raw::c_uint = 119;
    pub const ECONNABORTED: ::std::os::raw::c_uint = 106;
    pub const EALREADY: ::std::os::raw::c_uint = 103;
    pub const ECONNREFUSED: ::std::os::raw::c_uint = 107;
    pub const ECONNRESET: ::std::os::raw::c_uint = 108;
    pub const EDESTADDRREQ: ::std::os::raw::c_uint = 109;
    pub const EHOSTUNREACH: ::std::os::raw::c_uint = 110;
    pub const EMSGSIZE: ::std::os::raw::c_uint = 115;
    pub const ENETDOWN: ::std::os::raw::c_uint = 116;
    pub const ENETRESET: ::std::os::raw::c_uint = 117;
    pub const ENETUNREACH: ::std::os::raw::c_uint = 118;
    pub const ENOPROTOOPT: ::std::os::raw::c_uint = 123;
    pub const ENOTSOCK: ::std::os::raw::c_uint = 128;
    pub const ENOTCONN: ::std::os::raw::c_uint = 126;
    pub const ECANCELED: ::std::os::raw::c_uint = 105;
    pub const EINPROGRESS: ::std::os::raw::c_uint = 112;
    pub const EOPNOTSUPP: ::std::os::raw::c_uint = 130;
    pub const EWOULDBLOCK: ::std::os::raw::c_uint = 140;
    pub const EOWNERDEAD: ::std::os::raw::c_uint = 133;
    pub const EPROTO: ::std::os::raw::c_uint = 134;
    pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 135;
    pub const ETIMEDOUT: ::std::os::raw::c_uint = 138;
    pub const ELOOP: ::std::os::raw::c_uint = 114;
    pub const EPROTOTYPE: ::std::os::raw::c_uint = 136;
    pub const EOVERFLOW: ::std::os::raw::c_uint = 132;
    pub const MINGW32_SUPPORTS_MT_EH: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_ATOMIC_WORD_H: ::std::os::raw::c_uint = 1;
    pub const _STRING_CONVERSIONS_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CSTDLIB: ::std::os::raw::c_uint = 1;
    pub const PATH_MAX: ::std::os::raw::c_uint = 260;
    pub const CHAR_BIT: ::std::os::raw::c_uint = 8;
    pub const SCHAR_MIN: ::std::os::raw::c_int = -128;
    pub const SCHAR_MAX: ::std::os::raw::c_uint = 127;
    pub const UCHAR_MAX: ::std::os::raw::c_uint = 255;
    pub const CHAR_MIN: ::std::os::raw::c_int = -128;
    pub const CHAR_MAX: ::std::os::raw::c_uint = 127;
    pub const MB_LEN_MAX: ::std::os::raw::c_uint = 5;
    pub const SHRT_MIN: ::std::os::raw::c_int = -32768;
    pub const SHRT_MAX: ::std::os::raw::c_uint = 32767;
    pub const USHRT_MAX: ::std::os::raw::c_uint = 65535;
    pub const INT_MIN: ::std::os::raw::c_int = -2147483648;
    pub const INT_MAX: ::std::os::raw::c_uint = 2147483647;
    pub const UINT_MAX: ::std::os::raw::c_uint = 4294967295;
    pub const LONG_MIN: ::std::os::raw::c_int = -2147483648;
    pub const LONG_MAX: ::std::os::raw::c_uint = 2147483647;
    pub const ULONG_MAX: ::std::os::raw::c_uint = 4294967295;
    pub const LLONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
    pub const LLONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
    pub const ULLONG_MAX: ::std::os::raw::c_int = -1;
    pub const _I8_MIN: ::std::os::raw::c_int = -128;
    pub const _I8_MAX: ::std::os::raw::c_uint = 127;
    pub const _UI8_MAX: ::std::os::raw::c_uint = 255;
    pub const _I16_MIN: ::std::os::raw::c_int = -32768;
    pub const _I16_MAX: ::std::os::raw::c_uint = 32767;
    pub const _UI16_MAX: ::std::os::raw::c_uint = 65535;
    pub const _I32_MIN: ::std::os::raw::c_int = -2147483648;
    pub const _I32_MAX: ::std::os::raw::c_uint = 2147483647;
    pub const _UI32_MAX: ::std::os::raw::c_uint = 4294967295;
    pub const LONG_LONG_MAX: ::std::os::raw::c_ulonglong =
        9223372036854775807;
    pub const LONG_LONG_MIN: ::std::os::raw::c_longlong =
        -9223372036854775808;
    pub const ULONG_LONG_MAX: ::std::os::raw::c_int = -1;
    pub const _I64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
    pub const _I64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
    pub const _UI64_MAX: ::std::os::raw::c_int = -1;
    pub const SSIZE_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
    pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
    pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
    pub const RAND_MAX: ::std::os::raw::c_uint = 32767;
    pub const _MAX_PATH: ::std::os::raw::c_uint = 260;
    pub const _MAX_DRIVE: ::std::os::raw::c_uint = 3;
    pub const _MAX_DIR: ::std::os::raw::c_uint = 256;
    pub const _MAX_FNAME: ::std::os::raw::c_uint = 256;
    pub const _MAX_EXT: ::std::os::raw::c_uint = 256;
    pub const _OUT_TO_DEFAULT: ::std::os::raw::c_uint = 0;
    pub const _OUT_TO_STDERR: ::std::os::raw::c_uint = 1;
    pub const _OUT_TO_MSGBOX: ::std::os::raw::c_uint = 2;
    pub const _REPORT_ERRMODE: ::std::os::raw::c_uint = 3;
    pub const _WRITE_ABORT_MSG: ::std::os::raw::c_uint = 1;
    pub const _CALL_REPORTFAULT: ::std::os::raw::c_uint = 2;
    pub const _MAX_ENV: ::std::os::raw::c_uint = 32767;
    pub const _HEAP_MAXREQ: ::std::os::raw::c_int = -32;
    pub const _HEAPEMPTY: ::std::os::raw::c_int = -1;
    pub const _HEAPOK: ::std::os::raw::c_int = -2;
    pub const _HEAPBADBEGIN: ::std::os::raw::c_int = -3;
    pub const _HEAPBADNODE: ::std::os::raw::c_int = -4;
    pub const _HEAPEND: ::std::os::raw::c_int = -5;
    pub const _HEAPBADPTR: ::std::os::raw::c_int = -6;
    pub const _FREEENTRY: ::std::os::raw::c_uint = 0;
    pub const _USEDENTRY: ::std::os::raw::c_uint = 1;
    pub const _ALLOCA_S_THRESHOLD: ::std::os::raw::c_uint = 1024;
    pub const _ALLOCA_S_STACK_MARKER: ::std::os::raw::c_uint = 52428;
    pub const _ALLOCA_S_HEAP_MARKER: ::std::os::raw::c_uint = 56797;
    pub const _ALLOCA_S_MARKER_SIZE: ::std::os::raw::c_uint = 16;
    pub const _GLIBCXX_CSTDIO: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CERRNO: ::std::os::raw::c_uint = 1;
    pub const _FUNCTIONAL_HASH_H: ::std::os::raw::c_uint = 1;
    pub const _HASH_BYTES_H: ::std::os::raw::c_uint = 1;
    pub const _BASIC_STRING_TCC: ::std::os::raw::c_uint = 1;
    pub const octave_lo_error_h: ::std::os::raw::c_uint = 1;
    pub const octave_Sparse_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CSTDDEF: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_ALGORITHM: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_UTILITY: ::std::os::raw::c_uint = 1;
    pub const _STL_RELOPS_H: ::std::os::raw::c_uint = 1;
    pub const _STL_ALGO_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_ALGORITHMFWD_H: ::std::os::raw::c_uint = 1;
    pub const _STL_HEAP_H: ::std::os::raw::c_uint = 1;
    pub const _STL_TEMPBUF_H: ::std::os::raw::c_uint = 1;
    pub const _STL_CONSTRUCT_H: ::std::os::raw::c_uint = 1;
    pub const _EXT_ALLOC_TRAITS_H: ::std::os::raw::c_uint = 1;
    pub const _ALLOC_TRAITS_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_RANDOM: ::std::os::raw::c_uint = 1;
    pub const _DOMAIN: ::std::os::raw::c_uint = 1;
    pub const _SING: ::std::os::raw::c_uint = 2;
    pub const _OVERFLOW: ::std::os::raw::c_uint = 3;
    pub const _UNDERFLOW: ::std::os::raw::c_uint = 4;
    pub const _TLOSS: ::std::os::raw::c_uint = 5;
    pub const _PLOSS: ::std::os::raw::c_uint = 6;
    pub const FP_NAN: ::std::os::raw::c_uint = 256;
    pub const FP_NORMAL: ::std::os::raw::c_uint = 1024;
    pub const FP_INFINITE: ::std::os::raw::c_uint = 1280;
    pub const FP_ZERO: ::std::os::raw::c_uint = 16384;
    pub const FP_SUBNORMAL: ::std::os::raw::c_uint = 17408;
    pub const _GLIBCXX_CMATH: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_NUMERIC_LIMITS: ::std::os::raw::c_uint = 1;
    pub const _RANDOM_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_VECTOR: ::std::os::raw::c_uint = 1;
    pub const _STL_UNINITIALIZED_H: ::std::os::raw::c_uint = 1;
    pub const _STL_VECTOR_H: ::std::os::raw::c_uint = 1;
    pub const _STL_BVECTOR_H: ::std::os::raw::c_uint = 1;
    pub const _VECTOR_TCC: ::std::os::raw::c_uint = 1;
    pub const _BITS_OPT_RANDOM_H: ::std::os::raw::c_uint = 1;
    pub const _RANDOM_TCC: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_NUMERIC: ::std::os::raw::c_uint = 1;
    pub const _STL_NUMERIC_H: ::std::os::raw::c_uint = 1;
    pub const octave_Array_h: ::std::os::raw::c_uint = 1;
    pub const octave_dim_vector_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_macros_h: ::std::os::raw::c_uint = 1;
    pub const octave_oct_refcount_h: ::std::os::raw::c_uint = 1;
    pub const octave_idx_vector_h: ::std::os::raw::c_uint = 1;
    pub const _NLSCMPERROR: ::std::os::raw::c_uint = 2147483647;
    pub const _GLIBCXX_CSTRING: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_MEMORY: ::std::os::raw::c_uint = 1;
    pub const _STL_RAW_STORAGE_ITERATOR_H: ::std::os::raw::c_uint = 1;
    pub const __GXX_MERGED_TYPEINFO_NAMES: ::std::os::raw::c_uint = 0;
    pub const __GXX_TYPEINFO_EQUALITY_INLINE: ::std::os::raw::c_uint = 1;
    pub const _CONCURRENCE_H: ::std::os::raw::c_uint = 1;
    pub const _USES_ALLOCATOR_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_FUNCTIONAL: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_TUPLE: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_ARRAY: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_STDEXCEPT: ::std::os::raw::c_uint = 1;
    pub const _UNIQUE_PTR_H: ::std::os::raw::c_uint = 1;
    pub const _SHARED_PTR_H: ::std::os::raw::c_uint = 1;
    pub const _SHARED_PTR_BASE_H: ::std::os::raw::c_uint = 1;
    pub const _ALIGNED_BUFFER_H: ::std::os::raw::c_uint = 1;
    pub const _BACKWARD_AUTO_PTR_H: ::std::os::raw::c_uint = 1;
    pub const octave_oct_inttypes_fwd_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_traits_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_utils_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_IOSTREAM: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_OSTREAM: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_IOS: ::std::os::raw::c_uint = 1;
    pub const _IOS_BASE_H: ::std::os::raw::c_uint = 1;
    pub const _LOCALE_CLASSES_H: ::std::os::raw::c_uint = 1;
    pub const _LOCALE_CLASSES_TCC: ::std::os::raw::c_uint = 1;
    pub const _GLIBXX_STREAMBUF: ::std::os::raw::c_uint = 1;
    pub const _STREAMBUF_TCC: ::std::os::raw::c_uint = 1;
    pub const _BASIC_IOS_H: ::std::os::raw::c_uint = 1;
    pub const _LOCALE_FACETS_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CWCTYPE: ::std::os::raw::c_uint = 1;
    pub const _STREAMBUF_ITERATOR_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_NUM_FACETS: ::std::os::raw::c_uint = 28;
    pub const _LOCALE_FACETS_TCC: ::std::os::raw::c_uint = 1;
    pub const _BASIC_IOS_TCC: ::std::os::raw::c_uint = 1;
    pub const _OSTREAM_TCC: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_ISTREAM: ::std::os::raw::c_uint = 1;
    pub const _ISTREAM_TCC: ::std::os::raw::c_uint = 1;
    pub const octave_lo_cutils_h: ::std::os::raw::c_uint = 1;
    pub const octave_oct_cmplx_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_COMPLEX: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_SSTREAM: ::std::os::raw::c_uint = 1;
    pub const _SSTREAM_TCC: ::std::os::raw::c_uint = 1;
    pub const octave_oct_sort_h: ::std::os::raw::c_uint = 1;
    pub const MAX_MERGE_PENDING: ::std::os::raw::c_uint = 85;
    pub const MIN_GALLOP: ::std::os::raw::c_uint = 7;
    pub const MERGESTATE_TEMP_SIZE: ::std::os::raw::c_uint = 1024;
    pub const octave_MArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_inlines_h: ::std::os::raw::c_uint = 1;
    pub const octave_oct_locbuf_h: ::std::os::raw::c_uint = 1;
    pub const octave_oct_inttypes_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_math_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_mappers_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_ieee_h: ::std::os::raw::c_uint = 1;
    pub const LO_IEEE_NA_HW_OLD: ::std::os::raw::c_uint = 2146435072;
    pub const LO_IEEE_NA_LW_OLD: ::std::os::raw::c_uint = 1954;
    pub const LO_IEEE_NA_HW: ::std::os::raw::c_uint = 2146975988;
    pub const LO_IEEE_NA_LW: ::std::os::raw::c_uint = 1073741824;
    pub const LO_IEEE_NA_FLOAT: ::std::os::raw::c_uint = 2143422370;
    pub const octave_Array_util_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_array_errwarn_h: ::std::os::raw::c_uint = 1;
    pub const octave_bsxfun_h: ::std::os::raw::c_uint = 1;
    pub const octave_bsxfun_defs_h: ::std::os::raw::c_uint = 1;
    pub const octave_boolMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_boolNDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_defs_h: ::std::os::raw::c_uint = 1;
    pub const MAPPER_FCN_TYPEDEFS: ::std::os::raw::c_uint = 1;
    pub const octave_mx_op_decl_h: ::std::os::raw::c_uint = 1;
    pub const octave_bsxfun_decl_h: ::std::os::raw::c_uint = 1;
    pub const octave_chMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_chNDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_str_vec_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_LIST: ::std::os::raw::c_uint = 1;
    pub const _STL_LIST_H: ::std::os::raw::c_uint = 1;
    pub const _LIST_TCC: ::std::os::raw::c_uint = 1;
    pub const octave_dMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_dNDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_MDiagArray2_h: ::std::os::raw::c_uint = 1;
    pub const octave_DiagArray2_h: ::std::os::raw::c_uint = 1;
    pub const octave_DET_h: ::std::os::raw::c_uint = 1;
    pub const octave_CMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_CNDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_fMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_fNDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_fCMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_fCNDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_dColVector_h: ::std::os::raw::c_uint = 1;
    pub const octave_CColVector_h: ::std::os::raw::c_uint = 1;
    pub const octave_fColVector_h: ::std::os::raw::c_uint = 1;
    pub const octave_fCColVector_h: ::std::os::raw::c_uint = 1;
    pub const octave_dRowVector_h: ::std::os::raw::c_uint = 1;
    pub const octave_CRowVector_h: ::std::os::raw::c_uint = 1;
    pub const octave_fRowVector_h: ::std::os::raw::c_uint = 1;
    pub const octave_fCRowVector_h: ::std::os::raw::c_uint = 1;
    pub const octave_dDiagMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_CDiagMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_fDiagMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_fCDiagMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_PermMatrix_h: ::std::os::raw::c_uint = 1;
    pub const octave_boolSparse_h: ::std::os::raw::c_uint = 1;
    pub const octave_Sparse_op_decls_h: ::std::os::raw::c_uint = 1;
    pub const octave_dSparse_h: ::std::os::raw::c_uint = 1;
    pub const octave_CSparse_h: ::std::os::raw::c_uint = 1;
    pub const octave_int8NDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_intNDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_int16NDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_int32NDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_int64NDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_uint8NDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_uint16NDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_uint32NDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_uint64NDArray_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ext_h: ::std::os::raw::c_uint = 1;
    pub const octave_aepbalance_h: ::std::os::raw::c_uint = 1;
    pub const octave_gepbalance_h: ::std::os::raw::c_uint = 1;
    pub const octave_chol_h: ::std::os::raw::c_uint = 1;
    pub const octave_hess_h: ::std::os::raw::c_uint = 1;
    pub const octave_schur_h: ::std::os::raw::c_uint = 1;
    pub const octave_svd_h: ::std::os::raw::c_uint = 1;
    pub const octave_EIG_h: ::std::os::raw::c_uint = 1;
    pub const octave_lu_h: ::std::os::raw::c_uint = 1;
    pub const octave_qr_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ops_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cdm_dm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_dm_cdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cs_dm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cs_m_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cs_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cdm_cm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cdm_m_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cdm_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cm_cdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cm_dm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cm_m_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cnda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cm_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cnda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_dm_cs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_dm_cm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_m_cs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_cs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_m_cdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_m_cm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_cnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_cdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_cm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_cnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_dm_m_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_m_dm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcdm_fdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fdm_fcdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcs_fdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcs_fm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcs_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcdm_fcm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcdm_fm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcdm_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcm_fcdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcm_fdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcm_fm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcnda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcm_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcnda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fdm_fcs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fdm_fcm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fm_fcs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_fcs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fm_fcdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fm_fcm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_fcnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_fcdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_fcm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_fcnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fdm_fm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fm_fdm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_pm_m_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_m_pm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_pm_cm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_cm_pm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_pm_fm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fm_pm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_pm_fcm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fcm_pm_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_s_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_s_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fs_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_fs_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_nda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_fnda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_fnda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_ui64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_i8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_ui8_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_i16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_ui16_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_i32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_ui32_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_i64_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i8nda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i16nda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i32nda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_i64nda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui8nda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui16nda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui32nda_ui64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_i8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_ui8nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_i16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_ui16nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_i32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_ui32nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_mx_ui64nda_i64nda_h: ::std::os::raw::c_uint = 1;
    pub const octave_defun_dld_h: ::std::os::raw::c_uint = 1;
    pub const octave_defun_int_h: ::std::os::raw::c_uint = 1;
    pub const octave_ov_builtin_h: ::std::os::raw::c_uint = 1;
    pub const octave_ov_fcn_h: ::std::os::raw::c_uint = 1;
    pub const octave_oct_time_h: ::std::os::raw::c_uint = 1;
    pub const _POSIX_TIMERS: ::std::os::raw::c_uint = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 200809;
    pub const _POSIX_CPUTIME: ::std::os::raw::c_uint = 200809;
    pub const _POSIX_THREAD_CPUTIME: ::std::os::raw::c_uint = 200809;
    pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
    pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
    pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
    pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
    pub const _GLIBCXX_CTIME: ::std::os::raw::c_uint = 1;
    pub const octave_ovl_h: ::std::os::raw::c_uint = 1;
    pub const octave_ov_h: ::std::os::raw::c_uint = 1;
    pub const octave_Range_h: ::std::os::raw::c_uint = 1;
    pub const octave_data_conv_h: ::std::os::raw::c_uint = 1;
    pub const octave_mach_info_h: ::std::os::raw::c_uint = 1;
    pub const octave_ov_base_h: ::std::os::raw::c_uint = 1;
    pub const octave_error_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CSTDARG: ::std::os::raw::c_uint = 1;
    pub const octave_unwind_prot_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_STACK: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_DEQUE: ::std::os::raw::c_uint = 1;
    pub const _STL_DEQUE_H: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_DEQUE_BUF_SIZE: ::std::os::raw::c_uint = 512;
    pub const _DEQUE_TCC: ::std::os::raw::c_uint = 1;
    pub const _STL_STACK_H: ::std::os::raw::c_uint = 1;
    pub const octave_action_container_h: ::std::os::raw::c_uint = 1;
    pub const octave_oct_hdf5_types_h: ::std::os::raw::c_uint = 1;
    pub const octave_Cell_h: ::std::os::raw::c_uint = 1;
    pub const octave_ov_typeinfo_h: ::std::os::raw::c_uint = 1;
    pub const octave_oct_map_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_MAP: ::std::os::raw::c_uint = 1;
    pub const _STL_TREE_H: ::std::os::raw::c_uint = 1;
    pub const _STL_MAP_H: ::std::os::raw::c_uint = 1;
    pub const _STL_MULTIMAP_H: ::std::os::raw::c_uint = 1;
    pub const octave_symtab_h: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_SET: ::std::os::raw::c_uint = 1;
    pub const _STL_SET_H: ::std::os::raw::c_uint = 1;
    pub const _STL_MULTISET_H: ::std::os::raw::c_uint = 1;
    pub const octave_glob_match_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_regexp_h: ::std::os::raw::c_uint = 1;
    pub const octave_base_list_h: ::std::os::raw::c_uint = 1;
    pub const octave_workspace_element_h: ::std::os::raw::c_uint = 1;
    pub const octave_ov_dld_fcn_h: ::std::os::raw::c_uint = 1;
    pub const octave_oct_shlib_h: ::std::os::raw::c_uint = 1;
    pub const octave_version_h: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_VERSION: &'static [u8; 6usize] = b"4.2.1\x00";
    pub const OCTAVE_MAJOR_VERSION: ::std::os::raw::c_uint = 4;
    pub const OCTAVE_MINOR_VERSION: ::std::os::raw::c_uint = 2;
    pub const OCTAVE_PATCH_VERSION: ::std::os::raw::c_uint = 1;
    pub const OCTAVE_API_VERSION: &'static [u8; 8usize] = b"api-v51\x00";
    pub const OCTAVE_RELEASE_DATE: &'static [u8; 11usize] = b"2017-02-22\x00";
    pub const OCTAVE_COPYRIGHT: &'static [u8; 45usize] =
        b"Copyright (C) 2017 John W. Eaton and others.\x00";
    pub const octave_errwarn_h: ::std::os::raw::c_uint = 1;
    pub const octave_gripes_h: ::std::os::raw::c_uint = 1;
    pub const octave_lo_array_gripes_h: ::std::os::raw::c_uint = 1;
    pub const octave_help_h: ::std::os::raw::c_uint = 1;
    pub const octave_pager_h: ::std::os::raw::c_uint = 1;
    pub const octave_utils_h: ::std::os::raw::c_uint = 1;
    pub const octave_variables_h: ::std::os::raw::c_uint = 1;
    pub const FLT_ROUNDS: ::std::os::raw::c_uint = 1;
    pub const _GLIBCXX_CFLOAT: ::std::os::raw::c_uint = 1;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        use root::__gthread_once_t;
        pub type _CharT = u8;
        pub type _UIntType = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_size_type = u64;
        pub type allocator_difference_type = u64;
        pub type allocator_pointer = u8;
        pub type allocator_const_pointer = u8;
        pub type allocator_reference = u8;
        pub type allocator_const_reference = u8;
        pub type allocator_value_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = u8;
        pub type allocator_propagate_on_container_move_assignment = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uses_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_string {
        }
        pub type basic_string__CharT_alloc_type = u8;
        pub type basic_string_traits_type = u8;
        pub type basic_string_value_type = u8;
        pub type basic_string_allocator_type = u8;
        pub type basic_string_size_type = u8;
        pub type basic_string_difference_type = u8;
        pub type basic_string_reference = u8;
        pub type basic_string_const_reference = u8;
        pub type basic_string_pointer = u8;
        pub type basic_string_const_pointer = u8;
        pub type basic_string_iterator = u8;
        pub type basic_string_const_iterator = u8;
        pub type basic_string_const_reverse_iterator = u8;
        pub type basic_string_reverse_iterator = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_string__Rep_base {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_string__Rep {
        }
        pub type basic_string__Rep__Raw_bytes_alloc = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_string__Alloc_hider {
        }
        pub type string = u64;
        pub type wstring = u64;
        pub type u16string = u64;
        pub type u32string = u64;
        extern "C" {
            #[link_name = "_ZSt21__throw_bad_exceptionv"]
            pub fn __throw_bad_exception();
        }
        extern "C" {
            #[link_name = "_ZSt17__throw_bad_allocv"]
            pub fn __throw_bad_alloc();
        }
        extern "C" {
            #[link_name = "_ZSt16__throw_bad_castv"]
            pub fn __throw_bad_cast();
        }
        extern "C" {
            #[link_name = "_ZSt18__throw_bad_typeidv"]
            pub fn __throw_bad_typeid();
        }
        extern "C" {
            #[link_name = "_ZSt19__throw_logic_errorPKc"]
            pub fn __throw_logic_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt20__throw_domain_errorPKc"]
            pub fn __throw_domain_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt24__throw_invalid_argumentPKc"]
            pub fn __throw_invalid_argument(arg1:
                                                *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt20__throw_length_errorPKc"]
            pub fn __throw_length_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt20__throw_out_of_rangePKc"]
            pub fn __throw_out_of_range(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt24__throw_out_of_range_fmtPKcz"]
            pub fn __throw_out_of_range_fmt(arg1:
                                                *const ::std::os::raw::c_char, ...);
        }
        extern "C" {
            #[link_name = "_ZSt21__throw_runtime_errorPKc"]
            pub fn __throw_runtime_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt19__throw_range_errorPKc"]
            pub fn __throw_range_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt22__throw_overflow_errorPKc"]
            pub fn __throw_overflow_error(arg1:
                                              *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt23__throw_underflow_errorPKc"]
            pub fn __throw_underflow_error(arg1:
                                               *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt19__throw_ios_failurePKc"]
            pub fn __throw_ios_failure(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZSt20__throw_system_errori"]
            pub fn __throw_system_error(arg1: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "_ZSt20__throw_future_errori"]
            pub fn __throw_future_error(arg1: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "_ZSt25__throw_bad_function_callv"]
            pub fn __throw_bad_function_call();
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __true_type {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __true_type {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __false_type {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __false_type {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 =
            __traitor__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __traitor__bindgen_ty_1 { __value = 0, }
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 =
            __are_same__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __are_same__bindgen_ty_1 { __value = 0, }
        pub type __are_same___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_void {
            pub _address: u8,
        }
        pub const __is_void___value: root::std::__is_void__bindgen_ty_1 =
            __is_void__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __is_void__bindgen_ty_1 { __value = 0, }
        pub type __is_void___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1
                  =
            __is_integer__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __is_integer__bindgen_ty_1 { __value = 0, }
        pub type __is_integer___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value:
                  root::std::__is_floating__bindgen_ty_1 =
            __is_floating__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __is_floating__bindgen_ty_1 { __value = 0, }
        pub type __is_floating___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_pointer {
            pub _address: u8,
        }
        pub const __is_pointer___value: root::std::__is_pointer__bindgen_ty_1
                  =
            __is_pointer__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __is_pointer__bindgen_ty_1 { __value = 0, }
        pub type __is_pointer___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_normal_iterator {
            pub _address: u8,
        }
        pub const __is_normal_iterator___value:
                  root::std::__is_normal_iterator__bindgen_ty_1 =
            __is_normal_iterator__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __is_normal_iterator__bindgen_ty_1 { __value = 0, }
        pub type __is_normal_iterator___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 =
            __is_char__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __is_char__bindgen_ty_1 { __value = 0, }
        pub type __is_char___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 =
            __is_byte__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __is_byte__bindgen_ty_1 { __value = 0, }
        pub type __is_byte___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value:
                  root::std::__is_move_iterator__bindgen_ty_1 =
            __is_move_iterator__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __is_move_iterator__bindgen_ty_1 { __value = 0, }
        pub type __is_move_iterator___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct move_iterator {
        }
        pub type move_iterator___traits_type = u8;
        pub type move_iterator_iterator_type = u8;
        pub type move_iterator_iterator_category = u8;
        pub type move_iterator_value_type = u8;
        pub type move_iterator_difference_type = u8;
        pub type move_iterator_pointer = u8;
        pub type move_iterator_reference = u8;
        // extern "C" {
        //     pub static value: _Tp;
        // }
        pub type true_type = u8;
        pub type false_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __failure_type {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __failure_type {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_void_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_void {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integral_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating_point_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_array {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_pointer_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_lvalue_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_rvalue_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_object_pointer_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_function_pointer_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_null_pointer_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_null_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nullptr_t {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_pointer_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_referenceable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_const {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_volatile {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_known_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_unknown_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __do_is_destructible_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __do_is_destructible_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __do_is_nt_destructible_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __do_is_nt_destructible_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __do_is_default_constructible_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __do_is_default_constructible_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_default_constructible_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __do_is_static_castable_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __do_is_static_castable_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_static_castable_impl {
            pub _address: u8,
        }
        pub type __is_static_castable_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_static_castable_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_static_castable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __do_is_direct_constructible_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __do_is_direct_constructible_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_direct_constructible_impl {
            pub _address: u8,
        }
        pub type __is_direct_constructible_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_direct_constructible_new_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_same {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_base_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_direct_constructible_ref_cast {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_direct_constructible_new {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_direct_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __do_is_nary_constructible_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __do_is_nary_constructible_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nary_constructible_impl {
            pub _address: u8,
        }
        pub type __is_nary_constructible_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nary_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_assignable_helper {
            pub _address: u8,
        }
        pub type __is_assignable_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_assignable_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_trivial_default_constructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_trivial_copy_constructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_trivial_copy_assign {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct rank {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_convertible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_pointer_helper {
            pub _address: u8,
        }
        pub type __remove_pointer_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay___remove_type = u8;
        pub type decay_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reference_wrapper {
        }
        pub type reference_wrapper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __decay_and_strip {
            pub _address: u8,
        }
        pub type __decay_and_strip___type = u8;
        pub type _Require = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __do_common_type_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __do_common_type_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __do_member_type_wrapper {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __do_member_type_wrapper {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __member_type_wrapper {
            pub _address: u8,
        }
        pub type __member_type_wrapper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __expanded_common_type_wrapper {
            pub _address: u8,
        }
        pub type __expanded_common_type_wrapper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct underlying_type {
            pub _address: u8,
        }
        pub type underlying_type_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __result_of_memfun_ref_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __result_of_memfun_ref_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __result_of_memfun_deref_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __result_of_memfun_deref_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __result_of_memobj_ref_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __result_of_memobj_ref_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __result_of_memobj_deref_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __result_of_memobj_deref_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __result_of_other_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __result_of_other_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct piecewise_construct_t {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for piecewise_construct_t {
            fn clone(&self) -> Self { *self }
        }
        extern "C" {
            #[link_name = "_ZStL19piecewise_construct"]
            pub static piecewise_construct: root::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple {
            pub _address: u8,
        }
        pub type tuple__Inherited = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pair {
        }
        pub type pair_first_type = u8;
        pub type pair_second_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct input_iterator_tag {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for input_iterator_tag {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct output_iterator_tag {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for output_iterator_tag {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct forward_iterator_tag {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for forward_iterator_tag {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bidirectional_iterator_tag {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for bidirectional_iterator_tag {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct random_access_iterator_tag {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for random_access_iterator_tag {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category = u8;
        pub type iterator_value_type = u8;
        pub type iterator_difference_type = u8;
        pub type iterator_pointer = u8;
        pub type iterator_reference = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_iterator_category_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_iterator_category_helper__Wrap_type {
            pub _address: u8,
        }
        pub type __has_iterator_category_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_iterator_category {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        pub type _RequireInputIter = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_element_type_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_element_type_helper__Wrap_type {
            pub _address: u8,
        }
        pub type __has_element_type_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_element_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_difference_type_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_difference_type_helper__Wrap_type {
            pub _address: u8,
        }
        pub type __has_difference_type_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_difference_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptrtr_rebind_helper {
            pub _address: u8,
        }
        pub type __ptrtr_rebind_helper___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptrtr_not_void {
            pub _address: u8,
        }
        pub type __ptrtr_not_void___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptrtr_pointer_to {
            pub _address: u8,
        }
        pub type __ptrtr_pointer_to___orig_type = u8;
        pub type __ptrtr_pointer_to___element_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type pointer_traits_pointer = u8;
        pub type pointer_traits_element_type = u8;
        pub type pointer_traits_difference_type = u8;
        pub type pointer_traits_rebind = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reverse_iterator {
        }
        pub type reverse_iterator___traits_type = u8;
        pub type reverse_iterator_iterator_type = u8;
        pub type reverse_iterator_difference_type = u8;
        pub type reverse_iterator_pointer = u8;
        pub type reverse_iterator_reference = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct back_insert_iterator {
        }
        pub type back_insert_iterator_container_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct front_insert_iterator {
        }
        pub type front_insert_iterator_container_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct insert_iterator {
        }
        pub type insert_iterator_container_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Niter_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Miter_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct istreambuf_iterator {
        }
        pub type istreambuf_iterator_char_type = u8;
        pub type istreambuf_iterator_traits_type = u8;
        pub type istreambuf_iterator_int_type = u8;
        pub type istreambuf_iterator_streambuf_type = u8;
        pub type istreambuf_iterator_istream_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ostreambuf_iterator {
        }
        pub type ostreambuf_iterator_char_type = u8;
        pub type ostreambuf_iterator_traits_type = u8;
        pub type ostreambuf_iterator_streambuf_type = u8;
        pub type ostreambuf_iterator_ostream_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __lc_rai {
            pub _address: u8,
        }
        pub type streamoff = u64;
        pub type streamsize = u64;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct fpos {
        }
        pub type streampos = u8;
        pub type wstreampos = u8;
        pub type u16streampos = u8;
        pub type u32streampos = u8;
        #[repr(C)]
        pub struct exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct exception {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for exception {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bad_exception {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for bad_exception {
            fn clone(&self) -> Self { *self }
        }
        pub type terminate_handler = u64;
        pub type unexpected_handler = u64;
        extern "C" {
            #[link_name = "_ZSt13set_terminatePFvvE"]
            pub fn set_terminate(arg1: root::std::terminate_handler)
             -> root::std::terminate_handler;
        }
        extern "C" {
            #[link_name = "_ZSt13get_terminatev"]
            pub fn get_terminate() -> root::std::terminate_handler;
        }
        extern "C" {
            #[link_name = "_ZSt9terminatev"]
            pub fn terminate();
        }
        extern "C" {
            #[link_name = "_ZSt14set_unexpectedPFvvE"]
            pub fn set_unexpected(arg1: root::std::unexpected_handler)
             -> root::std::unexpected_handler;
        }
        extern "C" {
            #[link_name = "_ZSt14get_unexpectedv"]
            pub fn get_unexpected() -> root::std::unexpected_handler;
        }
        extern "C" {
            #[link_name = "_ZSt10unexpectedv"]
            pub fn unexpected();
        }
        extern "C" {
            #[link_name = "_ZSt18uncaught_exceptionv"]
            pub fn uncaught_exception() -> bool;
        }
        #[repr(C)]
        pub struct type_info__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct type_info {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for type_info {
            fn clone(&self) -> Self { *self }
        }
        pub mod __exception_ptr {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct exception_ptr {
                pub _bindgen_opaque_blob: u64,
            }
            extern "C" {
                #[link_name =
                      "_ZNSt15__exception_ptr13exception_ptr4swapERS0_"]
                pub fn exception_ptr_swap(this:
                                              *mut root::std::__exception_ptr::exception_ptr,
                                          arg1:
                                              *mut root::std::__exception_ptr::exception_ptr);
            }
            extern "C" {
                #[link_name =
                      "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv"]
                pub fn exception_ptr___cxa_exception_type(this:
                                                              *const root::std::__exception_ptr::exception_ptr)
                 -> *const root::std::type_info;
            }
            extern "C" {
                #[link_name = "_ZNSt15__exception_ptr13exception_ptrC1Ev"]
                pub fn exception_ptr_exception_ptr(this:
                                                       *mut root::std::__exception_ptr::exception_ptr);
            }
            extern "C" {
                #[link_name = "_ZNSt15__exception_ptr13exception_ptrC1ERKS0_"]
                pub fn exception_ptr_exception_ptr1(this:
                                                        *mut root::std::__exception_ptr::exception_ptr,
                                                    arg1:
                                                        *const root::std::__exception_ptr::exception_ptr);
            }
            extern "C" {
                #[link_name = "_ZNSt15__exception_ptr13exception_ptrD1Ev"]
                pub fn exception_ptr_exception_ptr_destructor(this:
                                                                  *mut root::std::__exception_ptr::exception_ptr);
            }
            impl Clone for exception_ptr {
                fn clone(&self) -> Self { *self }
            }
            impl exception_ptr {
                #[inline]
                pub unsafe fn swap(&mut self,
                                   arg1:
                                       *mut root::std::__exception_ptr::exception_ptr) {
                    exception_ptr_swap(self, arg1)
                }
                #[inline]
                pub unsafe fn __cxa_exception_type(&self)
                 -> *const root::std::type_info {
                    exception_ptr___cxa_exception_type(self)
                }
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    exception_ptr_exception_ptr(&mut __bindgen_tmp);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(arg1:
                                       *const root::std::__exception_ptr::exception_ptr)
                 -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    exception_ptr_exception_ptr1(&mut __bindgen_tmp, arg1);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn destruct(&mut self) {
                    exception_ptr_exception_ptr_destructor(self)
                }
            }
        }
        extern "C" {
            #[link_name = "_ZSt17current_exceptionv"]
            pub fn current_exception()
             -> root::std::__exception_ptr::exception_ptr;
        }
        extern "C" {
            #[link_name =
                  "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE"]
            pub fn rethrow_exception(arg1:
                                         root::std::__exception_ptr::exception_ptr);
        }
        #[repr(C)]
        pub struct nested_exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct nested_exception {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for nested_exception {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Nested_exception {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __get_nested_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bad_alloc {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for bad_alloc {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bad_array_new_length {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for bad_array_new_length {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct nothrow_t {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for nothrow_t {
            fn clone(&self) -> Self { *self }
        }
        extern "C" {
            #[link_name = "_ZSt7nothrow"]
            pub static nothrow: root::std::nothrow_t;
        }
        pub type new_handler = u64;
        extern "C" {
            #[link_name = "_ZSt15set_new_handlerPFvvE"]
            pub fn set_new_handler(arg1: root::std::new_handler)
             -> root::std::new_handler;
        }
        extern "C" {
            #[link_name = "_ZSt15get_new_handlerv"]
            pub fn get_new_handler() -> root::std::new_handler;
        }
        pub type __allocator_base = u8;
        pub type __c_locale = u64;
        pub type _Atomic_word = u32;
        #[repr(C)]
        pub struct ios_base__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct ios_base {
            pub _bindgen_opaque_blob: [u64; 27usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct ios_base_failure {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base7failureC1ERKSs"]
            pub fn ios_base_failure_failure(this:
                                                *mut root::std::ios_base_failure,
                                            __str: *const root::std::string);
        }
        impl Clone for ios_base_failure {
            fn clone(&self) -> Self { *self }
        }
        impl ios_base_failure {
            #[inline]
            pub unsafe fn new(__str: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_failure_failure(&mut __bindgen_tmp, __str);
                __bindgen_tmp
            }
        }
        // pub use self::super::super::u32 as ios_base_fmtflags;
        // pub use self::super::super::u32 as ios_base_iostate;
        // pub use self::super::super::u32 as ios_base_openmode;
        // pub use self::super::super::u32 as ios_base_seekdir;
        pub type ios_base_fmtflags = u32;
        pub type ios_base_iostate = u32;
        pub type ios_base_openmode = u32;
        pub type ios_base_seekdir = u32;
        pub type ios_base_io_state = u32;
        pub type ios_base_open_mode = u32;
        pub type ios_base_seek_dir = u32;
        pub type ios_base_streampos = u8;
        pub type ios_base_streamoff = u64;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum ios_base_event {
            erase_event = 0,
            imbue_event = 1,
            copyfmt_event = 2,
        }
        pub type ios_base_event_callback = u64;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct ios_base__Callback_list {
            pub _bindgen_opaque_blob: [u64; 3usize],
        }
        impl Clone for ios_base__Callback_list {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct ios_base__Words {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for ios_base__Words {
            fn clone(&self) -> Self { *self }
        }
        pub const ios_base__S_local_word_size:
                  root::std::ios_base__bindgen_ty_1 =
            ios_base__bindgen_ty_1::_S_local_word_size;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum ios_base__bindgen_ty_1 { _S_local_word_size = 8, }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct ios_base_Init {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base4Init11_S_refcountE"]
            pub static mut ios_base_Init__S_refcount: root::std::_Atomic_word;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base4Init20_S_synced_with_stdioE"]
            pub static mut ios_base_Init__S_synced_with_stdio: bool;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base4InitC1Ev"]
            pub fn ios_base_Init_Init(this: *mut root::std::ios_base_Init);
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base4InitD1Ev"]
            pub fn ios_base_Init_Init_destructor(this:
                                                     *mut root::std::ios_base_Init);
        }
        impl Clone for ios_base_Init {
            fn clone(&self) -> Self { *self }
        }
        impl ios_base_Init {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_Init_Init(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                ios_base_Init_Init_destructor(self)
            }
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base9boolalphaE"]
            pub static ios_base_boolalpha: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3decE"]
            pub static ios_base_dec: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base5fixedE"]
            pub static ios_base_fixed: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3hexE"]
            pub static ios_base_hex: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base8internalE"]
            pub static ios_base_internal: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base4leftE"]
            pub static ios_base_left: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3octE"]
            pub static ios_base_oct: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base5rightE"]
            pub static ios_base_right: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base10scientificE"]
            pub static ios_base_scientific: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base8showbaseE"]
            pub static ios_base_showbase: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base9showpointE"]
            pub static ios_base_showpoint: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base7showposE"]
            pub static ios_base_showpos: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base6skipwsE"]
            pub static ios_base_skipws: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base7unitbufE"]
            pub static ios_base_unitbuf: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base9uppercaseE"]
            pub static ios_base_uppercase: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base11adjustfieldE"]
            pub static ios_base_adjustfield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base9basefieldE"]
            pub static ios_base_basefield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base10floatfieldE"]
            pub static ios_base_floatfield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base6badbitE"]
            pub static ios_base_badbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base6eofbitE"]
            pub static ios_base_eofbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base7failbitE"]
            pub static ios_base_failbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base7goodbitE"]
            pub static ios_base_goodbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3appE"]
            pub static ios_base_app: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3ateE"]
            pub static ios_base_ate: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base6binaryE"]
            pub static ios_base_binary: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base2inE"]
            pub static ios_base_in: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3outE"]
            pub static ios_base_out: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base5truncE"]
            pub static ios_base_trunc: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3begE"]
            pub static ios_base_beg: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3curE"]
            pub static ios_base_cur: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base3endE"]
            pub static ios_base_end: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name =
                  "_ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi"]
            pub fn ios_base_register_callback(this: *mut root::std::ios_base,
                                              __fn:
                                                  root::std::ios_base_event_callback,
                                              __index: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base17_M_call_callbacksENS_5eventE"]
            pub fn ios_base__M_call_callbacks(this: *mut root::std::ios_base,
                                              __ev:
                                                  root::std::ios_base_event);
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base20_M_dispose_callbacksEv"]
            pub fn ios_base__M_dispose_callbacks(this:
                                                     *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base13_M_grow_wordsEib"]
            pub fn ios_base__M_grow_words(this: *mut root::std::ios_base,
                                          __index: ::std::os::raw::c_int,
                                          __iword: bool)
             -> *mut root::std::ios_base__Words;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base7_M_initEv"]
            pub fn ios_base__M_init(this: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base15sync_with_stdioEb"]
            pub fn ios_base_sync_with_stdio(__sync: bool) -> bool;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base5imbueERKSt6locale"]
            pub fn ios_base_imbue(this: *mut root::std::ios_base,
                                  __loc: *const root::std::locale)
             -> root::std::locale;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_base6xallocEv"]
            pub fn ios_base_xalloc() -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "_ZNSt8ios_baseC1Ev"]
            pub fn ios_base_ios_base(this: *mut root::std::ios_base);
        }
        impl Clone for ios_base {
            fn clone(&self) -> Self { *self }
        }
        impl ios_base {
            #[inline]
            pub unsafe fn register_callback(&mut self,
                                            __fn:
                                                root::std::ios_base_event_callback,
                                            __index: ::std::os::raw::c_int) {
                ios_base_register_callback(self, __fn, __index)
            }
            #[inline]
            pub unsafe fn _M_call_callbacks(&mut self,
                                            __ev: root::std::ios_base_event) {
                ios_base__M_call_callbacks(self, __ev)
            }
            #[inline]
            pub unsafe fn _M_dispose_callbacks(&mut self) {
                ios_base__M_dispose_callbacks(self)
            }
            #[inline]
            pub unsafe fn _M_grow_words(&mut self,
                                        __index: ::std::os::raw::c_int,
                                        __iword: bool)
             -> *mut root::std::ios_base__Words {
                ios_base__M_grow_words(self, __index, __iword)
            }
            #[inline]
            pub unsafe fn _M_init(&mut self) { ios_base__M_init(self) }
            #[inline]
            pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
                ios_base_sync_with_stdio(__sync)
            }
            #[inline]
            pub unsafe fn imbue(&mut self, __loc: *const root::std::locale)
             -> root::std::locale {
                ios_base_imbue(self, __loc)
            }
            #[inline]
            pub unsafe fn xalloc() -> ::std::os::raw::c_int {
                ios_base_xalloc()
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_ios_base(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ios {
        }
        pub type basic_ios_char_type = u8;
        pub type basic_ios_int_type = u8;
        pub type basic_ios_pos_type = u8;
        pub type basic_ios_off_type = u8;
        pub type basic_ios_traits_type = u8;
        pub type basic_ios___ctype_type = u8;
        pub type basic_ios___num_put_type = u8;
        pub type basic_ios___num_get_type = u8;
        #[repr(C)]
        pub struct basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_streambuf {
        }
        pub type basic_streambuf_char_type = u8;
        pub type basic_streambuf_traits_type = u8;
        pub type basic_streambuf_int_type = u8;
        pub type basic_streambuf_pos_type = u8;
        pub type basic_streambuf_off_type = u8;
        pub type basic_streambuf___streambuf_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_istream {
        }
        pub type basic_istream_char_type = u8;
        pub type basic_istream_int_type = u8;
        pub type basic_istream_pos_type = u8;
        pub type basic_istream_off_type = u8;
        pub type basic_istream_traits_type = u8;
        pub type basic_istream___streambuf_type = u8;
        pub type basic_istream___ios_type = u8;
        pub type basic_istream___istream_type = u8;
        pub type basic_istream___num_get_type = u8;
        pub type basic_istream___ctype_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_istream_sentry {
        }
        pub type basic_istream_sentry_traits_type = u8;
        pub type basic_istream_sentry___streambuf_type = u8;
        pub type basic_istream_sentry___istream_type = u8;
        pub type basic_istream_sentry___ctype_type = u8;
        pub type basic_istream_sentry___int_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ostream {
        }
        pub type basic_ostream_char_type = u8;
        pub type basic_ostream_int_type = u8;
        pub type basic_ostream_pos_type = u8;
        pub type basic_ostream_off_type = u8;
        pub type basic_ostream_traits_type = u8;
        pub type basic_ostream___streambuf_type = u8;
        pub type basic_ostream___ios_type = u8;
        pub type basic_ostream___ostream_type = u8;
        pub type basic_ostream___num_put_type = u8;
        pub type basic_ostream___ctype_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ostream_sentry {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_iostream {
        }
        pub type basic_iostream_char_type = u8;
        pub type basic_iostream_int_type = u8;
        pub type basic_iostream_pos_type = u8;
        pub type basic_iostream_off_type = u8;
        pub type basic_iostream_traits_type = u8;
        pub type basic_iostream___istream_type = u8;
        pub type basic_iostream___ostream_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_stringbuf {
        }
        pub type basic_stringbuf_char_type = u8;
        pub type basic_stringbuf_traits_type = u8;
        pub type basic_stringbuf_allocator_type = u8;
        pub type basic_stringbuf_int_type = u8;
        pub type basic_stringbuf_pos_type = u8;
        pub type basic_stringbuf_off_type = u8;
        pub type basic_stringbuf___streambuf_type = u8;
        pub type basic_stringbuf___string_type = u8;
        pub type basic_stringbuf___size_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_istringstream {
        }
        pub type basic_istringstream_char_type = u8;
        pub type basic_istringstream_traits_type = u8;
        pub type basic_istringstream_allocator_type = u8;
        pub type basic_istringstream_int_type = u8;
        pub type basic_istringstream_pos_type = u8;
        pub type basic_istringstream_off_type = u8;
        pub type basic_istringstream___string_type = u8;
        pub type basic_istringstream___stringbuf_type = u8;
        pub type basic_istringstream___istream_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ostringstream {
        }
        pub type basic_ostringstream_char_type = u8;
        pub type basic_ostringstream_traits_type = u8;
        pub type basic_ostringstream_allocator_type = u8;
        pub type basic_ostringstream_int_type = u8;
        pub type basic_ostringstream_pos_type = u8;
        pub type basic_ostringstream_off_type = u8;
        pub type basic_ostringstream___string_type = u8;
        pub type basic_ostringstream___stringbuf_type = u8;
        pub type basic_ostringstream___ostream_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_stringstream {
        }
        pub type basic_stringstream_char_type = u8;
        pub type basic_stringstream_traits_type = u8;
        pub type basic_stringstream_allocator_type = u8;
        pub type basic_stringstream_int_type = u8;
        pub type basic_stringstream_pos_type = u8;
        pub type basic_stringstream_off_type = u8;
        pub type basic_stringstream___string_type = u8;
        pub type basic_stringstream___stringbuf_type = u8;
        pub type basic_stringstream___iostream_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_filebuf {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ifstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ofstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_fstream {
            pub _address: u8,
        }
        pub type ios = [u64; 33usize];
        pub type streambuf = [u64; 8usize];
        pub type istream = [u64; 35usize];
        pub type ostream = [u64; 34usize];
        pub type iostream = [u64; 36usize];
        pub type stringbuf = [u64; 10usize];
        pub type istringstream = [u64; 45usize];
        pub type ostringstream = [u64; 44usize];
        pub type stringstream = [u64; 46usize];
        pub type filebuf = u8;
        pub type ifstream = u8;
        pub type ofstream = u8;
        pub type fstream = u8;
        pub type wios = [u64; 33usize];
        pub type wstreambuf = [u64; 8usize];
        pub type wistream = [u64; 35usize];
        pub type wostream = [u64; 34usize];
        pub type wiostream = [u64; 36usize];
        pub type wstringbuf = [u64; 10usize];
        pub type wistringstream = [u64; 45usize];
        pub type wostringstream = [u64; 44usize];
        pub type wstringstream = [u64; 46usize];
        pub type wfilebuf = u8;
        pub type wifstream = u8;
        pub type wofstream = u8;
        pub type wfstream = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct locale {
            pub _bindgen_opaque_blob: u64,
        }
        pub type locale_category = u32;
        #[repr(C)]
        pub struct locale_facet__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct locale_facet {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet11_S_c_localeE"]
            pub static mut locale_facet__S_c_locale: root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet9_S_c_nameE"]
            pub static mut locale_facet__S_c_name:
                       [::std::os::raw::c_char; 2usize];
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet7_S_onceE"]
            pub static mut locale_facet__S_once: root::std::__gthread_once_t;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet18_S_create_c_localeERPiPKcS1_"]
            pub fn locale_facet__S_create_c_locale(__cloc:
                                                       *mut root::std::__c_locale,
                                                   __s:
                                                       *const ::std::os::raw::c_char,
                                                   __old:
                                                       root::std::__c_locale);
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet17_S_clone_c_localeERPi"]
            pub fn locale_facet__S_clone_c_locale(__cloc:
                                                      *mut root::std::__c_locale)
             -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet19_S_destroy_c_localeERPi"]
            pub fn locale_facet__S_destroy_c_locale(__cloc:
                                                        *mut root::std::__c_locale);
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet20_S_lc_ctype_c_localeEPiPKc"]
            pub fn locale_facet__S_lc_ctype_c_locale(__cloc:
                                                         root::std::__c_locale,
                                                     __s:
                                                         *const ::std::os::raw::c_char)
             -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet15_S_get_c_localeEv"]
            pub fn locale_facet__S_get_c_locale() -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5facet13_S_get_c_nameEv"]
            pub fn locale_facet__S_get_c_name()
             -> *const ::std::os::raw::c_char;
        }
        impl Clone for locale_facet {
            fn clone(&self) -> Self { *self }
        }
        impl locale_facet {
            #[inline]
            pub unsafe fn _S_create_c_locale(__cloc:
                                                 *mut root::std::__c_locale,
                                             __s:
                                                 *const ::std::os::raw::c_char,
                                             __old: root::std::__c_locale) {
                locale_facet__S_create_c_locale(__cloc, __s, __old)
            }
            #[inline]
            pub unsafe fn _S_clone_c_locale(__cloc:
                                                *mut root::std::__c_locale)
             -> root::std::__c_locale {
                locale_facet__S_clone_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_destroy_c_locale(__cloc:
                                                  *mut root::std::__c_locale) {
                locale_facet__S_destroy_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_lc_ctype_c_locale(__cloc: root::std::__c_locale,
                                               __s:
                                                   *const ::std::os::raw::c_char)
             -> root::std::__c_locale {
                locale_facet__S_lc_ctype_c_locale(__cloc, __s)
            }
            #[inline]
            pub unsafe fn _S_get_c_locale() -> root::std::__c_locale {
                locale_facet__S_get_c_locale()
            }
            #[inline]
            pub unsafe fn _S_get_c_name() -> *const ::std::os::raw::c_char {
                locale_facet__S_get_c_name()
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct locale_id {
            pub _bindgen_opaque_blob: u64,
        }
        extern "C" {
            #[link_name = "_ZNSt6locale2id11_S_refcountE"]
            pub static mut locale_id__S_refcount: root::std::_Atomic_word;
        }
        extern "C" {
            #[link_name = "_ZNKSt6locale2id5_M_idEv"]
            pub fn locale_id__M_id(this: *const root::std::locale_id)
             -> usize;
        }
        impl Clone for locale_id {
            fn clone(&self) -> Self { *self }
        }
        impl locale_id {
            #[inline]
            pub unsafe fn _M_id(&self) -> usize { locale_id__M_id(self) }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct locale__Impl {
            pub _bindgen_opaque_blob: [u64; 5usize],
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5_Impl11_S_id_ctypeE"]
            pub static mut locale__Impl__S_id_ctype:
                       [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5_Impl13_S_id_numericE"]
            pub static mut locale__Impl__S_id_numeric:
                       [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5_Impl13_S_id_collateE"]
            pub static mut locale__Impl__S_id_collate:
                       [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5_Impl10_S_id_timeE"]
            pub static mut locale__Impl__S_id_time:
                       [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5_Impl14_S_id_monetaryE"]
            pub static mut locale__Impl__S_id_monetary:
                       [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5_Impl14_S_id_messagesE"]
            pub static mut locale__Impl__S_id_messages:
                       [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "_ZNSt6locale5_Impl19_S_facet_categoriesE"]
            pub static mut locale__Impl__S_facet_categories:
                       [*const *const root::std::locale_id; 0usize];
        }
        impl Clone for locale__Impl {
            fn clone(&self) -> Self { *self }
        }
        pub const locale__S_categories_size: root::std::locale__bindgen_ty_1 =
            locale__bindgen_ty_1::_S_categories_size;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum locale__bindgen_ty_1 { _S_categories_size = 6, }
        pub const locale_none: root::std::locale_category = 0;
        pub const locale_ctype: root::std::locale_category = 1;
        pub const locale_numeric: root::std::locale_category = 2;
        pub const locale_collate: root::std::locale_category = 4;
        pub const locale_time: root::std::locale_category = 8;
        pub const locale_monetary: root::std::locale_category = 16;
        pub const locale_messages: root::std::locale_category = 32;
        pub const locale_all: root::std::locale_category = 63;
        extern "C" {
            #[link_name = "_ZNSt6locale10_S_classicE"]
            pub static mut locale__S_classic: *mut root::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale9_S_globalE"]
            pub static mut locale__S_global: *mut root::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale13_S_categoriesE"]
            pub static locale__S_categories:
                       *const *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale7_S_onceE"]
            pub static mut locale__S_once: root::std::__gthread_once_t;
        }
        extern "C" {
            #[link_name = "_ZNKSt6locale4nameEv"]
            pub fn locale_name(this: *const root::std::locale)
             -> root::std::string;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale6globalERKS_"]
            pub fn locale_global(__loc: *const root::std::locale)
             -> root::std::locale;
        }
        extern "C" {
            #[link_name = "_ZNSt6locale7classicEv"]
            pub fn locale_classic() -> *const root::std::locale;
        }
        extern "C" {
            #[link_name = "_ZNSt6localeC1Ev"]
            pub fn locale_locale(this: *mut root::std::locale);
        }
        extern "C" {
            #[link_name = "_ZNSt6localeC1ERKS_"]
            pub fn locale_locale1(this: *mut root::std::locale,
                                  __other: *const root::std::locale);
        }
        extern "C" {
            #[link_name = "_ZNSt6localeC1EPKc"]
            pub fn locale_locale2(this: *mut root::std::locale,
                                  __s: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "_ZNSt6localeC1ERKS_PKci"]
            pub fn locale_locale3(this: *mut root::std::locale,
                                  __base: *const root::std::locale,
                                  __s: *const ::std::os::raw::c_char,
                                  __cat: root::std::locale_category);
        }
        extern "C" {
            #[link_name = "_ZNSt6localeC1ERKS_S1_i"]
            pub fn locale_locale4(this: *mut root::std::locale,
                                  __base: *const root::std::locale,
                                  __add: *const root::std::locale,
                                  __cat: root::std::locale_category);
        }
        extern "C" {
            #[link_name = "_ZNSt6localeD1Ev"]
            pub fn locale_locale_destructor(this: *mut root::std::locale);
        }
        impl Clone for locale {
            fn clone(&self) -> Self { *self }
        }
        impl locale {
            #[inline]
            pub unsafe fn name(&self) -> root::std::string {
                locale_name(self)
            }
            #[inline]
            pub unsafe fn global(__loc: *const root::std::locale)
             -> root::std::locale {
                locale_global(__loc)
            }
            #[inline]
            pub unsafe fn classic() -> *const root::std::locale {
                locale_classic()
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(__other: *const root::std::locale) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale1(&mut __bindgen_tmp, __other);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(__s: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale2(&mut __bindgen_tmp, __s);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new3(__base: *const root::std::locale,
                               __s: *const ::std::os::raw::c_char,
                               __cat: root::std::locale_category) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale3(&mut __bindgen_tmp, __base, __s, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new4(__base: *const root::std::locale,
                               __add: *const root::std::locale,
                               __cat: root::std::locale_category) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale4(&mut __bindgen_tmp, __base, __add, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                locale_locale_destructor(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct ctype_base {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        pub type ctype_base___to_type = u64;
        pub type ctype_base_mask = u16;
        pub const ctype_base_upper: root::std::ctype_base_mask = 1;
        pub const ctype_base_lower: root::std::ctype_base_mask = 2;
        pub const ctype_base_alpha: root::std::ctype_base_mask = 4;
        pub const ctype_base_digit: root::std::ctype_base_mask = 8;
        pub const ctype_base_xdigit: root::std::ctype_base_mask = 16;
        pub const ctype_base_space: root::std::ctype_base_mask = 32;
        pub const ctype_base_print: root::std::ctype_base_mask = 64;
        pub const ctype_base_graph: root::std::ctype_base_mask = 524;
        pub const ctype_base_cntrl: root::std::ctype_base_mask = 256;
        pub const ctype_base_punct: root::std::ctype_base_mask = 512;
        pub const ctype_base_alnum: root::std::ctype_base_mask = 12;
        impl Clone for ctype_base {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ctype {
        }
        pub type ctype_char_type = u8;
        pub type ctype_mask = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ctype_byname {
        }
        pub type ctype_byname_mask = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct codecvt_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct codecvt {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct codecvt_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct num_get {
        }
        pub type num_get_char_type = u8;
        pub type num_get_iter_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct num_put {
        }
        pub type num_put_char_type = u8;
        pub type num_put_iter_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct numpunct {
        }
        pub type numpunct_char_type = u8;
        pub type numpunct_string_type = u8;
        pub type numpunct___cache_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct numpunct_byname {
        }
        pub type numpunct_byname_char_type = u8;
        pub type numpunct_byname_string_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct collate {
        }
        pub type collate_char_type = u8;
        pub type collate_string_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct collate_byname {
        }
        pub type collate_byname_char_type = u8;
        pub type collate_byname_string_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_get_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_put_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type = u8;
        pub type unary_function_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type = u8;
        pub type binary_function_second_argument_type = u8;
        pub type binary_function_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct plus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct minus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multiplies {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct divides {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct modulus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct not_equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_not {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_xor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_not {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_negate {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_negate {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_unary_function {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_binary_function {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Identity {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select1st {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select2nd {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_t {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_t {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_ref_t {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_ref_t {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_t {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_t {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_ref_t {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_ref_t {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binder1st {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binder2nd {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct initializer_list {
        }
        pub type initializer_list_value_type = u8;
        pub type initializer_list_reference = u8;
        pub type initializer_list_const_reference = u8;
        pub type initializer_list_size_type = u64;
        pub type initializer_list_iterator = u8;
        pub type initializer_list_const_iterator = u8;
        extern "C" {
            #[link_name =
                  "_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_ES4_"]
            pub fn getline(__in: *mut [u64; 35usize], __str: *mut u64,
                           __delim: ::std::os::raw::c_char)
             -> *mut [u64; 35usize];
        }
        extern "C" {
            #[link_name =
                  "_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_ES4_"]
            pub fn getline1(__in: *mut [u64; 35usize], __str: *mut u64,
                            __delim: u16) -> *mut [u64; 35usize];
        }
        extern "C" {
            #[link_name = "_ZSt11_Hash_bytesPKvyy"]
            pub fn _Hash_bytes(__ptr: *const ::std::os::raw::c_void,
                               __len: usize, __seed: usize) -> usize;
        }
        extern "C" {
            #[link_name = "_ZSt15_Fnv_hash_bytesPKvyy"]
            pub fn _Fnv_hash_bytes(__ptr: *const ::std::os::raw::c_void,
                                   __len: usize, __seed: usize) -> usize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __hash_base {
            pub _address: u8,
        }
        pub type __hash_base_result_type = u8;
        pub type __hash_base_argument_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Hash_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for _Hash_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Fnv_hash_impl {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for _Fnv_hash_impl {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_fast_hash {
            pub _address: u8,
        }
        extern "C" {
            pub static _S_max_size: root::std::basic_string_size_type;
        }
        extern "C" {
            pub static _S_terminal: _CharT;
        }
        extern "C" {
            pub static npos: root::std::basic_string_size_type;
        }
        extern "C" {
            pub static mut _S_empty_rep_storage:
                       *mut root::std::basic_string_size_type;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple_size {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloctr_rebind_helper {
            pub _address: u8,
        }
        pub type __alloctr_rebind_helper___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        pub type allocator_traits_allocator_type = u8;
        pub type allocator_traits_value_type = u8;
        pub type allocator_traits___pointer = u8;
        pub type allocator_traits_pointer = u8;
        pub type allocator_traits___const_pointer = u8;
        pub type allocator_traits_const_pointer = u8;
        pub type allocator_traits___void_pointer = u8;
        pub type allocator_traits_void_pointer = u8;
        pub type allocator_traits___const_void_pointer = u8;
        pub type allocator_traits_const_void_pointer = u8;
        pub type allocator_traits___difference_type = u8;
        pub type allocator_traits_difference_type = u8;
        pub type allocator_traits___size_type = u8;
        pub type allocator_traits_size_type = u8;
        pub type allocator_traits___propagate_on_container_copy_assignment =
            u8;
        pub type allocator_traits_propagate_on_container_copy_assignment = u8;
        pub type allocator_traits___propagate_on_container_move_assignment =
            u8;
        pub type allocator_traits_propagate_on_container_move_assignment = u8;
        pub type allocator_traits___propagate_on_container_swap = u8;
        pub type allocator_traits_propagate_on_container_swap = u8;
        pub type allocator_traits_rebind_alloc = u8;
        pub type allocator_traits_rebind_traits = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits___allocate_helper {
            pub _address: u8,
        }
        pub type allocator_traits___allocate_helper_type = u8;
        pub type allocator_traits___has_allocate = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits___construct_helper {
            pub _address: u8,
        }
        pub type allocator_traits___construct_helper_type = u8;
        pub type allocator_traits___has_construct = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits___destroy_helper {
            pub _address: u8,
        }
        pub type allocator_traits___destroy_helper_type = u8;
        pub type allocator_traits___has_destroy = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits___maxsize_helper {
            pub _address: u8,
        }
        pub type allocator_traits___maxsize_helper_type = u8;
        pub type allocator_traits___has_max_size = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits___select_helper {
            pub _address: u8,
        }
        pub type allocator_traits___select_helper_type = u8;
        pub type allocator_traits___has_soccc = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_copy_insertable_impl {
            pub _address: u8,
        }
        pub type __is_copy_insertable_impl__Traits = u8;
        pub type __is_copy_insertable_impl_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_copy_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Temporary_buffer {
        }
        pub type _Temporary_buffer_value_type = u8;
        pub type _Temporary_buffer_pointer = u8;
        pub type _Temporary_buffer_iterator = u8;
        pub type _Temporary_buffer_size_type = u64;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum float_round_style {
            round_indeterminate = -1,
            round_toward_zero = 0,
            round_to_nearest = 1,
            round_toward_infinity = 2,
            round_toward_neg_infinity = 3,
        }
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum float_denorm_style {
            denorm_indeterminate = -1,
            denorm_absent = 0,
            denorm_present = 1,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __numeric_limits_base {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        pub const __numeric_limits_base_is_specialized: bool = false;
        pub const __numeric_limits_base_digits: ::std::os::raw::c_int = 0;
        pub const __numeric_limits_base_digits10: ::std::os::raw::c_int = 0;
        pub const __numeric_limits_base_max_digits10: ::std::os::raw::c_int =
            0;
        pub const __numeric_limits_base_is_signed: bool = false;
        pub const __numeric_limits_base_is_integer: bool = false;
        pub const __numeric_limits_base_is_exact: bool = false;
        pub const __numeric_limits_base_radix: ::std::os::raw::c_int = 0;
        pub const __numeric_limits_base_min_exponent: ::std::os::raw::c_int =
            0;
        pub const __numeric_limits_base_min_exponent10: ::std::os::raw::c_int
                  =
            0;
        pub const __numeric_limits_base_max_exponent: ::std::os::raw::c_int =
            0;
        pub const __numeric_limits_base_max_exponent10: ::std::os::raw::c_int
                  =
            0;
        pub const __numeric_limits_base_has_infinity: bool = false;
        pub const __numeric_limits_base_has_quiet_NaN: bool = false;
        pub const __numeric_limits_base_has_signaling_NaN: bool = false;
        extern "C" {
            #[link_name = "_ZNSt21__numeric_limits_base10has_denormE"]
            pub static __numeric_limits_base_has_denorm:
                       root::std::float_denorm_style;
        }
        pub const __numeric_limits_base_has_denorm_loss: bool = false;
        pub const __numeric_limits_base_is_iec559: bool = false;
        pub const __numeric_limits_base_is_bounded: bool = false;
        pub const __numeric_limits_base_is_modulo: bool = false;
        pub const __numeric_limits_base_traps: bool = false;
        pub const __numeric_limits_base_tinyness_before: bool = false;
        extern "C" {
            #[link_name = "_ZNSt21__numeric_limits_base11round_styleE"]
            pub static __numeric_limits_base_round_style:
                       root::std::float_round_style;
        }
        impl Clone for __numeric_limits_base {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct numeric_limits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Vector_base {
        }
        pub type _Vector_base__Tp_alloc_type = u8;
        pub type _Vector_base_pointer = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Vector_base__Vector_impl {
        }
        pub type _Vector_base_allocator_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct vector {
        }
        pub type vector__Alloc_value_type = u8;
        pub type vector__Base = u8;
        pub type vector__Tp_alloc_type = u8;
        pub type vector__Alloc_traits = u8;
        pub type vector_value_type = u8;
        pub type vector_pointer = u8;
        pub type vector_const_pointer = u8;
        pub type vector_reference = u8;
        pub type vector_const_reference = u8;
        pub type vector_iterator = u8;
        pub type vector_const_iterator = u8;
        pub type vector_const_reverse_iterator = u8;
        pub type vector_reverse_iterator = u8;
        pub type vector_size_type = u64;
        pub type vector_difference_type = u64;
        pub type vector_allocator_type = u8;
        pub type _Bit_type = u32;
        pub const std__S_word_bit: root::std::_bindgen_ty_1 =
            _bindgen_ty_1::_S_word_bit;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _bindgen_ty_1 { _S_word_bit = 32, }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Bit_reference {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for _Bit_reference {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Bit_iterator_base {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for _Bit_iterator_base {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Bit_iterator {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub type _Bit_iterator_reference = [u64; 2usize];
        pub type _Bit_iterator_pointer = u64;
        pub type _Bit_iterator_iterator = [u64; 2usize];
        impl Clone for _Bit_iterator {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Bit_const_iterator {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        pub type _Bit_const_iterator_reference = u8;
        pub type _Bit_const_iterator_const_reference = u8;
        pub type _Bit_const_iterator_pointer = u64;
        pub type _Bit_const_iterator_const_iterator = [u64; 2usize];
        impl Clone for _Bit_const_iterator {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bvector_base {
        }
        pub type _Bvector_base__Bit_alloc_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bvector_base__Bvector_impl {
        }
        pub type _Bvector_base_allocator_type = u8;
        pub mod __detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Adaptor {
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct _List_node_base {
                pub _bindgen_opaque_blob: [u64; 2usize],
            }
            extern "C" {
                #[link_name = "_ZNSt8__detail15_List_node_base4swapERS0_S1_"]
                pub fn _List_node_base_swap(__x:
                                                *mut root::std::__detail::_List_node_base,
                                            __y:
                                                *mut root::std::__detail::_List_node_base);
            }
            extern "C" {
                #[link_name =
                      "_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_"]
                pub fn _List_node_base__M_transfer(this:
                                                       *mut root::std::__detail::_List_node_base,
                                                   __first:
                                                       *const root::std::__detail::_List_node_base,
                                                   __last:
                                                       *const root::std::__detail::_List_node_base);
            }
            extern "C" {
                #[link_name = "_ZNSt8__detail15_List_node_base10_M_reverseEv"]
                pub fn _List_node_base__M_reverse(this:
                                                      *mut root::std::__detail::_List_node_base);
            }
            extern "C" {
                #[link_name = "_ZNSt8__detail15_List_node_base7_M_hookEPS0_"]
                pub fn _List_node_base__M_hook(this:
                                                   *mut root::std::__detail::_List_node_base,
                                               __position:
                                                   *const root::std::__detail::_List_node_base);
            }
            extern "C" {
                #[link_name = "_ZNSt8__detail15_List_node_base9_M_unhookEv"]
                pub fn _List_node_base__M_unhook(this:
                                                     *mut root::std::__detail::_List_node_base);
            }
            impl Clone for _List_node_base {
                fn clone(&self) -> Self { *self }
            }
            impl _List_node_base {
                #[inline]
                pub unsafe fn swap(__x:
                                       *mut root::std::__detail::_List_node_base,
                                   __y:
                                       *mut root::std::__detail::_List_node_base) {
                    _List_node_base_swap(__x, __y)
                }
                #[inline]
                pub unsafe fn _M_transfer(&mut self,
                                          __first:
                                              *const root::std::__detail::_List_node_base,
                                          __last:
                                              *const root::std::__detail::_List_node_base) {
                    _List_node_base__M_transfer(self, __first, __last)
                }
                #[inline]
                pub unsafe fn _M_reverse(&mut self) {
                    _List_node_base__M_reverse(self)
                }
                #[inline]
                pub unsafe fn _M_hook(&mut self,
                                      __position:
                                          *const root::std::__detail::_List_node_base) {
                    _List_node_base__M_hook(self, __position)
                }
                #[inline]
                pub unsafe fn _M_unhook(&mut self) {
                    _List_node_base__M_unhook(self)
                }
            }
        }
        pub type minstd_rand0 = u8;
        pub type minstd_rand = u8;
        pub type mt19937 = [u64; 313usize];
        pub type mt19937_64 = u8;
        pub type ranlux24_base = u8;
        pub type ranlux48_base = u8;
        pub type ranlux24 = u8;
        pub type ranlux48 = u8;
        pub type knuth_b = u8;
        pub type default_random_engine = u8;
        #[repr(C)]
        pub struct random_device {
            pub _bindgen_opaque_blob: [u64; 313usize],
        }
        pub type random_device_result_type = u32;
        #[repr(C)]
        pub struct random_device__bindgen_ty_1 {
            pub _bindgen_opaque_blob: [u64; 313usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uniform_int_distribution {
        }
        pub type uniform_int_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uniform_int_distribution_param_type {
        }
        pub type uniform_int_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uniform_real_distribution {
        }
        pub type uniform_real_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uniform_real_distribution_param_type {
        }
        pub type uniform_real_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct normal_distribution {
        }
        pub type normal_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct normal_distribution_param_type {
        }
        pub type normal_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct lognormal_distribution {
        }
        pub type lognormal_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct lognormal_distribution_param_type {
        }
        pub type lognormal_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct gamma_distribution {
        }
        pub type gamma_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct gamma_distribution_param_type {
        }
        pub type gamma_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct chi_squared_distribution {
        }
        pub type chi_squared_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct chi_squared_distribution_param_type {
        }
        pub type chi_squared_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct cauchy_distribution {
        }
        pub type cauchy_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct cauchy_distribution_param_type {
        }
        pub type cauchy_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct fisher_f_distribution {
        }
        pub type fisher_f_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct fisher_f_distribution_param_type {
        }
        pub type fisher_f_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct student_t_distribution {
        }
        pub type student_t_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct student_t_distribution_param_type {
        }
        pub type student_t_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bernoulli_distribution {
            pub _bindgen_opaque_blob: u64,
        }
        pub type bernoulli_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bernoulli_distribution_param_type {
            pub _bindgen_opaque_blob: u64,
        }
        pub type bernoulli_distribution_param_type_distribution_type = u64;
        impl Clone for bernoulli_distribution_param_type {
            fn clone(&self) -> Self { *self }
        }
        impl Clone for bernoulli_distribution {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binomial_distribution {
        }
        pub type binomial_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binomial_distribution_param_type {
        }
        pub type binomial_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct geometric_distribution {
        }
        pub type geometric_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct geometric_distribution_param_type {
        }
        pub type geometric_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negative_binomial_distribution {
        }
        pub type negative_binomial_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negative_binomial_distribution_param_type {
        }
        pub type negative_binomial_distribution_param_type_distribution_type =
            u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct poisson_distribution {
        }
        pub type poisson_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct poisson_distribution_param_type {
        }
        pub type poisson_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct exponential_distribution {
        }
        pub type exponential_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct exponential_distribution_param_type {
        }
        pub type exponential_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct weibull_distribution {
        }
        pub type weibull_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct weibull_distribution_param_type {
        }
        pub type weibull_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct extreme_value_distribution {
        }
        pub type extreme_value_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct extreme_value_distribution_param_type {
        }
        pub type extreme_value_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct discrete_distribution {
        }
        pub type discrete_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct discrete_distribution_param_type {
        }
        pub type discrete_distribution_param_type_distribution_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_constant_distribution {
        }
        pub type piecewise_constant_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_constant_distribution_param_type {
        }
        pub type piecewise_constant_distribution_param_type_distribution_type
            = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_linear_distribution {
        }
        pub type piecewise_linear_distribution_result_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_linear_distribution_param_type {
        }
        pub type piecewise_linear_distribution_param_type_distribution_type =
            u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct seed_seq {
            pub _bindgen_opaque_blob: [u64; 3usize],
        }
        pub type seed_seq_result_type = u32;
        impl Clone for seed_seq {
            fn clone(&self) -> Self { *self }
        }
        extern "C" {
            pub static multiplier: _UIntType;
        }
        extern "C" {
            pub static increment: _UIntType;
        }
        extern "C" {
            pub static modulus: _UIntType;
        }
        extern "C" {
            pub static default_seed: _UIntType;
        }
        extern "C" {
            pub static word_size: usize;
        }
        extern "C" {
            pub static state_size: usize;
        }
        extern "C" {
            pub static shift_size: usize;
        }
        extern "C" {
            pub static mask_bits: usize;
        }
        extern "C" {
            pub static xor_mask: _UIntType;
        }
        extern "C" {
            pub static tempering_u: usize;
        }
        extern "C" {
            pub static tempering_d: _UIntType;
        }
        extern "C" {
            pub static tempering_s: usize;
        }
        extern "C" {
            pub static tempering_b: _UIntType;
        }
        extern "C" {
            pub static tempering_t: usize;
        }
        extern "C" {
            pub static tempering_c: _UIntType;
        }
        extern "C" {
            pub static tempering_l: usize;
        }
        extern "C" {
            pub static initialization_multiplier: _UIntType;
        }
        extern "C" {
            pub static short_lag: usize;
        }
        extern "C" {
            pub static long_lag: usize;
        }
        extern "C" {
            pub static block_size: usize;
        }
        extern "C" {
            pub static used_block: usize;
        }
        extern "C" {
            pub static table_size: usize;
        }
        pub const std__S_threshold: root::std::_bindgen_ty_2 =
            _bindgen_ty_2::_S_threshold;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _bindgen_ty_2 { _S_threshold = 16, }
        pub const std__S_chunk_size: root::std::_bindgen_ty_3 =
            _bindgen_ty_3::_S_chunk_size;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _bindgen_ty_3 { _S_chunk_size = 7, }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct raw_storage_iterator {
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bad_cast {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for bad_cast {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bad_typeid {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for bad_typeid {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct allocator_arg_t {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for allocator_arg_t {
            fn clone(&self) -> Self { *self }
        }
        extern "C" {
            #[link_name = "_ZStL13allocator_arg"]
            pub static allocator_arg: root::std::allocator_arg_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_allocator_type_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_allocator_type_helper__Wrap_type {
            pub _address: u8,
        }
        pub type __has_allocator_type_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_allocator_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_allocator_arg {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __uses_alloc_base {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __uses_alloc_base {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __uses_alloc0 {
            pub _bindgen_opaque_blob: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __uses_alloc0__Anything {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for __uses_alloc0__Anything {
            fn clone(&self) -> Self { *self }
        }
        impl Clone for __uses_alloc0 {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc1 {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc2 {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct logic_error {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt11logic_errorC1ERKSs"]
            pub fn logic_error_logic_error(this: *mut root::std::logic_error,
                                           __arg: *const root::std::string);
        }
        impl Clone for logic_error {
            fn clone(&self) -> Self { *self }
        }
        impl logic_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                logic_error_logic_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct domain_error {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt12domain_errorC1ERKSs"]
            pub fn domain_error_domain_error(this:
                                                 *mut root::std::domain_error,
                                             __arg: *const root::std::string);
        }
        impl Clone for domain_error {
            fn clone(&self) -> Self { *self }
        }
        impl domain_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                domain_error_domain_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct invalid_argument {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt16invalid_argumentC1ERKSs"]
            pub fn invalid_argument_invalid_argument(this:
                                                         *mut root::std::invalid_argument,
                                                     __arg:
                                                         *const root::std::string);
        }
        impl Clone for invalid_argument {
            fn clone(&self) -> Self { *self }
        }
        impl invalid_argument {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                invalid_argument_invalid_argument(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct length_error {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt12length_errorC1ERKSs"]
            pub fn length_error_length_error(this:
                                                 *mut root::std::length_error,
                                             __arg: *const root::std::string);
        }
        impl Clone for length_error {
            fn clone(&self) -> Self { *self }
        }
        impl length_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                length_error_length_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct out_of_range {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt12out_of_rangeC1ERKSs"]
            pub fn out_of_range_out_of_range(this:
                                                 *mut root::std::out_of_range,
                                             __arg: *const root::std::string);
        }
        impl Clone for out_of_range {
            fn clone(&self) -> Self { *self }
        }
        impl out_of_range {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                out_of_range_out_of_range(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct runtime_error {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt13runtime_errorC1ERKSs"]
            pub fn runtime_error_runtime_error(this:
                                                   *mut root::std::runtime_error,
                                               __arg:
                                                   *const root::std::string);
        }
        impl Clone for runtime_error {
            fn clone(&self) -> Self { *self }
        }
        impl runtime_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                runtime_error_runtime_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct range_error {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt11range_errorC1ERKSs"]
            pub fn range_error_range_error(this: *mut root::std::range_error,
                                           __arg: *const root::std::string);
        }
        impl Clone for range_error {
            fn clone(&self) -> Self { *self }
        }
        impl range_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                range_error_range_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct overflow_error {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt14overflow_errorC1ERKSs"]
            pub fn overflow_error_overflow_error(this:
                                                     *mut root::std::overflow_error,
                                                 __arg:
                                                     *const root::std::string);
        }
        impl Clone for overflow_error {
            fn clone(&self) -> Self { *self }
        }
        impl overflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                overflow_error_overflow_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct underflow_error {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        extern "C" {
            #[link_name = "_ZNSt15underflow_errorC1ERKSs"]
            pub fn underflow_error_underflow_error(this:
                                                       *mut root::std::underflow_error,
                                                   __arg:
                                                       *const root::std::string);
        }
        impl Clone for underflow_error {
            fn clone(&self) -> Self { *self }
        }
        impl underflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                underflow_error_underflow_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_c_ref {
            pub _address: u8,
        }
        pub type __add_c_ref_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_ref {
            pub _address: u8,
        }
        pub type __add_ref_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_r_ref {
            pub _address: u8,
        }
        pub type __add_r_ref_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_empty_non_tuple {
            pub _address: u8,
        }
        pub type __empty_not_final = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __combine_tuples {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __tuple_cat_result {
            pub _address: u8,
        }
        pub type __tuple_cat_result___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_1st_indices {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __tuple_concater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Swallow_assign {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for _Swallow_assign {
            fn clone(&self) -> Self { *self }
        }
        extern "C" {
            #[link_name = "_ZStL6ignore"]
            pub static ignore: root::std::_Swallow_assign;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Mem_fn {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_result_type_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_result_type_helper__Wrap_type {
            pub _address: u8,
        }
        pub type __has_result_type_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_result_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Weak_result_type_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Weak_result_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_argument_type_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_argument_type_helper__Wrap_type {
            pub _address: u8,
        }
        pub type __has_argument_type_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_argument_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_first_argument_type_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_first_argument_type_helper__Wrap_type {
            pub _address: u8,
        }
        pub type __has_first_argument_type_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_first_argument_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_second_argument_type_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_second_argument_type_helper__Wrap_type {
            pub _address: u8,
        }
        pub type __has_second_argument_type_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_second_argument_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Reference_wrapper_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Pack {
            pub _address: u8,
        }
        pub type _NotSame = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Maybe_unary_or_binary_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_bind_expression {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_placeholder {
            pub _address: u8,
        }
        pub mod placeholders {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_1E"]
                pub static _1: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_2E"]
                pub static _2: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_3E"]
                pub static _3: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_4E"]
                pub static _4: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_5E"]
                pub static _5: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_6E"]
                pub static _6: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_7E"]
                pub static _7: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_8E"]
                pub static _8: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders2_9E"]
                pub static _9: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_10E"]
                pub static _10: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_11E"]
                pub static _11: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_12E"]
                pub static _12: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_13E"]
                pub static _13: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_14E"]
                pub static _14: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_15E"]
                pub static _15: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_16E"]
                pub static _16: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_17E"]
                pub static _17: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_18E"]
                pub static _18: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_19E"]
                pub static _19: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_20E"]
                pub static _20: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_21E"]
                pub static _21: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_22E"]
                pub static _22: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_23E"]
                pub static _23: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_24E"]
                pub static _24: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_25E"]
                pub static _25: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_26E"]
                pub static _26: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_27E"]
                pub static _27: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_28E"]
                pub static _28: u8;
            }
            extern "C" {
                #[link_name = "_ZNSt12placeholders3_29E"]
                pub static _29: u8;
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _No_tuple_element {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Maybe_wrap_member_pointer {
            pub _address: u8,
        }
        pub type _Maybe_wrap_member_pointer_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bind_result {
            pub _address: u8,
        }
        pub type __is_socketlike = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bindres_helper {
            pub _address: u8,
        }
        pub type _Bindres_helper___maybe_type = u8;
        pub type _Bindres_helper___functor_type = u8;
        pub type _Bindres_helper_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bind_simple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bind_simple_helper {
            pub _address: u8,
        }
        pub type _Bind_simple_helper___maybe_type = u8;
        pub type _Bind_simple_helper___func_type = u8;
        pub type _Bind_simple_helper___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bad_function_call {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for bad_function_call {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_location_invariant {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Undefined_class {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Nocopy_types {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for _Nocopy_types {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Any_data {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for _Any_data {
            fn clone(&self) -> Self { *self }
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _Manager_operation {
            __get_type_info = 0,
            __get_functor_ptr = 1,
            __clone_functor = 2,
            __destroy_functor = 3,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Simple_type_wrapper {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Function_base {
            pub _bindgen_opaque_blob: [u64; 3usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Function_base__Base_manager {
            pub _address: u8,
        }
        pub type _Function_base__Base_manager__Local_storage = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Function_base__Ref_manager {
            pub _address: u8,
        }
        pub type _Function_base__Ref_manager__Base = u8;
        pub type _Function_base__Manager_type = u64;
        pub const _Function_base__M_max_size: usize = 16;
        pub const _Function_base__M_max_align: usize = 8;
        impl Clone for _Function_base {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Function_handler {
            pub _address: u8,
        }
        pub type __check_func_return_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct auto_ptr {
        }
        pub type auto_ptr_element_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct default_delete {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unique_ptr {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unique_ptr__Pointer {
            pub _address: u8,
        }
        pub type unique_ptr__Pointer__Del = u8;
        pub type unique_ptr__Pointer_type = u8;
        pub type unique_ptr___tuple_type = u8;
        pub type unique_ptr_pointer = u8;
        pub type unique_ptr_element_type = u8;
        pub type unique_ptr_deleter_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct bad_weak_ptr {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for bad_weak_ptr {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct shared_ptr {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct weak_ptr {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct owner_less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct enable_shared_from_this {
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Sp_make_shared_tag {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for _Sp_make_shared_tag {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Sp_less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Sp_owner_less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct auto_ptr_ref {
        }
        extern "C" {
            pub static mut id: root::std::locale_id;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _Ios_Fmtflags {
            _S_boolalpha = 1,
            _S_dec = 2,
            _S_fixed = 4,
            _S_hex = 8,
            _S_internal = 16,
            _S_left = 32,
            _S_oct = 64,
            _S_right = 128,
            _S_scientific = 256,
            _S_showbase = 512,
            _S_showpoint = 1024,
            _S_showpos = 2048,
            _S_skipws = 4096,
            _S_unitbuf = 8192,
            _S_uppercase = 16384,
            _S_adjustfield = 176,
            _S_basefield = 74,
            _S_floatfield = 260,
            _S_ios_fmtflags_end = 65536,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _Ios_Openmode {
            _S_app = 1,
            _S_ate = 2,
            _S_bin = 4,
            _S_in = 8,
            _S_out = 16,
            _S_trunc = 32,
            _S_ios_openmode_end = 65536,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _Ios_Iostate {
            _S_goodbit = 0,
            _S_badbit = 1,
            _S_eofbit = 2,
            _S_failbit = 4,
            _S_ios_iostate_end = 65536,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _Ios_Seekdir {
            _S_beg = 0,
            _S_cur = 1,
            _S_end = 2,
            _S_ios_seekdir_end = 65536,
        }
        extern "C" {
            #[link_name =
                  "_ZSt21__copy_streambufs_eofIcSt11char_traitsIcEExPSt15basic_streambufIT_T0_ES6_Rb"]
            pub fn __copy_streambufs_eof(__sbin: *mut [u64; 8usize],
                                         __sbout: *mut [u64; 8usize],
                                         __ineof: *mut bool)
             -> root::std::streamsize;
        }
        extern "C" {
            #[link_name =
                  "_ZSt21__copy_streambufs_eofIwSt11char_traitsIwEExPSt15basic_streambufIT_T0_ES6_Rb"]
            pub fn __copy_streambufs_eof1(__sbin: *mut [u64; 8usize],
                                          __sbout: *mut [u64; 8usize],
                                          __ineof: *mut bool)
             -> root::std::streamsize;
        }
        extern "C" {
            #[link_name =
                  "_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKPi"]
            pub fn __convert_to_v(arg1: *const ::std::os::raw::c_char,
                                  arg2: *mut f32,
                                  arg3: *mut root::std::ios_base_iostate,
                                  arg4: *const root::std::__c_locale);
        }
        extern "C" {
            #[link_name =
                  "_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPi"]
            pub fn __convert_to_v1(arg1: *const ::std::os::raw::c_char,
                                   arg2: *mut f64,
                                   arg3: *mut root::std::ios_base_iostate,
                                   arg4: *const root::std::__c_locale);
        }
        extern "C" {
            #[link_name =
                  "_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPi"]
            pub fn __convert_to_v2(arg1: *const ::std::os::raw::c_char,
                                   arg2: *mut f64,
                                   arg3: *mut root::std::ios_base_iostate,
                                   arg4: *const root::std::__c_locale);
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __pad {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ctype_abstract_base {
        }
        pub type __ctype_abstract_base_char_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __num_base {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        pub const __num_base__S_ominus: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_ominus;
        pub const __num_base__S_oplus: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oplus;
        pub const __num_base__S_ox: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_ox;
        pub const __num_base__S_oX: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oX;
        pub const __num_base__S_odigits: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_odigits;
        pub const __num_base__S_odigits_end:
                  root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_odigits_end;
        pub const __num_base__S_oudigits: root::std::__num_base__bindgen_ty_1
                  =
            __num_base__bindgen_ty_1::_S_odigits_end;
        pub const __num_base__S_oudigits_end:
                  root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oudigits_end;
        pub const __num_base__S_oe: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oe;
        pub const __num_base__S_oE: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oE;
        pub const __num_base__S_oend: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oudigits_end;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __num_base__bindgen_ty_1 {
            _S_ominus = 0,
            _S_oplus = 1,
            _S_ox = 2,
            _S_oX = 3,
            _S_odigits = 4,
            _S_odigits_end = 20,
            _S_oudigits_end = 36,
            _S_oe = 18,
            _S_oE = 34,
        }
        pub const __num_base__S_iminus: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iminus;
        pub const __num_base__S_iplus: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iplus;
        pub const __num_base__S_ix: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_ix;
        pub const __num_base__S_iX: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iX;
        pub const __num_base__S_izero: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_izero;
        pub const __num_base__S_ie: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_ie;
        pub const __num_base__S_iE: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iE;
        pub const __num_base__S_iend: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iend;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum __num_base__bindgen_ty_2 {
            _S_iminus = 0,
            _S_iplus = 1,
            _S_ix = 2,
            _S_iX = 3,
            _S_izero = 4,
            _S_ie = 18,
            _S_iE = 24,
            _S_iend = 26,
        }
        extern "C" {
            #[link_name = "_ZNSt10__num_base12_S_atoms_outE"]
            pub static mut __num_base__S_atoms_out:
                       *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "_ZNSt10__num_base11_S_atoms_inE"]
            pub static mut __num_base__S_atoms_in:
                       *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name =
                  "_ZNSt10__num_base15_S_format_floatERKSt8ios_basePcc"]
            pub fn __num_base__S_format_float(__io:
                                                  *const root::std::ios_base,
                                              __fptr:
                                                  *mut ::std::os::raw::c_char,
                                              __mod: ::std::os::raw::c_char);
        }
        impl Clone for __num_base {
            fn clone(&self) -> Self { *self }
        }
        impl __num_base {
            #[inline]
            pub unsafe fn _S_format_float(__io: *const root::std::ios_base,
                                          __fptr: *mut ::std::os::raw::c_char,
                                          __mod: ::std::os::raw::c_char) {
                __num_base__S_format_float(__io, __fptr, __mod)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numpunct_cache {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __use_cache {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "_ZSt17__verify_groupingPKcyRKSs"]
            pub fn __verify_grouping(__grouping:
                                         *const ::std::os::raw::c_char,
                                     __grouping_size: usize,
                                     __grouping_tmp: *const root::std::string)
             -> bool;
        }
        extern "C" {
            #[link_name = "_ZSt3cin"]
            pub static mut cin: root::std::istream;
        }
        extern "C" {
            #[link_name = "_ZSt4cout"]
            pub static mut cout: root::std::ostream;
        }
        extern "C" {
            #[link_name = "_ZSt4cerr"]
            pub static mut cerr: root::std::ostream;
        }
        extern "C" {
            #[link_name = "_ZSt4clog"]
            pub static mut clog: root::std::ostream;
        }
        extern "C" {
            #[link_name = "_ZSt4wcin"]
            pub static mut wcin: root::std::wistream;
        }
        extern "C" {
            #[link_name = "_ZSt5wcout"]
            pub static mut wcout: root::std::wostream;
        }
        extern "C" {
            #[link_name = "_ZSt5wcerr"]
            pub static mut wcerr: root::std::wostream;
        }
        extern "C" {
            #[link_name = "_ZSt5wclog"]
            pub static mut wclog: root::std::wostream;
        }
        extern "C" {
            #[link_name = "_ZStL8__ioinit"]
            pub static mut __ioinit: root::std::ios_base_Init;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct complex {
        }
        pub type complex_value_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_node {
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_iterator {
        }
        pub type _List_iterator__Self = u8;
        pub type _List_iterator__Node = u8;
        pub type _List_iterator_difference_type = u64;
        pub type _List_iterator_iterator_category = u8;
        pub type _List_iterator_value_type = u8;
        pub type _List_iterator_pointer = u8;
        pub type _List_iterator_reference = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_const_iterator {
        }
        pub type _List_const_iterator__Self = u8;
        pub type _List_const_iterator__Node = u8;
        pub type _List_const_iterator_iterator = u8;
        pub type _List_const_iterator_difference_type = u64;
        pub type _List_const_iterator_iterator_category = u8;
        pub type _List_const_iterator_value_type = u8;
        pub type _List_const_iterator_pointer = u8;
        pub type _List_const_iterator_reference = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_base {
        }
        pub type _List_base__Node_alloc_type = u8;
        pub type _List_base__Tp_alloc_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_base__List_impl {
        }
        pub type _List_base_allocator_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct list {
        }
        pub type list__Alloc_value_type = u8;
        pub type list__Base = u8;
        pub type list__Tp_alloc_type = u8;
        pub type list__Node_alloc_type = u8;
        pub type list_value_type = u8;
        pub type list_pointer = u8;
        pub type list_const_pointer = u8;
        pub type list_reference = u8;
        pub type list_const_reference = u8;
        pub type list_iterator = u8;
        pub type list_const_iterator = u8;
        pub type list_const_reverse_iterator = u8;
        pub type list_reverse_iterator = u8;
        pub type list_size_type = u64;
        pub type list_difference_type = u64;
        pub type list_allocator_type = u8;
        pub type list__Node = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Deque_iterator {
        }
        pub type _Deque_iterator_iterator = u8;
        pub type _Deque_iterator_const_iterator = u8;
        pub type _Deque_iterator_iterator_category = u8;
        pub type _Deque_iterator_value_type = u8;
        pub type _Deque_iterator_pointer = u8;
        pub type _Deque_iterator_reference = u8;
        pub type _Deque_iterator_size_type = u64;
        pub type _Deque_iterator_difference_type = u64;
        pub type _Deque_iterator__Map_pointer = u8;
        pub type _Deque_iterator__Self = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Deque_base {
        }
        pub type _Deque_base_allocator_type = u8;
        pub type _Deque_base_iterator = u8;
        pub type _Deque_base_const_iterator = u8;
        pub type _Deque_base__Map_alloc_type = u8;
        pub type _Deque_base__Tp_alloc_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Deque_base__Deque_impl {
        }
        pub const _Deque_base__S_initial_map_size:
                  root::std::_Deque_base__bindgen_ty_1 =
            _Deque_base__bindgen_ty_1::_S_initial_map_size;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _Deque_base__bindgen_ty_1 { _S_initial_map_size = 0, }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct deque {
        }
        pub type deque__Alloc_value_type = u8;
        pub type deque__Base = u8;
        pub type deque__Tp_alloc_type = u8;
        pub type deque_value_type = u8;
        pub type deque_pointer = u8;
        pub type deque_const_pointer = u8;
        pub type deque_reference = u8;
        pub type deque_const_reference = u8;
        pub type deque_iterator = u8;
        pub type deque_const_iterator = u8;
        pub type deque_const_reverse_iterator = u8;
        pub type deque_reverse_iterator = u8;
        pub type deque_size_type = u64;
        pub type deque_difference_type = u64;
        pub type deque_allocator_type = u8;
        pub type deque__Map_pointer = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct stack {
        }
        pub type stack__Sequence_value_type = u8;
        pub type stack_value_type = u8;
        pub type stack_reference = u8;
        pub type stack_const_reference = u8;
        pub type stack_size_type = u8;
        pub type stack_container_type = u8;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _Rb_tree_color { _S_red = 0, _S_black = 1, }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct _Rb_tree_node_base {
            pub _bindgen_opaque_blob: [u64; 4usize],
        }
        pub type _Rb_tree_node_base__Base_ptr = u64;
        pub type _Rb_tree_node_base__Const_Base_ptr = u64;
        impl Clone for _Rb_tree_node_base {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_node {
        }
        pub type _Rb_tree_node__Link_type = u8;
        extern "C" {
            #[link_name = "_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_increment(__x: *mut root::std::_Rb_tree_node_base)
             -> *mut root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_increment1(__x:
                                           *const root::std::_Rb_tree_node_base)
             -> *const root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_decrement(__x: *mut root::std::_Rb_tree_node_base)
             -> *mut root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_decrement1(__x:
                                           *const root::std::_Rb_tree_node_base)
             -> *const root::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_iterator {
        }
        pub type _Rb_tree_iterator_value_type = u8;
        pub type _Rb_tree_iterator_reference = u8;
        pub type _Rb_tree_iterator_pointer = u8;
        pub type _Rb_tree_iterator_iterator_category = u8;
        pub type _Rb_tree_iterator_difference_type = u64;
        pub type _Rb_tree_iterator__Self = u8;
        pub type _Rb_tree_iterator__Base_ptr = u64;
        pub type _Rb_tree_iterator__Link_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_const_iterator {
        }
        pub type _Rb_tree_const_iterator_value_type = u8;
        pub type _Rb_tree_const_iterator_reference = u8;
        pub type _Rb_tree_const_iterator_pointer = u8;
        pub type _Rb_tree_const_iterator_iterator = u8;
        pub type _Rb_tree_const_iterator_iterator_category = u8;
        pub type _Rb_tree_const_iterator_difference_type = u64;
        pub type _Rb_tree_const_iterator__Self = u8;
        pub type _Rb_tree_const_iterator__Base_ptr = u64;
        pub type _Rb_tree_const_iterator__Link_type = u8;
        extern "C" {
            #[link_name =
                  "_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_"]
            pub fn _Rb_tree_insert_and_rebalance(__insert_left: bool,
                                                 __x:
                                                     *mut root::std::_Rb_tree_node_base,
                                                 __p:
                                                     *mut root::std::_Rb_tree_node_base,
                                                 __header:
                                                     *mut root::std::_Rb_tree_node_base);
        }
        extern "C" {
            #[link_name =
                  "_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_"]
            pub fn _Rb_tree_rebalance_for_erase(__z:
                                                    *const root::std::_Rb_tree_node_base,
                                                __header:
                                                    *mut root::std::_Rb_tree_node_base)
             -> *mut root::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree {
        }
        pub type _Rb_tree__Node_allocator = u8;
        pub type _Rb_tree__Alloc_traits = u8;
        pub type _Rb_tree__Base_ptr = u64;
        pub type _Rb_tree__Const_Base_ptr = u64;
        pub type _Rb_tree_key_type = u8;
        pub type _Rb_tree_value_type = u8;
        pub type _Rb_tree_pointer = u8;
        pub type _Rb_tree_const_pointer = u8;
        pub type _Rb_tree_reference = u8;
        pub type _Rb_tree_const_reference = u8;
        pub type _Rb_tree__Link_type = u8;
        pub type _Rb_tree__Const_Link_type = u8;
        pub type _Rb_tree_size_type = u64;
        pub type _Rb_tree_difference_type = u64;
        pub type _Rb_tree_allocator_type = u8;
        pub type _Rb_tree_reverse_iterator = u8;
        pub type _Rb_tree_const_reverse_iterator = u8;
        extern "C" {
            #[link_name =
                  "_ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_"]
            pub fn _Rb_tree_black_count(__node:
                                            *const root::std::_Rb_tree_node_base,
                                        __root:
                                            *const root::std::_Rb_tree_node_base)
             -> ::std::os::raw::c_uint;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct map {
        }
        pub type map_key_type = u8;
        pub type map_mapped_type = u8;
        pub type map_value_type = u8;
        pub type map_key_compare = u8;
        pub type map_allocator_type = u8;
        pub type map__Alloc_value_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct map_value_compare {
        }
        pub type map__Pair_alloc_type = u8;
        pub type map__Rep_type = u8;
        pub type map__Alloc_traits = u8;
        pub type map_pointer = u8;
        pub type map_const_pointer = u8;
        pub type map_reference = u8;
        pub type map_const_reference = u8;
        pub type map_iterator = u8;
        pub type map_const_iterator = u8;
        pub type map_size_type = u8;
        pub type map_difference_type = u8;
        pub type map_reverse_iterator = u8;
        pub type map_const_reverse_iterator = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multimap {
        }
        pub type multimap_key_type = u8;
        pub type multimap_mapped_type = u8;
        pub type multimap_value_type = u8;
        pub type multimap_key_compare = u8;
        pub type multimap_allocator_type = u8;
        pub type multimap__Alloc_value_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multimap_value_compare {
        }
        pub type multimap__Pair_alloc_type = u8;
        pub type multimap__Rep_type = u8;
        pub type multimap__Alloc_traits = u8;
        pub type multimap_pointer = u8;
        pub type multimap_const_pointer = u8;
        pub type multimap_reference = u8;
        pub type multimap_const_reference = u8;
        pub type multimap_iterator = u8;
        pub type multimap_const_iterator = u8;
        pub type multimap_size_type = u8;
        pub type multimap_difference_type = u8;
        pub type multimap_reverse_iterator = u8;
        pub type multimap_const_reverse_iterator = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct set {
        }
        pub type set__Alloc_value_type = u8;
        pub type set_key_type = u8;
        pub type set_value_type = u8;
        pub type set_key_compare = u8;
        pub type set_value_compare = u8;
        pub type set_allocator_type = u8;
        pub type set__Key_alloc_type = u8;
        pub type set__Rep_type = u8;
        pub type set__Alloc_traits = u8;
        pub type set_pointer = u8;
        pub type set_const_pointer = u8;
        pub type set_reference = u8;
        pub type set_const_reference = u8;
        pub type set_iterator = u8;
        pub type set_const_iterator = u8;
        pub type set_reverse_iterator = u8;
        pub type set_const_reverse_iterator = u8;
        pub type set_size_type = u8;
        pub type set_difference_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multiset {
        }
        pub type multiset__Alloc_value_type = u8;
        pub type multiset_key_type = u8;
        pub type multiset_value_type = u8;
        pub type multiset_key_compare = u8;
        pub type multiset_value_compare = u8;
        pub type multiset_allocator_type = u8;
        pub type multiset__Key_alloc_type = u8;
        pub type multiset__Rep_type = u8;
        pub type multiset__Alloc_traits = u8;
        pub type multiset_pointer = u8;
        pub type multiset_const_pointer = u8;
        pub type multiset_reference = u8;
        pub type multiset_const_reference = u8;
        pub type multiset_iterator = u8;
        pub type multiset_const_iterator = u8;
        pub type multiset_reverse_iterator = u8;
        pub type multiset_const_reverse_iterator = u8;
        pub type multiset_size_type = u8;
        pub type multiset_difference_type = u8;
    }
    pub type __gnuc_va_list = u64;
    pub type va_list = u64;
    extern "C" {
        pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
    }
    pub type rsize_t = u64;
    pub type wint_t = u16;
    pub type wctype_t = u16;
    pub type errno_t = u32;
    pub type __time32_t = u32;
    pub type __time64_t = u64;
    pub type time_t = u64;
    #[repr(C)]
    pub struct threadlocaleinfostruct {
        pub _bindgen_opaque_blob: [u64; 44usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct threadlocaleinfostruct__bindgen_ty_1 {
        pub _bindgen_opaque_blob: [u64; 4usize],
    }
    impl Clone for threadlocaleinfostruct__bindgen_ty_1 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct threadmbcinfostruct {
        _unused: [u8; 0],
    }
    pub type pthreadlocinfo = u64;
    pub type pthreadmbcinfo = u64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lc_time_data {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct localeinfo_struct {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for localeinfo_struct {
        fn clone(&self) -> Self { *self }
    }
    pub type _locale_tstruct = [u64; 2usize];
    pub type _locale_t = u64;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct tagLC_ID {
        pub _bindgen_opaque_blob: [u16; 3usize],
    }
    impl Clone for tagLC_ID {
        fn clone(&self) -> Self { *self }
    }
    pub type LC_ID = [u16; 3usize];
    pub type LPLC_ID = u64;
    pub type threadlocinfo = [u64; 44usize];
    extern "C" {
        pub fn _errno() -> *mut ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _set_errno(_Value: ::std::os::raw::c_int) -> root::errno_t;
    }
    extern "C" {
        pub fn _get_errno(_Value: *mut ::std::os::raw::c_int)
         -> root::errno_t;
    }
    extern "C" {
        pub fn __threadid() -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn __threadhandle() -> usize;
    }
    #[repr(C)]
    pub struct max_align_t {
        pub _bindgen_opaque_blob: [u8; 32usize],
    }
    pub type int_least8_t = u8;
    pub type uint_least8_t = u8;
    pub type int_least16_t = u16;
    pub type uint_least16_t = u16;
    pub type int_least32_t = u32;
    pub type uint_least32_t = u32;
    pub type int_least64_t = u64;
    pub type uint_least64_t = u64;
    pub type int_fast8_t = u8;
    pub type uint_fast8_t = u8;
    pub type int_fast16_t = u16;
    pub type uint_fast16_t = u16;
    pub type int_fast32_t = u32;
    pub type uint_fast32_t = u32;
    pub type int_fast64_t = u64;
    pub type uint_fast64_t = u64;
    pub type intmax_t = u64;
    pub type uintmax_t = u64;
    pub type octave_idx_type = u32;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _SETJMP_FLOAT128 {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for _SETJMP_FLOAT128 {
        fn clone(&self) -> Self { *self }
    }
    pub type SETJMP_FLOAT128 = [u8; 16usize];
    pub type _JBTYPE = [u8; 16usize];
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _JUMP_BUFFER {
        pub _bindgen_opaque_blob: [u64; 32usize],
    }
    impl Clone for _JUMP_BUFFER {
        fn clone(&self) -> Self { *self }
    }
    pub type jmp_buf = [u8; 256usize];
    extern "C" {
        pub fn mingw_getsp() -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _setjmp(_Buf: *mut root::_JBTYPE,
                       _Ctx: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _setjmp3(_Buf: *mut root::_JBTYPE,
                        _Ctx: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ms_longjmp(_Buf: *mut root::_JBTYPE,
                          _Value: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn longjmp(_Buf: *mut root::_JBTYPE,
                       _Value: ::std::os::raw::c_int);
    }
    pub type sig_atomic_t = u32;
    pub type __p_sig_fn_t = u64;
    extern "C" {
        pub fn __pxcptinfoptrs() -> *mut *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn signal(_SigNum: ::std::os::raw::c_int,
                      _Func: root::__p_sig_fn_t) -> root::__p_sig_fn_t;
    }
    extern "C" {
        pub fn raise(_SigNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __normal_iterator {
        }
        pub type __normal_iterator___traits_type = u8;
        pub type __normal_iterator_iterator_type = u8;
        pub type __normal_iterator_iterator_category = u8;
        pub type __normal_iterator_value_type = u8;
        pub type __normal_iterator_difference_type = u8;
        pub type __normal_iterator_reference = u8;
        pub type __normal_iterator_pointer = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_2 {
            pub _address: u8,
        }
        pub type __promote_2___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_3 {
            pub _address: u8,
        }
        pub type __promote_3___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_4 {
            pub _address: u8,
        }
        pub type __promote_4___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        // extern "C" {
        //     pub static __min: _Value;
        // }
        // extern "C" {
        //     pub static __max: _Value;
        // }
        extern "C" {
            pub static __is_signed: bool;
        }
        extern "C" {
            pub static __digits: ::std::os::raw::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        extern "C" {
            pub static __max_digits10: ::std::os::raw::c_int;
        }
        extern "C" {
            pub static __digits10: ::std::os::raw::c_int;
        }
        extern "C" {
            pub static __max_exponent10: ::std::os::raw::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        pub mod __ops {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct _Iter_less_iter {
                pub _bindgen_opaque_blob: u8,
                pub _address: u8,
            }
            impl Clone for _Iter_less_iter {
                fn clone(&self) -> Self { *self }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct _Iter_less_val {
                pub _bindgen_opaque_blob: u8,
                pub _address: u8,
            }
            impl Clone for _Iter_less_val {
                fn clone(&self) -> Self { *self }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct _Val_less_iter {
                pub _bindgen_opaque_blob: u8,
                pub _address: u8,
            }
            impl Clone for _Val_less_iter {
                fn clone(&self) -> Self { *self }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct _Iter_equal_to_iter {
                pub _bindgen_opaque_blob: u8,
                pub _address: u8,
            }
            impl Clone for _Iter_equal_to_iter {
                fn clone(&self) -> Self { *self }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct _Iter_equal_to_val {
                pub _bindgen_opaque_blob: u8,
                pub _address: u8,
            }
            impl Clone for _Iter_equal_to_val {
                fn clone(&self) -> Self { *self }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_iter {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_val {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_comp_iter {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_val {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_iter {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_pred {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_val {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_iter {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_negate {
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Char_types {
            pub _address: u8,
        }
        pub type _Char_types_int_type = u32;
        pub type _Char_types_pos_type = u8;
        pub type _Char_types_off_type = u64;
        pub type _Char_types_state_type = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type char_traits_char_type = u8;
        pub type char_traits_int_type = u8;
        pub type char_traits_pos_type = u8;
        pub type char_traits_off_type = u8;
        pub type char_traits_state_type = u8;
        extern "C" {
            #[link_name = "_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
            pub fn __verbose_terminate_handler();
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct new_allocator {
            pub _address: u8,
        }
        pub type new_allocator_size_type = u64;
        pub type new_allocator_difference_type = u64;
        pub type new_allocator_pointer = u8;
        pub type new_allocator_const_pointer = u8;
        pub type new_allocator_reference = u8;
        pub type new_allocator_const_reference = u8;
        pub type new_allocator_value_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct new_allocator_rebind {
            pub _address: u8,
        }
        pub type new_allocator_rebind_other = u8;
        pub type new_allocator_propagate_on_container_move_assignment = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_always_compares_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct array_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bitmap_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct malloc_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mt_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pool_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits {
            pub _address: u8,
        }
        pub type __alloc_traits_allocator_type = u8;
        pub type __alloc_traits__Base_type = u8;
        pub type __alloc_traits_value_type = u8;
        pub type __alloc_traits_pointer = u8;
        pub type __alloc_traits_const_pointer = u8;
        pub type __alloc_traits_size_type = u8;
        pub type __alloc_traits_difference_type = u8;
        pub type __alloc_traits_reference = u8;
        pub type __alloc_traits_const_reference = u8;
        pub type __alloc_traits___is_custom_pointer = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits_rebind {
            pub _address: u8,
        }
        pub type __alloc_traits_rebind_other = u8;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum _Lock_policy { _S_single = 0, _S_mutex = 1, _S_atomic = 2, }
        extern "C" {
            #[link_name = "_ZN9__gnu_cxxL21__default_lock_policyE"]
            pub static __default_lock_policy: root::__gnu_cxx::_Lock_policy;
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __concurrence_lock_error {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for __concurrence_lock_error {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __concurrence_unlock_error {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for __concurrence_unlock_error {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __concurrence_broadcast_error {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for __concurrence_broadcast_error {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __concurrence_wait_error {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for __concurrence_wait_error {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __mutex {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for __mutex {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __recursive_mutex {
            pub _bindgen_opaque_blob: [u64; 3usize],
        }
        impl Clone for __recursive_mutex {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __scoped_lock {
            pub _bindgen_opaque_blob: u64,
        }
        pub type __scoped_lock___mutex_type = [u64; 2usize];
        impl Clone for __scoped_lock {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_buffer {
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _iobuf {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    impl Clone for _iobuf {
        fn clone(&self) -> Self { *self }
    }
    pub type FILE = [u64; 6usize];
    extern "C" {
        pub fn __iob_func() -> *mut root::FILE;
    }
    pub type _fsize_t = u32;
    #[repr(C)]
    pub struct _wfinddata32_t {
        pub _bindgen_opaque_blob: [u32; 135usize],
    }
    #[repr(C)]
    pub struct _wfinddata32i64_t {
        pub _bindgen_opaque_blob: [u64; 68usize],
    }
    #[repr(C)]
    pub struct _wfinddata64i32_t {
        pub _bindgen_opaque_blob: [u64; 70usize],
    }
    #[repr(C)]
    pub struct _wfinddata64_t {
        pub _bindgen_opaque_blob: [u64; 70usize],
    }
    extern "C" {
        #[link_name = "__imp__pctype"]
        pub static mut __imp__pctype: *mut *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        #[link_name = "__imp__wctype"]
        pub static mut __imp__wctype: *mut *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        #[link_name = "__imp__pwctype"]
        pub static mut __imp__pwctype: *mut *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn iswalpha(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswalpha_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswupper(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswupper_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswlower(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswlower_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswdigit(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswdigit_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswxdigit(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswxdigit_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswspace(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswspace_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswpunct(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswpunct_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswalnum(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswalnum_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswprint(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswprint_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswgraph(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswgraph_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswcntrl(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswcntrl_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswascii(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isleadbyte(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isleadbyte_l(_C: ::std::os::raw::c_int,
                             _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn towupper(_C: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn _towupper_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> root::wint_t;
    }
    extern "C" {
        pub fn towlower(_C: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn _towlower_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> root::wint_t;
    }
    extern "C" {
        pub fn iswctype(_C: root::wint_t, _Type: root::wctype_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswctype_l(_C: root::wint_t, _Type: root::wctype_t,
                           _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __iswcsymf(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswcsymf_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __iswcsym(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iswcsym_l(_C: root::wint_t, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn is_wctype(_C: root::wint_t, _Type: root::wctype_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswblank(_C: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wgetcwd(_DstBuf: *mut u16,
                        _SizeInWords: ::std::os::raw::c_int) -> *mut u16;
    }
    extern "C" {
        pub fn _wgetdcwd(_Drive: ::std::os::raw::c_int, _DstBuf: *mut u16,
                         _SizeInWords: ::std::os::raw::c_int) -> *mut u16;
    }
    extern "C" {
        pub fn _wgetdcwd_nolock(_Drive: ::std::os::raw::c_int,
                                _DstBuf: *mut u16,
                                _SizeInWords: ::std::os::raw::c_int)
         -> *mut u16;
    }
    extern "C" {
        pub fn _wchdir(_Path: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wmkdir(_Path: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wrmdir(_Path: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _waccess(_Filename: *const u16,
                        _AccessMode: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wchmod(_Filename: *const u16, _Mode: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcreat(_Filename: *const u16,
                       _PermissionMode: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wfindfirst32(_Filename: *const u16,
                             _FindData: *mut root::_wfinddata32_t) -> isize;
    }
    extern "C" {
        pub fn _wfindnext32(_FindHandle: isize,
                            _FindData: *mut root::_wfinddata32_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wunlink(_Filename: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wrename(_OldFilename: *const u16, _NewFilename: *const u16)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wmktemp(_TemplateName: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wfindfirst32i64(_Filename: *const u16,
                                _FindData: *mut root::_wfinddata32i64_t)
         -> isize;
    }
    extern "C" {
        pub fn _wfindfirst64i32(_Filename: *const u16,
                                _FindData: *mut root::_wfinddata64i32_t)
         -> isize;
    }
    extern "C" {
        pub fn _wfindfirst64(_Filename: *const u16,
                             _FindData: *mut root::_wfinddata64_t) -> isize;
    }
    extern "C" {
        pub fn _wfindnext32i64(_FindHandle: isize,
                               _FindData: *mut root::_wfinddata32i64_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wfindnext64i32(_FindHandle: isize,
                               _FindData: *mut root::_wfinddata64i32_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wfindnext64(_FindHandle: isize,
                            _FindData: *mut root::_wfinddata64_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wsopen_s(_FileHandle: *mut ::std::os::raw::c_int,
                         _Filename: *const u16,
                         _OpenFlag: ::std::os::raw::c_int,
                         _ShareFlag: ::std::os::raw::c_int,
                         _PermissionFlag: ::std::os::raw::c_int)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _wopen(_Filename: *const u16,
                      _OpenFlag: ::std::os::raw::c_int, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wsopen(_Filename: *const u16,
                       _OpenFlag: ::std::os::raw::c_int,
                       _ShareFlag: ::std::os::raw::c_int, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wsetlocale(_Category: ::std::os::raw::c_int,
                           _Locale: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wexecl(_Filename: *const u16, _ArgList: *const u16, ...)
         -> isize;
    }
    extern "C" {
        pub fn _wexecle(_Filename: *const u16, _ArgList: *const u16, ...)
         -> isize;
    }
    extern "C" {
        pub fn _wexeclp(_Filename: *const u16, _ArgList: *const u16, ...)
         -> isize;
    }
    extern "C" {
        pub fn _wexeclpe(_Filename: *const u16, _ArgList: *const u16, ...)
         -> isize;
    }
    extern "C" {
        pub fn _wexecv(_Filename: *const u16, _ArgList: *const *const u16)
         -> isize;
    }
    extern "C" {
        pub fn _wexecve(_Filename: *const u16, _ArgList: *const *const u16,
                        _Env: *const *const u16) -> isize;
    }
    extern "C" {
        pub fn _wexecvp(_Filename: *const u16, _ArgList: *const *const u16)
         -> isize;
    }
    extern "C" {
        pub fn _wexecvpe(_Filename: *const u16, _ArgList: *const *const u16,
                         _Env: *const *const u16) -> isize;
    }
    extern "C" {
        pub fn _wspawnl(_Mode: ::std::os::raw::c_int, _Filename: *const u16,
                        _ArgList: *const u16, ...) -> isize;
    }
    extern "C" {
        pub fn _wspawnle(_Mode: ::std::os::raw::c_int, _Filename: *const u16,
                         _ArgList: *const u16, ...) -> isize;
    }
    extern "C" {
        pub fn _wspawnlp(_Mode: ::std::os::raw::c_int, _Filename: *const u16,
                         _ArgList: *const u16, ...) -> isize;
    }
    extern "C" {
        pub fn _wspawnlpe(_Mode: ::std::os::raw::c_int, _Filename: *const u16,
                          _ArgList: *const u16, ...) -> isize;
    }
    extern "C" {
        pub fn _wspawnv(_Mode: ::std::os::raw::c_int, _Filename: *const u16,
                        _ArgList: *const *const u16) -> isize;
    }
    extern "C" {
        pub fn _wspawnve(_Mode: ::std::os::raw::c_int, _Filename: *const u16,
                         _ArgList: *const *const u16, _Env: *const *const u16)
         -> isize;
    }
    extern "C" {
        pub fn _wspawnvp(_Mode: ::std::os::raw::c_int, _Filename: *const u16,
                         _ArgList: *const *const u16) -> isize;
    }
    extern "C" {
        pub fn _wspawnvpe(_Mode: ::std::os::raw::c_int, _Filename: *const u16,
                          _ArgList: *const *const u16,
                          _Env: *const *const u16) -> isize;
    }
    extern "C" {
        pub fn _wsystem(_Command: *const u16) -> ::std::os::raw::c_int;
    }
    pub type _ino_t = u16;
    pub type ino_t = u16;
    pub type _dev_t = u32;
    pub type dev_t = u32;
    pub type _off_t = u32;
    pub type off32_t = u32;
    pub type _off64_t = u64;
    pub type off64_t = u64;
    pub type off_t = u32;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _stat32 {
        pub _bindgen_opaque_blob: [u32; 9usize],
    }
    impl Clone for _stat32 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct stat {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    impl Clone for stat {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _stat32i64 {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    impl Clone for _stat32i64 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _stat64i32 {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    impl Clone for _stat64i32 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _stat64 {
        pub _bindgen_opaque_blob: [u64; 7usize],
    }
    impl Clone for _stat64 {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        pub fn _wstat32(_Name: *const u16, _Stat: *mut root::_stat32)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wstat32i64(_Name: *const u16, _Stat: *mut root::_stat32i64)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wstat64i32(_Name: *const u16, _Stat: *mut root::_stat64i32)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wstat64(_Name: *const u16, _Stat: *mut root::_stat64)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _cgetws(_Buffer: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _getwch() -> root::wint_t;
    }
    extern "C" {
        pub fn _getwche() -> root::wint_t;
    }
    extern "C" {
        pub fn _putwch(_WCh: u16) -> root::wint_t;
    }
    extern "C" {
        pub fn _ungetwch(_WCh: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn _cputws(_String: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _cwprintf(_Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _cwscanf(_Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _cwscanf_l(_Format: *const u16, _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vcwprintf(_Format: *const u16, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _cwprintf_p(_Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vcwprintf_p(_Format: *const u16, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _cwprintf_l(_Format: *const u16, _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vcwprintf_l(_Format: *const u16, _Locale: root::_locale_t,
                            _ArgList: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _cwprintf_p_l(_Format: *const u16,
                             _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vcwprintf_p_l(_Format: *const u16, _Locale: root::_locale_t,
                              _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _putwch_nolock(_WCh: u16) -> root::wint_t;
    }
    extern "C" {
        pub fn _getwch_nolock() -> root::wint_t;
    }
    extern "C" {
        pub fn _getwche_nolock() -> root::wint_t;
    }
    extern "C" {
        pub fn _ungetwch_nolock(_WCh: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn __mingw_swscanf(_Src: *const u16, _Format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vswscanf(_Str: *const u16, Format: *const u16,
                                argp: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_wscanf(_Format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vwscanf(Format: *const u16, argp: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_fwscanf(_File: *mut root::FILE,
                               _Format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vfwscanf(fp: *mut root::FILE, Format: *const u16,
                                argp: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_fwprintf(_File: *mut root::FILE,
                                _Format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_wprintf(_Format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vfwprintf(_File: *mut root::FILE, _Format: *const u16,
                                 _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vwprintf(_Format: *const u16, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_snwprintf(s: *mut u16, n: usize,
                                 format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vsnwprintf(arg1: *mut u16, arg2: usize,
                                  arg3: *const u16, arg4: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_swprintf(arg1: *mut u16, arg2: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vswprintf(arg1: *mut u16, arg2: *const u16,
                                 arg3: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wfsopen(_Filename: *const u16, _Mode: *const u16,
                        _ShFlag: ::std::os::raw::c_int) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fgetwc(_File: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _fgetwchar() -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc(_Ch: u16, _File: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _fputwchar(_Ch: u16) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc(_File: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar() -> root::wint_t;
    }
    extern "C" {
        pub fn putwc(_Ch: u16, _File: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar(_Ch: u16) -> root::wint_t;
    }
    extern "C" {
        pub fn ungetwc(_Ch: root::wint_t, _File: *mut root::FILE)
         -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws(_Dst: *mut u16, _SizeInWords: ::std::os::raw::c_int,
                      _File: *mut root::FILE) -> *mut u16;
    }
    extern "C" {
        pub fn fputws(_Str: *const u16, _File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _getws(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _putws(_Str: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _scwprintf(_Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _swprintf_l(arg1: *mut u16, _SizeInWords: usize,
                           _Format: *const u16, _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _swprintf_c(_DstBuf: *mut u16, _SizeInWords: usize,
                           _Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vswprintf_c(_DstBuf: *mut u16, _SizeInWords: usize,
                            _Format: *const u16, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _snwprintf(_Dest: *mut u16, _Count: usize,
                          _Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vsnwprintf(_Dest: *mut u16, _Count: usize,
                           _Format: *const u16, _Args: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fwprintf_p(_File: *mut root::FILE, _Format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wprintf_p(_Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vfwprintf_p(_File: *mut root::FILE, _Format: *const u16,
                            _ArgList: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vwprintf_p(_Format: *const u16, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _swprintf_p(_DstBuf: *mut u16, _MaxCount: usize,
                           _Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vswprintf_p(_DstBuf: *mut u16, _MaxCount: usize,
                            _Format: *const u16, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _scwprintf_p(_Format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vscwprintf_p(_Format: *const u16, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wprintf_l(_Format: *const u16, _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wprintf_p_l(_Format: *const u16,
                            _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vwprintf_l(_Format: *const u16, _Locale: root::_locale_t,
                           _ArgList: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vwprintf_p_l(_Format: *const u16, _Locale: root::_locale_t,
                             _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fwprintf_l(_File: *mut root::FILE, _Format: *const u16,
                           _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fwprintf_p_l(_File: *mut root::FILE, _Format: *const u16,
                             _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vfwprintf_l(_File: *mut root::FILE, _Format: *const u16,
                            _Locale: root::_locale_t, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vfwprintf_p_l(_File: *mut root::FILE, _Format: *const u16,
                              _Locale: root::_locale_t,
                              _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _swprintf_c_l(_DstBuf: *mut u16, _MaxCount: usize,
                             _Format: *const u16,
                             _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _swprintf_p_l(_DstBuf: *mut u16, _MaxCount: usize,
                             _Format: *const u16,
                             _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vswprintf_c_l(_DstBuf: *mut u16, _MaxCount: usize,
                              _Format: *const u16, _Locale: root::_locale_t,
                              _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vswprintf_p_l(_DstBuf: *mut u16, _MaxCount: usize,
                              _Format: *const u16, _Locale: root::_locale_t,
                              _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _scwprintf_l(_Format: *const u16,
                            _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _scwprintf_p_l(_Format: *const u16,
                              _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vscwprintf_p_l(_Format: *const u16, _Locale: root::_locale_t,
                               _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _snwprintf_l(_DstBuf: *mut u16, _MaxCount: usize,
                            _Format: *const u16,
                            _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vsnwprintf_l(_DstBuf: *mut u16, _MaxCount: usize,
                             _Format: *const u16, _Locale: root::_locale_t,
                             _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _swprintf(_Dest: *mut u16, _Format: *const u16, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vswprintf(_Dest: *mut u16, _Format: *const u16,
                          _Args: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __swprintf_l(_Dest: *mut u16, _Format: *const u16,
                            _Plocinfo: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vswprintf_l(_Dest: *mut u16, _MaxCount: usize,
                            _Format: *const u16, _Locale: root::_locale_t,
                            _ArgList: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __vswprintf_l(_Dest: *mut u16, _Format: *const u16,
                             _Plocinfo: root::_locale_t, _Args: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wtempnam(_Directory: *const u16, _FilePrefix: *const u16)
         -> *mut u16;
    }
    extern "C" {
        pub fn _vscwprintf(_Format: *const u16, _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vscwprintf_l(_Format: *const u16, _Locale: root::_locale_t,
                             _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fwscanf_l(_File: *mut root::FILE, _Format: *const u16,
                          _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _swscanf_l(_Src: *const u16, _Format: *const u16,
                          _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _snwscanf(_Src: *const u16, _MaxCount: usize,
                         _Format: *const u16, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _snwscanf_l(_Src: *const u16, _MaxCount: usize,
                           _Format: *const u16, _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wscanf_l(_Format: *const u16, _Locale: root::_locale_t, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const u16)
         -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wfopen(_Filename: *const u16, _Mode: *const u16)
         -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wfreopen(_Filename: *const u16, _Mode: *const u16,
                         _OldFile: *mut root::FILE) -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wperror(_ErrMsg: *const u16);
    }
    extern "C" {
        pub fn _wpopen(_Command: *const u16, _Mode: *const u16)
         -> *mut root::FILE;
    }
    extern "C" {
        pub fn _wremove(_Filename: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wtmpnam(_Buffer: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _fgetwc_nolock(_File: *mut root::FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn _fputwc_nolock(_Ch: u16, _File: *mut root::FILE)
         -> root::wint_t;
    }
    extern "C" {
        pub fn _ungetwc_nolock(_Ch: root::wint_t, _File: *mut root::FILE)
         -> root::wint_t;
    }
    extern "C" {
        pub fn _itow(_Value: ::std::os::raw::c_int, _Dest: *mut u16,
                     _Radix: ::std::os::raw::c_int) -> *mut u16;
    }
    extern "C" {
        pub fn _ltow(_Value: ::std::os::raw::c_long, _Dest: *mut u16,
                     _Radix: ::std::os::raw::c_int) -> *mut u16;
    }
    extern "C" {
        pub fn _ultow(_Value: ::std::os::raw::c_ulong, _Dest: *mut u16,
                      _Radix: ::std::os::raw::c_int) -> *mut u16;
    }
    extern "C" {
        pub fn _wcstod_l(_Str: *const u16, _EndPtr: *mut *mut u16,
                         _Locale: root::_locale_t) -> f64;
    }
    extern "C" {
        pub fn __mingw_wcstod(_Str: *const u16, _EndPtr: *mut *mut u16)
         -> f64;
    }
    extern "C" {
        pub fn __mingw_wcstof(nptr: *const u16, endptr: *mut *mut u16) -> f32;
    }
    extern "C" {
        pub fn __mingw_wcstold(arg1: *const u16, arg2: *mut *mut u16) -> f64;
    }
    extern "C" {
        pub fn wcstold(arg1: *const u16, arg2: *mut *mut u16) -> f64;
    }
    extern "C" {
        pub fn wcstol(_Str: *const u16, _EndPtr: *mut *mut u16,
                      _Radix: ::std::os::raw::c_int)
         -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn _wcstol_l(_Str: *const u16, _EndPtr: *mut *mut u16,
                         _Radix: ::std::os::raw::c_int,
                         _Locale: root::_locale_t) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn wcstoul(_Str: *const u16, _EndPtr: *mut *mut u16,
                       _Radix: ::std::os::raw::c_int)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn _wcstoul_l(_Str: *const u16, _EndPtr: *mut *mut u16,
                          _Radix: ::std::os::raw::c_int,
                          _Locale: root::_locale_t)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn _wgetenv(_VarName: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wtof(_Str: *const u16) -> f64;
    }
    extern "C" {
        pub fn _wtof_l(_Str: *const u16, _Locale: root::_locale_t) -> f64;
    }
    extern "C" {
        pub fn _wtoi(_Str: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wtoi_l(_Str: *const u16, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wtol(_Str: *const u16) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn _wtol_l(_Str: *const u16, _Locale: root::_locale_t)
         -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn _i64tow(_Val: ::std::os::raw::c_longlong, _DstBuf: *mut u16,
                       _Radix: ::std::os::raw::c_int) -> *mut u16;
    }
    extern "C" {
        pub fn _ui64tow(_Val: ::std::os::raw::c_ulonglong, _DstBuf: *mut u16,
                        _Radix: ::std::os::raw::c_int) -> *mut u16;
    }
    extern "C" {
        pub fn _wtoi64(_Str: *const u16) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _wtoi64_l(_Str: *const u16, _Locale: root::_locale_t)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _wcstoi64(_Str: *const u16, _EndPtr: *mut *mut u16,
                         _Radix: ::std::os::raw::c_int)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _wcstoi64_l(_Str: *const u16, _EndPtr: *mut *mut u16,
                           _Radix: ::std::os::raw::c_int,
                           _Locale: root::_locale_t)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _wcstoui64(_Str: *const u16, _EndPtr: *mut *mut u16,
                          _Radix: ::std::os::raw::c_int)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn _wcstoui64_l(_Str: *const u16, _EndPtr: *mut *mut u16,
                            _Radix: ::std::os::raw::c_int,
                            _Locale: root::_locale_t)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn _wfullpath(_FullPath: *mut u16, _Path: *const u16,
                          _SizeInWords: usize) -> *mut u16;
    }
    extern "C" {
        pub fn _wmakepath(_ResultPath: *mut u16, _Drive: *const u16,
                          _Dir: *const u16, _Filename: *const u16,
                          _Ext: *const u16);
    }
    extern "C" {
        pub fn _wputenv(_EnvString: *const u16) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wsearchenv(_Filename: *const u16, _EnvVar: *const u16,
                           _ResultPath: *mut u16);
    }
    extern "C" {
        pub fn _wsplitpath(_FullPath: *const u16, _Drive: *mut u16,
                           _Dir: *mut u16, _Filename: *mut u16,
                           _Ext: *mut u16);
    }
    extern "C" {
        pub fn _wcsdup(_Str: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcscat(_Dest: *mut u16, _Source: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcschr(_Str: *const u16, _Ch: u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcscmp(_Str1: *const u16, _Str2: *const u16)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscpy(_Dest: *mut u16, _Source: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcscspn(_Str: *const u16, _Control: *const u16) -> usize;
    }
    extern "C" {
        pub fn wcslen(_Str: *const u16) -> usize;
    }
    extern "C" {
        pub fn wcsnlen(_Src: *const u16, _MaxCount: usize) -> usize;
    }
    extern "C" {
        pub fn wcsncat(_Dest: *mut u16, _Source: *const u16, _Count: usize)
         -> *mut u16;
    }
    extern "C" {
        pub fn wcsncmp(_Str1: *const u16, _Str2: *const u16, _MaxCount: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncpy(_Dest: *mut u16, _Source: *const u16, _Count: usize)
         -> *mut u16;
    }
    extern "C" {
        pub fn _wcsncpy_l(_Dest: *mut u16, _Source: *const u16, _Count: usize,
                          _Locale: root::_locale_t) -> *mut u16;
    }
    extern "C" {
        pub fn wcspbrk(_Str: *const u16, _Control: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsrchr(_Str: *const u16, _Ch: u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsspn(_Str: *const u16, _Control: *const u16) -> usize;
    }
    extern "C" {
        pub fn wcsstr(_Str: *const u16, _SubStr: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcstok(_Str: *mut u16, _Delim: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcserror(_ErrNum: ::std::os::raw::c_int) -> *mut u16;
    }
    extern "C" {
        pub fn __wcserror(_Str: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcsicmp(_Str1: *const u16, _Str2: *const u16)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsicmp_l(_Str1: *const u16, _Str2: *const u16,
                          _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsnicmp(_Str1: *const u16, _Str2: *const u16,
                         _MaxCount: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsnicmp_l(_Str1: *const u16, _Str2: *const u16,
                           _MaxCount: usize, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsnset(_Str: *mut u16, _Val: u16, _MaxCount: usize)
         -> *mut u16;
    }
    extern "C" {
        pub fn _wcsrev(_Str: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcsset(_Str: *mut u16, _Val: u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcslwr(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcslwr_l(_String: *mut u16, _Locale: root::_locale_t)
         -> *mut u16;
    }
    extern "C" {
        pub fn _wcsupr(_String: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wcsupr_l(_String: *mut u16, _Locale: root::_locale_t)
         -> *mut u16;
    }
    extern "C" {
        pub fn wcsxfrm(_Dst: *mut u16, _Src: *const u16, _MaxCount: usize)
         -> usize;
    }
    extern "C" {
        pub fn _wcsxfrm_l(_Dst: *mut u16, _Src: *const u16, _MaxCount: usize,
                          _Locale: root::_locale_t) -> usize;
    }
    extern "C" {
        pub fn wcscoll(_Str1: *const u16, _Str2: *const u16)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcscoll_l(_Str1: *const u16, _Str2: *const u16,
                          _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsicoll(_Str1: *const u16, _Str2: *const u16)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsicoll_l(_Str1: *const u16, _Str2: *const u16,
                           _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsncoll(_Str1: *const u16, _Str2: *const u16,
                         _MaxCount: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsncoll_l(_Str1: *const u16, _Str2: *const u16,
                           _MaxCount: usize, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsnicoll(_Str1: *const u16, _Str2: *const u16,
                          _MaxCount: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wcsnicoll_l(_Str1: *const u16, _Str2: *const u16,
                            _MaxCount: usize, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsdup(_Str: *const u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsicmp(_Str1: *const u16, _Str2: *const u16)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsnicmp(_Str1: *const u16, _Str2: *const u16,
                        _MaxCount: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsnset(_Str: *mut u16, _Val: u16, _MaxCount: usize)
         -> *mut u16;
    }
    extern "C" {
        pub fn wcsrev(_Str: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsset(_Str: *mut u16, _Val: u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcslwr(_Str: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsupr(_Str: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn wcsicoll(_Str1: *const u16, _Str2: *const u16)
         -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct tm {
        pub _bindgen_opaque_blob: [u32; 9usize],
    }
    impl Clone for tm {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        pub fn _wasctime(_Tm: *const root::tm) -> *mut u16;
    }
    extern "C" {
        pub fn _wctime32(_Time: *const root::__time32_t) -> *mut u16;
    }
    extern "C" {
        pub fn wcsftime(_Buf: *mut u16, _SizeInWords: usize,
                        _Format: *const u16, _Tm: *const root::tm) -> usize;
    }
    extern "C" {
        pub fn _wcsftime_l(_Buf: *mut u16, _SizeInWords: usize,
                           _Format: *const u16, _Tm: *const root::tm,
                           _Locale: root::_locale_t) -> usize;
    }
    extern "C" {
        pub fn _wstrdate(_Buffer: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wstrtime(_Buffer: *mut u16) -> *mut u16;
    }
    extern "C" {
        pub fn _wctime64(_Time: *const root::__time64_t) -> *mut u16;
    }
    extern "C" {
        pub fn _wctime(_Time: *const root::time_t) -> *mut u16;
    }
    pub type mbstate_t = u32;
    pub type _Wint_t = u16;
    extern "C" {
        pub fn btowc(arg1: ::std::os::raw::c_int) -> root::wint_t;
    }
    extern "C" {
        pub fn mbrlen(_Ch: *const ::std::os::raw::c_char, _SizeInBytes: usize,
                      _State: *mut root::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn mbrtowc(_DstCh: *mut u16,
                       _SrcCh: *const ::std::os::raw::c_char,
                       _SizeInBytes: usize, _State: *mut root::mbstate_t)
         -> usize;
    }
    extern "C" {
        pub fn mbsrtowcs(_Dest: *mut u16,
                         _PSrc: *mut *const ::std::os::raw::c_char,
                         _Count: usize, _State: *mut root::mbstate_t)
         -> usize;
    }
    extern "C" {
        pub fn wcrtomb(_Dest: *mut ::std::os::raw::c_char, _Source: u16,
                       _State: *mut root::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn wcsrtombs(_Dest: *mut ::std::os::raw::c_char,
                         _PSource: *mut *const u16, _Count: usize,
                         _State: *mut root::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn wctob(_WCh: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wmemset(s: *mut u16, c: u16, n: usize) -> *mut u16;
    }
    extern "C" {
        pub fn wmemchr(s: *const u16, c: u16, n: usize) -> *mut u16;
    }
    extern "C" {
        pub fn wmemcmp(s1: *const u16, s2: *const u16, n: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wmemcpy(s1: *mut u16, s2: *const u16, n: usize) -> *mut u16;
    }
    extern "C" {
        pub fn wmempcpy(_Dst: *mut u16, _Src: *const u16, _Size: usize)
         -> *mut u16;
    }
    extern "C" {
        pub fn wmemmove(s1: *mut u16, s2: *const u16, n: usize) -> *mut u16;
    }
    extern "C" {
        pub fn fwide(stream: *mut root::FILE, mode: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbsinit(ps: *const root::mbstate_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcstoll(nptr: *const u16, endptr: *mut *mut u16,
                       base: ::std::os::raw::c_int)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstoull(nptr: *const u16, endptr: *mut *mut u16,
                        base: ::std::os::raw::c_int)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn memmove(_Dst: *mut ::std::os::raw::c_void,
                       _Src: *const ::std::os::raw::c_void, _MaxCount: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcpy(_Dst: *mut ::std::os::raw::c_void,
                      _Src: *const ::std::os::raw::c_void, _MaxCount: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn __mingw_str_wide_utf8(wptr: *const u16,
                                     mbptr: *mut *mut ::std::os::raw::c_char,
                                     buflen: *mut usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_str_utf8_wide(mbptr: *const ::std::os::raw::c_char,
                                     wptr: *mut *mut u16, buflen: *mut usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_str_free(ptr: *mut ::std::os::raw::c_void);
    }
    pub type fpos_t = u64;
    extern "C" {
        pub fn __mingw_sscanf(_Src: *const ::std::os::raw::c_char,
                              _Format: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vsscanf(_Str: *const ::std::os::raw::c_char,
                               Format: *const ::std::os::raw::c_char,
                               argp: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_scanf(_Format: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vscanf(Format: *const ::std::os::raw::c_char,
                              argp: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_fscanf(_File: *mut root::FILE,
                              _Format: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vfscanf(fp: *mut root::FILE,
                               Format: *const ::std::os::raw::c_char,
                               argp: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vsnprintf(_DstBuf: *mut ::std::os::raw::c_char,
                                 _MaxCount: usize,
                                 _Format: *const ::std::os::raw::c_char,
                                 _ArgList: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_snprintf(s: *mut ::std::os::raw::c_char, n: usize,
                                format: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_printf(arg1: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vprintf(arg1: *const ::std::os::raw::c_char,
                               arg2: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_fprintf(arg1: *mut root::FILE,
                               arg2: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vfprintf(arg1: *mut root::FILE,
                                arg2: *const ::std::os::raw::c_char,
                                arg3: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_sprintf(arg1: *mut ::std::os::raw::c_char,
                               arg2: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vsprintf(arg1: *mut ::std::os::raw::c_char,
                                arg2: *const ::std::os::raw::c_char,
                                arg3: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                                arg2: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingw_vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: root::va_list)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _filbuf(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _flsbuf(_Ch: ::std::os::raw::c_int, _File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fsopen(_Filename: *const ::std::os::raw::c_char,
                       _Mode: *const ::std::os::raw::c_char,
                       _ShFlag: ::std::os::raw::c_int) -> *mut root::FILE;
    }
    extern "C" {
        pub fn clearerr(_File: *mut root::FILE);
    }
    extern "C" {
        pub fn fclose(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fcloseall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fdopen(_FileHandle: ::std::os::raw::c_int,
                       _Mode: *const ::std::os::raw::c_char)
         -> *mut root::FILE;
    }
    extern "C" {
        pub fn feof(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fgetchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetpos(_File: *mut root::FILE, _Pos: *mut root::fpos_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetpos64(_File: *mut root::FILE, _Pos: *mut root::fpos_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(_Buf: *mut ::std::os::raw::c_char,
                     _MaxCount: ::std::os::raw::c_int, _File: *mut root::FILE)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _fileno(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _tempnam(_DirName: *const ::std::os::raw::c_char,
                        _FilePrefix: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _flushall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(_Filename: *const ::std::os::raw::c_char,
                     _Mode: *const ::std::os::raw::c_char) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopen64(filename: *const ::std::os::raw::c_char,
                       mode: *const ::std::os::raw::c_char)
         -> *mut root::FILE;
    }
    extern "C" {
        pub fn fputc(_Ch: ::std::os::raw::c_int, _File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputs(_Str: *const ::std::os::raw::c_char,
                     _File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(_DstBuf: *mut ::std::os::raw::c_void,
                     _ElementSize: usize, _Count: usize,
                     _File: *mut root::FILE) -> usize;
    }
    extern "C" {
        pub fn freopen(_Filename: *const ::std::os::raw::c_char,
                       _Mode: *const ::std::os::raw::c_char,
                       _File: *mut root::FILE) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fsetpos(_File: *mut root::FILE, _Pos: *const root::fpos_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos64(_File: *mut root::FILE, _Pos: *const root::fpos_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fseek(_File: *mut root::FILE, _Offset: ::std::os::raw::c_long,
                     _Origin: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fseeko64(stream: *mut root::FILE, offset: root::_off64_t,
                        whence: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fseeko(stream: *mut root::FILE, offset: root::_off_t,
                      whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(_File: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn ftello(stream: *mut root::FILE) -> root::_off_t;
    }
    extern "C" {
        pub fn ftello64(stream: *mut root::FILE) -> root::_off64_t;
    }
    extern "C" {
        pub fn _fseeki64(_File: *mut root::FILE,
                         _Offset: ::std::os::raw::c_longlong,
                         _Origin: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _ftelli64(_File: *mut root::FILE)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn fwrite(_Str: *const ::std::os::raw::c_void, _Size: usize,
                      _Count: usize, _File: *mut root::FILE) -> usize;
    }
    extern "C" {
        pub fn getc(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _getmaxstdio() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn gets(_Buffer: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _getw(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn _pclose(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _popen(_Command: *const ::std::os::raw::c_char,
                      _Mode: *const ::std::os::raw::c_char)
         -> *mut root::FILE;
    }
    extern "C" {
        pub fn putc(_Ch: ::std::os::raw::c_int, _File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(_Str: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _putw(_Word: ::std::os::raw::c_int, _File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn remove(_Filename: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(_OldFilename: *const ::std::os::raw::c_char,
                      _NewFilename: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _unlink(_Filename: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlink(_Filename: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rewind(_File: *mut root::FILE);
    }
    extern "C" {
        pub fn _rmtmp() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setbuf(_File: *mut root::FILE,
                      _Buffer: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn _setmaxstdio(_Max: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _set_output_format(_Format: ::std::os::raw::c_uint)
         -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn _get_output_format() -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn setvbuf(_File: *mut root::FILE,
                       _Buf: *mut ::std::os::raw::c_char,
                       _Mode: ::std::os::raw::c_int, _Size: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _scprintf(_Format: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _snscanf(_Src: *const ::std::os::raw::c_char, _MaxCount: usize,
                        _Format: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ungetc(_Ch: ::std::os::raw::c_int, _File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _snprintf(_Dest: *mut ::std::os::raw::c_char, _Count: usize,
                         _Format: *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vsnprintf(_Dest: *mut ::std::os::raw::c_char, _Count: usize,
                          _Format: *const ::std::os::raw::c_char,
                          _Args: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _vscprintf(_Format: *const ::std::os::raw::c_char,
                          _ArgList: root::va_list) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _lock_file(_File: *mut root::FILE);
    }
    extern "C" {
        pub fn _unlock_file(_File: *mut root::FILE);
    }
    extern "C" {
        pub fn _fclose_nolock(_File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fflush_nolock(_File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fread_nolock(_DstBuf: *mut ::std::os::raw::c_void,
                             _ElementSize: usize, _Count: usize,
                             _File: *mut root::FILE) -> usize;
    }
    extern "C" {
        pub fn _fseek_nolock(_File: *mut root::FILE,
                             _Offset: ::std::os::raw::c_long,
                             _Origin: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _ftell_nolock(_File: *mut root::FILE)
         -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn _fseeki64_nolock(_File: *mut root::FILE,
                                _Offset: ::std::os::raw::c_longlong,
                                _Origin: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _ftelli64_nolock(_File: *mut root::FILE)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _fwrite_nolock(_DstBuf: *const ::std::os::raw::c_void,
                              _Size: usize, _Count: usize,
                              _File: *mut root::FILE) -> usize;
    }
    extern "C" {
        pub fn _ungetc_nolock(_Ch: ::std::os::raw::c_int,
                              _File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tempnam(_Directory: *const ::std::os::raw::c_char,
                       _FilePrefix: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fcloseall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fdopen(_FileHandle: ::std::os::raw::c_int,
                      _Format: *const ::std::os::raw::c_char)
         -> *mut root::FILE;
    }
    extern "C" {
        pub fn fgetchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fileno(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn flushall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getw(_File: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putw(_Ch: ::std::os::raw::c_int, _File: *mut root::FILE)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rmtmp() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _spawnv(_Mode: ::std::os::raw::c_int,
                       _Filename: *const ::std::os::raw::c_char,
                       _ArgList: *const *const ::std::os::raw::c_char)
         -> isize;
    }
    extern "C" {
        pub fn _spawnve(_Mode: ::std::os::raw::c_int,
                        _Filename: *const ::std::os::raw::c_char,
                        _ArgList: *const *const ::std::os::raw::c_char,
                        _Env: *const *const ::std::os::raw::c_char) -> isize;
    }
    extern "C" {
        pub fn _spawnvp(_Mode: ::std::os::raw::c_int,
                        _Filename: *const ::std::os::raw::c_char,
                        _ArgList: *const *const ::std::os::raw::c_char)
         -> isize;
    }
    extern "C" {
        pub fn _spawnvpe(_Mode: ::std::os::raw::c_int,
                         _Filename: *const ::std::os::raw::c_char,
                         _ArgList: *const *const ::std::os::raw::c_char,
                         _Env: *const *const ::std::os::raw::c_char) -> isize;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct lconv {
        pub _bindgen_opaque_blob: [u64; 11usize],
    }
    impl Clone for lconv {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        pub fn _configthreadlocale(_Flag: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setlocale(_Category: ::std::os::raw::c_int,
                         _Locale: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn localeconv() -> *mut root::lconv;
    }
    extern "C" {
        pub fn _get_current_locale() -> root::_locale_t;
    }
    extern "C" {
        pub fn _create_locale(_Category: ::std::os::raw::c_int,
                              _Locale: *const ::std::os::raw::c_char)
         -> root::_locale_t;
    }
    extern "C" {
        pub fn _free_locale(_Locale: root::_locale_t);
    }
    extern "C" {
        pub fn __get_current_locale() -> root::_locale_t;
    }
    extern "C" {
        pub fn __create_locale(_Category: ::std::os::raw::c_int,
                               _Locale: *const ::std::os::raw::c_char)
         -> root::_locale_t;
    }
    extern "C" {
        pub fn __free_locale(_Locale: root::_locale_t);
    }
    extern "C" {
        #[link_name = "__newclmap"]
        pub static mut __newclmap: [::std::os::raw::c_uchar; 0usize];
    }
    extern "C" {
        #[link_name = "__newcumap"]
        pub static mut __newcumap: [::std::os::raw::c_uchar; 0usize];
    }
    extern "C" {
        #[link_name = "__ptlocinfo"]
        pub static mut __ptlocinfo: root::pthreadlocinfo;
    }
    extern "C" {
        #[link_name = "__ptmbcinfo"]
        pub static mut __ptmbcinfo: root::pthreadmbcinfo;
    }
    extern "C" {
        #[link_name = "__globallocalestatus"]
        pub static mut __globallocalestatus: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "__locale_changed"]
        pub static mut __locale_changed: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "__initiallocinfo"]
        pub static mut __initiallocinfo: root::threadlocaleinfostruct;
    }
    extern "C" {
        #[link_name = "__initiallocalestructinfo"]
        pub static mut __initiallocalestructinfo: root::_locale_tstruct;
    }
    extern "C" {
        pub fn __updatetlocinfo() -> root::pthreadlocinfo;
    }
    extern "C" {
        pub fn __updatetmbcinfo() -> root::pthreadmbcinfo;
    }
    extern "C" {
        pub fn _isctype(_C: ::std::os::raw::c_int,
                        _Type: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isctype_l(_C: ::std::os::raw::c_int,
                          _Type: ::std::os::raw::c_int,
                          _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isalpha_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isupper_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _islower_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isdigit_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isxdigit_l(_C: ::std::os::raw::c_int,
                           _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isspace_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _ispunct_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalnum(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isalnum_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isprint_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isgraph_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _iscntrl_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _tolower_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _toupper_l(_C: ::std::os::raw::c_int, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __toascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __iscsymf(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __iscsym(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "__imp___mb_cur_max"]
        pub static mut __imp___mb_cur_max: *mut ::std::os::raw::c_int;
    }
    pub mod __cxxabiv1 {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        pub struct __forced_unwind__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct __forced_unwind {
            pub _bindgen_opaque_blob: u64,
        }
        impl Clone for __forced_unwind {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __class_type_info {
            _unused: [u8; 0],
        }
    }
    pub type __gthread_key_t = u32;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __gthread_once_t {
        pub _bindgen_opaque_blob: [u32; 2usize],
    }
    impl Clone for __gthread_once_t {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __gthread_mutex_t {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for __gthread_mutex_t {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __gthread_recursive_mutex_t {
        pub _bindgen_opaque_blob: [u64; 3usize],
    }
    impl Clone for __gthread_recursive_mutex_t {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        #[link_name = "_CRT_MT"]
        pub static mut _CRT_MT: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __mingwthr_key_dtor(arg1: ::std::os::raw::c_ulong,
                                   arg2:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut ::std::os::raw::c_void)>)
         -> ::std::os::raw::c_int;
    }
    // extern "C" {
    //     pub fn __gthr_win32_once(arg1: *mut root::std::__gthread_once_t,
    //                              arg2:
    //                                  ::std::option::Option<unsafe extern "C" fn()>)
    //      -> ::std::os::raw::c_int;
    // }
    extern "C" {
        pub fn __gthr_win32_key_create(arg1: *mut root::__gthread_key_t,
                                       arg2:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut ::std::os::raw::c_void)>)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_key_delete(arg1: root::__gthread_key_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_getspecific(arg1: root::__gthread_key_t)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn __gthr_win32_setspecific(arg1: root::__gthread_key_t,
                                        arg2: *const ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_mutex_init_function(arg1:
                                                    *mut root::__gthread_mutex_t);
    }
    extern "C" {
        pub fn __gthr_win32_mutex_lock(arg1: *mut root::__gthread_mutex_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_mutex_trylock(arg1: *mut root::__gthread_mutex_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_mutex_unlock(arg1: *mut root::__gthread_mutex_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_recursive_mutex_init_function(arg1:
                                                              *mut root::__gthread_recursive_mutex_t);
    }
    extern "C" {
        pub fn __gthr_win32_recursive_mutex_lock(arg1:
                                                     *mut root::__gthread_recursive_mutex_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_recursive_mutex_trylock(arg1:
                                                        *mut root::__gthread_recursive_mutex_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_recursive_mutex_unlock(arg1:
                                                       *mut root::__gthread_recursive_mutex_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __gthr_win32_mutex_destroy(arg1: *mut root::__gthread_mutex_t);
    }
    extern "C" {
        pub fn __gthr_win32_recursive_mutex_destroy(arg1:
                                                        *mut root::__gthread_recursive_mutex_t)
         -> ::std::os::raw::c_int;
    }
    pub type _onexit_t = u64;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _div_t {
        pub _bindgen_opaque_blob: [u32; 2usize],
    }
    impl Clone for _div_t {
        fn clone(&self) -> Self { *self }
    }
    pub type div_t = [u32; 2usize];
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _ldiv_t {
        pub _bindgen_opaque_blob: [u32; 2usize],
    }
    impl Clone for _ldiv_t {
        fn clone(&self) -> Self { *self }
    }
    pub type ldiv_t = [u32; 2usize];
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _LDOUBLE {
        pub _bindgen_opaque_blob: [u8; 10usize],
    }
    impl Clone for _LDOUBLE {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _CRT_DOUBLE {
        pub _bindgen_opaque_blob: u64,
    }
    impl Clone for _CRT_DOUBLE {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _CRT_FLOAT {
        pub _bindgen_opaque_blob: u32,
    }
    impl Clone for _CRT_FLOAT {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    pub struct _LONGDOUBLE {
        pub _bindgen_opaque_blob: [u8; 16usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _LDBL12 {
        pub _bindgen_opaque_blob: [u8; 12usize],
    }
    impl Clone for _LDBL12 {
        fn clone(&self) -> Self { *self }
    }
    pub type _purecall_handler = u64;
    extern "C" {
        pub fn _set_purecall_handler(_Handler: root::_purecall_handler)
         -> root::_purecall_handler;
    }
    extern "C" {
        pub fn _get_purecall_handler() -> root::_purecall_handler;
    }
    pub type _invalid_parameter_handler = u64;
    extern "C" {
        pub fn _set_invalid_parameter_handler(_Handler:
                                                  root::_invalid_parameter_handler)
         -> root::_invalid_parameter_handler;
    }
    extern "C" {
        pub fn _get_invalid_parameter_handler()
         -> root::_invalid_parameter_handler;
    }
    extern "C" {
        pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong)
         -> root::errno_t;
    }
    extern "C" {
        #[link_name = "_sys_errlist"]
        pub static mut _sys_errlist: [*mut ::std::os::raw::c_char; 1usize];
    }
    extern "C" {
        #[link_name = "_sys_nerr"]
        pub static mut _sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "__imp___argc"]
        pub static mut __imp___argc: *mut ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "__imp___argv"]
        pub static mut __imp___argv: *mut *mut *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "__imp___wargv"]
        pub static mut __imp___wargv: *mut *mut *mut u16;
    }
    extern "C" {
        #[link_name = "__imp__environ"]
        pub static mut __imp__environ: *mut *mut *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "__imp__wenviron"]
        pub static mut __imp__wenviron: *mut *mut *mut u16;
    }
    extern "C" {
        #[link_name = "__imp__pgmptr"]
        pub static mut __imp__pgmptr: *mut *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "__imp__wpgmptr"]
        pub static mut __imp__wpgmptr: *mut *mut u16;
    }
    extern "C" {
        pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _get_wpgmptr(_Value: *mut *mut u16) -> root::errno_t;
    }
    extern "C" {
        #[link_name = "__imp__fmode"]
        pub static mut __imp__fmode: *mut ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> root::errno_t;
    }
    extern "C" {
        pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int)
         -> root::errno_t;
    }
    extern "C" {
        #[link_name = "__imp__osplatform"]
        pub static mut __imp__osplatform: *mut ::std::os::raw::c_uint;
    }
    extern "C" {
        #[link_name = "__imp__osver"]
        pub static mut __imp__osver: *mut ::std::os::raw::c_uint;
    }
    extern "C" {
        #[link_name = "__imp__winver"]
        pub static mut __imp__winver: *mut ::std::os::raw::c_uint;
    }
    extern "C" {
        #[link_name = "__imp__winmajor"]
        pub static mut __imp__winmajor: *mut ::std::os::raw::c_uint;
    }
    extern "C" {
        #[link_name = "__imp__winminor"]
        pub static mut __imp__winminor: *mut ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn _get_osplatform(_Value: *mut ::std::os::raw::c_uint)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _get_osver(_Value: *mut ::std::os::raw::c_uint)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _get_winver(_Value: *mut ::std::os::raw::c_uint)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _get_winmajor(_Value: *mut ::std::os::raw::c_uint)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _get_winminor(_Value: *mut ::std::os::raw::c_uint)
         -> root::errno_t;
    }
    extern "C" {
        pub fn exit(_Code: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _exit(_Code: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(arg1: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn _set_abort_behavior(_Flags: ::std::os::raw::c_uint,
                                   _Mask: ::std::os::raw::c_uint)
         -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn abs(_X: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(_X: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn _abs64(arg1: ::std::os::raw::c_longlong)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn _atof_l(_String: *const ::std::os::raw::c_char,
                       _Locale: root::_locale_t) -> f64;
    }
    extern "C" {
        pub fn atoi(_Str: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _atoi_l(_Str: *const ::std::os::raw::c_char,
                       _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(_Str: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn _atol_l(_Str: *const ::std::os::raw::c_char,
                       _Locale: root::_locale_t) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn bsearch(_Key: *const ::std::os::raw::c_void,
                       _Base: *const ::std::os::raw::c_void,
                       _NumOfElements: usize, _SizeOfElements: usize,
                       _PtFuncCompare:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *const ::std::os::raw::c_void,
                                                                      arg2:
                                                                          *const ::std::os::raw::c_void)
                                                     ->
                                                         ::std::os::raw::c_int>)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(_Base: *mut ::std::os::raw::c_void,
                     _NumOfElements: usize, _SizeOfElements: usize,
                     _PtFuncCompare:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *const ::std::os::raw::c_void,
                                                                    arg2:
                                                                        *const ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>);
    }
    extern "C" {
        pub fn _byteswap_ushort(_Short: ::std::os::raw::c_ushort)
         -> ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn _byteswap_ulong(_Long: ::std::os::raw::c_ulong)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn _byteswap_uint64(_Int64: ::std::os::raw::c_ulonglong)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn div(_Numerator: ::std::os::raw::c_int,
                   _Denominator: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn getenv(_VarName: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _itoa(_Value: ::std::os::raw::c_int,
                     _Dest: *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _i64toa(_Val: ::std::os::raw::c_longlong,
                       _DstBuf: *mut ::std::os::raw::c_char,
                       _Radix: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _ui64toa(_Val: ::std::os::raw::c_ulonglong,
                        _DstBuf: *mut ::std::os::raw::c_char,
                        _Radix: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _atoi64(_String: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _atoi64_l(_String: *const ::std::os::raw::c_char,
                         _Locale: root::_locale_t)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _strtoi64(_String: *const ::std::os::raw::c_char,
                         _EndPtr: *mut *mut ::std::os::raw::c_char,
                         _Radix: ::std::os::raw::c_int)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _strtoi64_l(_String: *const ::std::os::raw::c_char,
                           _EndPtr: *mut *mut ::std::os::raw::c_char,
                           _Radix: ::std::os::raw::c_int,
                           _Locale: root::_locale_t)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn _strtoui64(_String: *const ::std::os::raw::c_char,
                          _EndPtr: *mut *mut ::std::os::raw::c_char,
                          _Radix: ::std::os::raw::c_int)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn _strtoui64_l(_String: *const ::std::os::raw::c_char,
                            _EndPtr: *mut *mut ::std::os::raw::c_char,
                            _Radix: ::std::os::raw::c_int,
                            _Locale: root::_locale_t)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn ldiv(_Numerator: ::std::os::raw::c_long,
                    _Denominator: ::std::os::raw::c_long) -> root::ldiv_t;
    }
    extern "C" {
        pub fn _ltoa(_Value: ::std::os::raw::c_long,
                     _Dest: *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _mblen_l(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize,
                        _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _mbstrlen(_Str: *const ::std::os::raw::c_char) -> usize;
    }
    extern "C" {
        pub fn _mbstrlen_l(_Str: *const ::std::os::raw::c_char,
                           _Locale: root::_locale_t) -> usize;
    }
    extern "C" {
        pub fn _mbstrnlen(_Str: *const ::std::os::raw::c_char,
                          _MaxCount: usize) -> usize;
    }
    extern "C" {
        pub fn _mbstrnlen_l(_Str: *const ::std::os::raw::c_char,
                            _MaxCount: usize, _Locale: root::_locale_t)
         -> usize;
    }
    extern "C" {
        pub fn mbtowc(_DstCh: *mut u16, _SrcCh: *const ::std::os::raw::c_char,
                      _SrcSizeInBytes: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _mbtowc_l(_DstCh: *mut u16,
                         _SrcCh: *const ::std::os::raw::c_char,
                         _SrcSizeInBytes: usize, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(_Dest: *mut u16,
                        _Source: *const ::std::os::raw::c_char,
                        _MaxCount: usize) -> usize;
    }
    extern "C" {
        pub fn _mbstowcs_l(_Dest: *mut u16,
                           _Source: *const ::std::os::raw::c_char,
                           _MaxCount: usize, _Locale: root::_locale_t)
         -> usize;
    }
    extern "C" {
        pub fn mkstemp(template_name: *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _set_error_mode(_Mode: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(_Seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn strtold(arg1: *const ::std::os::raw::c_char,
                       arg2: *mut *mut ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn __strtod(arg1: *const ::std::os::raw::c_char,
                        arg2: *mut *mut ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn __mingw_strtof(arg1: *const ::std::os::raw::c_char,
                              arg2: *mut *mut ::std::os::raw::c_char) -> f32;
    }
    extern "C" {
        pub fn __mingw_strtod(arg1: *const ::std::os::raw::c_char,
                              arg2: *mut *mut ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn __mingw_strtold(arg1: *const ::std::os::raw::c_char,
                               arg2: *mut *mut ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn _strtod_l(_Str: *const ::std::os::raw::c_char,
                         _EndPtr: *mut *mut ::std::os::raw::c_char,
                         _Locale: root::_locale_t) -> f64;
    }
    extern "C" {
        pub fn strtol(_Str: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Radix: ::std::os::raw::c_int)
         -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn _strtol_l(_Str: *const ::std::os::raw::c_char,
                         _EndPtr: *mut *mut ::std::os::raw::c_char,
                         _Radix: ::std::os::raw::c_int,
                         _Locale: root::_locale_t) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(_Str: *const ::std::os::raw::c_char,
                       _EndPtr: *mut *mut ::std::os::raw::c_char,
                       _Radix: ::std::os::raw::c_int)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn _strtoul_l(_Str: *const ::std::os::raw::c_char,
                          _EndPtr: *mut *mut ::std::os::raw::c_char,
                          _Radix: ::std::os::raw::c_int,
                          _Locale: root::_locale_t)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn system(_Command: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _ultoa(_Value: ::std::os::raw::c_ulong,
                      _Dest: *mut ::std::os::raw::c_char,
                      _Radix: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: u16)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _wctomb_l(_MbCh: *mut ::std::os::raw::c_char, _WCh: u16,
                         _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcstombs(_Dest: *mut ::std::os::raw::c_char,
                        _Source: *const u16, _MaxCount: usize) -> usize;
    }
    extern "C" {
        pub fn _wcstombs_l(_Dest: *mut ::std::os::raw::c_char,
                           _Source: *const u16, _MaxCount: usize,
                           _Locale: root::_locale_t) -> usize;
    }
    extern "C" {
        pub fn calloc(_NumOfElements: usize, _SizeOfElements: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(_Memory: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn malloc(_Size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(_Memory: *mut ::std::os::raw::c_void, _NewSize: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _recalloc(_Memory: *mut ::std::os::raw::c_void, _Count: usize,
                         _Size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_free(_Memory: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn _aligned_malloc(_Size: usize, _Alignment: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_offset_malloc(_Size: usize, _Alignment: usize,
                                      _Offset: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_realloc(_Memory: *mut ::std::os::raw::c_void,
                                _Size: usize, _Alignment: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_recalloc(_Memory: *mut ::std::os::raw::c_void,
                                 _Count: usize, _Size: usize,
                                 _Alignment: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_offset_realloc(_Memory: *mut ::std::os::raw::c_void,
                                       _Size: usize, _Alignment: usize,
                                       _Offset: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _aligned_offset_recalloc(_Memory: *mut ::std::os::raw::c_void,
                                        _Count: usize, _Size: usize,
                                        _Alignment: usize, _Offset: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _putenv(_EnvString: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fullpath(_FullPath: *mut ::std::os::raw::c_char,
                         _Path: *const ::std::os::raw::c_char,
                         _SizeInBytes: usize) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _ecvt(_Val: f64, _NumOfDigits: ::std::os::raw::c_int,
                     _PtDec: *mut ::std::os::raw::c_int,
                     _PtSign: *mut ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _fcvt(_Val: f64, _NumOfDec: ::std::os::raw::c_int,
                     _PtDec: *mut ::std::os::raw::c_int,
                     _PtSign: *mut ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _gcvt(_Val: f64, _NumOfDigits: ::std::os::raw::c_int,
                     _DstBuf: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _atodbl(_Result: *mut root::_CRT_DOUBLE,
                       _Str: *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _atoldbl(_Result: *mut root::_LDOUBLE,
                        _Str: *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _atoflt(_Result: *mut root::_CRT_FLOAT,
                       _Str: *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _atodbl_l(_Result: *mut root::_CRT_DOUBLE,
                         _Str: *mut ::std::os::raw::c_char,
                         _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _atoldbl_l(_Result: *mut root::_LDOUBLE,
                          _Str: *mut ::std::os::raw::c_char,
                          _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _atoflt_l(_Result: *mut root::_CRT_FLOAT,
                         _Str: *mut ::std::os::raw::c_char,
                         _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _lrotl(arg1: ::std::os::raw::c_ulong,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn _lrotr(arg1: ::std::os::raw::c_ulong,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn _makepath(_Path: *mut ::std::os::raw::c_char,
                         _Drive: *const ::std::os::raw::c_char,
                         _Dir: *const ::std::os::raw::c_char,
                         _Filename: *const ::std::os::raw::c_char,
                         _Ext: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn _onexit(_Func: root::_onexit_t) -> root::_onexit_t;
    }
    extern "C" {
        pub fn _rotl64(_Val: ::std::os::raw::c_ulonglong,
                       _Shift: ::std::os::raw::c_int)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn _rotr64(Value: ::std::os::raw::c_ulonglong,
                       Shift: ::std::os::raw::c_int)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn _rotr(_Val: ::std::os::raw::c_uint,
                     _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn _rotl(_Val: ::std::os::raw::c_uint,
                     _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn _searchenv(_Filename: *const ::std::os::raw::c_char,
                          _EnvVar: *const ::std::os::raw::c_char,
                          _ResultPath: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn _splitpath(_FullPath: *const ::std::os::raw::c_char,
                          _Drive: *mut ::std::os::raw::c_char,
                          _Dir: *mut ::std::os::raw::c_char,
                          _Filename: *mut ::std::os::raw::c_char,
                          _Ext: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn _swab(_Buf1: *mut ::std::os::raw::c_char,
                     _Buf2: *mut ::std::os::raw::c_char,
                     _SizeInBytes: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _beep(_Frequency: ::std::os::raw::c_uint,
                     _Duration: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
    }
    extern "C" {
        pub fn ecvt(_Val: f64, _NumOfDigits: ::std::os::raw::c_int,
                    _PtDec: *mut ::std::os::raw::c_int,
                    _PtSign: *mut ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fcvt(_Val: f64, _NumOfDec: ::std::os::raw::c_int,
                    _PtDec: *mut ::std::os::raw::c_int,
                    _PtSign: *mut ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gcvt(_Val: f64, _NumOfDigits: ::std::os::raw::c_int,
                    _DstBuf: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn itoa(_Val: ::std::os::raw::c_int,
                    _DstBuf: *mut ::std::os::raw::c_char,
                    _Radix: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ltoa(_Val: ::std::os::raw::c_long,
                    _DstBuf: *mut ::std::os::raw::c_char,
                    _Radix: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn putenv(_EnvString: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn swab(_Buf1: *mut ::std::os::raw::c_char,
                    _Buf2: *mut ::std::os::raw::c_char,
                    _SizeInBytes: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn ultoa(_Val: ::std::os::raw::c_ulong,
                     _Dstbuf: *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn onexit(_Func: root::_onexit_t) -> root::_onexit_t;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct lldiv_t {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for lldiv_t {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        pub fn lldiv(arg1: ::std::os::raw::c_longlong,
                     arg2: ::std::os::raw::c_longlong) -> root::lldiv_t;
    }
    extern "C" {
        pub fn llabs(arg1: ::std::os::raw::c_longlong)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoll(arg1: *const ::std::os::raw::c_char,
                       arg2: *mut *mut ::std::os::raw::c_char,
                       arg3: ::std::os::raw::c_int)
         -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(arg1: *const ::std::os::raw::c_char,
                        arg2: *mut *mut ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int)
         -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn atoll(arg1: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_longlong;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _heapinfo {
        pub _bindgen_opaque_blob: [u64; 3usize],
    }
    impl Clone for _heapinfo {
        fn clone(&self) -> Self { *self }
    }
    pub type _HEAPINFO = [u64; 3usize];
    extern "C" {
        #[link_name = "_amblksiz"]
        pub static mut _amblksiz: ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn __mingw_aligned_malloc(_Size: usize, _Alignment: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn __mingw_aligned_free(_Memory: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn __mingw_aligned_offset_realloc(_Memory:
                                                  *mut ::std::os::raw::c_void,
                                              _Size: usize, _Alignment: usize,
                                              _Offset: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn __mingw_aligned_realloc(_Memory: *mut ::std::os::raw::c_void,
                                       _Size: usize, _Offset: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _resetstkoflw() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _set_malloc_crt_max_wait(_NewValue: ::std::os::raw::c_ulong)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn _expand(_Memory: *mut ::std::os::raw::c_void, _NewSize: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _msize(_Memory: *mut ::std::os::raw::c_void) -> usize;
    }
    extern "C" {
        pub fn _get_sbh_threshold() -> usize;
    }
    extern "C" {
        pub fn _set_sbh_threshold(_NewValue: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _set_amblksiz(_Value: usize) -> root::errno_t;
    }
    extern "C" {
        pub fn _get_amblksiz(_Value: *mut usize) -> root::errno_t;
    }
    extern "C" {
        pub fn _heapadd(_Memory: *mut ::std::os::raw::c_void, _Size: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _heapchk() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _heapmin() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _heapset(_Fill: ::std::os::raw::c_uint)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _heapwalk(_EntryInfo: *mut root::_HEAPINFO)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _heapused(_Used: *mut usize, _Commit: *mut usize) -> usize;
    }
    extern "C" {
        pub fn _get_heap_handle() -> isize;
    }
    pub type octave_jmp_buf = [u8; 256usize];
    extern "C" {
        #[link_name = "current_context"]
        pub static mut current_context: root::octave_jmp_buf;
    }
    extern "C" {
        pub fn octave_save_current_context(arg1: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn octave_restore_current_context(arg1:
                                                  *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn octave_jump_to_enclosing_context();
    }
    pub mod octave {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        pub struct execution_exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct execution_exception {
            pub _bindgen_opaque_blob: [u64; 2usize],
        }
        impl Clone for execution_exception {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct exit_exception {
            pub _bindgen_opaque_blob: [u32; 2usize],
        }
        impl Clone for exit_exception {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct interrupt_exception {
            pub _bindgen_opaque_blob: u8,
            pub _address: u8,
        }
        impl Clone for interrupt_exception {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct numeric_limits {
            pub _address: u8,
        }
        pub mod math {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "_ZN6octave4math5is_NAEd"]
                pub fn is_NA(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5is_NAEf"]
                pub fn is_NA1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5is_NAERKSt7complexIdE"]
                pub fn is_NA2(x: *const root::Complex) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5is_NAERKSt7complexIfE"]
                pub fn is_NA3(x: *const root::FloatComplex) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math12is_NaN_or_NAERKSt7complexIdE"]
                pub fn is_NaN_or_NA(x: *const root::Complex) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math12is_NaN_or_NAERKSt7complexIfE"]
                pub fn is_NaN_or_NA1(x: *const root::FloatComplex) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8copysignEdd"]
                pub fn copysign(x: f64, y: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8copysignEff"]
                pub fn copysign1(x: f32, y: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7signbitEd"]
                pub fn signbit(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7signbitEf"]
                pub fn signbit1(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math13negative_signEd"]
                pub fn negative_sign(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math13negative_signEf"]
                pub fn negative_sign1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4acosERKSt7complexIdE"]
                pub fn acos(x: *const root::Complex) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4acosERKSt7complexIfE"]
                pub fn acos1(x: *const root::FloatComplex)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4asinERKSt7complexIdE"]
                pub fn asin(x: *const root::Complex) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4asinERKSt7complexIfE"]
                pub fn asin1(x: *const root::FloatComplex)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4atanERKSt7complexIdE"]
                pub fn atan(x: *const root::Complex) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4atanERKSt7complexIfE"]
                pub fn atan1(x: *const root::FloatComplex)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2Ed"]
                pub fn log2(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2Ef"]
                pub fn log21(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2ERKSt7complexIdE"]
                pub fn log22(x: *const root::Complex) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2ERKSt7complexIfE"]
                pub fn log23(x: *const root::FloatComplex)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2EdRi"]
                pub fn log24(x: f64, exp: *mut ::std::os::raw::c_int) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2EfRi"]
                pub fn log25(x: f32, exp: *mut ::std::os::raw::c_int) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2ERKSt7complexIdERi"]
                pub fn log26(x: *const root::Complex,
                             exp: *mut ::std::os::raw::c_int)
                 -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2ERKSt7complexIfERi"]
                pub fn log27(x: *const root::FloatComplex,
                             exp: *mut ::std::os::raw::c_int)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4exp2Ed"]
                pub fn exp2(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4exp2Ef"]
                pub fn exp21(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5truncEd"]
                pub fn trunc(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5truncEf"]
                pub fn trunc1(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5floorEd"]
                pub fn floor(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5floorEf"]
                pub fn floor1(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5roundEd"]
                pub fn round(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5roundEf"]
                pub fn round1(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5frexpEdPi"]
                pub fn frexp(x: f64, expptr: *mut ::std::os::raw::c_int)
                 -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5frexpEfPi"]
                pub fn frexp1(x: f32, expptr: *mut ::std::os::raw::c_int)
                 -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5isnanEd"]
                pub fn isnan(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5isnanEf"]
                pub fn isnan1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math6finiteEd"]
                pub fn finite(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math6finiteEf"]
                pub fn finite1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5isinfEd"]
                pub fn isinf(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5isinfEf"]
                pub fn isinf1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8nint_bigEd"]
                pub fn nint_big(x: f64) -> root::octave_idx_type;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8nint_bigEf"]
                pub fn nint_big1(x: f32) -> root::octave_idx_type;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4nintEd"]
                pub fn nint(x: f64) -> ::std::os::raw::c_int;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4nintEf"]
                pub fn nint1(x: f32) -> ::std::os::raw::c_int;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_acosEd"]
                pub fn rc_acos(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_acosEf"]
                pub fn rc_acos1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_acoshEd"]
                pub fn rc_acosh(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_acoshEf"]
                pub fn rc_acosh1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_asinEd"]
                pub fn rc_asin(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_asinEf"]
                pub fn rc_asin1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_atanhEd"]
                pub fn rc_atanh(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_atanhEf"]
                pub fn rc_atanh1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math6rc_logEd"]
                pub fn rc_log(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math6rc_logEf"]
                pub fn rc_log1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_log2Ed"]
                pub fn rc_log2(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_log2Ef"]
                pub fn rc_log21(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_log10Ed"]
                pub fn rc_log10(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_log10Ef"]
                pub fn rc_log101(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_sqrtEd"]
                pub fn rc_sqrt(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_sqrtEf"]
                pub fn rc_sqrt1(arg1: f32) -> root::FloatComplex;
            }
            #[repr(C)]
            pub struct aepbalance__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct aepbalance {
            }
            pub type aepbalance_VT = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct gepbalance {
            }
            pub type gepbalance_RT = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct chol {
            }
            pub type chol_VT = u8;
            pub type chol_COND_T = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct hess {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct schur {
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct svd {
            }
            pub type svd_DM_T = u8;
            pub const svd_Type_economy: root::octave::math::svd_Type =
                svd_Type::std;
            pub const svd_Type_sigma_only: root::octave::math::svd_Type =
                svd_Type::std;
            #[repr(i32)]
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum svd_Type { std = 0, }
            pub const svd_Driver_GESDD: root::octave::math::svd_Driver =
                svd_Driver::GESVD;
            #[repr(i32)]
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum svd_Driver { GESVD = 0, }
            pub type svd_P = u8;
            pub type svd_DM_P = u8;
            #[repr(C)]
            pub struct lu__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct lu {
            }
            pub type lu_VT = u8;
            pub type lu_ELT_T = u8;
            #[repr(C)]
            pub struct qr__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct qr {
            }
            pub type qr_ELT_T = u8;
            pub type qr_RV_T = u8;
            pub type qr_CV_T = u8;
            pub const qr_type_raw: root::octave::math::qr_type = qr_type::std;
            pub const qr_type_economy: root::octave::math::qr_type =
                qr_type::std;
            #[repr(i32)]
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum qr_type { std = 0, }
            extern "C" {
                #[link_name = "_ZN6octave4math18warn_qrupdate_onceEv"]
                pub fn warn_qrupdate_once();
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct index_exception {
            pub _bindgen_opaque_blob: [u64; 5usize],
        }
        extern "C" {
            #[link_name = "_ZNK6octave15index_exception10expressionEv"]
            pub fn index_exception_expression(this:
                                                  *const root::octave::index_exception)
             -> root::std::string;
        }
        impl Clone for index_exception {
            fn clone(&self) -> Self { *self }
        }
        impl index_exception {
            #[inline]
            pub unsafe fn expression(&self) -> root::std::string {
                index_exception_expression(self)
            }
        }
        extern "C" {
            #[link_name = "_ZN6octave29err_nan_to_logical_conversionEv"]
            pub fn err_nan_to_logical_conversion();
        }
        extern "C" {
            #[link_name = "_ZN6octave31err_nan_to_character_conversionEv"]
            pub fn err_nan_to_character_conversion();
        }
        extern "C" {
            #[link_name = "_ZN6octave17err_nonconformantEPKcii"]
            pub fn err_nonconformant(op: *const ::std::os::raw::c_char,
                                     op1_len: root::octave_idx_type,
                                     op2_len: root::octave_idx_type);
        }
        extern "C" {
            #[link_name = "_ZN6octave17err_nonconformantEPKciiii"]
            pub fn err_nonconformant1(op: *const ::std::os::raw::c_char,
                                      op1_nr: root::octave_idx_type,
                                      op1_nc: root::octave_idx_type,
                                      op2_nr: root::octave_idx_type,
                                      op2_nc: root::octave_idx_type);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave17err_nonconformantEPKcRK10dim_vectorS4_"]
            pub fn err_nonconformant2(op: *const ::std::os::raw::c_char,
                                      op1_dims: *const root::dim_vector,
                                      op2_dims: *const root::dim_vector);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave22err_index_out_of_rangeEiiiiRK10dim_vector"]
            pub fn err_index_out_of_range(nd: ::std::os::raw::c_int,
                                          dim: ::std::os::raw::c_int,
                                          iext: root::octave_idx_type,
                                          ext: root::octave_idx_type,
                                          d: *const root::dim_vector);
        }
        extern "C" {
            #[link_name = "_ZN6octave22err_index_out_of_rangeEiiii"]
            pub fn err_index_out_of_range1(nd: ::std::os::raw::c_int,
                                           dim: ::std::os::raw::c_int,
                                           iext: root::octave_idx_type,
                                           ext: root::octave_idx_type);
        }
        extern "C" {
            #[link_name = "_ZN6octave26err_del_index_out_of_rangeEbii"]
            pub fn err_del_index_out_of_range(is1d: bool,
                                              iext: root::octave_idx_type,
                                              ext: root::octave_idx_type);
        }
        extern "C" {
            #[link_name = "_ZN6octave17err_invalid_indexEdiiRKSs"]
            pub fn err_invalid_index(n: f64, nd: root::octave_idx_type,
                                     dim: root::octave_idx_type,
                                     var: *const root::std::string);
        }
        extern "C" {
            #[link_name = "_ZN6octave17err_invalid_indexEiiiRKSs"]
            pub fn err_invalid_index1(n: root::octave_idx_type,
                                      nd: root::octave_idx_type,
                                      dim: root::octave_idx_type,
                                      var: *const root::std::string);
        }
        extern "C" {
            #[link_name = "_ZN6octave17err_invalid_indexERKSsiiS1_"]
            pub fn err_invalid_index2(idx: *const root::std::string,
                                      nd: root::octave_idx_type,
                                      dim: root::octave_idx_type,
                                      var: *const root::std::string);
        }
        extern "C" {
            #[link_name = "_ZN6octave18err_invalid_resizeEv"]
            pub fn err_invalid_resize();
        }
        extern "C" {
            #[link_name = "_ZN6octave20warn_singular_matrixEd"]
            pub fn warn_singular_matrix(rcond: f64);
        }
        pub mod sys {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            pub struct base_tm__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct base_tm {
                pub _bindgen_opaque_blob: [u64; 8usize],
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4usecEi"]
                pub fn base_tm_usec(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm3secEi"]
                pub fn base_tm_sec(this: *mut root::octave::sys::base_tm,
                                   v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm3minEi"]
                pub fn base_tm_min(this: *mut root::octave::sys::base_tm,
                                   v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4hourEi"]
                pub fn base_tm_hour(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4mdayEi"]
                pub fn base_tm_mday(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm3monEi"]
                pub fn base_tm_mon(this: *mut root::octave::sys::base_tm,
                                   v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4yearEi"]
                pub fn base_tm_year(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4wdayEi"]
                pub fn base_tm_wday(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4ydayEi"]
                pub fn base_tm_yday(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm5isdstEi"]
                pub fn base_tm_isdst(this: *mut root::octave::sys::base_tm,
                                     v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm6gmtoffEl"]
                pub fn base_tm_gmtoff(this: *mut root::octave::sys::base_tm,
                                      v: ::std::os::raw::c_long)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4zoneERKSs"]
                pub fn base_tm_zone(this: *mut root::octave::sys::base_tm,
                                    s: *const root::std::string)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZNK6octave3sys7base_tm8strftimeERKSs"]
                pub fn base_tm_strftime(this:
                                            *const root::octave::sys::base_tm,
                                        fmt: *const root::std::string)
                 -> root::std::string;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4initEPv"]
                pub fn base_tm_init(this: *mut root::octave::sys::base_tm,
                                    p: *mut ::std::os::raw::c_void);
            }
            impl Clone for base_tm {
                fn clone(&self) -> Self { *self }
            }
            impl base_tm {
                #[inline]
                pub unsafe fn usec(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_usec(self, v)
                }
                #[inline]
                pub unsafe fn sec(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_sec(self, v)
                }
                #[inline]
                pub unsafe fn min(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_min(self, v)
                }
                #[inline]
                pub unsafe fn hour(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_hour(self, v)
                }
                #[inline]
                pub unsafe fn mday(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_mday(self, v)
                }
                #[inline]
                pub unsafe fn mon(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_mon(self, v)
                }
                #[inline]
                pub unsafe fn year(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_year(self, v)
                }
                #[inline]
                pub unsafe fn wday(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_wday(self, v)
                }
                #[inline]
                pub unsafe fn yday(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_yday(self, v)
                }
                #[inline]
                pub unsafe fn isdst(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_isdst(self, v)
                }
                #[inline]
                pub unsafe fn gmtoff(&mut self, v: ::std::os::raw::c_long)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_gmtoff(self, v)
                }
                #[inline]
                pub unsafe fn zone(&mut self, s: *const root::std::string)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_zone(self, s)
                }
                #[inline]
                pub unsafe fn strftime(&self, fmt: *const root::std::string)
                 -> root::std::string {
                    base_tm_strftime(self, fmt)
                }
                #[inline]
                pub unsafe fn init(&mut self,
                                   p: *mut ::std::os::raw::c_void) {
                    base_tm_init(self, p)
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct time {
                pub _bindgen_opaque_blob: [u64; 2usize],
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys4time5stampEv"]
                pub fn time_stamp(this: *mut root::octave::sys::time);
            }
            extern "C" {
                #[link_name = "_ZNK6octave3sys4time5ctimeEv"]
                pub fn time_ctime(this: *const root::octave::sys::time)
                 -> root::std::string;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys4timeC1Ed"]
                pub fn time_time(this: *mut root::octave::sys::time, d: f64);
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys4timeC1ERKNS0_7base_tmE"]
                pub fn time_time1(this: *mut root::octave::sys::time,
                                  tm: *const root::octave::sys::base_tm);
            }
            impl Clone for time {
                fn clone(&self) -> Self { *self }
            }
            impl time {
                #[inline]
                pub unsafe fn stamp(&mut self) { time_stamp(self) }
                #[inline]
                pub unsafe fn ctime(&self) -> root::std::string {
                    time_ctime(self)
                }
                #[inline]
                pub unsafe fn new(d: f64) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    time_time(&mut __bindgen_tmp, d);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(tm: *const root::octave::sys::base_tm)
                 -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    time_time1(&mut __bindgen_tmp, tm);
                    __bindgen_tmp
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct localtime {
                pub _bindgen_opaque_blob: [u64; 8usize],
            }
            impl Clone for localtime {
                fn clone(&self) -> Self { *self }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct gmtime {
                pub _bindgen_opaque_blob: [u64; 8usize],
            }
            impl Clone for gmtime {
                fn clone(&self) -> Self { *self }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct strptime {
                pub _bindgen_opaque_blob: [u64; 9usize],
            }
            impl Clone for strptime {
                fn clone(&self) -> Self { *self }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct cpu_time {
                pub _bindgen_opaque_blob: [u64; 3usize],
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys8cpu_time5stampEv"]
                pub fn cpu_time_stamp(this: *mut root::octave::sys::cpu_time);
            }
            impl Clone for cpu_time {
                fn clone(&self) -> Self { *self }
            }
            impl cpu_time {
                #[inline]
                pub unsafe fn stamp(&mut self) { cpu_time_stamp(self) }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct resource_usage {
                pub _bindgen_opaque_blob: [u64; 10usize],
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys14resource_usage5stampEv"]
                pub fn resource_usage_stamp(this:
                                                *mut root::octave::sys::resource_usage);
            }
            impl Clone for resource_usage {
                fn clone(&self) -> Self { *self }
            }
            impl resource_usage {
                #[inline]
                pub unsafe fn stamp(&mut self) { resource_usage_stamp(self) }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct mach_info {
            pub _bindgen_opaque_blob: [u32; 2usize],
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum mach_info_float_format {
            flt_fmt_unknown = 0,
            flt_fmt_ieee_little_endian = 1,
            flt_fmt_ieee_big_endian = 2,
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info8instanceE"]
            pub static mut mach_info_instance: *mut root::octave::mach_info;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info11instance_okEv"]
            pub fn mach_info_instance_ok() -> bool;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info19native_float_formatEv"]
            pub fn mach_info_native_float_format()
             -> root::octave::mach_info_float_format;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info16words_big_endianEv"]
            pub fn mach_info_words_big_endian() -> bool;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info19words_little_endianEv"]
            pub fn mach_info_words_little_endian() -> bool;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info22string_to_float_formatERKSs"]
            pub fn mach_info_string_to_float_format(arg1:
                                                        *const root::std::string)
             -> root::octave::mach_info_float_format;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave9mach_info22float_format_as_stringENS0_12float_formatE"]
            pub fn mach_info_float_format_as_string(arg1:
                                                        root::octave::mach_info_float_format)
             -> root::std::string;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_infoC1Ev"]
            pub fn mach_info_mach_info(this: *mut root::octave::mach_info);
        }
        impl Clone for mach_info {
            fn clone(&self) -> Self { *self }
        }
        impl mach_info {
            #[inline]
            pub unsafe fn instance_ok() -> bool { mach_info_instance_ok() }
            #[inline]
            pub unsafe fn native_float_format()
             -> root::octave::mach_info_float_format {
                mach_info_native_float_format()
            }
            #[inline]
            pub unsafe fn words_big_endian() -> bool {
                mach_info_words_big_endian()
            }
            #[inline]
            pub unsafe fn words_little_endian() -> bool {
                mach_info_words_little_endian()
            }
            #[inline]
            pub unsafe fn string_to_float_format(arg1:
                                                     *const root::std::string)
             -> root::octave::mach_info_float_format {
                mach_info_string_to_float_format(arg1)
            }
            #[inline]
            pub unsafe fn float_format_as_string(arg1:
                                                     root::octave::mach_info_float_format)
             -> root::std::string {
                mach_info_float_format_as_string(arg1)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                mach_info_mach_info(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct unwind_protect {
            pub _bindgen_opaque_blob: [u64; 11usize],
        }
        impl Clone for unwind_protect {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct unwind_protect_safe {
            pub _bindgen_opaque_blob: [u64; 11usize],
        }
        impl Clone for unwind_protect_safe {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        pub struct base_list__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct base_list {
        }
        pub type base_list_iterator = u8;
        pub type base_list_const_iterator = u8;
        pub type base_list_reverse_iterator = u8;
        pub type base_list_const_reverse_iterator = u8;
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct regexp {
            pub _bindgen_opaque_blob: [u64; 16usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct regexp_opts {
            pub _bindgen_opaque_blob: [u8; 6usize],
        }
        impl Clone for regexp_opts {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct regexp_match_data {
            pub _bindgen_opaque_blob: [u64; 8usize],
        }
        impl Clone for regexp_match_data {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct regexp_match_element {
            pub _bindgen_opaque_blob: [u64; 18usize],
        }
        impl Clone for regexp_match_element {
            fn clone(&self) -> Self { *self }
        }
        extern "C" {
            #[link_name = "_ZN6octave6regexp5matchERKSs"]
            pub fn regexp_match(this: *mut root::octave::regexp,
                                buffer: *const root::std::string)
             -> root::octave::regexp_match_data;
        }
        extern "C" {
            #[link_name = "_ZN6octave6regexp8is_matchERKSs"]
            pub fn regexp_is_match(this: *mut root::octave::regexp,
                                   buffer: *const root::std::string) -> bool;
        }
        extern "C" {
            #[link_name = "_ZN6octave6regexp8is_matchERK13string_vector"]
            pub fn regexp_is_match1(this: *mut root::octave::regexp,
                                    buffer: *const root::string_vector)
             -> [u64; 5usize];
        }
        extern "C" {
            #[link_name = "_ZN6octave6regexp7replaceERKSsS2_"]
            pub fn regexp_replace(this: *mut root::octave::regexp,
                                  buffer: *const root::std::string,
                                  replacement: *const root::std::string)
             -> root::std::string;
        }
        impl Clone for regexp {
            fn clone(&self) -> Self { *self }
        }
        impl regexp {
            #[inline]
            pub unsafe fn match_(&mut self, buffer: *const root::std::string)
             -> root::octave::regexp_match_data {
                regexp_match(self, buffer)
            }
            #[inline]
            pub unsafe fn is_match(&mut self,
                                   buffer: *const root::std::string) -> bool {
                regexp_is_match(self, buffer)
            }
            #[inline]
            pub unsafe fn is_match1(&mut self,
                                    buffer: *const root::string_vector)
             -> [u64; 5usize] {
                regexp_is_match1(self, buffer)
            }
            #[inline]
            pub unsafe fn replace(&mut self, buffer: *const root::std::string,
                                  replacement: *const root::std::string)
             -> root::std::string {
                regexp_replace(self, buffer, replacement)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct dynamic_library {
            pub _bindgen_opaque_blob: u64,
        }
        pub type dynamic_library_name_mangler = u64;
        pub type dynamic_library_close_hook = u64;
        #[repr(C)]
        pub struct dynamic_library_dynlib_rep__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct dynamic_library_dynlib_rep {
            pub _bindgen_opaque_blob: [u64; 11usize],
        }
        pub type dynamic_library_dynlib_rep_fcn_names_iterator = u8;
        pub type dynamic_library_dynlib_rep_fcn_names_const_iterator = u8;
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep9instancesE"]
            pub static mut dynamic_library_dynlib_rep_instances:
                       [u64; 6usize];
        }
        extern "C" {
            #[link_name =
                  "_ZNK6octave15dynamic_library10dynlib_rep14is_out_of_dateEv"]
            pub fn dynamic_library_dynlib_rep_is_out_of_date(this:
                                                                 *const root::octave::dynamic_library_dynlib_rep)
             -> bool;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep12new_instanceERKSs"]
            pub fn dynamic_library_dynlib_rep_new_instance(f:
                                                               *const root::std::string)
             -> *mut root::octave::dynamic_library_dynlib_rep;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep12get_instanceERKSsb"]
            pub fn dynamic_library_dynlib_rep_get_instance(f:
                                                               *const root::std::string,
                                                           fake: bool)
             -> *mut root::octave::dynamic_library_dynlib_rep;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep12add_fcn_nameERKSs"]
            pub fn dynamic_library_dynlib_rep_add_fcn_name(this:
                                                               *mut root::octave::dynamic_library_dynlib_rep,
                                                           arg1:
                                                               *const root::std::string);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep15remove_fcn_nameERKSs"]
            pub fn dynamic_library_dynlib_rep_remove_fcn_name(this:
                                                                  *mut root::octave::dynamic_library_dynlib_rep,
                                                              arg1:
                                                                  *const root::std::string)
             -> bool;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep13do_close_hookEPFvRKSsE"]
            pub fn dynamic_library_dynlib_rep_do_close_hook(this:
                                                                *mut root::octave::dynamic_library_dynlib_rep,
                                                            cl_hook:
                                                                root::octave::dynamic_library_close_hook);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep11fake_reloadEv"]
            pub fn dynamic_library_dynlib_rep_fake_reload(this:
                                                              *mut root::octave::dynamic_library_dynlib_rep);
        }
        extern "C" {
            #[link_name = "_ZN6octave15dynamic_library10dynlib_repC1ERKSs"]
            pub fn dynamic_library_dynlib_rep_dynlib_rep(this:
                                                             *mut root::octave::dynamic_library_dynlib_rep,
                                                         f:
                                                             *const root::std::string);
        }
        impl Clone for dynamic_library_dynlib_rep {
            fn clone(&self) -> Self { *self }
        }
        impl dynamic_library_dynlib_rep {
            #[inline]
            pub unsafe fn is_out_of_date(&self) -> bool {
                dynamic_library_dynlib_rep_is_out_of_date(self)
            }
            #[inline]
            pub unsafe fn new_instance(f: *const root::std::string)
             -> *mut root::octave::dynamic_library_dynlib_rep {
                dynamic_library_dynlib_rep_new_instance(f)
            }
            #[inline]
            pub unsafe fn get_instance(f: *const root::std::string,
                                       fake: bool)
             -> *mut root::octave::dynamic_library_dynlib_rep {
                dynamic_library_dynlib_rep_get_instance(f, fake)
            }
            #[inline]
            pub unsafe fn add_fcn_name(&mut self,
                                       arg1: *const root::std::string) {
                dynamic_library_dynlib_rep_add_fcn_name(self, arg1)
            }
            #[inline]
            pub unsafe fn remove_fcn_name(&mut self,
                                          arg1: *const root::std::string)
             -> bool {
                dynamic_library_dynlib_rep_remove_fcn_name(self, arg1)
            }
            #[inline]
            pub unsafe fn do_close_hook(&mut self,
                                        cl_hook:
                                            root::octave::dynamic_library_close_hook) {
                dynamic_library_dynlib_rep_do_close_hook(self, cl_hook)
            }
            #[inline]
            pub unsafe fn fake_reload(&mut self) {
                dynamic_library_dynlib_rep_fake_reload(self)
            }
            #[inline]
            pub unsafe fn new(f: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                dynamic_library_dynlib_rep_dynlib_rep(&mut __bindgen_tmp, f);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "_ZN6octave15dynamic_library7nil_repE"]
            pub static mut dynamic_library_nil_rep:
                       root::octave::dynamic_library_dynlib_rep;
        }
        impl Clone for dynamic_library {
            fn clone(&self) -> Self { *self }
        }
    }
    pub type octave_execution_exception = [u32; 2usize];
    pub type octave_exit_exception = [u32; 2usize];
    pub type octave_interrupt_exception = u8;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_exception {
        octave_no_exception = 0,
        octave_exec_exception = 1,
        octave_alloc_exception = 3,
        octave_quit_exception = 4,
    }
    extern "C" {
        #[link_name = "octave_interrupt_immediately"]
        pub static mut octave_interrupt_immediately: root::sig_atomic_t;
    }
    extern "C" {
        #[link_name = "octave_interrupt_state"]
        pub static mut octave_interrupt_state: root::sig_atomic_t;
    }
    extern "C" {
        #[link_name = "octave_exception_state"]
        pub static mut octave_exception_state: root::sig_atomic_t;
    }
    extern "C" {
        #[link_name = "octave_exit_exception_status"]
        pub static mut octave_exit_exception_status: root::sig_atomic_t;
    }
    extern "C" {
        #[link_name = "octave_exit_exception_safe_to_return"]
        pub static mut octave_exit_exception_safe_to_return:
                   root::sig_atomic_t;
    }
    extern "C" {
        #[link_name = "octave_signal_caught"]
        pub static mut octave_signal_caught: root::sig_atomic_t;
    }
    extern "C" {
        pub fn octave_handle_signal();
    }
    extern "C" {
        pub fn octave_throw_interrupt_exception();
    }
    extern "C" {
        pub fn octave_throw_execution_exception();
    }
    extern "C" {
        pub fn octave_throw_bad_alloc();
    }
    extern "C" {
        pub fn octave_rethrow_exception();
    }
    extern "C" {
        pub fn clean_up_and_exit(exit_status: ::std::os::raw::c_int,
                                 safe_to_return: bool);
    }
    extern "C" {
        #[link_name = "octave_signal_hook"]
        pub static mut octave_signal_hook:
                   ::std::option::Option<unsafe extern "C" fn()>;
    }
    extern "C" {
        #[link_name = "octave_interrupt_hook"]
        pub static mut octave_interrupt_hook:
                   ::std::option::Option<unsafe extern "C" fn()>;
    }
    extern "C" {
        #[link_name = "octave_bad_alloc_hook"]
        pub static mut octave_bad_alloc_hook:
                   ::std::option::Option<unsafe extern "C" fn()>;
    }
    extern "C" {
        pub fn liboctave_fatal(fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        pub fn liboctave_fatal_with_id(id: *const ::std::os::raw::c_char,
                                       fmt:
                                           *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        pub fn liboctave_warning(fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        pub fn liboctave_warning_with_id(id: *const ::std::os::raw::c_char,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...);
    }
    pub type liboctave_error_handler = u64;
    pub type liboctave_error_with_id_handler = u64;
    pub type liboctave_warning_handler = u64;
    pub type liboctave_warning_with_id_handler = u64;
    extern "C" {
        #[link_name = "current_liboctave_error_handler"]
        pub static mut current_liboctave_error_handler:
                   ::std::option::Option<unsafe extern "C" fn()>;
    }
    extern "C" {
        #[link_name = "current_liboctave_error_with_id_handler"]
        pub static mut current_liboctave_error_with_id_handler:
                   ::std::option::Option<unsafe extern "C" fn()>;
    }
    extern "C" {
        #[link_name = "current_liboctave_warning_handler"]
        pub static mut current_liboctave_warning_handler:
                   root::liboctave_warning_handler;
    }
    extern "C" {
        #[link_name = "current_liboctave_warning_with_id_handler"]
        pub static mut current_liboctave_warning_with_id_handler:
                   root::liboctave_warning_with_id_handler;
    }
    extern "C" {
        pub fn set_liboctave_error_handler(f:
                                               ::std::option::Option<unsafe extern "C" fn()>);
    }
    extern "C" {
        pub fn set_liboctave_error_with_id_handler(f:
                                                       ::std::option::Option<unsafe extern "C" fn()>);
    }
    extern "C" {
        pub fn set_liboctave_warning_handler(f:
                                                 root::liboctave_warning_handler);
    }
    extern "C" {
        pub fn set_liboctave_warning_with_id_handler(f:
                                                         root::liboctave_warning_with_id_handler);
    }
    extern "C" {
        pub fn _wassert(_Message: *const u16, _File: *const u16,
                        _Line: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn _assert(_Message: *const ::std::os::raw::c_char,
                       _File: *const ::std::os::raw::c_char,
                       _Line: ::std::os::raw::c_uint);
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _exception {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    impl Clone for _exception {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __mingw_types_compatible_p {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __mingw_dbl_type_t {
        pub _bindgen_opaque_blob: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __mingw_dbl_type_t__bindgen_ty_1 {
        pub _bindgen_opaque_blob: [u32; 2usize],
    }
    impl Clone for __mingw_dbl_type_t__bindgen_ty_1 {
        fn clone(&self) -> Self { *self }
    }
    impl Clone for __mingw_dbl_type_t {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __mingw_flt_type_t {
        pub _bindgen_opaque_blob: u32,
    }
    impl Clone for __mingw_flt_type_t {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __mingw_ldbl_type_t {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __mingw_ldbl_type_t__bindgen_ty_1 {
        pub _bindgen_opaque_blob: [u32; 4usize],
    }
    impl Clone for __mingw_ldbl_type_t__bindgen_ty_1 {
        fn clone(&self) -> Self { *self }
    }
    impl Clone for __mingw_ldbl_type_t {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __mingw_fp_types_t {
        pub _bindgen_opaque_blob: u64,
    }
    impl Clone for __mingw_fp_types_t {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        #[link_name = "__imp__HUGE"]
        pub static mut __imp__HUGE: *mut f64;
    }
    extern "C" {
        pub fn __mingw_raise_matherr(typ: ::std::os::raw::c_int,
                                     name: *const ::std::os::raw::c_char,
                                     a1: f64, a2: f64, rslt: f64);
    }
    extern "C" {
        pub fn __mingw_setusermatherr(arg1:
                                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         *mut root::_exception)
                                                                    ->
                                                                        ::std::os::raw::c_int>);
    }
    extern "C" {
        pub fn __setusermatherr(arg1:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut root::_exception)
                                                              ->
                                                                  ::std::os::raw::c_int>);
    }
    extern "C" {
        pub fn sin(_X: f64) -> f64;
    }
    extern "C" {
        pub fn cos(_X: f64) -> f64;
    }
    extern "C" {
        pub fn tan(_X: f64) -> f64;
    }
    extern "C" {
        pub fn sinh(_X: f64) -> f64;
    }
    extern "C" {
        pub fn cosh(_X: f64) -> f64;
    }
    extern "C" {
        pub fn tanh(_X: f64) -> f64;
    }
    extern "C" {
        pub fn asin(_X: f64) -> f64;
    }
    extern "C" {
        pub fn acos(_X: f64) -> f64;
    }
    extern "C" {
        pub fn atan(_X: f64) -> f64;
    }
    extern "C" {
        pub fn atan2(_Y: f64, _X: f64) -> f64;
    }
    extern "C" {
        pub fn exp(_X: f64) -> f64;
    }
    extern "C" {
        pub fn log(_X: f64) -> f64;
    }
    extern "C" {
        pub fn log10(_X: f64) -> f64;
    }
    extern "C" {
        pub fn pow(_X: f64, _Y: f64) -> f64;
    }
    extern "C" {
        pub fn sqrt(_X: f64) -> f64;
    }
    extern "C" {
        pub fn ceil(_X: f64) -> f64;
    }
    extern "C" {
        pub fn floor(_X: f64) -> f64;
    }
    extern "C" {
        pub fn fabsf(x: f32) -> f32;
    }
    extern "C" {
        pub fn fabsl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn fabs(_X: f64) -> f64;
    }
    extern "C" {
        pub fn ldexp(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn frexp(_X: f64, _Y: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn modf(_X: f64, _Y: *mut f64) -> f64;
    }
    extern "C" {
        pub fn fmod(_X: f64, _Y: f64) -> f64;
    }
    extern "C" {
        pub fn sincos(__x: f64, p_sin: *mut f64, p_cos: *mut f64);
    }
    extern "C" {
        pub fn sincosl(__x: f64, p_sin: *mut f64, p_cos: *mut f64);
    }
    extern "C" {
        pub fn sincosf(__x: f32, p_sin: *mut f32, p_cos: *mut f32);
    }
    pub type float_t = u32;
    pub type double_t = u64;
    extern "C" {
        pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fpclassify(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isnan(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isnanf(arg1: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isnanl(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __signbit(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __signbitf(arg1: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __signbitl(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sinf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn sinl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn cosf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn cosl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tanf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn tanl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn asinf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn asinl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn acosf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn acosl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atanf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn atanl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atan2f(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn atan2l(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn sinhf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn sinhl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn coshf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn coshl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tanhf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn tanhl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn acosh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn acoshf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn acoshl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn asinh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn asinhf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn asinhl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atanh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atanhf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn atanhl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn expf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn expl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn exp2(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn exp2f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn exp2l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn expm1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn expm1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn expm1l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn frexpf(_X: f32, _Y: *mut ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ldexpf(_X: f32, _Y: ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn logf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn logl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log10f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn log10l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log1p(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log1pf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn log1pl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log2(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log2f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn log2l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn logb(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn logbf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn logbl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
    }
    extern "C" {
        pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
    }
    extern "C" {
        pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
    }
    extern "C" {
        pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
    }
    extern "C" {
        pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
    }
    extern "C" {
        pub fn cbrt(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn cbrtf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn cbrtl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn hypot(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn hypotf(x: f32, y: f32) -> f32;
    }
    extern "C" {
        pub fn hypotl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn powf(_X: f32, _Y: f32) -> f32;
    }
    extern "C" {
        pub fn powl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn sqrtf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn sqrtl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erf(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erff(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn erfl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfcf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn erfcl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn lgammal(arg1: f64) -> f64;
    }
    extern "C" {
        #[link_name = "signgam"]
        pub static mut signgam: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn tgammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn ceilf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn ceill(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn floorf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn floorl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn nearbyint(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn nearbyintf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn nearbyintl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn rint(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn rintf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn rintl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn round(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn roundf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn roundl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn trunc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn truncf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn truncl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn fmodf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn fmodl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn remainder(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn remainderf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn remainderl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int)
         -> f64;
    }
    extern "C" {
        pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int)
         -> f32;
    }
    extern "C" {
        pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int)
         -> f64;
    }
    extern "C" {
        pub fn copysign(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn copysignf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn copysignl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn nan(tagp: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn nanf(tagp: *const ::std::os::raw::c_char) -> f32;
    }
    extern "C" {
        pub fn nanl(tagp: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn nextafter(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
    }
    extern "C" {
        pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fdim(x: f64, y: f64) -> f64;
    }
    extern "C" {
        pub fn fdimf(x: f32, y: f32) -> f32;
    }
    extern "C" {
        pub fn fdiml(x: f64, y: f64) -> f64;
    }
    extern "C" {
        pub fn fmax(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fmin(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fminf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn fminl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
    }
    extern "C" {
        pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
    }
    extern "C" {
        pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
    }
    extern "C" {
        pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
    }
    extern "C" {
        pub fn _chgsignf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn _logbf(_X: f32) -> f32;
    }
    extern "C" {
        pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
    }
    extern "C" {
        pub fn _finitef(_X: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _isnanf(_X: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _fpclassf(_X: f32) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_refcount {
    }
    pub type octave_refcount_count_type = u8;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct dim_vector {
        pub _bindgen_opaque_blob: u64,
    }
    extern "C" {
        #[link_name = "_ZN10dim_vector19chop_all_singletonsEv"]
        pub fn dim_vector_chop_all_singletons(this: *mut root::dim_vector);
    }
    extern "C" {
        #[link_name = "_ZN10dim_vector7dim_maxEv"]
        pub fn dim_vector_dim_max() -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK10dim_vector3strEc"]
        pub fn dim_vector_str(this: *const root::dim_vector,
                              sep: ::std::os::raw::c_char)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK10dim_vector8num_onesEv"]
        pub fn dim_vector_num_ones(this: *const root::dim_vector)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK10dim_vector10safe_numelEv"]
        pub fn dim_vector_safe_numel(this: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK10dim_vector7squeezeEv"]
        pub fn dim_vector_squeeze(this: *const root::dim_vector)
         -> root::dim_vector;
    }
    extern "C" {
        #[link_name = "_ZN10dim_vector6concatERKS_i"]
        pub fn dim_vector_concat(this: *mut root::dim_vector,
                                 dvb: *const root::dim_vector,
                                 dim: ::std::os::raw::c_int) -> bool;
    }
    extern "C" {
        #[link_name = "_ZN10dim_vector5hvcatERKS_i"]
        pub fn dim_vector_hvcat(this: *mut root::dim_vector,
                                dvb: *const root::dim_vector,
                                dim: ::std::os::raw::c_int) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK10dim_vector5redimEi"]
        pub fn dim_vector_redim(this: *const root::dim_vector,
                                n: ::std::os::raw::c_int) -> root::dim_vector;
    }
    impl Clone for dim_vector {
        fn clone(&self) -> Self { *self }
    }
    impl dim_vector {
        #[inline]
        pub unsafe fn chop_all_singletons(&mut self) {
            dim_vector_chop_all_singletons(self)
        }
        #[inline]
        pub unsafe fn dim_max() -> root::octave_idx_type {
            dim_vector_dim_max()
        }
        #[inline]
        pub unsafe fn str(&self, sep: ::std::os::raw::c_char)
         -> root::std::string {
            dim_vector_str(self, sep)
        }
        #[inline]
        pub unsafe fn num_ones(&self) -> ::std::os::raw::c_int {
            dim_vector_num_ones(self)
        }
        #[inline]
        pub unsafe fn safe_numel(&self) -> root::octave_idx_type {
            dim_vector_safe_numel(self)
        }
        #[inline]
        pub unsafe fn squeeze(&self) -> root::dim_vector {
            dim_vector_squeeze(self)
        }
        #[inline]
        pub unsafe fn concat(&mut self, dvb: *const root::dim_vector,
                             dim: ::std::os::raw::c_int) -> bool {
            dim_vector_concat(self, dvb, dim)
        }
        #[inline]
        pub unsafe fn hvcat(&mut self, dvb: *const root::dim_vector,
                            dim: ::std::os::raw::c_int) -> bool {
            dim_vector_hvcat(self, dvb, dim)
        }
        #[inline]
        pub unsafe fn redim(&self, n: ::std::os::raw::c_int)
         -> root::dim_vector {
            dim_vector_redim(self, n)
        }
    }
    extern "C" {
        pub fn _memccpy(_Dst: *mut ::std::os::raw::c_void,
                        _Src: *const ::std::os::raw::c_void,
                        _Val: ::std::os::raw::c_int, _MaxCount: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memchr(_Buf: *const ::std::os::raw::c_void,
                      _Val: ::std::os::raw::c_int, _MaxCount: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn _memicmp(_Buf1: *const ::std::os::raw::c_void,
                        _Buf2: *const ::std::os::raw::c_void, _Size: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _memicmp_l(_Buf1: *const ::std::os::raw::c_void,
                          _Buf2: *const ::std::os::raw::c_void, _Size: usize,
                          _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memcmp(_Buf1: *const ::std::os::raw::c_void,
                      _Buf2: *const ::std::os::raw::c_void, _Size: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mempcpy(_Dst: *mut ::std::os::raw::c_void,
                       _Src: *const ::std::os::raw::c_void, _Size: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(_Dst: *mut ::std::os::raw::c_void,
                      _Val: ::std::os::raw::c_int, _Size: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memccpy(_Dst: *mut ::std::os::raw::c_void,
                       _Src: *const ::std::os::raw::c_void,
                       _Val: ::std::os::raw::c_int, _Size: usize)
         -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memicmp(_Buf1: *const ::std::os::raw::c_void,
                       _Buf2: *const ::std::os::raw::c_void, _Size: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strset(_Str: *mut ::std::os::raw::c_char,
                       _Val: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strset_l(_Str: *mut ::std::os::raw::c_char,
                         _Val: ::std::os::raw::c_int,
                         _Locale: root::_locale_t)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcpy(_Dest: *mut ::std::os::raw::c_char,
                      _Source: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcat(_Dest: *mut ::std::os::raw::c_char,
                      _Source: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmp(_Str1: *const ::std::os::raw::c_char,
                      _Str2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strlen(_Str: *const ::std::os::raw::c_char) -> usize;
    }
    extern "C" {
        pub fn strnlen(_Str: *const ::std::os::raw::c_char, _MaxCount: usize)
         -> usize;
    }
    extern "C" {
        pub fn _strdup(_Src: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strchr(_Str: *const ::std::os::raw::c_char,
                      _Val: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _stricmp(_Str1: *const ::std::os::raw::c_char,
                        _Str2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strcmpi(_Str1: *const ::std::os::raw::c_char,
                        _Str2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _stricmp_l(_Str1: *const ::std::os::raw::c_char,
                          _Str2: *const ::std::os::raw::c_char,
                          _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcoll(_Str1: *const ::std::os::raw::c_char,
                       _Str2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strcoll_l(_Str1: *const ::std::os::raw::c_char,
                          _Str2: *const ::std::os::raw::c_char,
                          _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _stricoll(_Str1: *const ::std::os::raw::c_char,
                         _Str2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _stricoll_l(_Str1: *const ::std::os::raw::c_char,
                           _Str2: *const ::std::os::raw::c_char,
                           _Locale: root::_locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strncoll(_Str1: *const ::std::os::raw::c_char,
                         _Str2: *const ::std::os::raw::c_char,
                         _MaxCount: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strncoll_l(_Str1: *const ::std::os::raw::c_char,
                           _Str2: *const ::std::os::raw::c_char,
                           _MaxCount: usize, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strnicoll(_Str1: *const ::std::os::raw::c_char,
                          _Str2: *const ::std::os::raw::c_char,
                          _MaxCount: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strnicoll_l(_Str1: *const ::std::os::raw::c_char,
                            _Str2: *const ::std::os::raw::c_char,
                            _MaxCount: usize, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcspn(_Str: *const ::std::os::raw::c_char,
                       _Control: *const ::std::os::raw::c_char) -> usize;
    }
    extern "C" {
        pub fn _strerror(_ErrMsg: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strerror(arg1: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strlwr(_String: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strlwr_l(_String: *mut ::std::os::raw::c_char,
                        _Locale: root::_locale_t)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncat(_Dest: *mut ::std::os::raw::c_char,
                       _Source: *const ::std::os::raw::c_char, _Count: usize)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncmp(_Str1: *const ::std::os::raw::c_char,
                       _Str2: *const ::std::os::raw::c_char, _MaxCount: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strnicmp(_Str1: *const ::std::os::raw::c_char,
                         _Str2: *const ::std::os::raw::c_char,
                         _MaxCount: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _strnicmp_l(_Str1: *const ::std::os::raw::c_char,
                           _Str2: *const ::std::os::raw::c_char,
                           _MaxCount: usize, _Locale: root::_locale_t)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncpy(_Dest: *mut ::std::os::raw::c_char,
                       _Source: *const ::std::os::raw::c_char, _Count: usize)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strnset(_Str: *mut ::std::os::raw::c_char,
                        _Val: ::std::os::raw::c_int, _MaxCount: usize)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strnset_l(str: *mut ::std::os::raw::c_char,
                          c: ::std::os::raw::c_int, count: usize,
                          _Locale: root::_locale_t)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strpbrk(_Str: *const ::std::os::raw::c_char,
                       _Control: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrchr(_Str: *const ::std::os::raw::c_char,
                       _Ch: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strrev(_Str: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strspn(_Str: *const ::std::os::raw::c_char,
                      _Control: *const ::std::os::raw::c_char) -> usize;
    }
    extern "C" {
        pub fn strstr(_Str: *const ::std::os::raw::c_char,
                      _SubStr: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok(_Str: *mut ::std::os::raw::c_char,
                      _Delim: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok_r(_Str: *mut ::std::os::raw::c_char,
                        _Delim: *const ::std::os::raw::c_char,
                        __last: *mut *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strupr(_String: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strupr_l(_String: *mut ::std::os::raw::c_char,
                         _Locale: root::_locale_t)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strxfrm(_Dst: *mut ::std::os::raw::c_char,
                       _Src: *const ::std::os::raw::c_char, _MaxCount: usize)
         -> usize;
    }
    extern "C" {
        pub fn _strxfrm_l(_Dst: *mut ::std::os::raw::c_char,
                          _Src: *const ::std::os::raw::c_char,
                          _MaxCount: usize, _Locale: root::_locale_t)
         -> usize;
    }
    extern "C" {
        pub fn strdup(_Src: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmpi(_Str1: *const ::std::os::raw::c_char,
                       _Str2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn stricmp(_Str1: *const ::std::os::raw::c_char,
                       _Str2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strlwr(_Str: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strnicmp(_Str1: *const ::std::os::raw::c_char,
                        _Str: *const ::std::os::raw::c_char, _MaxCount: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncasecmp(arg1: *const ::std::os::raw::c_char,
                           arg2: *const ::std::os::raw::c_char, arg3: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcasecmp(arg1: *const ::std::os::raw::c_char,
                          arg2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strnset(_Str: *mut ::std::os::raw::c_char,
                       _Val: ::std::os::raw::c_int, _MaxCount: usize)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrev(_Str: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strset(_Str: *mut ::std::os::raw::c_char,
                      _Val: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strupr(_Str: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_int {
    }
    pub type octave_int_val_type = u8;
    pub type octave_int8 = u8;
    pub type octave_int16 = u16;
    pub type octave_int32 = u32;
    pub type octave_int64 = u64;
    pub type octave_uint8 = u8;
    pub type octave_uint16 = u16;
    pub type octave_uint32 = u32;
    pub type octave_uint64 = u64;
    #[repr(C)]
    pub struct Array__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Array {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Array_ArrayRep {
    }
    pub type Array_element_type = u8;
    pub type Array_value_type = u8;
    pub type Array_size_type = u32;
    pub type Array_crefT = u8;
    pub type Array_compare_fcn_type = u8;
    #[repr(C)]
    pub struct Sparse__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Sparse {
    }
    pub type Sparse_element_type = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Sparse_SparseRep {
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct Range {
        pub _bindgen_opaque_blob: [u64; 9usize],
    }
    extern "C" {
        #[link_name = "_ZNK5Range21all_elements_are_intsEv"]
        pub fn Range_all_elements_are_ints(this: *const root::Range) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK5Range12matrix_valueEv"]
        pub fn Range_matrix_value(this: *const root::Range) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK5Range3minEv"]
        pub fn Range_min(this: *const root::Range) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK5Range3maxEv"]
        pub fn Range_max(this: *const root::Range) -> f64;
    }
    extern "C" {
        #[link_name = "_ZN5Range13sort_internalEb"]
        pub fn Range_sort_internal(this: *mut root::Range, ascending: bool);
    }
    extern "C" {
        #[link_name = "_ZN5Range13sort_internalER5ArrayIiEb"]
        pub fn Range_sort_internal1(this: *mut root::Range,
                                    sidx: *mut [u64; 5usize],
                                    ascending: bool);
    }
    extern "C" {
        #[link_name = "_ZNK5Range4diagEi"]
        pub fn Range_diag(this: *const root::Range, k: root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK5Range4sortEi8sortmode"]
        pub fn Range_sort(this: *const root::Range,
                          dim: root::octave_idx_type, mode: root::sortmode)
         -> root::Range;
    }
    extern "C" {
        #[link_name = "_ZNK5Range4sortER5ArrayIiEi8sortmode"]
        pub fn Range_sort1(this: *const root::Range, sidx: *mut [u64; 5usize],
                           dim: root::octave_idx_type, mode: root::sortmode)
         -> root::Range;
    }
    extern "C" {
        #[link_name = "_ZNK5Range9is_sortedE8sortmode"]
        pub fn Range_is_sorted(this: *const root::Range, mode: root::sortmode)
         -> root::sortmode;
    }
    extern "C" {
        #[link_name = "_ZNK5Range9checkelemEi"]
        pub fn Range_checkelem(this: *const root::Range,
                               i: root::octave_idx_type) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK5Range4elemEi"]
        pub fn Range_elem(this: *const root::Range, i: root::octave_idx_type)
         -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK5Range5indexERK10idx_vector"]
        pub fn Range_index(this: *const root::Range,
                           i: *const root::idx_vector) -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZN5Range8set_baseEd"]
        pub fn Range_set_base(this: *mut root::Range, b: f64);
    }
    extern "C" {
        #[link_name = "_ZN5Range9set_limitEd"]
        pub fn Range_set_limit(this: *mut root::Range, l: f64);
    }
    extern "C" {
        #[link_name = "_ZN5Range7set_incEd"]
        pub fn Range_set_inc(this: *mut root::Range, i: f64);
    }
    impl Clone for Range {
        fn clone(&self) -> Self { *self }
    }
    impl Range {
        #[inline]
        pub unsafe fn all_elements_are_ints(&self) -> bool {
            Range_all_elements_are_ints(self)
        }
        #[inline]
        pub unsafe fn matrix_value(&self) -> root::Matrix {
            Range_matrix_value(self)
        }
        #[inline]
        pub unsafe fn min(&self) -> f64 { Range_min(self) }
        #[inline]
        pub unsafe fn max(&self) -> f64 { Range_max(self) }
        #[inline]
        pub unsafe fn sort_internal(&mut self, ascending: bool) {
            Range_sort_internal(self, ascending)
        }
        #[inline]
        pub unsafe fn sort_internal1(&mut self, sidx: *mut [u64; 5usize],
                                     ascending: bool) {
            Range_sort_internal1(self, sidx, ascending)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type) -> root::Matrix {
            Range_diag(self, k)
        }
        #[inline]
        pub unsafe fn sort(&self, dim: root::octave_idx_type,
                           mode: root::sortmode) -> root::Range {
            Range_sort(self, dim, mode)
        }
        #[inline]
        pub unsafe fn sort1(&self, sidx: *mut [u64; 5usize],
                            dim: root::octave_idx_type, mode: root::sortmode)
         -> root::Range {
            Range_sort1(self, sidx, dim, mode)
        }
        #[inline]
        pub unsafe fn is_sorted(&self, mode: root::sortmode)
         -> root::sortmode {
            Range_is_sorted(self, mode)
        }
        #[inline]
        pub unsafe fn checkelem(&self, i: root::octave_idx_type) -> f64 {
            Range_checkelem(self, i)
        }
        #[inline]
        pub unsafe fn elem(&self, i: root::octave_idx_type) -> f64 {
            Range_elem(self, i)
        }
        #[inline]
        pub unsafe fn index(&self, i: *const root::idx_vector)
         -> [u64; 5usize] {
            Range_index(self, i)
        }
        #[inline]
        pub unsafe fn set_base(&mut self, b: f64) { Range_set_base(self, b) }
        #[inline]
        pub unsafe fn set_limit(&mut self, l: f64) {
            Range_set_limit(self, l)
        }
        #[inline]
        pub unsafe fn set_inc(&mut self, i: f64) { Range_set_inc(self, i) }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct idx_vector {
        pub _bindgen_opaque_blob: u64,
    }
    #[repr(i32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum idx_vector_idx_class_type {
        class_invalid = -1,
        class_colon = 0,
        class_range = 1,
        class_scalar = 2,
        class_vector = 3,
        class_mask = 4,
    }
    #[repr(C)]
    pub struct idx_vector_idx_base_rep__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct idx_vector_idx_base_rep {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for idx_vector_idx_base_rep {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct idx_vector_idx_colon_rep {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector13idx_colon_repC1Ec"]
        pub fn idx_vector_idx_colon_rep_idx_colon_rep(this:
                                                          *mut root::idx_vector_idx_colon_rep,
                                                      c:
                                                          ::std::os::raw::c_char);
    }
    impl Clone for idx_vector_idx_colon_rep {
        fn clone(&self) -> Self { *self }
    }
    impl idx_vector_idx_colon_rep {
        #[inline]
        pub unsafe fn new(c: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_colon_rep_idx_colon_rep(&mut __bindgen_tmp, c);
            __bindgen_tmp
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum idx_vector_direct { DIRECT = 0, }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct idx_vector_idx_range_rep {
        pub _bindgen_opaque_blob: [u64; 4usize],
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector13idx_range_rep9unconvertEv"]
        pub fn idx_vector_idx_range_rep_unconvert(this:
                                                      *const root::idx_vector_idx_range_rep)
         -> root::Range;
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector13idx_range_repC1Eiii"]
        pub fn idx_vector_idx_range_rep_idx_range_rep(this:
                                                          *mut root::idx_vector_idx_range_rep,
                                                      _start:
                                                          root::octave_idx_type,
                                                      _limit:
                                                          root::octave_idx_type,
                                                      _step:
                                                          root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector13idx_range_repC1ERK5Range"]
        pub fn idx_vector_idx_range_rep_idx_range_rep1(this:
                                                           *mut root::idx_vector_idx_range_rep,
                                                       arg1:
                                                           *const root::Range);
    }
    impl Clone for idx_vector_idx_range_rep {
        fn clone(&self) -> Self { *self }
    }
    impl idx_vector_idx_range_rep {
        #[inline]
        pub unsafe fn unconvert(&self) -> root::Range {
            idx_vector_idx_range_rep_unconvert(self)
        }
        #[inline]
        pub unsafe fn new(_start: root::octave_idx_type,
                          _limit: root::octave_idx_type,
                          _step: root::octave_idx_type) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_range_rep_idx_range_rep(&mut __bindgen_tmp, _start,
                                                   _limit, _step);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const root::Range) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_range_rep_idx_range_rep1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct idx_vector_idx_scalar_rep {
        pub _bindgen_opaque_blob: [u64; 3usize],
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector14idx_scalar_rep9unconvertEv"]
        pub fn idx_vector_idx_scalar_rep_unconvert(this:
                                                       *const root::idx_vector_idx_scalar_rep)
         -> f64;
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector14idx_scalar_repC1Ei"]
        pub fn idx_vector_idx_scalar_rep_idx_scalar_rep(this:
                                                            *mut root::idx_vector_idx_scalar_rep,
                                                        i:
                                                            root::octave_idx_type);
    }
    impl Clone for idx_vector_idx_scalar_rep {
        fn clone(&self) -> Self { *self }
    }
    impl idx_vector_idx_scalar_rep {
        #[inline]
        pub unsafe fn unconvert(&self) -> f64 {
            idx_vector_idx_scalar_rep_unconvert(self)
        }
        #[inline]
        pub unsafe fn new(i: root::octave_idx_type) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_scalar_rep_idx_scalar_rep(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct idx_vector_idx_vector_rep {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector14idx_vector_rep9unconvertEv"]
        pub fn idx_vector_idx_vector_rep_unconvert(this:
                                                       *const root::idx_vector_idx_vector_rep)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector14idx_vector_repC1ERK5ArrayIiE"]
        pub fn idx_vector_idx_vector_rep_idx_vector_rep(this:
                                                            *mut root::idx_vector_idx_vector_rep,
                                                        inda:
                                                            *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name =
              "_ZN10idx_vector14idx_vector_repC1ERK5ArrayIiEiNS_6directE"]
        pub fn idx_vector_idx_vector_rep_idx_vector_rep1(this:
                                                             *mut root::idx_vector_idx_vector_rep,
                                                         inda:
                                                             *const [u64; 5usize],
                                                         _ext:
                                                             root::octave_idx_type,
                                                         arg1:
                                                             root::idx_vector_direct);
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector14idx_vector_repC1Eb"]
        pub fn idx_vector_idx_vector_rep_idx_vector_rep2(this:
                                                             *mut root::idx_vector_idx_vector_rep,
                                                         arg1: bool);
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector14idx_vector_repC1ERK5ArrayIbEi"]
        pub fn idx_vector_idx_vector_rep_idx_vector_rep3(this:
                                                             *mut root::idx_vector_idx_vector_rep,
                                                         arg1:
                                                             *const [u64; 5usize],
                                                         arg2:
                                                             root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector14idx_vector_repC1ERK6SparseIbE"]
        pub fn idx_vector_idx_vector_rep_idx_vector_rep4(this:
                                                             *mut root::idx_vector_idx_vector_rep,
                                                         arg1:
                                                             *const [u64; 3usize]);
    }
    impl Clone for idx_vector_idx_vector_rep {
        fn clone(&self) -> Self { *self }
    }
    impl idx_vector_idx_vector_rep {
        #[inline]
        pub unsafe fn unconvert(&self) -> [u64; 5usize] {
            idx_vector_idx_vector_rep_unconvert(self)
        }
        #[inline]
        pub unsafe fn new(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_vector_rep_idx_vector_rep(&mut __bindgen_tmp,
                                                     inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(inda: *const [u64; 5usize],
                           _ext: root::octave_idx_type,
                           arg1: root::idx_vector_direct) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_vector_rep_idx_vector_rep1(&mut __bindgen_tmp,
                                                      inda, _ext, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(arg1: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_vector_rep_idx_vector_rep2(&mut __bindgen_tmp,
                                                      arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(arg1: *const [u64; 5usize],
                           arg2: root::octave_idx_type) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_vector_rep_idx_vector_rep3(&mut __bindgen_tmp,
                                                      arg1, arg2);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(arg1: *const [u64; 3usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_vector_rep_idx_vector_rep4(&mut __bindgen_tmp,
                                                      arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct idx_vector_idx_mask_rep {
        pub _bindgen_opaque_blob: [u64; 7usize],
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector12idx_mask_rep9unconvertEv"]
        pub fn idx_vector_idx_mask_rep_unconvert(this:
                                                     *const root::idx_vector_idx_mask_rep)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector12idx_mask_repC1Eb"]
        pub fn idx_vector_idx_mask_rep_idx_mask_rep(this:
                                                        *mut root::idx_vector_idx_mask_rep,
                                                    arg1: bool);
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector12idx_mask_repC1ERK5ArrayIbEi"]
        pub fn idx_vector_idx_mask_rep_idx_mask_rep1(this:
                                                         *mut root::idx_vector_idx_mask_rep,
                                                     arg1:
                                                         *const [u64; 5usize],
                                                     arg2:
                                                         root::octave_idx_type);
    }
    impl Clone for idx_vector_idx_mask_rep {
        fn clone(&self) -> Self { *self }
    }
    impl idx_vector_idx_mask_rep {
        #[inline]
        pub unsafe fn unconvert(&self) -> [u64; 5usize] {
            idx_vector_idx_mask_rep_unconvert(self)
        }
        #[inline]
        pub unsafe fn new(arg1: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_mask_rep_idx_mask_rep(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const [u64; 5usize],
                           arg2: root::octave_idx_type) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_mask_rep_idx_mask_rep1(&mut __bindgen_tmp, arg1,
                                                  arg2);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector5colonE"]
        pub static idx_vector_colon: root::idx_vector;
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector12maybe_reduceEiRKS_i"]
        pub fn idx_vector_maybe_reduce(this: *mut root::idx_vector,
                                       n: root::octave_idx_type,
                                       j: *const root::idx_vector,
                                       nj: root::octave_idx_type) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector13is_cont_rangeEiRiS0_"]
        pub fn idx_vector_is_cont_range(this: *const root::idx_vector,
                                        n: root::octave_idx_type,
                                        l: *mut root::octave_idx_type,
                                        u: *mut root::octave_idx_type)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector9incrementEv"]
        pub fn idx_vector_increment(this: *const root::idx_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector10complementEi"]
        pub fn idx_vector_complement(this: *const root::idx_vector,
                                     n: root::octave_idx_type)
         -> root::idx_vector;
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector14is_permutationEi"]
        pub fn idx_vector_is_permutation(this: *const root::idx_vector,
                                         n: root::octave_idx_type) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector19inverse_permutationEi"]
        pub fn idx_vector_inverse_permutation(this: *const root::idx_vector,
                                              n: root::octave_idx_type)
         -> root::idx_vector;
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector9copy_dataEPi"]
        pub fn idx_vector_copy_data(this: *const root::idx_vector,
                                    data: *mut root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector6unmaskEv"]
        pub fn idx_vector_unmask(this: *const root::idx_vector)
         -> root::idx_vector;
    }
    extern "C" {
        #[link_name =
              "_ZNK10idx_vector9unconvertERNS_14idx_class_typeERdR5RangeR5ArrayIdERS5_IbE"]
        pub fn idx_vector_unconvert(this: *const root::idx_vector,
                                    iclass:
                                        *mut root::idx_vector_idx_class_type,
                                    scalar: *mut f64, range: *mut root::Range,
                                    array: *mut [u64; 5usize],
                                    mask: *mut [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector8as_arrayEv"]
        pub fn idx_vector_as_array(this: *const root::idx_vector)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector3rawEv"]
        pub fn idx_vector_raw(this: *mut root::idx_vector)
         -> *const root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector9is_vectorEv"]
        pub fn idx_vector_is_vector(this: *const root::idx_vector) -> bool;
    }
    extern "C" {
        #[link_name = "_ZN10idx_vector6freezeEiPKcb"]
        pub fn idx_vector_freeze(this: *mut root::idx_vector,
                                 z_len: root::octave_idx_type,
                                 tag: *const ::std::os::raw::c_char,
                                 resize_ok: bool) -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK10idx_vector10ones_countEv"]
        pub fn idx_vector_ones_count(this: *const root::idx_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZN10idx_vectorC1ERK5ArrayIbE"]
        pub fn idx_vector_idx_vector(this: *mut root::idx_vector,
                                     nda: *const [u64; 5usize]);
    }
    impl Clone for idx_vector {
        fn clone(&self) -> Self { *self }
    }
    impl idx_vector {
        #[inline]
        pub unsafe fn maybe_reduce(&mut self, n: root::octave_idx_type,
                                   j: *const root::idx_vector,
                                   nj: root::octave_idx_type) -> bool {
            idx_vector_maybe_reduce(self, n, j, nj)
        }
        #[inline]
        pub unsafe fn is_cont_range(&self, n: root::octave_idx_type,
                                    l: *mut root::octave_idx_type,
                                    u: *mut root::octave_idx_type) -> bool {
            idx_vector_is_cont_range(self, n, l, u)
        }
        #[inline]
        pub unsafe fn increment(&self) -> root::octave_idx_type {
            idx_vector_increment(self)
        }
        #[inline]
        pub unsafe fn complement(&self, n: root::octave_idx_type)
         -> root::idx_vector {
            idx_vector_complement(self, n)
        }
        #[inline]
        pub unsafe fn is_permutation(&self, n: root::octave_idx_type)
         -> bool {
            idx_vector_is_permutation(self, n)
        }
        #[inline]
        pub unsafe fn inverse_permutation(&self, n: root::octave_idx_type)
         -> root::idx_vector {
            idx_vector_inverse_permutation(self, n)
        }
        #[inline]
        pub unsafe fn copy_data(&self, data: *mut root::octave_idx_type) {
            idx_vector_copy_data(self, data)
        }
        #[inline]
        pub unsafe fn unmask(&self) -> root::idx_vector {
            idx_vector_unmask(self)
        }
        #[inline]
        pub unsafe fn unconvert(&self,
                                iclass: *mut root::idx_vector_idx_class_type,
                                scalar: *mut f64, range: *mut root::Range,
                                array: *mut [u64; 5usize],
                                mask: *mut [u64; 5usize]) {
            idx_vector_unconvert(self, iclass, scalar, range, array, mask)
        }
        #[inline]
        pub unsafe fn as_array(&self) -> [u64; 5usize] {
            idx_vector_as_array(self)
        }
        #[inline]
        pub unsafe fn raw(&mut self) -> *const root::octave_idx_type {
            idx_vector_raw(self)
        }
        #[inline]
        pub unsafe fn is_vector(&self) -> bool { idx_vector_is_vector(self) }
        #[inline]
        pub unsafe fn freeze(&mut self, z_len: root::octave_idx_type,
                             tag: *const ::std::os::raw::c_char,
                             resize_ok: bool) -> root::octave_idx_type {
            idx_vector_freeze(self, z_len, tag, resize_ok)
        }
        #[inline]
        pub unsafe fn ones_count(&self) -> root::octave_idx_type {
            idx_vector_ones_count(self)
        }
        #[inline]
        pub unsafe fn new(nda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            idx_vector_idx_vector(&mut __bindgen_tmp, nda);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct equal_types {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct is_instance {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct is_class_type {
        pub _address: u8,
    }
    pub type is_class_type_one = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct is_class_type_two {
    }
    pub const is_class_type_yes: root::is_class_type__bindgen_ty_1 =
        is_class_type__bindgen_ty_1::yes;
    #[repr(i32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum is_class_type__bindgen_ty_1 { yes = 0, }
    pub const is_class_type_no: root::is_class_type__bindgen_ty_2 =
        is_class_type__bindgen_ty_2::no;
    #[repr(i32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum is_class_type__bindgen_ty_2 { no = 0, }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ref_param {
        pub _address: u8,
    }
    pub type ref_param_type = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct strip_template_param {
        pub _address: u8,
    }
    pub type strip_template_param_type = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct subst_template_param {
        pub _address: u8,
    }
    pub type subst_template_param_type = u8;
    pub type wctrans_t = u16;
    extern "C" {
        pub fn towctrans(arg1: root::wint_t, arg2: root::wctrans_t)
         -> root::wint_t;
    }
    extern "C" {
        pub fn wctrans(arg1: *const ::std::os::raw::c_char)
         -> root::wctrans_t;
    }
    extern "C" {
        pub fn wctype(arg1: *const ::std::os::raw::c_char) -> root::wctype_t;
    }
    pub type _pid_t = u64;
    pub type pid_t = u64;
    pub type _mode_t = u16;
    pub type mode_t = u16;
    pub type useconds_t = u32;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct timespec {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for timespec {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct itimerspec {
        pub _bindgen_opaque_blob: [u64; 4usize],
    }
    impl Clone for itimerspec {
        fn clone(&self) -> Self { *self }
    }
    pub type _sigset_t = u64;
    extern "C" {
        pub fn octave_qsort(base: *mut ::std::os::raw::c_void, n: usize,
                            size: usize,
                            cmp:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *const ::std::os::raw::c_void,
                                                                           arg2:
                                                                               *const ::std::os::raw::c_void)
                                                          ->
                                                              ::std::os::raw::c_int>);
    }
    extern "C" {
        pub fn octave_strcasecmp(s1: *const ::std::os::raw::c_char,
                                 s2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn octave_strncasecmp(s1: *const ::std::os::raw::c_char,
                                  s2: *const ::std::os::raw::c_char, n: usize)
         -> ::std::os::raw::c_int;
    }
    pub type Complex = [u64; 2usize];
    pub type FloatComplex = [u32; 2usize];
    extern "C" {
        #[link_name = "_Z21xis_int_or_inf_or_nand"]
        pub fn xis_int_or_inf_or_nan(x: f64) -> bool;
    }
    extern "C" {
        #[link_name = "_Z15xis_one_or_zerod"]
        pub fn xis_one_or_zero(x: f64) -> bool;
    }
    extern "C" {
        #[link_name = "_Z8xis_zerod"]
        pub fn xis_zero(x: f64) -> bool;
    }
    extern "C" {
        #[link_name = "_Z20xtoo_large_for_floatd"]
        pub fn xtoo_large_for_float(x: f64) -> bool;
    }
    extern "C" {
        #[link_name = "_Z20xtoo_large_for_floatRKSt7complexIdE"]
        pub fn xtoo_large_for_float1(x: *const root::Complex) -> bool;
    }
    extern "C" {
        #[link_name = "_Z21xis_int_or_inf_or_nanf"]
        pub fn xis_int_or_inf_or_nan1(x: f32) -> bool;
    }
    extern "C" {
        #[link_name = "_Z15xis_one_or_zerof"]
        pub fn xis_one_or_zero1(x: f32) -> bool;
    }
    extern "C" {
        #[link_name = "_Z8xis_zerof"]
        pub fn xis_zero1(x: f32) -> bool;
    }
    extern "C" {
        #[link_name = "_Z20xtoo_large_for_floatf"]
        pub fn xtoo_large_for_float2(x: f32) -> bool;
    }
    extern "C" {
        #[link_name = "_Z7strsavePKc"]
        pub fn strsave(arg1: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_Z13octave_putenvRKSsS0_"]
        pub fn octave_putenv(arg1: *const root::std::string,
                             arg2: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z12octave_fgetsP6_iobuf"]
        pub fn octave_fgets(arg1: *mut root::FILE) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z12octave_fgetlP6_iobuf"]
        pub fn octave_fgetl(arg1: *mut root::FILE) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z12octave_fgetsP6_iobufRb"]
        pub fn octave_fgets1(arg1: *mut root::FILE, eof: *mut bool)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z12octave_fgetlP6_iobufRb"]
        pub fn octave_fgetl1(arg1: *mut root::FILE, eof: *mut bool)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z17octave_read_valueIdET_RSi"]
        pub fn octave_read_value(is: *mut root::std::istream) -> f64;
    }
    extern "C" {
        #[link_name = "_Z17octave_read_valueISt7complexIdEET_RSi"]
        pub fn octave_read_value1(is: *mut root::std::istream)
         -> root::Complex;
    }
    extern "C" {
        #[link_name = "_Z17octave_read_valueIfET_RSi"]
        pub fn octave_read_value2(is: *mut root::std::istream) -> f32;
    }
    extern "C" {
        #[link_name = "_Z17octave_read_valueISt7complexIfEET_RSi"]
        pub fn octave_read_value3(is: *mut root::std::istream)
         -> root::FloatComplex;
    }
    extern "C" {
        #[link_name = "_Z19octave_write_doubleRSod"]
        pub fn octave_write_double(os: *mut root::std::ostream, dval: f64);
    }
    extern "C" {
        #[link_name = "_Z20octave_write_complexRSoRKSt7complexIdE"]
        pub fn octave_write_complex(os: *mut root::std::ostream,
                                    cval: *const root::Complex);
    }
    extern "C" {
        #[link_name = "_Z18octave_write_floatRSof"]
        pub fn octave_write_float(os: *mut root::std::ostream, dval: f32);
    }
    extern "C" {
        #[link_name = "_Z26octave_write_float_complexRSoRKSt7complexIfE"]
        pub fn octave_write_float_complex(os: *mut root::std::ostream,
                                          cval: *const root::FloatComplex);
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum sortmode { UNSORTED = 0, ASCENDING = 1, DESCENDING = 2, }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_sort {
    }
    pub type octave_sort_compare_fcn_type = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_sort_s_slice {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_sort_MergeState {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct vec_index {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NoAlias {
    }
    pub type NoAlias_T = u8;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct PermMatrix {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZNK10PermMatrix9checkelemEii"]
        pub fn PermMatrix_checkelem(this: *const root::PermMatrix,
                                    i: root::octave_idx_type,
                                    j: root::octave_idx_type)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK10PermMatrix9transposeEv"]
        pub fn PermMatrix_transpose(this: *const root::PermMatrix)
         -> root::PermMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10PermMatrix7inverseEv"]
        pub fn PermMatrix_inverse(this: *const root::PermMatrix)
         -> root::PermMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10PermMatrix11determinantEv"]
        pub fn PermMatrix_determinant(this: *const root::PermMatrix)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK10PermMatrix5powerEi"]
        pub fn PermMatrix_power(this: *const root::PermMatrix,
                                n: root::octave_idx_type) -> root::PermMatrix;
    }
    extern "C" {
        #[link_name = "_ZN10PermMatrix3eyeEi"]
        pub fn PermMatrix_eye(n: root::octave_idx_type) -> root::PermMatrix;
    }
    extern "C" {
        #[link_name = "_ZN10PermMatrixC1Ei"]
        pub fn PermMatrix_PermMatrix(this: *mut root::PermMatrix,
                                     n: root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_ZN10PermMatrixC1ERK5ArrayIiE"]
        pub fn PermMatrix_PermMatrix1(this: *mut root::PermMatrix,
                                      p: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN10PermMatrixC1ERK5ArrayIiEbb"]
        pub fn PermMatrix_PermMatrix2(this: *mut root::PermMatrix,
                                      p: *const [u64; 5usize], colp: bool,
                                      check: bool);
    }
    extern "C" {
        #[link_name = "_ZN10PermMatrixC1ERK10idx_vector"]
        pub fn PermMatrix_PermMatrix3(this: *mut root::PermMatrix,
                                      idx: *const root::idx_vector);
    }
    extern "C" {
        #[link_name = "_ZN10PermMatrixC1ERK10idx_vectorbi"]
        pub fn PermMatrix_PermMatrix4(this: *mut root::PermMatrix,
                                      idx: *const root::idx_vector,
                                      colp: bool, n: root::octave_idx_type);
    }
    impl Clone for PermMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl PermMatrix {
        #[inline]
        pub unsafe fn checkelem(&self, i: root::octave_idx_type,
                                j: root::octave_idx_type)
         -> root::octave_idx_type {
            PermMatrix_checkelem(self, i, j)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::PermMatrix {
            PermMatrix_transpose(self)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::PermMatrix {
            PermMatrix_inverse(self)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::octave_idx_type {
            PermMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn power(&self, n: root::octave_idx_type)
         -> root::PermMatrix {
            PermMatrix_power(self, n)
        }
        #[inline]
        pub unsafe fn eye(n: root::octave_idx_type) -> root::PermMatrix {
            PermMatrix_eye(n)
        }
        #[inline]
        pub unsafe fn new(n: root::octave_idx_type) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PermMatrix_PermMatrix(&mut __bindgen_tmp, n);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(p: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PermMatrix_PermMatrix1(&mut __bindgen_tmp, p);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(p: *const [u64; 5usize], colp: bool, check: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PermMatrix_PermMatrix2(&mut __bindgen_tmp, p, colp, check);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(idx: *const root::idx_vector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PermMatrix_PermMatrix3(&mut __bindgen_tmp, idx);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(idx: *const root::idx_vector, colp: bool,
                           n: root::octave_idx_type) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PermMatrix_PermMatrix4(&mut __bindgen_tmp, idx, colp, n);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_local_buffer {
    }
    #[repr(C)]
    pub struct octave_chunk_buffer__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_chunk_buffer {
        pub _bindgen_opaque_blob: [u64; 3usize],
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer10chunk_sizeE"]
        pub static octave_chunk_buffer_chunk_size: usize;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer3topE"]
        pub static mut octave_chunk_buffer_top: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer5chunkE"]
        pub static mut octave_chunk_buffer_chunk: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer4leftE"]
        pub static mut octave_chunk_buffer_left: usize;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer6activeE"]
        pub static mut octave_chunk_buffer_active: usize;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer5clearEv"]
        pub fn octave_chunk_buffer_clear();
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_bufferC1Ey"]
        pub fn octave_chunk_buffer_octave_chunk_buffer(this:
                                                           *mut root::octave_chunk_buffer,
                                                       size: usize);
    }
    impl Clone for octave_chunk_buffer {
        fn clone(&self) -> Self { *self }
    }
    impl octave_chunk_buffer {
        #[inline]
        pub unsafe fn clear() { octave_chunk_buffer_clear() }
        #[inline]
        pub unsafe fn new(size: usize) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_chunk_buffer_octave_chunk_buffer(&mut __bindgen_tmp, size);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct lo_ieee_double {
        pub _bindgen_opaque_blob: u64,
    }
    impl Clone for lo_ieee_double {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct lo_ieee_float {
        pub _bindgen_opaque_blob: u32,
    }
    impl Clone for lo_ieee_float {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        pub fn octave_ieee_init();
    }
    extern "C" {
        pub fn __lo_ieee_isnan(x: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_finite(x: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_isinf(x: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_is_NA(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_is_old_NA(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_replace_old_NA(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lo_ieee_inf_value() -> f64;
    }
    extern "C" {
        pub fn lo_ieee_na_value() -> f64;
    }
    extern "C" {
        pub fn lo_ieee_nan_value() -> f64;
    }
    extern "C" {
        pub fn __lo_ieee_signbit(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_float_isnan(x: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_float_finite(x: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_float_isinf(x: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lo_ieee_float_is_NA(arg1: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lo_ieee_float_inf_value() -> f32;
    }
    extern "C" {
        pub fn lo_ieee_float_na_value() -> f32;
    }
    extern "C" {
        pub fn lo_ieee_float_nan_value() -> f32;
    }
    extern "C" {
        pub fn __lo_ieee_float_signbit(arg1: f32) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_int_cmp_op_prom {
        pub _address: u8,
    }
    pub type octave_int_cmp_op_prom_type = u8;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_lt {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    pub const octave_int_cmp_op_lt_ltval: bool = true;
    pub const octave_int_cmp_op_lt_gtval: bool = false;
    impl Clone for octave_int_cmp_op_lt {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_le {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    pub const octave_int_cmp_op_le_ltval: bool = true;
    pub const octave_int_cmp_op_le_gtval: bool = false;
    impl Clone for octave_int_cmp_op_le {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_gt {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    pub const octave_int_cmp_op_gt_ltval: bool = false;
    pub const octave_int_cmp_op_gt_gtval: bool = true;
    impl Clone for octave_int_cmp_op_gt {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_ge {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    pub const octave_int_cmp_op_ge_ltval: bool = false;
    pub const octave_int_cmp_op_ge_gtval: bool = true;
    impl Clone for octave_int_cmp_op_ge {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_eq {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    pub const octave_int_cmp_op_eq_ltval: bool = false;
    pub const octave_int_cmp_op_eq_gtval: bool = false;
    impl Clone for octave_int_cmp_op_eq {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_ne {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    pub const octave_int_cmp_op_ne_ltval: bool = true;
    pub const octave_int_cmp_op_ne_gtval: bool = true;
    impl Clone for octave_int_cmp_op_ne {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_ct {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    pub const octave_int_cmp_op_ct_ltval: bool = true;
    pub const octave_int_cmp_op_ct_gtval: bool = true;
    impl Clone for octave_int_cmp_op_ct {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_cf {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    pub const octave_int_cmp_op_cf_ltval: bool = false;
    pub const octave_int_cmp_op_cf_gtval: bool = false;
    impl Clone for octave_int_cmp_op_cf {
        fn clone(&self) -> Self { *self }
    }
    impl Clone for octave_int_cmp_op {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_int_base {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_int_arith {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "_Z15index_in_boundsRK5ArrayIiERK10dim_vector"]
        pub fn index_in_bounds(ra_idx: *const [u64; 5usize],
                               dimensions: *const root::dim_vector) -> bool;
    }
    extern "C" {
        #[link_name = "_Z15increment_indexR5ArrayIiERK10dim_vectori"]
        pub fn increment_index(ra_idx: *mut [u64; 5usize],
                               dimensions: *const root::dim_vector,
                               start_dimension: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "_Z14get_scalar_idxR5ArrayIiER10dim_vector"]
        pub fn get_scalar_idx(idx: *mut [u64; 5usize],
                              dims: *mut root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_Z8num_onesRK5ArrayIiE"]
        pub fn num_ones(ra_idx: *const [u64; 5usize])
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_Z9is_scalarRK10dim_vector"]
        pub fn is_scalar(dim: *const root::dim_vector) -> bool;
    }
    extern "C" {
        #[link_name = "_Z9is_vectorRK10dim_vector"]
        pub fn is_vector(dim: *const root::dim_vector) -> bool;
    }
    extern "C" {
        #[link_name = "_Z8any_onesRK5ArrayIiE"]
        pub fn any_ones(arr: *const [u64; 5usize]) -> bool;
    }
    extern "C" {
        #[link_name = "_Z13compute_indexiRK10dim_vector"]
        pub fn compute_index(n: root::octave_idx_type,
                             dims: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_Z13compute_indexiiRK10dim_vector"]
        pub fn compute_index1(i: root::octave_idx_type,
                              j: root::octave_idx_type,
                              dims: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_Z13compute_indexiiiRK10dim_vector"]
        pub fn compute_index2(i: root::octave_idx_type,
                              j: root::octave_idx_type,
                              k: root::octave_idx_type,
                              dims: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_Z13compute_indexRK5ArrayIiERK10dim_vector"]
        pub fn compute_index3(ra_idx: *const [u64; 5usize],
                              dims: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_Z17conv_to_int_arrayRK5ArrayI10idx_vectorE"]
        pub fn conv_to_int_array(a: *const u8) -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_Z13conv_to_arrayPK10idx_vectori"]
        pub fn conv_to_array(tmp: *const root::idx_vector,
                             len: root::octave_idx_type) -> u8;
    }
    extern "C" {
        #[link_name = "_Z6freezeR5ArrayI10idx_vectorERK10dim_vectori"]
        pub fn freeze(ra_idx: *mut u8, dimensions: *const root::dim_vector,
                      resize_ok: ::std::os::raw::c_int) -> root::dim_vector;
    }
    extern "C" {
        #[link_name = "_Z17vector_equivalentRK10dim_vector"]
        pub fn vector_equivalent(dv: *const root::dim_vector) -> bool;
    }
    extern "C" {
        #[link_name = "_Z6all_okRK5ArrayI10idx_vectorE"]
        pub fn all_ok(ra_idx: *const u8) -> bool;
    }
    extern "C" {
        #[link_name = "_Z14any_orig_emptyRK5ArrayI10idx_vectorE"]
        pub fn any_orig_empty(ra_idx: *const u8) -> bool;
    }
    extern "C" {
        #[link_name =
              "_Z15all_colon_equivRK5ArrayI10idx_vectorERK10dim_vector"]
        pub fn all_colon_equiv(ra_idx: *const u8,
                               frozen_lengths: *const root::dim_vector)
         -> bool;
    }
    extern "C" {
        #[link_name = "_Z8all_onesRK5ArrayIiE"]
        pub fn all_ones(arr: *const [u64; 5usize]) -> bool;
    }
    extern "C" {
        #[link_name = "_Z11get_elt_idxRK5ArrayI10idx_vectorERKS_IiE"]
        pub fn get_elt_idx(ra_idx: *const u8,
                           result_idx: *const [u64; 5usize]) -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_Z10get_ra_idxiRK10dim_vector"]
        pub fn get_ra_idx(idx: root::octave_idx_type,
                          dims: *const root::dim_vector) -> [u64; 5usize];
    }
    extern "C" {
        #[link_name =
              "_Z17zero_dims_inquireRK5ArrayI10idx_vectorERK10dim_vector"]
        pub fn zero_dims_inquire(ia: *const u8, rhdv: *const root::dim_vector)
         -> root::dim_vector;
    }
    extern "C" {
        #[link_name = "_Z17zero_dims_inquireRK10idx_vectorS1_RK10dim_vector"]
        pub fn zero_dims_inquire1(i: *const root::idx_vector,
                                  j: *const root::idx_vector,
                                  rhdv: *const root::dim_vector)
         -> root::dim_vector;
    }
    extern "C" {
        #[link_name = "_Z7sub2indRK10dim_vectorRK5ArrayI10idx_vectorE"]
        pub fn sub2ind(dv: *const root::dim_vector, idxa: *const u8)
         -> root::idx_vector;
    }
    extern "C" {
        #[link_name = "_Z7ind2subRK10dim_vectorRK10idx_vector"]
        pub fn ind2sub(dv: *const root::dim_vector,
                       idx: *const root::idx_vector) -> u8;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct permute_vector {
        pub _bindgen_opaque_blob: [u32; 2usize],
    }
    impl Clone for permute_vector {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        #[link_name = "_Z22permute_vector_comparePKvS0_"]
        pub fn permute_vector_compare(a: *const ::std::os::raw::c_void,
                                      b: *const ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MArray {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MSparse {
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct Matrix {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    pub type Matrix_column_vector_type = [u64; 5usize];
    pub type Matrix_row_vector_type = [u64; 5usize];
    pub type Matrix_real_column_vector_type = [u64; 5usize];
    pub type Matrix_real_row_vector_type = [u64; 5usize];
    pub type Matrix_real_matrix_type = [u64; 5usize];
    pub type Matrix_complex_matrix_type = [u64; 5usize];
    pub type Matrix_real_diag_matrix_type = [u64; 6usize];
    pub type Matrix_complex_diag_matrix_type = [u64; 6usize];
    pub type Matrix_real_elt_type = u64;
    pub type Matrix_complex_elt_type = [u64; 2usize];
    pub type Matrix_solve_singularity_handler = u64;
    extern "C" {
        #[link_name = "_ZNK6Matrix12is_symmetricEv"]
        pub fn Matrix_is_symmetric(this: *const root::Matrix) -> bool;
    }
    extern "C" {
        #[link_name = "_ZN6Matrix6insertERKS_ii"]
        pub fn Matrix_insert(this: *mut root::Matrix, a: *const root::Matrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type) -> *mut root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZN6Matrix6insertERK9RowVectorii"]
        pub fn Matrix_insert1(this: *mut root::Matrix,
                              a: *const root::RowVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type) -> *mut root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZN6Matrix6insertERK12ColumnVectorii"]
        pub fn Matrix_insert2(this: *mut root::Matrix,
                              a: *const root::ColumnVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type) -> *mut root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZN6Matrix6insertERK10DiagMatrixii"]
        pub fn Matrix_insert3(this: *mut root::Matrix,
                              a: *const root::DiagMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type) -> *mut root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZN6Matrix4fillEd"]
        pub fn Matrix_fill(this: *mut root::Matrix, val: f64)
         -> *mut root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZN6Matrix4fillEdiiii"]
        pub fn Matrix_fill1(this: *mut root::Matrix, val: f64,
                            r1: root::octave_idx_type,
                            c1: root::octave_idx_type,
                            r2: root::octave_idx_type,
                            c2: root::octave_idx_type) -> *mut root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix6appendERKS_"]
        pub fn Matrix_append(this: *const root::Matrix,
                             a: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix6appendERK9RowVector"]
        pub fn Matrix_append1(this: *const root::Matrix,
                              a: *const root::RowVector) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix6appendERK12ColumnVector"]
        pub fn Matrix_append2(this: *const root::Matrix,
                              a: *const root::ColumnVector) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix6appendERK10DiagMatrix"]
        pub fn Matrix_append3(this: *const root::Matrix,
                              a: *const root::DiagMatrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5stackERKS_"]
        pub fn Matrix_stack(this: *const root::Matrix, a: *const root::Matrix)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5stackERK9RowVector"]
        pub fn Matrix_stack1(this: *const root::Matrix,
                             a: *const root::RowVector) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5stackERK12ColumnVector"]
        pub fn Matrix_stack2(this: *const root::Matrix,
                             a: *const root::ColumnVector) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5stackERK10DiagMatrix"]
        pub fn Matrix_stack3(this: *const root::Matrix,
                             a: *const root::DiagMatrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7extractEiiii"]
        pub fn Matrix_extract(this: *const root::Matrix,
                              r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix9extract_nEiiii"]
        pub fn Matrix_extract_n(this: *const root::Matrix,
                                r1: root::octave_idx_type,
                                c1: root::octave_idx_type,
                                nr: root::octave_idx_type,
                                nc: root::octave_idx_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix3rowEi"]
        pub fn Matrix_row(this: *const root::Matrix, i: root::octave_idx_type)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix6columnEi"]
        pub fn Matrix_column(this: *const root::Matrix,
                             i: root::octave_idx_type) -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7inverseEv"]
        pub fn Matrix_inverse(this: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7inverseERi"]
        pub fn Matrix_inverse1(this: *const root::Matrix,
                               info: *mut root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7inverseERiRdbb"]
        pub fn Matrix_inverse2(this: *const root::Matrix,
                               info: *mut root::octave_idx_type,
                               rcon: *mut f64, force: bool, calc_cond: bool)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7inverseER10MatrixType"]
        pub fn Matrix_inverse3(this: *const root::Matrix,
                               mattype: *mut root::MatrixType)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7inverseER10MatrixTypeRi"]
        pub fn Matrix_inverse4(this: *const root::Matrix,
                               mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7inverseER10MatrixTypeRiRdbb"]
        pub fn Matrix_inverse5(this: *const root::Matrix,
                               mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type,
                               rcon: *mut f64, force: bool, calc_cond: bool)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix14pseudo_inverseEd"]
        pub fn Matrix_pseudo_inverse(this: *const root::Matrix, tol: f64)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7fourierEv"]
        pub fn Matrix_fourier(this: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix8ifourierEv"]
        pub fn Matrix_ifourier(this: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix9fourier2dEv"]
        pub fn Matrix_fourier2d(this: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix10ifourier2dEv"]
        pub fn Matrix_ifourier2d(this: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix11determinantEv"]
        pub fn Matrix_determinant(this: *const root::Matrix) -> root::DET;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix11determinantERi"]
        pub fn Matrix_determinant1(this: *const root::Matrix,
                                   info: *mut root::octave_idx_type)
         -> root::DET;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix11determinantERiRdb"]
        pub fn Matrix_determinant2(this: *const root::Matrix,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f64, calc_cond: bool)
         -> root::DET;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix11determinantER10MatrixTypeRiRdb"]
        pub fn Matrix_determinant3(this: *const root::Matrix,
                                   mattype: *mut root::MatrixType,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f64, calc_cond: bool)
         -> root::DET;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5rcondEv"]
        pub fn Matrix_rcond(this: *const root::Matrix) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5rcondER10MatrixType"]
        pub fn Matrix_rcond1(this: *const root::Matrix,
                             mattype: *mut root::MatrixType) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRKS_"]
        pub fn Matrix_solve(this: *const root::Matrix,
                            typ: *mut root::MatrixType,
                            b: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRKS_Ri"]
        pub fn Matrix_solve1(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRKS_RiRd"]
        pub fn Matrix_solve2(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveER10MatrixTypeRKS_RiRdPFvdEb15blas_trans_type"]
        pub fn Matrix_solve3(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64,
                             sing_handler:
                                 root::Matrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRK13ComplexMatrix"]
        pub fn Matrix_solve4(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRK13ComplexMatrixRi"]
        pub fn Matrix_solve5(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRK13ComplexMatrixRiRd"]
        pub fn Matrix_solve6(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveER10MatrixTypeRK13ComplexMatrixRiRdPFvdEb15blas_trans_type"]
        pub fn Matrix_solve7(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64,
                             sing_handler:
                                 root::Matrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRK12ColumnVector"]
        pub fn Matrix_solve8(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::ColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRK12ColumnVectorRi"]
        pub fn Matrix_solve9(this: *const root::Matrix,
                             typ: *mut root::MatrixType,
                             b: *const root::ColumnVector,
                             info: *mut root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveER10MatrixTypeRK12ColumnVectorRiRd"]
        pub fn Matrix_solve10(this: *const root::Matrix,
                              typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveER10MatrixTypeRK12ColumnVectorRiRdPFvdE15blas_trans_type"]
        pub fn Matrix_solve11(this: *const root::Matrix,
                              typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveER10MatrixTypeRK19ComplexColumnVector"]
        pub fn Matrix_solve12(this: *const root::Matrix,
                              typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveER10MatrixTypeRK19ComplexColumnVectorRi"]
        pub fn Matrix_solve13(this: *const root::Matrix,
                              typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveER10MatrixTypeRK19ComplexColumnVectorRiRd"]
        pub fn Matrix_solve14(this: *const root::Matrix,
                              typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveER10MatrixTypeRK19ComplexColumnVectorRiRdPFvdE15blas_trans_type"]
        pub fn Matrix_solve15(this: *const root::Matrix,
                              typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERKS_"]
        pub fn Matrix_solve16(this: *const root::Matrix,
                              b: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERKS_Ri"]
        pub fn Matrix_solve17(this: *const root::Matrix,
                              b: *const root::Matrix,
                              info: *mut root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERKS_RiRd"]
        pub fn Matrix_solve18(this: *const root::Matrix,
                              b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERKS_RiRdPFvdE15blas_trans_type"]
        pub fn Matrix_solve19(this: *const root::Matrix,
                              b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK13ComplexMatrix"]
        pub fn Matrix_solve20(this: *const root::Matrix,
                              b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK13ComplexMatrixRi"]
        pub fn Matrix_solve21(this: *const root::Matrix,
                              b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK13ComplexMatrixRiRd"]
        pub fn Matrix_solve22(this: *const root::Matrix,
                              b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveERK13ComplexMatrixRiRdPFvdE15blas_trans_type"]
        pub fn Matrix_solve23(this: *const root::Matrix,
                              b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK12ColumnVector"]
        pub fn Matrix_solve24(this: *const root::Matrix,
                              b: *const root::ColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK12ColumnVectorRi"]
        pub fn Matrix_solve25(this: *const root::Matrix,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK12ColumnVectorRiRd"]
        pub fn Matrix_solve26(this: *const root::Matrix,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveERK12ColumnVectorRiRdPFvdE15blas_trans_type"]
        pub fn Matrix_solve27(this: *const root::Matrix,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK19ComplexColumnVector"]
        pub fn Matrix_solve28(this: *const root::Matrix,
                              b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK19ComplexColumnVectorRi"]
        pub fn Matrix_solve29(this: *const root::Matrix,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5solveERK19ComplexColumnVectorRiRd"]
        pub fn Matrix_solve30(this: *const root::Matrix,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK6Matrix5solveERK19ComplexColumnVectorRiRdPFvdE15blas_trans_type"]
        pub fn Matrix_solve31(this: *const root::Matrix,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERKS_"]
        pub fn Matrix_lssolve(this: *const root::Matrix,
                              b: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERKS_Ri"]
        pub fn Matrix_lssolve1(this: *const root::Matrix,
                               b: *const root::Matrix,
                               info: *mut root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERKS_RiS2_"]
        pub fn Matrix_lssolve2(this: *const root::Matrix,
                               b: *const root::Matrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERKS_RiS2_Rd"]
        pub fn Matrix_lssolve3(this: *const root::Matrix,
                               b: *const root::Matrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f64) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK13ComplexMatrix"]
        pub fn Matrix_lssolve4(this: *const root::Matrix,
                               b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK13ComplexMatrixRi"]
        pub fn Matrix_lssolve5(this: *const root::Matrix,
                               b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK13ComplexMatrixRiS3_"]
        pub fn Matrix_lssolve6(this: *const root::Matrix,
                               b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK13ComplexMatrixRiS3_Rd"]
        pub fn Matrix_lssolve7(this: *const root::Matrix,
                               b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK12ColumnVector"]
        pub fn Matrix_lssolve8(this: *const root::Matrix,
                               b: *const root::ColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK12ColumnVectorRi"]
        pub fn Matrix_lssolve9(this: *const root::Matrix,
                               b: *const root::ColumnVector,
                               info: *mut root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK12ColumnVectorRiS3_"]
        pub fn Matrix_lssolve10(this: *const root::Matrix,
                                b: *const root::ColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK12ColumnVectorRiS3_Rd"]
        pub fn Matrix_lssolve11(this: *const root::Matrix,
                                b: *const root::ColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f64) -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK19ComplexColumnVector"]
        pub fn Matrix_lssolve12(this: *const root::Matrix,
                                b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK19ComplexColumnVectorRi"]
        pub fn Matrix_lssolve13(this: *const root::Matrix,
                                b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK19ComplexColumnVectorRiS3_"]
        pub fn Matrix_lssolve14(this: *const root::Matrix,
                                b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7lssolveERK19ComplexColumnVectorRiS3_Rd"]
        pub fn Matrix_lssolve15(this: *const root::Matrix,
                                b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f64) -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix3allEi"]
        pub fn Matrix_all(this: *const root::Matrix,
                          dim: ::std::os::raw::c_int) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix3anyEi"]
        pub fn Matrix_any(this: *const root::Matrix,
                          dim: ::std::os::raw::c_int) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7cumprodEi"]
        pub fn Matrix_cumprod(this: *const root::Matrix,
                              dim: ::std::os::raw::c_int) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix6cumsumEi"]
        pub fn Matrix_cumsum(this: *const root::Matrix,
                             dim: ::std::os::raw::c_int) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix4prodEi"]
        pub fn Matrix_prod(this: *const root::Matrix,
                           dim: ::std::os::raw::c_int) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix3sumEi"]
        pub fn Matrix_sum(this: *const root::Matrix,
                          dim: ::std::os::raw::c_int) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix5sumsqEi"]
        pub fn Matrix_sumsq(this: *const root::Matrix,
                            dim: ::std::os::raw::c_int) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix3absEv"]
        pub fn Matrix_abs(this: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix4diagEi"]
        pub fn Matrix_diag(this: *const root::Matrix,
                           k: root::octave_idx_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix4diagEii"]
        pub fn Matrix_diag1(this: *const root::Matrix,
                            m: root::octave_idx_type,
                            n: root::octave_idx_type) -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7row_minEv"]
        pub fn Matrix_row_min(this: *const root::Matrix)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7row_maxEv"]
        pub fn Matrix_row_max(this: *const root::Matrix)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7row_minER5ArrayIiE"]
        pub fn Matrix_row_min1(this: *const root::Matrix,
                               index: *mut [u64; 5usize])
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix7row_maxER5ArrayIiE"]
        pub fn Matrix_row_max1(this: *const root::Matrix,
                               index: *mut [u64; 5usize])
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix10column_minEv"]
        pub fn Matrix_column_min(this: *const root::Matrix)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix10column_maxEv"]
        pub fn Matrix_column_max(this: *const root::Matrix)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix10column_minER5ArrayIiE"]
        pub fn Matrix_column_min1(this: *const root::Matrix,
                                  index: *mut [u64; 5usize])
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK6Matrix10column_maxER5ArrayIiE"]
        pub fn Matrix_column_max1(this: *const root::Matrix,
                                  index: *mut [u64; 5usize])
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZN6MatrixC1ERK9RowVector"]
        pub fn Matrix_Matrix(this: *mut root::Matrix,
                             rv: *const root::RowVector);
    }
    extern "C" {
        #[link_name = "_ZN6MatrixC1ERK12ColumnVector"]
        pub fn Matrix_Matrix1(this: *mut root::Matrix,
                              cv: *const root::ColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN6MatrixC1ERK10DiagMatrix"]
        pub fn Matrix_Matrix2(this: *mut root::Matrix,
                              a: *const root::DiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN6MatrixC1ERK11MDiagArray2IdE"]
        pub fn Matrix_Matrix3(this: *mut root::Matrix,
                              a: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN6MatrixC1ERK10DiagArray2IdE"]
        pub fn Matrix_Matrix4(this: *mut root::Matrix,
                              a: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN6MatrixC1ERK10PermMatrix"]
        pub fn Matrix_Matrix5(this: *mut root::Matrix,
                              a: *const root::PermMatrix);
    }
    extern "C" {
        #[link_name = "_ZN6MatrixC1ERK10boolMatrix"]
        pub fn Matrix_Matrix6(this: *mut root::Matrix,
                              a: *const root::boolMatrix);
    }
    extern "C" {
        #[link_name = "_ZN6MatrixC1ERK10charMatrix"]
        pub fn Matrix_Matrix7(this: *mut root::Matrix,
                              a: *const root::charMatrix);
    }
    impl Clone for Matrix {
        fn clone(&self) -> Self { *self }
    }
    impl Matrix {
        #[inline]
        pub unsafe fn is_symmetric(&self) -> bool {
            Matrix_is_symmetric(self)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::Matrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type) -> *mut root::Matrix {
            Matrix_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::RowVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type) -> *mut root::Matrix {
            Matrix_insert1(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert2(&mut self, a: *const root::ColumnVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type) -> *mut root::Matrix {
            Matrix_insert2(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert3(&mut self, a: *const root::DiagMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type) -> *mut root::Matrix {
            Matrix_insert3(self, a, r, c)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f64) -> *mut root::Matrix {
            Matrix_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: f64, r1: root::octave_idx_type,
                            c1: root::octave_idx_type,
                            r2: root::octave_idx_type,
                            c2: root::octave_idx_type) -> *mut root::Matrix {
            Matrix_fill1(self, val, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn append(&self, a: *const root::Matrix) -> root::Matrix {
            Matrix_append(self, a)
        }
        #[inline]
        pub unsafe fn append1(&self, a: *const root::RowVector)
         -> root::Matrix {
            Matrix_append1(self, a)
        }
        #[inline]
        pub unsafe fn append2(&self, a: *const root::ColumnVector)
         -> root::Matrix {
            Matrix_append2(self, a)
        }
        #[inline]
        pub unsafe fn append3(&self, a: *const root::DiagMatrix)
         -> root::Matrix {
            Matrix_append3(self, a)
        }
        #[inline]
        pub unsafe fn stack(&self, a: *const root::Matrix) -> root::Matrix {
            Matrix_stack(self, a)
        }
        #[inline]
        pub unsafe fn stack1(&self, a: *const root::RowVector)
         -> root::Matrix {
            Matrix_stack1(self, a)
        }
        #[inline]
        pub unsafe fn stack2(&self, a: *const root::ColumnVector)
         -> root::Matrix {
            Matrix_stack2(self, a)
        }
        #[inline]
        pub unsafe fn stack3(&self, a: *const root::DiagMatrix)
         -> root::Matrix {
            Matrix_stack3(self, a)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type) -> root::Matrix {
            Matrix_extract(self, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, r1: root::octave_idx_type,
                                c1: root::octave_idx_type,
                                nr: root::octave_idx_type,
                                nc: root::octave_idx_type) -> root::Matrix {
            Matrix_extract_n(self, r1, c1, nr, nc)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::RowVector {
            Matrix_row(self, i)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::ColumnVector {
            Matrix_column(self, i)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::Matrix { Matrix_inverse(self) }
        #[inline]
        pub unsafe fn inverse1(&self, info: *mut root::octave_idx_type)
         -> root::Matrix {
            Matrix_inverse1(self, info)
        }
        #[inline]
        pub unsafe fn inverse2(&self, info: *mut root::octave_idx_type,
                               rcon: *mut f64, force: bool, calc_cond: bool)
         -> root::Matrix {
            Matrix_inverse2(self, info, rcon, force, calc_cond)
        }
        #[inline]
        pub unsafe fn inverse3(&self, mattype: *mut root::MatrixType)
         -> root::Matrix {
            Matrix_inverse3(self, mattype)
        }
        #[inline]
        pub unsafe fn inverse4(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type)
         -> root::Matrix {
            Matrix_inverse4(self, mattype, info)
        }
        #[inline]
        pub unsafe fn inverse5(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type,
                               rcon: *mut f64, force: bool, calc_cond: bool)
         -> root::Matrix {
            Matrix_inverse5(self, mattype, info, rcon, force, calc_cond)
        }
        #[inline]
        pub unsafe fn pseudo_inverse(&self, tol: f64) -> root::Matrix {
            Matrix_pseudo_inverse(self, tol)
        }
        #[inline]
        pub unsafe fn fourier(&self) -> root::ComplexMatrix {
            Matrix_fourier(self)
        }
        #[inline]
        pub unsafe fn ifourier(&self) -> root::ComplexMatrix {
            Matrix_ifourier(self)
        }
        #[inline]
        pub unsafe fn fourier2d(&self) -> root::ComplexMatrix {
            Matrix_fourier2d(self)
        }
        #[inline]
        pub unsafe fn ifourier2d(&self) -> root::ComplexMatrix {
            Matrix_ifourier2d(self)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::DET {
            Matrix_determinant(self)
        }
        #[inline]
        pub unsafe fn determinant1(&self, info: *mut root::octave_idx_type)
         -> root::DET {
            Matrix_determinant1(self, info)
        }
        #[inline]
        pub unsafe fn determinant2(&self, info: *mut root::octave_idx_type,
                                   rcon: *mut f64, calc_cond: bool)
         -> root::DET {
            Matrix_determinant2(self, info, rcon, calc_cond)
        }
        #[inline]
        pub unsafe fn determinant3(&self, mattype: *mut root::MatrixType,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f64, calc_cond: bool)
         -> root::DET {
            Matrix_determinant3(self, mattype, info, rcon, calc_cond)
        }
        #[inline]
        pub unsafe fn rcond(&self) -> f64 { Matrix_rcond(self) }
        #[inline]
        pub unsafe fn rcond1(&self, mattype: *mut root::MatrixType) -> f64 {
            Matrix_rcond1(self, mattype)
        }
        #[inline]
        pub unsafe fn solve(&self, typ: *mut root::MatrixType,
                            b: *const root::Matrix) -> root::Matrix {
            Matrix_solve(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve1(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type)
         -> root::Matrix {
            Matrix_solve1(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve2(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64)
         -> root::Matrix {
            Matrix_solve2(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve3(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64,
                             sing_handler:
                                 root::Matrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type) -> root::Matrix {
            Matrix_solve3(self, typ, b, info, rcon, sing_handler,
                          singular_fallback, transt)
        }
        #[inline]
        pub unsafe fn solve4(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            Matrix_solve4(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve5(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            Matrix_solve5(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve6(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64)
         -> root::ComplexMatrix {
            Matrix_solve6(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve7(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64,
                             sing_handler:
                                 root::Matrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type)
         -> root::ComplexMatrix {
            Matrix_solve7(self, typ, b, info, rcon, sing_handler,
                          singular_fallback, transt)
        }
        #[inline]
        pub unsafe fn solve8(&self, typ: *mut root::MatrixType,
                             b: *const root::ColumnVector)
         -> root::ColumnVector {
            Matrix_solve8(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve9(&self, typ: *mut root::MatrixType,
                             b: *const root::ColumnVector,
                             info: *mut root::octave_idx_type)
         -> root::ColumnVector {
            Matrix_solve9(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve10(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ColumnVector {
            Matrix_solve10(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve11(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ColumnVector {
            Matrix_solve11(self, typ, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve12(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            Matrix_solve12(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve13(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            Matrix_solve13(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve14(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexColumnVector {
            Matrix_solve14(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve15(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexColumnVector {
            Matrix_solve15(self, typ, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve16(&self, b: *const root::Matrix) -> root::Matrix {
            Matrix_solve16(self, b)
        }
        #[inline]
        pub unsafe fn solve17(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type)
         -> root::Matrix {
            Matrix_solve17(self, b, info)
        }
        #[inline]
        pub unsafe fn solve18(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::Matrix {
            Matrix_solve18(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve19(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type) -> root::Matrix {
            Matrix_solve19(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve20(&self, b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            Matrix_solve20(self, b)
        }
        #[inline]
        pub unsafe fn solve21(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            Matrix_solve21(self, b, info)
        }
        #[inline]
        pub unsafe fn solve22(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexMatrix {
            Matrix_solve22(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve23(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexMatrix {
            Matrix_solve23(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve24(&self, b: *const root::ColumnVector)
         -> root::ColumnVector {
            Matrix_solve24(self, b)
        }
        #[inline]
        pub unsafe fn solve25(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ColumnVector {
            Matrix_solve25(self, b, info)
        }
        #[inline]
        pub unsafe fn solve26(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ColumnVector {
            Matrix_solve26(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve27(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ColumnVector {
            Matrix_solve27(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve28(&self, b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            Matrix_solve28(self, b)
        }
        #[inline]
        pub unsafe fn solve29(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            Matrix_solve29(self, b, info)
        }
        #[inline]
        pub unsafe fn solve30(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexColumnVector {
            Matrix_solve30(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve31(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::Matrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexColumnVector {
            Matrix_solve31(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn lssolve(&self, b: *const root::Matrix) -> root::Matrix {
            Matrix_lssolve(self, b)
        }
        #[inline]
        pub unsafe fn lssolve1(&self, b: *const root::Matrix,
                               info: *mut root::octave_idx_type)
         -> root::Matrix {
            Matrix_lssolve1(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve2(&self, b: *const root::Matrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::Matrix {
            Matrix_lssolve2(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve3(&self, b: *const root::Matrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f64) -> root::Matrix {
            Matrix_lssolve3(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve4(&self, b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            Matrix_lssolve4(self, b)
        }
        #[inline]
        pub unsafe fn lssolve5(&self, b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            Matrix_lssolve5(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve6(&self, b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            Matrix_lssolve6(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve7(&self, b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f64) -> root::ComplexMatrix {
            Matrix_lssolve7(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve8(&self, b: *const root::ColumnVector)
         -> root::ColumnVector {
            Matrix_lssolve8(self, b)
        }
        #[inline]
        pub unsafe fn lssolve9(&self, b: *const root::ColumnVector,
                               info: *mut root::octave_idx_type)
         -> root::ColumnVector {
            Matrix_lssolve9(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve10(&self, b: *const root::ColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::ColumnVector {
            Matrix_lssolve10(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve11(&self, b: *const root::ColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f64) -> root::ColumnVector {
            Matrix_lssolve11(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve12(&self, b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            Matrix_lssolve12(self, b)
        }
        #[inline]
        pub unsafe fn lssolve13(&self, b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            Matrix_lssolve13(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve14(&self, b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            Matrix_lssolve14(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve15(&self, b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f64) -> root::ComplexColumnVector {
            Matrix_lssolve15(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolMatrix {
            Matrix_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolMatrix {
            Matrix_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::Matrix {
            Matrix_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::Matrix {
            Matrix_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::Matrix {
            Matrix_prod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int) -> root::Matrix {
            Matrix_sum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::Matrix {
            Matrix_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::Matrix { Matrix_abs(self) }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type) -> root::Matrix {
            Matrix_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type) -> root::DiagMatrix {
            Matrix_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn row_min(&self) -> root::ColumnVector {
            Matrix_row_min(self)
        }
        #[inline]
        pub unsafe fn row_max(&self) -> root::ColumnVector {
            Matrix_row_max(self)
        }
        #[inline]
        pub unsafe fn row_min1(&self, index: *mut [u64; 5usize])
         -> root::ColumnVector {
            Matrix_row_min1(self, index)
        }
        #[inline]
        pub unsafe fn row_max1(&self, index: *mut [u64; 5usize])
         -> root::ColumnVector {
            Matrix_row_max1(self, index)
        }
        #[inline]
        pub unsafe fn column_min(&self) -> root::RowVector {
            Matrix_column_min(self)
        }
        #[inline]
        pub unsafe fn column_max(&self) -> root::RowVector {
            Matrix_column_max(self)
        }
        #[inline]
        pub unsafe fn column_min1(&self, index: *mut [u64; 5usize])
         -> root::RowVector {
            Matrix_column_min1(self, index)
        }
        #[inline]
        pub unsafe fn column_max1(&self, index: *mut [u64; 5usize])
         -> root::RowVector {
            Matrix_column_max1(self, index)
        }
        #[inline]
        pub unsafe fn new(rv: *const root::RowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Matrix_Matrix(&mut __bindgen_tmp, rv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(cv: *const root::ColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Matrix_Matrix1(&mut __bindgen_tmp, cv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(a: *const root::DiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Matrix_Matrix2(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Matrix_Matrix3(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Matrix_Matrix4(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new5(a: *const root::PermMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Matrix_Matrix5(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new6(a: *const root::boolMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Matrix_Matrix6(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new7(a: *const root::charMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Matrix_Matrix7(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct ComplexMatrix {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    pub type ComplexMatrix_column_vector_type = [u64; 5usize];
    pub type ComplexMatrix_row_vector_type = [u64; 5usize];
    pub type ComplexMatrix_real_column_vector_type = [u64; 5usize];
    pub type ComplexMatrix_real_row_vector_type = [u64; 5usize];
    pub type ComplexMatrix_real_matrix_type = [u64; 5usize];
    pub type ComplexMatrix_complex_matrix_type = [u64; 5usize];
    pub type ComplexMatrix_real_diag_matrix_type = [u64; 6usize];
    pub type ComplexMatrix_complex_diag_matrix_type = [u64; 6usize];
    pub type ComplexMatrix_real_elt_type = u64;
    pub type ComplexMatrix_complex_elt_type = [u64; 2usize];
    pub type ComplexMatrix_solve_singularity_handler = u64;
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix12is_hermitianEv"]
        pub fn ComplexMatrix_is_hermitian(this: *const root::ComplexMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix6insertERK6Matrixii"]
        pub fn ComplexMatrix_insert(this: *mut root::ComplexMatrix,
                                    a: *const root::Matrix,
                                    r: root::octave_idx_type,
                                    c: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix6insertERK9RowVectorii"]
        pub fn ComplexMatrix_insert1(this: *mut root::ComplexMatrix,
                                     a: *const root::RowVector,
                                     r: root::octave_idx_type,
                                     c: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix6insertERK12ColumnVectorii"]
        pub fn ComplexMatrix_insert2(this: *mut root::ComplexMatrix,
                                     a: *const root::ColumnVector,
                                     r: root::octave_idx_type,
                                     c: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix6insertERK10DiagMatrixii"]
        pub fn ComplexMatrix_insert3(this: *mut root::ComplexMatrix,
                                     a: *const root::DiagMatrix,
                                     r: root::octave_idx_type,
                                     c: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix6insertERKS_ii"]
        pub fn ComplexMatrix_insert4(this: *mut root::ComplexMatrix,
                                     a: *const root::ComplexMatrix,
                                     r: root::octave_idx_type,
                                     c: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix6insertERK16ComplexRowVectorii"]
        pub fn ComplexMatrix_insert5(this: *mut root::ComplexMatrix,
                                     a: *const root::ComplexRowVector,
                                     r: root::octave_idx_type,
                                     c: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix6insertERK19ComplexColumnVectorii"]
        pub fn ComplexMatrix_insert6(this: *mut root::ComplexMatrix,
                                     a: *const root::ComplexColumnVector,
                                     r: root::octave_idx_type,
                                     c: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix6insertERK17ComplexDiagMatrixii"]
        pub fn ComplexMatrix_insert7(this: *mut root::ComplexMatrix,
                                     a: *const root::ComplexDiagMatrix,
                                     r: root::octave_idx_type,
                                     c: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix4fillEd"]
        pub fn ComplexMatrix_fill(this: *mut root::ComplexMatrix, val: f64)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix4fillERKSt7complexIdE"]
        pub fn ComplexMatrix_fill1(this: *mut root::ComplexMatrix,
                                   val: *const root::Complex)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix4fillEdiiii"]
        pub fn ComplexMatrix_fill2(this: *mut root::ComplexMatrix, val: f64,
                                   r1: root::octave_idx_type,
                                   c1: root::octave_idx_type,
                                   r2: root::octave_idx_type,
                                   c2: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrix4fillERKSt7complexIdEiiii"]
        pub fn ComplexMatrix_fill3(this: *mut root::ComplexMatrix,
                                   val: *const root::Complex,
                                   r1: root::octave_idx_type,
                                   c1: root::octave_idx_type,
                                   r2: root::octave_idx_type,
                                   c2: root::octave_idx_type)
         -> *mut root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6appendERK6Matrix"]
        pub fn ComplexMatrix_append(this: *const root::ComplexMatrix,
                                    a: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6appendERK9RowVector"]
        pub fn ComplexMatrix_append1(this: *const root::ComplexMatrix,
                                     a: *const root::RowVector)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6appendERK12ColumnVector"]
        pub fn ComplexMatrix_append2(this: *const root::ComplexMatrix,
                                     a: *const root::ColumnVector)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6appendERK10DiagMatrix"]
        pub fn ComplexMatrix_append3(this: *const root::ComplexMatrix,
                                     a: *const root::DiagMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6appendERKS_"]
        pub fn ComplexMatrix_append4(this: *const root::ComplexMatrix,
                                     a: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6appendERK16ComplexRowVector"]
        pub fn ComplexMatrix_append5(this: *const root::ComplexMatrix,
                                     a: *const root::ComplexRowVector)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6appendERK19ComplexColumnVector"]
        pub fn ComplexMatrix_append6(this: *const root::ComplexMatrix,
                                     a: *const root::ComplexColumnVector)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6appendERK17ComplexDiagMatrix"]
        pub fn ComplexMatrix_append7(this: *const root::ComplexMatrix,
                                     a: *const root::ComplexDiagMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5stackERK6Matrix"]
        pub fn ComplexMatrix_stack(this: *const root::ComplexMatrix,
                                   a: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5stackERK9RowVector"]
        pub fn ComplexMatrix_stack1(this: *const root::ComplexMatrix,
                                    a: *const root::RowVector)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5stackERK12ColumnVector"]
        pub fn ComplexMatrix_stack2(this: *const root::ComplexMatrix,
                                    a: *const root::ColumnVector)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5stackERK10DiagMatrix"]
        pub fn ComplexMatrix_stack3(this: *const root::ComplexMatrix,
                                    a: *const root::DiagMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5stackERKS_"]
        pub fn ComplexMatrix_stack4(this: *const root::ComplexMatrix,
                                    a: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5stackERK16ComplexRowVector"]
        pub fn ComplexMatrix_stack5(this: *const root::ComplexMatrix,
                                    a: *const root::ComplexRowVector)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5stackERK19ComplexColumnVector"]
        pub fn ComplexMatrix_stack6(this: *const root::ComplexMatrix,
                                    a: *const root::ComplexColumnVector)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5stackERK17ComplexDiagMatrix"]
        pub fn ComplexMatrix_stack7(this: *const root::ComplexMatrix,
                                    a: *const root::ComplexDiagMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7extractEiiii"]
        pub fn ComplexMatrix_extract(this: *const root::ComplexMatrix,
                                     r1: root::octave_idx_type,
                                     c1: root::octave_idx_type,
                                     r2: root::octave_idx_type,
                                     c2: root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix9extract_nEiiii"]
        pub fn ComplexMatrix_extract_n(this: *const root::ComplexMatrix,
                                       r1: root::octave_idx_type,
                                       c1: root::octave_idx_type,
                                       nr: root::octave_idx_type,
                                       nc: root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix3rowEi"]
        pub fn ComplexMatrix_row(this: *const root::ComplexMatrix,
                                 i: root::octave_idx_type)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6columnEi"]
        pub fn ComplexMatrix_column(this: *const root::ComplexMatrix,
                                    i: root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7inverseEv"]
        pub fn ComplexMatrix_inverse(this: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7inverseERi"]
        pub fn ComplexMatrix_inverse1(this: *const root::ComplexMatrix,
                                      info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7inverseERiRdbb"]
        pub fn ComplexMatrix_inverse2(this: *const root::ComplexMatrix,
                                      info: *mut root::octave_idx_type,
                                      rcon: *mut f64, force: bool,
                                      calc_cond: bool) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7inverseER10MatrixType"]
        pub fn ComplexMatrix_inverse3(this: *const root::ComplexMatrix,
                                      mattype: *mut root::MatrixType)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7inverseER10MatrixTypeRi"]
        pub fn ComplexMatrix_inverse4(this: *const root::ComplexMatrix,
                                      mattype: *mut root::MatrixType,
                                      info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7inverseER10MatrixTypeRiRdbb"]
        pub fn ComplexMatrix_inverse5(this: *const root::ComplexMatrix,
                                      mattype: *mut root::MatrixType,
                                      info: *mut root::octave_idx_type,
                                      rcon: *mut f64, force: bool,
                                      calc_cond: bool) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix14pseudo_inverseEd"]
        pub fn ComplexMatrix_pseudo_inverse(this: *const root::ComplexMatrix,
                                            tol: f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7fourierEv"]
        pub fn ComplexMatrix_fourier(this: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix8ifourierEv"]
        pub fn ComplexMatrix_ifourier(this: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix9fourier2dEv"]
        pub fn ComplexMatrix_fourier2d(this: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix10ifourier2dEv"]
        pub fn ComplexMatrix_ifourier2d(this: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix11determinantEv"]
        pub fn ComplexMatrix_determinant(this: *const root::ComplexMatrix)
         -> root::ComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix11determinantERi"]
        pub fn ComplexMatrix_determinant1(this: *const root::ComplexMatrix,
                                          info: *mut root::octave_idx_type)
         -> root::ComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix11determinantERiRdb"]
        pub fn ComplexMatrix_determinant2(this: *const root::ComplexMatrix,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f64, calc_cond: bool)
         -> root::ComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix11determinantER10MatrixTypeRiRdb"]
        pub fn ComplexMatrix_determinant3(this: *const root::ComplexMatrix,
                                          mattype: *mut root::MatrixType,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f64, calc_cond: bool)
         -> root::ComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5rcondEv"]
        pub fn ComplexMatrix_rcond(this: *const root::ComplexMatrix) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5rcondER10MatrixType"]
        pub fn ComplexMatrix_rcond1(this: *const root::ComplexMatrix,
                                    mattype: *mut root::MatrixType) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveER10MatrixTypeRK6Matrix"]
        pub fn ComplexMatrix_solve(this: *const root::ComplexMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveER10MatrixTypeRK6MatrixRi"]
        pub fn ComplexMatrix_solve1(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::Matrix,
                                    info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveER10MatrixTypeRK6MatrixRiRd"]
        pub fn ComplexMatrix_solve2(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::Matrix,
                                    info: *mut root::octave_idx_type,
                                    rcon: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK6MatrixRiRdPFvdEb15blas_trans_type"]
        pub fn ComplexMatrix_solve3(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::Matrix,
                                    info: *mut root::octave_idx_type,
                                    rcon: *mut f64,
                                    sing_handler:
                                        root::ComplexMatrix_solve_singularity_handler,
                                    singular_fallback: bool,
                                    transt: root::blas_trans_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveER10MatrixTypeRKS_"]
        pub fn ComplexMatrix_solve4(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveER10MatrixTypeRKS_Ri"]
        pub fn ComplexMatrix_solve5(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ComplexMatrix,
                                    info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveER10MatrixTypeRKS_RiRd"]
        pub fn ComplexMatrix_solve6(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcon: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRKS_RiRdPFvdEb15blas_trans_type"]
        pub fn ComplexMatrix_solve7(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcon: *mut f64,
                                    sing_handler:
                                        root::ComplexMatrix_solve_singularity_handler,
                                    singular_fallback: bool,
                                    transt: root::blas_trans_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK12ColumnVector"]
        pub fn ComplexMatrix_solve8(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK12ColumnVectorRi"]
        pub fn ComplexMatrix_solve9(this: *const root::ComplexMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ColumnVector,
                                    info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK12ColumnVectorRiRd"]
        pub fn ComplexMatrix_solve10(this: *const root::ComplexMatrix,
                                     typ: *mut root::MatrixType,
                                     b: *const root::ColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK12ColumnVectorRiRdPFvdE15blas_trans_type"]
        pub fn ComplexMatrix_solve11(this: *const root::ComplexMatrix,
                                     typ: *mut root::MatrixType,
                                     b: *const root::ColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64,
                                     sing_handler:
                                         root::ComplexMatrix_solve_singularity_handler,
                                     transt: root::blas_trans_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK19ComplexColumnVector"]
        pub fn ComplexMatrix_solve12(this: *const root::ComplexMatrix,
                                     typ: *mut root::MatrixType,
                                     b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRi"]
        pub fn ComplexMatrix_solve13(this: *const root::ComplexMatrix,
                                     typ: *mut root::MatrixType,
                                     b: *const root::ComplexColumnVector,
                                     info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRiRd"]
        pub fn ComplexMatrix_solve14(this: *const root::ComplexMatrix,
                                     typ: *mut root::MatrixType,
                                     b: *const root::ComplexColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRiRdPFvdE15blas_trans_type"]
        pub fn ComplexMatrix_solve15(this: *const root::ComplexMatrix,
                                     typ: *mut root::MatrixType,
                                     b: *const root::ComplexColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64,
                                     sing_handler:
                                         root::ComplexMatrix_solve_singularity_handler,
                                     transt: root::blas_trans_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK6Matrix"]
        pub fn ComplexMatrix_solve16(this: *const root::ComplexMatrix,
                                     b: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK6MatrixRi"]
        pub fn ComplexMatrix_solve17(this: *const root::ComplexMatrix,
                                     b: *const root::Matrix,
                                     info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK6MatrixRiRd"]
        pub fn ComplexMatrix_solve18(this: *const root::ComplexMatrix,
                                     b: *const root::Matrix,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveERK6MatrixRiRdPFvdE15blas_trans_type"]
        pub fn ComplexMatrix_solve19(this: *const root::ComplexMatrix,
                                     b: *const root::Matrix,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64,
                                     sing_handler:
                                         root::ComplexMatrix_solve_singularity_handler,
                                     transt: root::blas_trans_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERKS_"]
        pub fn ComplexMatrix_solve20(this: *const root::ComplexMatrix,
                                     b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERKS_Ri"]
        pub fn ComplexMatrix_solve21(this: *const root::ComplexMatrix,
                                     b: *const root::ComplexMatrix,
                                     info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERKS_RiRd"]
        pub fn ComplexMatrix_solve22(this: *const root::ComplexMatrix,
                                     b: *const root::ComplexMatrix,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveERKS_RiRdPFvdE15blas_trans_type"]
        pub fn ComplexMatrix_solve23(this: *const root::ComplexMatrix,
                                     b: *const root::ComplexMatrix,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64,
                                     sing_handler:
                                         root::ComplexMatrix_solve_singularity_handler,
                                     transt: root::blas_trans_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK12ColumnVector"]
        pub fn ComplexMatrix_solve24(this: *const root::ComplexMatrix,
                                     b: *const root::ColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK12ColumnVectorRi"]
        pub fn ComplexMatrix_solve25(this: *const root::ComplexMatrix,
                                     b: *const root::ColumnVector,
                                     info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK12ColumnVectorRiRd"]
        pub fn ComplexMatrix_solve26(this: *const root::ComplexMatrix,
                                     b: *const root::ColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveERK12ColumnVectorRiRdPFvdE15blas_trans_type"]
        pub fn ComplexMatrix_solve27(this: *const root::ComplexMatrix,
                                     b: *const root::ColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64,
                                     sing_handler:
                                         root::ComplexMatrix_solve_singularity_handler,
                                     transt: root::blas_trans_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK19ComplexColumnVector"]
        pub fn ComplexMatrix_solve28(this: *const root::ComplexMatrix,
                                     b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK19ComplexColumnVectorRi"]
        pub fn ComplexMatrix_solve29(this: *const root::ComplexMatrix,
                                     b: *const root::ComplexColumnVector,
                                     info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5solveERK19ComplexColumnVectorRiRd"]
        pub fn ComplexMatrix_solve30(this: *const root::ComplexMatrix,
                                     b: *const root::ComplexColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix5solveERK19ComplexColumnVectorRiRdPFvdE15blas_trans_type"]
        pub fn ComplexMatrix_solve31(this: *const root::ComplexMatrix,
                                     b: *const root::ComplexColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rcon: *mut f64,
                                     sing_handler:
                                         root::ComplexMatrix_solve_singularity_handler,
                                     transt: root::blas_trans_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK6Matrix"]
        pub fn ComplexMatrix_lssolve(this: *const root::ComplexMatrix,
                                     b: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK6MatrixRi"]
        pub fn ComplexMatrix_lssolve1(this: *const root::ComplexMatrix,
                                      b: *const root::Matrix,
                                      info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK6MatrixRiS3_"]
        pub fn ComplexMatrix_lssolve2(this: *const root::ComplexMatrix,
                                      b: *const root::Matrix,
                                      info: *mut root::octave_idx_type,
                                      rank: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK6MatrixRiS3_Rd"]
        pub fn ComplexMatrix_lssolve3(this: *const root::ComplexMatrix,
                                      b: *const root::Matrix,
                                      info: *mut root::octave_idx_type,
                                      rank: *mut root::octave_idx_type,
                                      rcon: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERKS_"]
        pub fn ComplexMatrix_lssolve4(this: *const root::ComplexMatrix,
                                      b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERKS_Ri"]
        pub fn ComplexMatrix_lssolve5(this: *const root::ComplexMatrix,
                                      b: *const root::ComplexMatrix,
                                      info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERKS_RiS2_"]
        pub fn ComplexMatrix_lssolve6(this: *const root::ComplexMatrix,
                                      b: *const root::ComplexMatrix,
                                      info: *mut root::octave_idx_type,
                                      rank: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERKS_RiS2_Rd"]
        pub fn ComplexMatrix_lssolve7(this: *const root::ComplexMatrix,
                                      b: *const root::ComplexMatrix,
                                      info: *mut root::octave_idx_type,
                                      rank: *mut root::octave_idx_type,
                                      rcon: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK12ColumnVector"]
        pub fn ComplexMatrix_lssolve8(this: *const root::ComplexMatrix,
                                      b: *const root::ColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK12ColumnVectorRi"]
        pub fn ComplexMatrix_lssolve9(this: *const root::ComplexMatrix,
                                      b: *const root::ColumnVector,
                                      info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK12ColumnVectorRiS3_"]
        pub fn ComplexMatrix_lssolve10(this: *const root::ComplexMatrix,
                                       b: *const root::ColumnVector,
                                       info: *mut root::octave_idx_type,
                                       rank: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK12ColumnVectorRiS3_Rd"]
        pub fn ComplexMatrix_lssolve11(this: *const root::ComplexMatrix,
                                       b: *const root::ColumnVector,
                                       info: *mut root::octave_idx_type,
                                       rank: *mut root::octave_idx_type,
                                       rcon: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK19ComplexColumnVector"]
        pub fn ComplexMatrix_lssolve12(this: *const root::ComplexMatrix,
                                       b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7lssolveERK19ComplexColumnVectorRi"]
        pub fn ComplexMatrix_lssolve13(this: *const root::ComplexMatrix,
                                       b: *const root::ComplexColumnVector,
                                       info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix7lssolveERK19ComplexColumnVectorRiS3_"]
        pub fn ComplexMatrix_lssolve14(this: *const root::ComplexMatrix,
                                       b: *const root::ComplexColumnVector,
                                       info: *mut root::octave_idx_type,
                                       rank: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK13ComplexMatrix7lssolveERK19ComplexColumnVectorRiS3_Rd"]
        pub fn ComplexMatrix_lssolve15(this: *const root::ComplexMatrix,
                                       b: *const root::ComplexColumnVector,
                                       info: *mut root::octave_idx_type,
                                       rank: *mut root::octave_idx_type,
                                       rcon: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix3allEi"]
        pub fn ComplexMatrix_all(this: *const root::ComplexMatrix,
                                 dim: ::std::os::raw::c_int)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix3anyEi"]
        pub fn ComplexMatrix_any(this: *const root::ComplexMatrix,
                                 dim: ::std::os::raw::c_int)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7cumprodEi"]
        pub fn ComplexMatrix_cumprod(this: *const root::ComplexMatrix,
                                     dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix6cumsumEi"]
        pub fn ComplexMatrix_cumsum(this: *const root::ComplexMatrix,
                                    dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix4prodEi"]
        pub fn ComplexMatrix_prod(this: *const root::ComplexMatrix,
                                  dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix3sumEi"]
        pub fn ComplexMatrix_sum(this: *const root::ComplexMatrix,
                                 dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix5sumsqEi"]
        pub fn ComplexMatrix_sumsq(this: *const root::ComplexMatrix,
                                   dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix3absEv"]
        pub fn ComplexMatrix_abs(this: *const root::ComplexMatrix)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix4diagEi"]
        pub fn ComplexMatrix_diag(this: *const root::ComplexMatrix,
                                  k: root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix4diagEii"]
        pub fn ComplexMatrix_diag1(this: *const root::ComplexMatrix,
                                   m: root::octave_idx_type,
                                   n: root::octave_idx_type)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix16row_is_real_onlyEi"]
        pub fn ComplexMatrix_row_is_real_only(this:
                                                  *const root::ComplexMatrix,
                                              arg1: root::octave_idx_type)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix19column_is_real_onlyEi"]
        pub fn ComplexMatrix_column_is_real_only(this:
                                                     *const root::ComplexMatrix,
                                                 arg1: root::octave_idx_type)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7row_minEv"]
        pub fn ComplexMatrix_row_min(this: *const root::ComplexMatrix)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7row_maxEv"]
        pub fn ComplexMatrix_row_max(this: *const root::ComplexMatrix)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7row_minER5ArrayIiE"]
        pub fn ComplexMatrix_row_min1(this: *const root::ComplexMatrix,
                                      index: *mut [u64; 5usize])
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix7row_maxER5ArrayIiE"]
        pub fn ComplexMatrix_row_max1(this: *const root::ComplexMatrix,
                                      index: *mut [u64; 5usize])
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix10column_minEv"]
        pub fn ComplexMatrix_column_min(this: *const root::ComplexMatrix)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix10column_maxEv"]
        pub fn ComplexMatrix_column_max(this: *const root::ComplexMatrix)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix10column_minER5ArrayIiE"]
        pub fn ComplexMatrix_column_min1(this: *const root::ComplexMatrix,
                                         index: *mut [u64; 5usize])
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK13ComplexMatrix10column_maxER5ArrayIiE"]
        pub fn ComplexMatrix_column_max1(this: *const root::ComplexMatrix,
                                         index: *mut [u64; 5usize])
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK6MatrixS2_"]
        pub fn ComplexMatrix_ComplexMatrix(this: *mut root::ComplexMatrix,
                                           re: *const root::Matrix,
                                           im: *const root::Matrix);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK6Matrix"]
        pub fn ComplexMatrix_ComplexMatrix1(this: *mut root::ComplexMatrix,
                                            a: *const root::Matrix);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK9RowVector"]
        pub fn ComplexMatrix_ComplexMatrix2(this: *mut root::ComplexMatrix,
                                            rv: *const root::RowVector);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK12ColumnVector"]
        pub fn ComplexMatrix_ComplexMatrix3(this: *mut root::ComplexMatrix,
                                            cv: *const root::ColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK10DiagMatrix"]
        pub fn ComplexMatrix_ComplexMatrix4(this: *mut root::ComplexMatrix,
                                            a: *const root::DiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK11MDiagArray2IdE"]
        pub fn ComplexMatrix_ComplexMatrix5(this: *mut root::ComplexMatrix,
                                            a: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK10DiagArray2IdE"]
        pub fn ComplexMatrix_ComplexMatrix6(this: *mut root::ComplexMatrix,
                                            a: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK16ComplexRowVector"]
        pub fn ComplexMatrix_ComplexMatrix7(this: *mut root::ComplexMatrix,
                                            rv:
                                                *const root::ComplexRowVector);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK19ComplexColumnVector"]
        pub fn ComplexMatrix_ComplexMatrix8(this: *mut root::ComplexMatrix,
                                            cv:
                                                *const root::ComplexColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK17ComplexDiagMatrix"]
        pub fn ComplexMatrix_ComplexMatrix9(this: *mut root::ComplexMatrix,
                                            a:
                                                *const root::ComplexDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK11MDiagArray2ISt7complexIdEE"]
        pub fn ComplexMatrix_ComplexMatrix10(this: *mut root::ComplexMatrix,
                                             a: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK10DiagArray2ISt7complexIdEE"]
        pub fn ComplexMatrix_ComplexMatrix11(this: *mut root::ComplexMatrix,
                                             a: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK10boolMatrix"]
        pub fn ComplexMatrix_ComplexMatrix12(this: *mut root::ComplexMatrix,
                                             a: *const root::boolMatrix);
    }
    extern "C" {
        #[link_name = "_ZN13ComplexMatrixC1ERK10charMatrix"]
        pub fn ComplexMatrix_ComplexMatrix13(this: *mut root::ComplexMatrix,
                                             a: *const root::charMatrix);
    }
    impl Clone for ComplexMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl ComplexMatrix {
        #[inline]
        pub unsafe fn is_hermitian(&self) -> bool {
            ComplexMatrix_is_hermitian(self)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::Matrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::RowVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_insert1(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert2(&mut self, a: *const root::ColumnVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_insert2(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert3(&mut self, a: *const root::DiagMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_insert3(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert4(&mut self, a: *const root::ComplexMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_insert4(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert5(&mut self, a: *const root::ComplexRowVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_insert5(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert6(&mut self, a: *const root::ComplexColumnVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_insert6(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert7(&mut self, a: *const root::ComplexDiagMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_insert7(self, a, r, c)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f64) -> *mut root::ComplexMatrix {
            ComplexMatrix_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: *const root::Complex)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_fill1(self, val)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, val: f64, r1: root::octave_idx_type,
                            c1: root::octave_idx_type,
                            r2: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_fill2(self, val, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, val: *const root::Complex,
                            r1: root::octave_idx_type,
                            c1: root::octave_idx_type,
                            r2: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::ComplexMatrix {
            ComplexMatrix_fill3(self, val, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn append(&self, a: *const root::Matrix)
         -> root::ComplexMatrix {
            ComplexMatrix_append(self, a)
        }
        #[inline]
        pub unsafe fn append1(&self, a: *const root::RowVector)
         -> root::ComplexMatrix {
            ComplexMatrix_append1(self, a)
        }
        #[inline]
        pub unsafe fn append2(&self, a: *const root::ColumnVector)
         -> root::ComplexMatrix {
            ComplexMatrix_append2(self, a)
        }
        #[inline]
        pub unsafe fn append3(&self, a: *const root::DiagMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_append3(self, a)
        }
        #[inline]
        pub unsafe fn append4(&self, a: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_append4(self, a)
        }
        #[inline]
        pub unsafe fn append5(&self, a: *const root::ComplexRowVector)
         -> root::ComplexMatrix {
            ComplexMatrix_append5(self, a)
        }
        #[inline]
        pub unsafe fn append6(&self, a: *const root::ComplexColumnVector)
         -> root::ComplexMatrix {
            ComplexMatrix_append6(self, a)
        }
        #[inline]
        pub unsafe fn append7(&self, a: *const root::ComplexDiagMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_append7(self, a)
        }
        #[inline]
        pub unsafe fn stack(&self, a: *const root::Matrix)
         -> root::ComplexMatrix {
            ComplexMatrix_stack(self, a)
        }
        #[inline]
        pub unsafe fn stack1(&self, a: *const root::RowVector)
         -> root::ComplexMatrix {
            ComplexMatrix_stack1(self, a)
        }
        #[inline]
        pub unsafe fn stack2(&self, a: *const root::ColumnVector)
         -> root::ComplexMatrix {
            ComplexMatrix_stack2(self, a)
        }
        #[inline]
        pub unsafe fn stack3(&self, a: *const root::DiagMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_stack3(self, a)
        }
        #[inline]
        pub unsafe fn stack4(&self, a: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_stack4(self, a)
        }
        #[inline]
        pub unsafe fn stack5(&self, a: *const root::ComplexRowVector)
         -> root::ComplexMatrix {
            ComplexMatrix_stack5(self, a)
        }
        #[inline]
        pub unsafe fn stack6(&self, a: *const root::ComplexColumnVector)
         -> root::ComplexMatrix {
            ComplexMatrix_stack6(self, a)
        }
        #[inline]
        pub unsafe fn stack7(&self, a: *const root::ComplexDiagMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_stack7(self, a)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_extract(self, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, r1: root::octave_idx_type,
                                c1: root::octave_idx_type,
                                nr: root::octave_idx_type,
                                nc: root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_extract_n(self, r1, c1, nr, nc)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::ComplexRowVector {
            ComplexMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::ComplexMatrix {
            ComplexMatrix_inverse(self)
        }
        #[inline]
        pub unsafe fn inverse1(&self, info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_inverse1(self, info)
        }
        #[inline]
        pub unsafe fn inverse2(&self, info: *mut root::octave_idx_type,
                               rcon: *mut f64, force: bool, calc_cond: bool)
         -> root::ComplexMatrix {
            ComplexMatrix_inverse2(self, info, rcon, force, calc_cond)
        }
        #[inline]
        pub unsafe fn inverse3(&self, mattype: *mut root::MatrixType)
         -> root::ComplexMatrix {
            ComplexMatrix_inverse3(self, mattype)
        }
        #[inline]
        pub unsafe fn inverse4(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_inverse4(self, mattype, info)
        }
        #[inline]
        pub unsafe fn inverse5(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type,
                               rcon: *mut f64, force: bool, calc_cond: bool)
         -> root::ComplexMatrix {
            ComplexMatrix_inverse5(self, mattype, info, rcon, force,
                                   calc_cond)
        }
        #[inline]
        pub unsafe fn pseudo_inverse(&self, tol: f64) -> root::ComplexMatrix {
            ComplexMatrix_pseudo_inverse(self, tol)
        }
        #[inline]
        pub unsafe fn fourier(&self) -> root::ComplexMatrix {
            ComplexMatrix_fourier(self)
        }
        #[inline]
        pub unsafe fn ifourier(&self) -> root::ComplexMatrix {
            ComplexMatrix_ifourier(self)
        }
        #[inline]
        pub unsafe fn fourier2d(&self) -> root::ComplexMatrix {
            ComplexMatrix_fourier2d(self)
        }
        #[inline]
        pub unsafe fn ifourier2d(&self) -> root::ComplexMatrix {
            ComplexMatrix_ifourier2d(self)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::ComplexDET {
            ComplexMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn determinant1(&self, info: *mut root::octave_idx_type)
         -> root::ComplexDET {
            ComplexMatrix_determinant1(self, info)
        }
        #[inline]
        pub unsafe fn determinant2(&self, info: *mut root::octave_idx_type,
                                   rcon: *mut f64, calc_cond: bool)
         -> root::ComplexDET {
            ComplexMatrix_determinant2(self, info, rcon, calc_cond)
        }
        #[inline]
        pub unsafe fn determinant3(&self, mattype: *mut root::MatrixType,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f64, calc_cond: bool)
         -> root::ComplexDET {
            ComplexMatrix_determinant3(self, mattype, info, rcon, calc_cond)
        }
        #[inline]
        pub unsafe fn rcond(&self) -> f64 { ComplexMatrix_rcond(self) }
        #[inline]
        pub unsafe fn rcond1(&self, mattype: *mut root::MatrixType) -> f64 {
            ComplexMatrix_rcond1(self, mattype)
        }
        #[inline]
        pub unsafe fn solve(&self, typ: *mut root::MatrixType,
                            b: *const root::Matrix) -> root::ComplexMatrix {
            ComplexMatrix_solve(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve1(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_solve1(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve2(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64)
         -> root::ComplexMatrix {
            ComplexMatrix_solve2(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve3(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64,
                             sing_handler:
                                 root::ComplexMatrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type)
         -> root::ComplexMatrix {
            ComplexMatrix_solve3(self, typ, b, info, rcon, sing_handler,
                                 singular_fallback, transt)
        }
        #[inline]
        pub unsafe fn solve4(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_solve4(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve5(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_solve5(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve6(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64)
         -> root::ComplexMatrix {
            ComplexMatrix_solve6(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve7(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f64,
                             sing_handler:
                                 root::ComplexMatrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type)
         -> root::ComplexMatrix {
            ComplexMatrix_solve7(self, typ, b, info, rcon, sing_handler,
                                 singular_fallback, transt)
        }
        #[inline]
        pub unsafe fn solve8(&self, typ: *mut root::MatrixType,
                             b: *const root::ColumnVector)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve8(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve9(&self, typ: *mut root::MatrixType,
                             b: *const root::ColumnVector,
                             info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve9(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve10(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexColumnVector {
            ComplexMatrix_solve10(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve11(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::ComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve11(self, typ, b, info, rcon, sing_handler,
                                  transt)
        }
        #[inline]
        pub unsafe fn solve12(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve12(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve13(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve13(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve14(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexColumnVector {
            ComplexMatrix_solve14(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve15(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::ComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve15(self, typ, b, info, rcon, sing_handler,
                                  transt)
        }
        #[inline]
        pub unsafe fn solve16(&self, b: *const root::Matrix)
         -> root::ComplexMatrix {
            ComplexMatrix_solve16(self, b)
        }
        #[inline]
        pub unsafe fn solve17(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_solve17(self, b, info)
        }
        #[inline]
        pub unsafe fn solve18(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexMatrix {
            ComplexMatrix_solve18(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve19(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::ComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexMatrix {
            ComplexMatrix_solve19(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve20(&self, b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_solve20(self, b)
        }
        #[inline]
        pub unsafe fn solve21(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_solve21(self, b, info)
        }
        #[inline]
        pub unsafe fn solve22(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexMatrix {
            ComplexMatrix_solve22(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve23(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::ComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexMatrix {
            ComplexMatrix_solve23(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve24(&self, b: *const root::ColumnVector)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve24(self, b)
        }
        #[inline]
        pub unsafe fn solve25(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve25(self, b, info)
        }
        #[inline]
        pub unsafe fn solve26(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexColumnVector {
            ComplexMatrix_solve26(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve27(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::ComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve27(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve28(&self, b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve28(self, b)
        }
        #[inline]
        pub unsafe fn solve29(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve29(self, b, info)
        }
        #[inline]
        pub unsafe fn solve30(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64) -> root::ComplexColumnVector {
            ComplexMatrix_solve30(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve31(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f64,
                              sing_handler:
                                  root::ComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_solve31(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn lssolve(&self, b: *const root::Matrix)
         -> root::ComplexMatrix {
            ComplexMatrix_lssolve(self, b)
        }
        #[inline]
        pub unsafe fn lssolve1(&self, b: *const root::Matrix,
                               info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_lssolve1(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve2(&self, b: *const root::Matrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_lssolve2(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve3(&self, b: *const root::Matrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f64) -> root::ComplexMatrix {
            ComplexMatrix_lssolve3(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve4(&self, b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            ComplexMatrix_lssolve4(self, b)
        }
        #[inline]
        pub unsafe fn lssolve5(&self, b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_lssolve5(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve6(&self, b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_lssolve6(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve7(&self, b: *const root::ComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f64) -> root::ComplexMatrix {
            ComplexMatrix_lssolve7(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve8(&self, b: *const root::ColumnVector)
         -> root::ComplexColumnVector {
            ComplexMatrix_lssolve8(self, b)
        }
        #[inline]
        pub unsafe fn lssolve9(&self, b: *const root::ColumnVector,
                               info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_lssolve9(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve10(&self, b: *const root::ColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_lssolve10(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve11(&self, b: *const root::ColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f64) -> root::ComplexColumnVector {
            ComplexMatrix_lssolve11(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve12(&self, b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            ComplexMatrix_lssolve12(self, b)
        }
        #[inline]
        pub unsafe fn lssolve13(&self, b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_lssolve13(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve14(&self, b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexMatrix_lssolve14(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve15(&self, b: *const root::ComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f64) -> root::ComplexColumnVector {
            ComplexMatrix_lssolve15(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolMatrix {
            ComplexMatrix_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolMatrix {
            ComplexMatrix_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix {
            ComplexMatrix_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix {
            ComplexMatrix_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix {
            ComplexMatrix_prod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix {
            ComplexMatrix_sum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexMatrix {
            ComplexMatrix_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::Matrix { ComplexMatrix_abs(self) }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexMatrix_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type)
         -> root::ComplexDiagMatrix {
            ComplexMatrix_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn row_is_real_only(&self, arg1: root::octave_idx_type)
         -> bool {
            ComplexMatrix_row_is_real_only(self, arg1)
        }
        #[inline]
        pub unsafe fn column_is_real_only(&self, arg1: root::octave_idx_type)
         -> bool {
            ComplexMatrix_column_is_real_only(self, arg1)
        }
        #[inline]
        pub unsafe fn row_min(&self) -> root::ComplexColumnVector {
            ComplexMatrix_row_min(self)
        }
        #[inline]
        pub unsafe fn row_max(&self) -> root::ComplexColumnVector {
            ComplexMatrix_row_max(self)
        }
        #[inline]
        pub unsafe fn row_min1(&self, index: *mut [u64; 5usize])
         -> root::ComplexColumnVector {
            ComplexMatrix_row_min1(self, index)
        }
        #[inline]
        pub unsafe fn row_max1(&self, index: *mut [u64; 5usize])
         -> root::ComplexColumnVector {
            ComplexMatrix_row_max1(self, index)
        }
        #[inline]
        pub unsafe fn column_min(&self) -> root::ComplexRowVector {
            ComplexMatrix_column_min(self)
        }
        #[inline]
        pub unsafe fn column_max(&self) -> root::ComplexRowVector {
            ComplexMatrix_column_max(self)
        }
        #[inline]
        pub unsafe fn column_min1(&self, index: *mut [u64; 5usize])
         -> root::ComplexRowVector {
            ComplexMatrix_column_min1(self, index)
        }
        #[inline]
        pub unsafe fn column_max1(&self, index: *mut [u64; 5usize])
         -> root::ComplexRowVector {
            ComplexMatrix_column_max1(self, index)
        }
        #[inline]
        pub unsafe fn new(re: *const root::Matrix, im: *const root::Matrix)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix(&mut __bindgen_tmp, re, im);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(a: *const root::Matrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix1(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(rv: *const root::RowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix2(&mut __bindgen_tmp, rv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(cv: *const root::ColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix3(&mut __bindgen_tmp, cv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(a: *const root::DiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix4(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new5(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix5(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new6(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix6(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new7(rv: *const root::ComplexRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix7(&mut __bindgen_tmp, rv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new8(cv: *const root::ComplexColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix8(&mut __bindgen_tmp, cv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new9(a: *const root::ComplexDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix9(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new10(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix10(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new11(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix11(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new12(a: *const root::boolMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix12(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new13(a: *const root::charMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexMatrix_ComplexMatrix13(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatMatrix {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    pub type FloatMatrix_column_vector_type = [u64; 5usize];
    pub type FloatMatrix_row_vector_type = [u64; 5usize];
    pub type FloatMatrix_real_column_vector_type = [u64; 5usize];
    pub type FloatMatrix_real_row_vector_type = [u64; 5usize];
    pub type FloatMatrix_real_matrix_type = [u64; 5usize];
    pub type FloatMatrix_complex_matrix_type = [u64; 5usize];
    pub type FloatMatrix_real_diag_matrix_type = [u64; 6usize];
    pub type FloatMatrix_complex_diag_matrix_type = [u64; 6usize];
    pub type FloatMatrix_real_elt_type = u32;
    pub type FloatMatrix_complex_elt_type = [u32; 2usize];
    pub type FloatMatrix_solve_singularity_handler = u64;
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix12is_symmetricEv"]
        pub fn FloatMatrix_is_symmetric(this: *const root::FloatMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrix6insertERKS_ii"]
        pub fn FloatMatrix_insert(this: *mut root::FloatMatrix,
                                  a: *const root::FloatMatrix,
                                  r: root::octave_idx_type,
                                  c: root::octave_idx_type)
         -> *mut root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrix6insertERK14FloatRowVectorii"]
        pub fn FloatMatrix_insert1(this: *mut root::FloatMatrix,
                                   a: *const root::FloatRowVector,
                                   r: root::octave_idx_type,
                                   c: root::octave_idx_type)
         -> *mut root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrix6insertERK17FloatColumnVectorii"]
        pub fn FloatMatrix_insert2(this: *mut root::FloatMatrix,
                                   a: *const root::FloatColumnVector,
                                   r: root::octave_idx_type,
                                   c: root::octave_idx_type)
         -> *mut root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrix6insertERK15FloatDiagMatrixii"]
        pub fn FloatMatrix_insert3(this: *mut root::FloatMatrix,
                                   a: *const root::FloatDiagMatrix,
                                   r: root::octave_idx_type,
                                   c: root::octave_idx_type)
         -> *mut root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrix4fillEf"]
        pub fn FloatMatrix_fill(this: *mut root::FloatMatrix, val: f32)
         -> *mut root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrix4fillEfiiii"]
        pub fn FloatMatrix_fill1(this: *mut root::FloatMatrix, val: f32,
                                 r1: root::octave_idx_type,
                                 c1: root::octave_idx_type,
                                 r2: root::octave_idx_type,
                                 c2: root::octave_idx_type)
         -> *mut root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix6appendERKS_"]
        pub fn FloatMatrix_append(this: *const root::FloatMatrix,
                                  a: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix6appendERK14FloatRowVector"]
        pub fn FloatMatrix_append1(this: *const root::FloatMatrix,
                                   a: *const root::FloatRowVector)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix6appendERK17FloatColumnVector"]
        pub fn FloatMatrix_append2(this: *const root::FloatMatrix,
                                   a: *const root::FloatColumnVector)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix6appendERK15FloatDiagMatrix"]
        pub fn FloatMatrix_append3(this: *const root::FloatMatrix,
                                   a: *const root::FloatDiagMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5stackERKS_"]
        pub fn FloatMatrix_stack(this: *const root::FloatMatrix,
                                 a: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5stackERK14FloatRowVector"]
        pub fn FloatMatrix_stack1(this: *const root::FloatMatrix,
                                  a: *const root::FloatRowVector)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5stackERK17FloatColumnVector"]
        pub fn FloatMatrix_stack2(this: *const root::FloatMatrix,
                                  a: *const root::FloatColumnVector)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5stackERK15FloatDiagMatrix"]
        pub fn FloatMatrix_stack3(this: *const root::FloatMatrix,
                                  a: *const root::FloatDiagMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7extractEiiii"]
        pub fn FloatMatrix_extract(this: *const root::FloatMatrix,
                                   r1: root::octave_idx_type,
                                   c1: root::octave_idx_type,
                                   r2: root::octave_idx_type,
                                   c2: root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix9extract_nEiiii"]
        pub fn FloatMatrix_extract_n(this: *const root::FloatMatrix,
                                     r1: root::octave_idx_type,
                                     c1: root::octave_idx_type,
                                     nr: root::octave_idx_type,
                                     nc: root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix3rowEi"]
        pub fn FloatMatrix_row(this: *const root::FloatMatrix,
                               i: root::octave_idx_type)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix6columnEi"]
        pub fn FloatMatrix_column(this: *const root::FloatMatrix,
                                  i: root::octave_idx_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7inverseEv"]
        pub fn FloatMatrix_inverse(this: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7inverseERi"]
        pub fn FloatMatrix_inverse1(this: *const root::FloatMatrix,
                                    info: *mut root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7inverseERiRfbb"]
        pub fn FloatMatrix_inverse2(this: *const root::FloatMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcon: *mut f32, force: bool,
                                    calc_cond: bool) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7inverseER10MatrixType"]
        pub fn FloatMatrix_inverse3(this: *const root::FloatMatrix,
                                    mattype: *mut root::MatrixType)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7inverseER10MatrixTypeRi"]
        pub fn FloatMatrix_inverse4(this: *const root::FloatMatrix,
                                    mattype: *mut root::MatrixType,
                                    info: *mut root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7inverseER10MatrixTypeRiRfbb"]
        pub fn FloatMatrix_inverse5(this: *const root::FloatMatrix,
                                    mattype: *mut root::MatrixType,
                                    info: *mut root::octave_idx_type,
                                    rcon: *mut f32, force: bool,
                                    calc_cond: bool) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix14pseudo_inverseEf"]
        pub fn FloatMatrix_pseudo_inverse(this: *const root::FloatMatrix,
                                          tol: f32) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7fourierEv"]
        pub fn FloatMatrix_fourier(this: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix8ifourierEv"]
        pub fn FloatMatrix_ifourier(this: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix9fourier2dEv"]
        pub fn FloatMatrix_fourier2d(this: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix10ifourier2dEv"]
        pub fn FloatMatrix_ifourier2d(this: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix11determinantEv"]
        pub fn FloatMatrix_determinant(this: *const root::FloatMatrix)
         -> root::FloatDET;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix11determinantERi"]
        pub fn FloatMatrix_determinant1(this: *const root::FloatMatrix,
                                        info: *mut root::octave_idx_type)
         -> root::FloatDET;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix11determinantERiRfb"]
        pub fn FloatMatrix_determinant2(this: *const root::FloatMatrix,
                                        info: *mut root::octave_idx_type,
                                        rcon: *mut f32, calc_cond: bool)
         -> root::FloatDET;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix11determinantER10MatrixTypeRiRfb"]
        pub fn FloatMatrix_determinant3(this: *const root::FloatMatrix,
                                        mattype: *mut root::MatrixType,
                                        info: *mut root::octave_idx_type,
                                        rcon: *mut f32, calc_cond: bool)
         -> root::FloatDET;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5rcondEv"]
        pub fn FloatMatrix_rcond(this: *const root::FloatMatrix) -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5rcondER10MatrixType"]
        pub fn FloatMatrix_rcond1(this: *const root::FloatMatrix,
                                  mattype: *mut root::MatrixType) -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveER10MatrixTypeRKS_"]
        pub fn FloatMatrix_solve(this: *const root::FloatMatrix,
                                 typ: *mut root::MatrixType,
                                 b: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveER10MatrixTypeRKS_Ri"]
        pub fn FloatMatrix_solve1(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatMatrix,
                                  info: *mut root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveER10MatrixTypeRKS_RiRf"]
        pub fn FloatMatrix_solve2(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatMatrix,
                                  info: *mut root::octave_idx_type,
                                  rcon: *mut f32) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRKS_RiRfPFvfEb15blas_trans_type"]
        pub fn FloatMatrix_solve3(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatMatrix,
                                  info: *mut root::octave_idx_type,
                                  rcon: *mut f32,
                                  sing_handler:
                                      root::FloatMatrix_solve_singularity_handler,
                                  singular_fallback: bool,
                                  transt: root::blas_trans_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK18FloatComplexMatrix"]
        pub fn FloatMatrix_solve4(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK18FloatComplexMatrixRi"]
        pub fn FloatMatrix_solve5(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatComplexMatrix,
                                  info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK18FloatComplexMatrixRiRf"]
        pub fn FloatMatrix_solve6(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatComplexMatrix,
                                  info: *mut root::octave_idx_type,
                                  rcon: *mut f32) -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK18FloatComplexMatrixRiRfPFvfEb15blas_trans_type"]
        pub fn FloatMatrix_solve7(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatComplexMatrix,
                                  info: *mut root::octave_idx_type,
                                  rcon: *mut f32,
                                  sing_handler:
                                      root::FloatMatrix_solve_singularity_handler,
                                  singular_fallback: bool,
                                  transt: root::blas_trans_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK17FloatColumnVector"]
        pub fn FloatMatrix_solve8(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatColumnVector)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK17FloatColumnVectorRi"]
        pub fn FloatMatrix_solve9(this: *const root::FloatMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::FloatColumnVector,
                                  info: *mut root::octave_idx_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK17FloatColumnVectorRiRf"]
        pub fn FloatMatrix_solve10(this: *const root::FloatMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::FloatColumnVector,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32) -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK17FloatColumnVectorRiRfPFvfE15blas_trans_type"]
        pub fn FloatMatrix_solve11(this: *const root::FloatMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::FloatColumnVector,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32,
                                   sing_handler:
                                       root::FloatMatrix_solve_singularity_handler,
                                   transt: root::blas_trans_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK24FloatComplexColumnVector"]
        pub fn FloatMatrix_solve12(this: *const root::FloatMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK24FloatComplexColumnVectorRi"]
        pub fn FloatMatrix_solve13(this: *const root::FloatMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::FloatComplexColumnVector,
                                   info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK24FloatComplexColumnVectorRiRf"]
        pub fn FloatMatrix_solve14(this: *const root::FloatMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::FloatComplexColumnVector,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveER10MatrixTypeRK24FloatComplexColumnVectorRiRfPFvfE15blas_trans_type"]
        pub fn FloatMatrix_solve15(this: *const root::FloatMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::FloatComplexColumnVector,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32,
                                   sing_handler:
                                       root::FloatMatrix_solve_singularity_handler,
                                   transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERKS_"]
        pub fn FloatMatrix_solve16(this: *const root::FloatMatrix,
                                   b: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERKS_Ri"]
        pub fn FloatMatrix_solve17(this: *const root::FloatMatrix,
                                   b: *const root::FloatMatrix,
                                   info: *mut root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERKS_RiRf"]
        pub fn FloatMatrix_solve18(this: *const root::FloatMatrix,
                                   b: *const root::FloatMatrix,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveERKS_RiRfPFvfE15blas_trans_type"]
        pub fn FloatMatrix_solve19(this: *const root::FloatMatrix,
                                   b: *const root::FloatMatrix,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32,
                                   sing_handler:
                                       root::FloatMatrix_solve_singularity_handler,
                                   transt: root::blas_trans_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERK18FloatComplexMatrix"]
        pub fn FloatMatrix_solve20(this: *const root::FloatMatrix,
                                   b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERK18FloatComplexMatrixRi"]
        pub fn FloatMatrix_solve21(this: *const root::FloatMatrix,
                                   b: *const root::FloatComplexMatrix,
                                   info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERK18FloatComplexMatrixRiRf"]
        pub fn FloatMatrix_solve22(this: *const root::FloatMatrix,
                                   b: *const root::FloatComplexMatrix,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveERK18FloatComplexMatrixRiRfPFvfE15blas_trans_type"]
        pub fn FloatMatrix_solve23(this: *const root::FloatMatrix,
                                   b: *const root::FloatComplexMatrix,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32,
                                   sing_handler:
                                       root::FloatMatrix_solve_singularity_handler,
                                   transt: root::blas_trans_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERK17FloatColumnVector"]
        pub fn FloatMatrix_solve24(this: *const root::FloatMatrix,
                                   b: *const root::FloatColumnVector)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERK17FloatColumnVectorRi"]
        pub fn FloatMatrix_solve25(this: *const root::FloatMatrix,
                                   b: *const root::FloatColumnVector,
                                   info: *mut root::octave_idx_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERK17FloatColumnVectorRiRf"]
        pub fn FloatMatrix_solve26(this: *const root::FloatMatrix,
                                   b: *const root::FloatColumnVector,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32) -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveERK17FloatColumnVectorRiRfPFvfE15blas_trans_type"]
        pub fn FloatMatrix_solve27(this: *const root::FloatMatrix,
                                   b: *const root::FloatColumnVector,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32,
                                   sing_handler:
                                       root::FloatMatrix_solve_singularity_handler,
                                   transt: root::blas_trans_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5solveERK24FloatComplexColumnVector"]
        pub fn FloatMatrix_solve28(this: *const root::FloatMatrix,
                                   b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveERK24FloatComplexColumnVectorRi"]
        pub fn FloatMatrix_solve29(this: *const root::FloatMatrix,
                                   b: *const root::FloatComplexColumnVector,
                                   info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveERK24FloatComplexColumnVectorRiRf"]
        pub fn FloatMatrix_solve30(this: *const root::FloatMatrix,
                                   b: *const root::FloatComplexColumnVector,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix5solveERK24FloatComplexColumnVectorRiRfPFvfE15blas_trans_type"]
        pub fn FloatMatrix_solve31(this: *const root::FloatMatrix,
                                   b: *const root::FloatComplexColumnVector,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32,
                                   sing_handler:
                                       root::FloatMatrix_solve_singularity_handler,
                                   transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERKS_"]
        pub fn FloatMatrix_lssolve(this: *const root::FloatMatrix,
                                   b: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERKS_Ri"]
        pub fn FloatMatrix_lssolve1(this: *const root::FloatMatrix,
                                    b: *const root::FloatMatrix,
                                    info: *mut root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERKS_RiS2_"]
        pub fn FloatMatrix_lssolve2(this: *const root::FloatMatrix,
                                    b: *const root::FloatMatrix,
                                    info: *mut root::octave_idx_type,
                                    rank: *mut root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERKS_RiS2_Rf"]
        pub fn FloatMatrix_lssolve3(this: *const root::FloatMatrix,
                                    b: *const root::FloatMatrix,
                                    info: *mut root::octave_idx_type,
                                    rank: *mut root::octave_idx_type,
                                    rcon: *mut f32) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERK18FloatComplexMatrix"]
        pub fn FloatMatrix_lssolve4(this: *const root::FloatMatrix,
                                    b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERK18FloatComplexMatrixRi"]
        pub fn FloatMatrix_lssolve5(this: *const root::FloatMatrix,
                                    b: *const root::FloatComplexMatrix,
                                    info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERK18FloatComplexMatrixRiS3_"]
        pub fn FloatMatrix_lssolve6(this: *const root::FloatMatrix,
                                    b: *const root::FloatComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rank: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix7lssolveERK18FloatComplexMatrixRiS3_Rf"]
        pub fn FloatMatrix_lssolve7(this: *const root::FloatMatrix,
                                    b: *const root::FloatComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rank: *mut root::octave_idx_type,
                                    rcon: *mut f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERK17FloatColumnVector"]
        pub fn FloatMatrix_lssolve8(this: *const root::FloatMatrix,
                                    b: *const root::FloatColumnVector)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERK17FloatColumnVectorRi"]
        pub fn FloatMatrix_lssolve9(this: *const root::FloatMatrix,
                                    b: *const root::FloatColumnVector,
                                    info: *mut root::octave_idx_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7lssolveERK17FloatColumnVectorRiS3_"]
        pub fn FloatMatrix_lssolve10(this: *const root::FloatMatrix,
                                     b: *const root::FloatColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rank: *mut root::octave_idx_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix7lssolveERK17FloatColumnVectorRiS3_Rf"]
        pub fn FloatMatrix_lssolve11(this: *const root::FloatMatrix,
                                     b: *const root::FloatColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rank: *mut root::octave_idx_type,
                                     rcon: *mut f32)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix7lssolveERK24FloatComplexColumnVector"]
        pub fn FloatMatrix_lssolve12(this: *const root::FloatMatrix,
                                     b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix7lssolveERK24FloatComplexColumnVectorRi"]
        pub fn FloatMatrix_lssolve13(this: *const root::FloatMatrix,
                                     b: *const root::FloatComplexColumnVector,
                                     info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix7lssolveERK24FloatComplexColumnVectorRiS3_"]
        pub fn FloatMatrix_lssolve14(this: *const root::FloatMatrix,
                                     b: *const root::FloatComplexColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rank: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK11FloatMatrix7lssolveERK24FloatComplexColumnVectorRiS3_Rf"]
        pub fn FloatMatrix_lssolve15(this: *const root::FloatMatrix,
                                     b: *const root::FloatComplexColumnVector,
                                     info: *mut root::octave_idx_type,
                                     rank: *mut root::octave_idx_type,
                                     rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7cumprodEi"]
        pub fn FloatMatrix_cumprod(this: *const root::FloatMatrix,
                                   dim: ::std::os::raw::c_int)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix6cumsumEi"]
        pub fn FloatMatrix_cumsum(this: *const root::FloatMatrix,
                                  dim: ::std::os::raw::c_int)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix4prodEi"]
        pub fn FloatMatrix_prod(this: *const root::FloatMatrix,
                                dim: ::std::os::raw::c_int)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix3sumEi"]
        pub fn FloatMatrix_sum(this: *const root::FloatMatrix,
                               dim: ::std::os::raw::c_int)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix5sumsqEi"]
        pub fn FloatMatrix_sumsq(this: *const root::FloatMatrix,
                                 dim: ::std::os::raw::c_int)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix3absEv"]
        pub fn FloatMatrix_abs(this: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix4diagEi"]
        pub fn FloatMatrix_diag(this: *const root::FloatMatrix,
                                k: root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix4diagEii"]
        pub fn FloatMatrix_diag1(this: *const root::FloatMatrix,
                                 m: root::octave_idx_type,
                                 n: root::octave_idx_type)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7row_minEv"]
        pub fn FloatMatrix_row_min(this: *const root::FloatMatrix)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7row_maxEv"]
        pub fn FloatMatrix_row_max(this: *const root::FloatMatrix)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7row_minER5ArrayIiE"]
        pub fn FloatMatrix_row_min1(this: *const root::FloatMatrix,
                                    index: *mut [u64; 5usize])
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix7row_maxER5ArrayIiE"]
        pub fn FloatMatrix_row_max1(this: *const root::FloatMatrix,
                                    index: *mut [u64; 5usize])
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix10column_minEv"]
        pub fn FloatMatrix_column_min(this: *const root::FloatMatrix)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix10column_maxEv"]
        pub fn FloatMatrix_column_max(this: *const root::FloatMatrix)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix10column_minER5ArrayIiE"]
        pub fn FloatMatrix_column_min1(this: *const root::FloatMatrix,
                                       index: *mut [u64; 5usize])
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK11FloatMatrix10column_maxER5ArrayIiE"]
        pub fn FloatMatrix_column_max1(this: *const root::FloatMatrix,
                                       index: *mut [u64; 5usize])
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrixC1ERK14FloatRowVector"]
        pub fn FloatMatrix_FloatMatrix(this: *mut root::FloatMatrix,
                                       rv: *const root::FloatRowVector);
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrixC1ERK17FloatColumnVector"]
        pub fn FloatMatrix_FloatMatrix1(this: *mut root::FloatMatrix,
                                        cv: *const root::FloatColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrixC1ERK15FloatDiagMatrix"]
        pub fn FloatMatrix_FloatMatrix2(this: *mut root::FloatMatrix,
                                        a: *const root::FloatDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrixC1ERK11MDiagArray2IfE"]
        pub fn FloatMatrix_FloatMatrix3(this: *mut root::FloatMatrix,
                                        a: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrixC1ERK10DiagArray2IfE"]
        pub fn FloatMatrix_FloatMatrix4(this: *mut root::FloatMatrix,
                                        a: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrixC1ERK10PermMatrix"]
        pub fn FloatMatrix_FloatMatrix5(this: *mut root::FloatMatrix,
                                        a: *const root::PermMatrix);
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrixC1ERK10boolMatrix"]
        pub fn FloatMatrix_FloatMatrix6(this: *mut root::FloatMatrix,
                                        a: *const root::boolMatrix);
    }
    extern "C" {
        #[link_name = "_ZN11FloatMatrixC1ERK10charMatrix"]
        pub fn FloatMatrix_FloatMatrix7(this: *mut root::FloatMatrix,
                                        a: *const root::charMatrix);
    }
    impl Clone for FloatMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl FloatMatrix {
        #[inline]
        pub unsafe fn is_symmetric(&self) -> bool {
            FloatMatrix_is_symmetric(self)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::FloatMatrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::FloatMatrix {
            FloatMatrix_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::FloatRowVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatMatrix {
            FloatMatrix_insert1(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert2(&mut self, a: *const root::FloatColumnVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatMatrix {
            FloatMatrix_insert2(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert3(&mut self, a: *const root::FloatDiagMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatMatrix {
            FloatMatrix_insert3(self, a, r, c)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f32) -> *mut root::FloatMatrix {
            FloatMatrix_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: f32, r1: root::octave_idx_type,
                            c1: root::octave_idx_type,
                            r2: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::FloatMatrix {
            FloatMatrix_fill1(self, val, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn append(&self, a: *const root::FloatMatrix)
         -> root::FloatMatrix {
            FloatMatrix_append(self, a)
        }
        #[inline]
        pub unsafe fn append1(&self, a: *const root::FloatRowVector)
         -> root::FloatMatrix {
            FloatMatrix_append1(self, a)
        }
        #[inline]
        pub unsafe fn append2(&self, a: *const root::FloatColumnVector)
         -> root::FloatMatrix {
            FloatMatrix_append2(self, a)
        }
        #[inline]
        pub unsafe fn append3(&self, a: *const root::FloatDiagMatrix)
         -> root::FloatMatrix {
            FloatMatrix_append3(self, a)
        }
        #[inline]
        pub unsafe fn stack(&self, a: *const root::FloatMatrix)
         -> root::FloatMatrix {
            FloatMatrix_stack(self, a)
        }
        #[inline]
        pub unsafe fn stack1(&self, a: *const root::FloatRowVector)
         -> root::FloatMatrix {
            FloatMatrix_stack1(self, a)
        }
        #[inline]
        pub unsafe fn stack2(&self, a: *const root::FloatColumnVector)
         -> root::FloatMatrix {
            FloatMatrix_stack2(self, a)
        }
        #[inline]
        pub unsafe fn stack3(&self, a: *const root::FloatDiagMatrix)
         -> root::FloatMatrix {
            FloatMatrix_stack3(self, a)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_extract(self, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, r1: root::octave_idx_type,
                                c1: root::octave_idx_type,
                                nr: root::octave_idx_type,
                                nc: root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_extract_n(self, r1, c1, nr, nc)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::FloatRowVector {
            FloatMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::FloatColumnVector {
            FloatMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::FloatMatrix {
            FloatMatrix_inverse(self)
        }
        #[inline]
        pub unsafe fn inverse1(&self, info: *mut root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_inverse1(self, info)
        }
        #[inline]
        pub unsafe fn inverse2(&self, info: *mut root::octave_idx_type,
                               rcon: *mut f32, force: bool, calc_cond: bool)
         -> root::FloatMatrix {
            FloatMatrix_inverse2(self, info, rcon, force, calc_cond)
        }
        #[inline]
        pub unsafe fn inverse3(&self, mattype: *mut root::MatrixType)
         -> root::FloatMatrix {
            FloatMatrix_inverse3(self, mattype)
        }
        #[inline]
        pub unsafe fn inverse4(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_inverse4(self, mattype, info)
        }
        #[inline]
        pub unsafe fn inverse5(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type,
                               rcon: *mut f32, force: bool, calc_cond: bool)
         -> root::FloatMatrix {
            FloatMatrix_inverse5(self, mattype, info, rcon, force, calc_cond)
        }
        #[inline]
        pub unsafe fn pseudo_inverse(&self, tol: f32) -> root::FloatMatrix {
            FloatMatrix_pseudo_inverse(self, tol)
        }
        #[inline]
        pub unsafe fn fourier(&self) -> root::FloatComplexMatrix {
            FloatMatrix_fourier(self)
        }
        #[inline]
        pub unsafe fn ifourier(&self) -> root::FloatComplexMatrix {
            FloatMatrix_ifourier(self)
        }
        #[inline]
        pub unsafe fn fourier2d(&self) -> root::FloatComplexMatrix {
            FloatMatrix_fourier2d(self)
        }
        #[inline]
        pub unsafe fn ifourier2d(&self) -> root::FloatComplexMatrix {
            FloatMatrix_ifourier2d(self)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::FloatDET {
            FloatMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn determinant1(&self, info: *mut root::octave_idx_type)
         -> root::FloatDET {
            FloatMatrix_determinant1(self, info)
        }
        #[inline]
        pub unsafe fn determinant2(&self, info: *mut root::octave_idx_type,
                                   rcon: *mut f32, calc_cond: bool)
         -> root::FloatDET {
            FloatMatrix_determinant2(self, info, rcon, calc_cond)
        }
        #[inline]
        pub unsafe fn determinant3(&self, mattype: *mut root::MatrixType,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32, calc_cond: bool)
         -> root::FloatDET {
            FloatMatrix_determinant3(self, mattype, info, rcon, calc_cond)
        }
        #[inline]
        pub unsafe fn rcond(&self) -> f32 { FloatMatrix_rcond(self) }
        #[inline]
        pub unsafe fn rcond1(&self, mattype: *mut root::MatrixType) -> f32 {
            FloatMatrix_rcond1(self, mattype)
        }
        #[inline]
        pub unsafe fn solve(&self, typ: *mut root::MatrixType,
                            b: *const root::FloatMatrix)
         -> root::FloatMatrix {
            FloatMatrix_solve(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve1(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatMatrix,
                             info: *mut root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_solve1(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve2(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f32)
         -> root::FloatMatrix {
            FloatMatrix_solve2(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve3(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f32,
                             sing_handler:
                                 root::FloatMatrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type)
         -> root::FloatMatrix {
            FloatMatrix_solve3(self, typ, b, info, rcon, sing_handler,
                               singular_fallback, transt)
        }
        #[inline]
        pub unsafe fn solve4(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix {
            FloatMatrix_solve4(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve5(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatComplexMatrix,
                             info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatMatrix_solve5(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve6(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f32)
         -> root::FloatComplexMatrix {
            FloatMatrix_solve6(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve7(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f32,
                             sing_handler:
                                 root::FloatMatrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type)
         -> root::FloatComplexMatrix {
            FloatMatrix_solve7(self, typ, b, info, rcon, sing_handler,
                               singular_fallback, transt)
        }
        #[inline]
        pub unsafe fn solve8(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatColumnVector)
         -> root::FloatColumnVector {
            FloatMatrix_solve8(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve9(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatColumnVector,
                             info: *mut root::octave_idx_type)
         -> root::FloatColumnVector {
            FloatMatrix_solve9(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve10(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32) -> root::FloatColumnVector {
            FloatMatrix_solve10(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve11(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatColumnVector {
            FloatMatrix_solve11(self, typ, b, info, rcon, sing_handler,
                                transt)
        }
        #[inline]
        pub unsafe fn solve12(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector {
            FloatMatrix_solve12(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve13(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatMatrix_solve13(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve14(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatMatrix_solve14(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve15(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector {
            FloatMatrix_solve15(self, typ, b, info, rcon, sing_handler,
                                transt)
        }
        #[inline]
        pub unsafe fn solve16(&self, b: *const root::FloatMatrix)
         -> root::FloatMatrix {
            FloatMatrix_solve16(self, b)
        }
        #[inline]
        pub unsafe fn solve17(&self, b: *const root::FloatMatrix,
                              info: *mut root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_solve17(self, b, info)
        }
        #[inline]
        pub unsafe fn solve18(&self, b: *const root::FloatMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32) -> root::FloatMatrix {
            FloatMatrix_solve18(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve19(&self, b: *const root::FloatMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatMatrix {
            FloatMatrix_solve19(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve20(&self, b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix {
            FloatMatrix_solve20(self, b)
        }
        #[inline]
        pub unsafe fn solve21(&self, b: *const root::FloatComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatMatrix_solve21(self, b, info)
        }
        #[inline]
        pub unsafe fn solve22(&self, b: *const root::FloatComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32) -> root::FloatComplexMatrix {
            FloatMatrix_solve22(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve23(&self, b: *const root::FloatComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexMatrix {
            FloatMatrix_solve23(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve24(&self, b: *const root::FloatColumnVector)
         -> root::FloatColumnVector {
            FloatMatrix_solve24(self, b)
        }
        #[inline]
        pub unsafe fn solve25(&self, b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::FloatColumnVector {
            FloatMatrix_solve25(self, b, info)
        }
        #[inline]
        pub unsafe fn solve26(&self, b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32) -> root::FloatColumnVector {
            FloatMatrix_solve26(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve27(&self, b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatColumnVector {
            FloatMatrix_solve27(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn solve28(&self, b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector {
            FloatMatrix_solve28(self, b)
        }
        #[inline]
        pub unsafe fn solve29(&self, b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatMatrix_solve29(self, b, info)
        }
        #[inline]
        pub unsafe fn solve30(&self, b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatMatrix_solve30(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve31(&self, b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector {
            FloatMatrix_solve31(self, b, info, rcon, sing_handler, transt)
        }
        #[inline]
        pub unsafe fn lssolve(&self, b: *const root::FloatMatrix)
         -> root::FloatMatrix {
            FloatMatrix_lssolve(self, b)
        }
        #[inline]
        pub unsafe fn lssolve1(&self, b: *const root::FloatMatrix,
                               info: *mut root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_lssolve1(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve2(&self, b: *const root::FloatMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_lssolve2(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve3(&self, b: *const root::FloatMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f32) -> root::FloatMatrix {
            FloatMatrix_lssolve3(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve4(&self, b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix {
            FloatMatrix_lssolve4(self, b)
        }
        #[inline]
        pub unsafe fn lssolve5(&self, b: *const root::FloatComplexMatrix,
                               info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatMatrix_lssolve5(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve6(&self, b: *const root::FloatComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatMatrix_lssolve6(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve7(&self, b: *const root::FloatComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f32) -> root::FloatComplexMatrix {
            FloatMatrix_lssolve7(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve8(&self, b: *const root::FloatColumnVector)
         -> root::FloatColumnVector {
            FloatMatrix_lssolve8(self, b)
        }
        #[inline]
        pub unsafe fn lssolve9(&self, b: *const root::FloatColumnVector,
                               info: *mut root::octave_idx_type)
         -> root::FloatColumnVector {
            FloatMatrix_lssolve9(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve10(&self, b: *const root::FloatColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::FloatColumnVector {
            FloatMatrix_lssolve10(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve11(&self, b: *const root::FloatColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f32) -> root::FloatColumnVector {
            FloatMatrix_lssolve11(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve12(&self,
                                b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector {
            FloatMatrix_lssolve12(self, b)
        }
        #[inline]
        pub unsafe fn lssolve13(&self,
                                b: *const root::FloatComplexColumnVector,
                                info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatMatrix_lssolve13(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve14(&self,
                                b: *const root::FloatComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatMatrix_lssolve14(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve15(&self,
                                b: *const root::FloatComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatMatrix_lssolve15(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::FloatMatrix {
            FloatMatrix_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::FloatMatrix {
            FloatMatrix_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::FloatMatrix {
            FloatMatrix_prod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::FloatMatrix {
            FloatMatrix_sum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::FloatMatrix {
            FloatMatrix_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::FloatMatrix {
            FloatMatrix_abs(self)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::FloatMatrix {
            FloatMatrix_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type)
         -> root::FloatDiagMatrix {
            FloatMatrix_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn row_min(&self) -> root::FloatColumnVector {
            FloatMatrix_row_min(self)
        }
        #[inline]
        pub unsafe fn row_max(&self) -> root::FloatColumnVector {
            FloatMatrix_row_max(self)
        }
        #[inline]
        pub unsafe fn row_min1(&self, index: *mut [u64; 5usize])
         -> root::FloatColumnVector {
            FloatMatrix_row_min1(self, index)
        }
        #[inline]
        pub unsafe fn row_max1(&self, index: *mut [u64; 5usize])
         -> root::FloatColumnVector {
            FloatMatrix_row_max1(self, index)
        }
        #[inline]
        pub unsafe fn column_min(&self) -> root::FloatRowVector {
            FloatMatrix_column_min(self)
        }
        #[inline]
        pub unsafe fn column_max(&self) -> root::FloatRowVector {
            FloatMatrix_column_max(self)
        }
        #[inline]
        pub unsafe fn column_min1(&self, index: *mut [u64; 5usize])
         -> root::FloatRowVector {
            FloatMatrix_column_min1(self, index)
        }
        #[inline]
        pub unsafe fn column_max1(&self, index: *mut [u64; 5usize])
         -> root::FloatRowVector {
            FloatMatrix_column_max1(self, index)
        }
        #[inline]
        pub unsafe fn new(rv: *const root::FloatRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatMatrix_FloatMatrix(&mut __bindgen_tmp, rv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(cv: *const root::FloatColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatMatrix_FloatMatrix1(&mut __bindgen_tmp, cv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(a: *const root::FloatDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatMatrix_FloatMatrix2(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatMatrix_FloatMatrix3(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatMatrix_FloatMatrix4(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new5(a: *const root::PermMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatMatrix_FloatMatrix5(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new6(a: *const root::boolMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatMatrix_FloatMatrix6(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new7(a: *const root::charMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatMatrix_FloatMatrix7(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatComplexMatrix {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    pub type FloatComplexMatrix_column_vector_type = [u64; 5usize];
    pub type FloatComplexMatrix_row_vector_type = [u64; 5usize];
    pub type FloatComplexMatrix_real_column_vector_type = [u64; 5usize];
    pub type FloatComplexMatrix_real_row_vector_type = [u64; 5usize];
    pub type FloatComplexMatrix_real_matrix_type = [u64; 5usize];
    pub type FloatComplexMatrix_complex_matrix_type = [u64; 5usize];
    pub type FloatComplexMatrix_real_diag_matrix_type = [u64; 6usize];
    pub type FloatComplexMatrix_complex_diag_matrix_type = [u64; 6usize];
    pub type FloatComplexMatrix_real_elt_type = u32;
    pub type FloatComplexMatrix_complex_elt_type = [u32; 2usize];
    pub type FloatComplexMatrix_solve_singularity_handler = u64;
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix12is_hermitianEv"]
        pub fn FloatComplexMatrix_is_hermitian(this:
                                                   *const root::FloatComplexMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrix6insertERK11FloatMatrixii"]
        pub fn FloatComplexMatrix_insert(this: *mut root::FloatComplexMatrix,
                                         a: *const root::FloatMatrix,
                                         r: root::octave_idx_type,
                                         c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrix6insertERK14FloatRowVectorii"]
        pub fn FloatComplexMatrix_insert1(this: *mut root::FloatComplexMatrix,
                                          a: *const root::FloatRowVector,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN18FloatComplexMatrix6insertERK17FloatColumnVectorii"]
        pub fn FloatComplexMatrix_insert2(this: *mut root::FloatComplexMatrix,
                                          a: *const root::FloatColumnVector,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrix6insertERK15FloatDiagMatrixii"]
        pub fn FloatComplexMatrix_insert3(this: *mut root::FloatComplexMatrix,
                                          a: *const root::FloatDiagMatrix,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrix6insertERKS_ii"]
        pub fn FloatComplexMatrix_insert4(this: *mut root::FloatComplexMatrix,
                                          a: *const root::FloatComplexMatrix,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN18FloatComplexMatrix6insertERK21FloatComplexRowVectorii"]
        pub fn FloatComplexMatrix_insert5(this: *mut root::FloatComplexMatrix,
                                          a:
                                              *const root::FloatComplexRowVector,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN18FloatComplexMatrix6insertERK24FloatComplexColumnVectorii"]
        pub fn FloatComplexMatrix_insert6(this: *mut root::FloatComplexMatrix,
                                          a:
                                              *const root::FloatComplexColumnVector,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN18FloatComplexMatrix6insertERK22FloatComplexDiagMatrixii"]
        pub fn FloatComplexMatrix_insert7(this: *mut root::FloatComplexMatrix,
                                          a:
                                              *const root::FloatComplexDiagMatrix,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrix4fillEf"]
        pub fn FloatComplexMatrix_fill(this: *mut root::FloatComplexMatrix,
                                       val: f32)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrix4fillERKSt7complexIfE"]
        pub fn FloatComplexMatrix_fill1(this: *mut root::FloatComplexMatrix,
                                        val: *const root::FloatComplex)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrix4fillEfiiii"]
        pub fn FloatComplexMatrix_fill2(this: *mut root::FloatComplexMatrix,
                                        val: f32, r1: root::octave_idx_type,
                                        c1: root::octave_idx_type,
                                        r2: root::octave_idx_type,
                                        c2: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrix4fillERKSt7complexIfEiiii"]
        pub fn FloatComplexMatrix_fill3(this: *mut root::FloatComplexMatrix,
                                        val: *const root::FloatComplex,
                                        r1: root::octave_idx_type,
                                        c1: root::octave_idx_type,
                                        r2: root::octave_idx_type,
                                        c2: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix6appendERK11FloatMatrix"]
        pub fn FloatComplexMatrix_append(this:
                                             *const root::FloatComplexMatrix,
                                         a: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix6appendERK14FloatRowVector"]
        pub fn FloatComplexMatrix_append1(this:
                                              *const root::FloatComplexMatrix,
                                          a: *const root::FloatRowVector)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix6appendERK17FloatColumnVector"]
        pub fn FloatComplexMatrix_append2(this:
                                              *const root::FloatComplexMatrix,
                                          a: *const root::FloatColumnVector)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix6appendERK15FloatDiagMatrix"]
        pub fn FloatComplexMatrix_append3(this:
                                              *const root::FloatComplexMatrix,
                                          a: *const root::FloatDiagMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix6appendERKS_"]
        pub fn FloatComplexMatrix_append4(this:
                                              *const root::FloatComplexMatrix,
                                          a: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix6appendERK21FloatComplexRowVector"]
        pub fn FloatComplexMatrix_append5(this:
                                              *const root::FloatComplexMatrix,
                                          a:
                                              *const root::FloatComplexRowVector)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix6appendERK24FloatComplexColumnVector"]
        pub fn FloatComplexMatrix_append6(this:
                                              *const root::FloatComplexMatrix,
                                          a:
                                              *const root::FloatComplexColumnVector)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix6appendERK22FloatComplexDiagMatrix"]
        pub fn FloatComplexMatrix_append7(this:
                                              *const root::FloatComplexMatrix,
                                          a:
                                              *const root::FloatComplexDiagMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5stackERK11FloatMatrix"]
        pub fn FloatComplexMatrix_stack(this: *const root::FloatComplexMatrix,
                                        a: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5stackERK14FloatRowVector"]
        pub fn FloatComplexMatrix_stack1(this:
                                             *const root::FloatComplexMatrix,
                                         a: *const root::FloatRowVector)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5stackERK17FloatColumnVector"]
        pub fn FloatComplexMatrix_stack2(this:
                                             *const root::FloatComplexMatrix,
                                         a: *const root::FloatColumnVector)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5stackERK15FloatDiagMatrix"]
        pub fn FloatComplexMatrix_stack3(this:
                                             *const root::FloatComplexMatrix,
                                         a: *const root::FloatDiagMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5stackERKS_"]
        pub fn FloatComplexMatrix_stack4(this:
                                             *const root::FloatComplexMatrix,
                                         a: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5stackERK21FloatComplexRowVector"]
        pub fn FloatComplexMatrix_stack5(this:
                                             *const root::FloatComplexMatrix,
                                         a:
                                             *const root::FloatComplexRowVector)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5stackERK24FloatComplexColumnVector"]
        pub fn FloatComplexMatrix_stack6(this:
                                             *const root::FloatComplexMatrix,
                                         a:
                                             *const root::FloatComplexColumnVector)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5stackERK22FloatComplexDiagMatrix"]
        pub fn FloatComplexMatrix_stack7(this:
                                             *const root::FloatComplexMatrix,
                                         a:
                                             *const root::FloatComplexDiagMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7extractEiiii"]
        pub fn FloatComplexMatrix_extract(this:
                                              *const root::FloatComplexMatrix,
                                          r1: root::octave_idx_type,
                                          c1: root::octave_idx_type,
                                          r2: root::octave_idx_type,
                                          c2: root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix9extract_nEiiii"]
        pub fn FloatComplexMatrix_extract_n(this:
                                                *const root::FloatComplexMatrix,
                                            r1: root::octave_idx_type,
                                            c1: root::octave_idx_type,
                                            nr: root::octave_idx_type,
                                            nc: root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix3rowEi"]
        pub fn FloatComplexMatrix_row(this: *const root::FloatComplexMatrix,
                                      i: root::octave_idx_type)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix6columnEi"]
        pub fn FloatComplexMatrix_column(this:
                                             *const root::FloatComplexMatrix,
                                         i: root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7inverseEv"]
        pub fn FloatComplexMatrix_inverse(this:
                                              *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7inverseERi"]
        pub fn FloatComplexMatrix_inverse1(this:
                                               *const root::FloatComplexMatrix,
                                           info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7inverseERiRfbb"]
        pub fn FloatComplexMatrix_inverse2(this:
                                               *const root::FloatComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcon: *mut f32, force: bool,
                                           calc_cond: bool)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7inverseER10MatrixType"]
        pub fn FloatComplexMatrix_inverse3(this:
                                               *const root::FloatComplexMatrix,
                                           mattype: *mut root::MatrixType)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7inverseER10MatrixTypeRi"]
        pub fn FloatComplexMatrix_inverse4(this:
                                               *const root::FloatComplexMatrix,
                                           mattype: *mut root::MatrixType,
                                           info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7inverseER10MatrixTypeRiRfbb"]
        pub fn FloatComplexMatrix_inverse5(this:
                                               *const root::FloatComplexMatrix,
                                           mattype: *mut root::MatrixType,
                                           info: *mut root::octave_idx_type,
                                           rcon: *mut f32, force: bool,
                                           calc_cond: bool)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix14pseudo_inverseEf"]
        pub fn FloatComplexMatrix_pseudo_inverse(this:
                                                     *const root::FloatComplexMatrix,
                                                 tol: f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7fourierEv"]
        pub fn FloatComplexMatrix_fourier(this:
                                              *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix8ifourierEv"]
        pub fn FloatComplexMatrix_ifourier(this:
                                               *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix9fourier2dEv"]
        pub fn FloatComplexMatrix_fourier2d(this:
                                                *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix10ifourier2dEv"]
        pub fn FloatComplexMatrix_ifourier2d(this:
                                                 *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix11determinantEv"]
        pub fn FloatComplexMatrix_determinant(this:
                                                  *const root::FloatComplexMatrix)
         -> root::FloatComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix11determinantERi"]
        pub fn FloatComplexMatrix_determinant1(this:
                                                   *const root::FloatComplexMatrix,
                                               info:
                                                   *mut root::octave_idx_type)
         -> root::FloatComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix11determinantERiRfb"]
        pub fn FloatComplexMatrix_determinant2(this:
                                                   *const root::FloatComplexMatrix,
                                               info:
                                                   *mut root::octave_idx_type,
                                               rcon: *mut f32,
                                               calc_cond: bool)
         -> root::FloatComplexDET;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix11determinantER10MatrixTypeRiRfb"]
        pub fn FloatComplexMatrix_determinant3(this:
                                                   *const root::FloatComplexMatrix,
                                               mattype: *mut root::MatrixType,
                                               info:
                                                   *mut root::octave_idx_type,
                                               rcon: *mut f32,
                                               calc_cond: bool)
         -> root::FloatComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5rcondEv"]
        pub fn FloatComplexMatrix_rcond(this: *const root::FloatComplexMatrix)
         -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5rcondER10MatrixType"]
        pub fn FloatComplexMatrix_rcond1(this:
                                             *const root::FloatComplexMatrix,
                                         mattype: *mut root::MatrixType)
         -> f32;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK11FloatMatrix"]
        pub fn FloatComplexMatrix_solve(this: *const root::FloatComplexMatrix,
                                        typ: *mut root::MatrixType,
                                        b: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK11FloatMatrixRi"]
        pub fn FloatComplexMatrix_solve1(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatMatrix,
                                         info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK11FloatMatrixRiRf"]
        pub fn FloatComplexMatrix_solve2(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatMatrix,
                                         info: *mut root::octave_idx_type,
                                         rcon: *mut f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK11FloatMatrixRiRfPFvfEb15blas_trans_type"]
        pub fn FloatComplexMatrix_solve3(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatMatrix,
                                         info: *mut root::octave_idx_type,
                                         rcon: *mut f32,
                                         sing_handler:
                                             root::FloatComplexMatrix_solve_singularity_handler,
                                         singular_fallback: bool,
                                         transt: root::blas_trans_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRKS_"]
        pub fn FloatComplexMatrix_solve4(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRKS_Ri"]
        pub fn FloatComplexMatrix_solve5(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatComplexMatrix,
                                         info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRKS_RiRf"]
        pub fn FloatComplexMatrix_solve6(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatComplexMatrix,
                                         info: *mut root::octave_idx_type,
                                         rcon: *mut f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRKS_RiRfPFvfEb15blas_trans_type"]
        pub fn FloatComplexMatrix_solve7(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatComplexMatrix,
                                         info: *mut root::octave_idx_type,
                                         rcon: *mut f32,
                                         sing_handler:
                                             root::FloatComplexMatrix_solve_singularity_handler,
                                         singular_fallback: bool,
                                         transt: root::blas_trans_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK17FloatColumnVector"]
        pub fn FloatComplexMatrix_solve8(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK17FloatColumnVectorRi"]
        pub fn FloatComplexMatrix_solve9(this:
                                             *const root::FloatComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::FloatColumnVector,
                                         info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK17FloatColumnVectorRiRf"]
        pub fn FloatComplexMatrix_solve10(this:
                                              *const root::FloatComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::FloatColumnVector,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK17FloatColumnVectorRiRfPFvfE15blas_trans_type"]
        pub fn FloatComplexMatrix_solve11(this:
                                              *const root::FloatComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::FloatColumnVector,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32,
                                          sing_handler:
                                              root::FloatComplexMatrix_solve_singularity_handler,
                                          transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK24FloatComplexColumnVector"]
        pub fn FloatComplexMatrix_solve12(this:
                                              *const root::FloatComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b:
                                              *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK24FloatComplexColumnVectorRi"]
        pub fn FloatComplexMatrix_solve13(this:
                                              *const root::FloatComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b:
                                              *const root::FloatComplexColumnVector,
                                          info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK24FloatComplexColumnVectorRiRf"]
        pub fn FloatComplexMatrix_solve14(this:
                                              *const root::FloatComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b:
                                              *const root::FloatComplexColumnVector,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveER10MatrixTypeRK24FloatComplexColumnVectorRiRfPFvfE15blas_trans_type"]
        pub fn FloatComplexMatrix_solve15(this:
                                              *const root::FloatComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b:
                                              *const root::FloatComplexColumnVector,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32,
                                          sing_handler:
                                              root::FloatComplexMatrix_solve_singularity_handler,
                                          transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveERK11FloatMatrix"]
        pub fn FloatComplexMatrix_solve16(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveERK11FloatMatrixRi"]
        pub fn FloatComplexMatrix_solve17(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatMatrix,
                                          info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveERK11FloatMatrixRiRf"]
        pub fn FloatComplexMatrix_solve18(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatMatrix,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERK11FloatMatrixRiRfPFvfE15blas_trans_type"]
        pub fn FloatComplexMatrix_solve19(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatMatrix,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32,
                                          sing_handler:
                                              root::FloatComplexMatrix_solve_singularity_handler,
                                          transt: root::blas_trans_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveERKS_"]
        pub fn FloatComplexMatrix_solve20(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveERKS_Ri"]
        pub fn FloatComplexMatrix_solve21(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatComplexMatrix,
                                          info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveERKS_RiRf"]
        pub fn FloatComplexMatrix_solve22(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatComplexMatrix,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERKS_RiRfPFvfE15blas_trans_type"]
        pub fn FloatComplexMatrix_solve23(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatComplexMatrix,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32,
                                          sing_handler:
                                              root::FloatComplexMatrix_solve_singularity_handler,
                                          transt: root::blas_trans_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5solveERK17FloatColumnVector"]
        pub fn FloatComplexMatrix_solve24(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERK17FloatColumnVectorRi"]
        pub fn FloatComplexMatrix_solve25(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatColumnVector,
                                          info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERK17FloatColumnVectorRiRf"]
        pub fn FloatComplexMatrix_solve26(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatColumnVector,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERK17FloatColumnVectorRiRfPFvfE15blas_trans_type"]
        pub fn FloatComplexMatrix_solve27(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatColumnVector,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32,
                                          sing_handler:
                                              root::FloatComplexMatrix_solve_singularity_handler,
                                          transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERK24FloatComplexColumnVector"]
        pub fn FloatComplexMatrix_solve28(this:
                                              *const root::FloatComplexMatrix,
                                          b:
                                              *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERK24FloatComplexColumnVectorRi"]
        pub fn FloatComplexMatrix_solve29(this:
                                              *const root::FloatComplexMatrix,
                                          b:
                                              *const root::FloatComplexColumnVector,
                                          info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERK24FloatComplexColumnVectorRiRf"]
        pub fn FloatComplexMatrix_solve30(this:
                                              *const root::FloatComplexMatrix,
                                          b:
                                              *const root::FloatComplexColumnVector,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix5solveERK24FloatComplexColumnVectorRiRfPFvfE15blas_trans_type"]
        pub fn FloatComplexMatrix_solve31(this:
                                              *const root::FloatComplexMatrix,
                                          b:
                                              *const root::FloatComplexColumnVector,
                                          info: *mut root::octave_idx_type,
                                          rcon: *mut f32,
                                          sing_handler:
                                              root::FloatComplexMatrix_solve_singularity_handler,
                                          transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7lssolveERK11FloatMatrix"]
        pub fn FloatComplexMatrix_lssolve(this:
                                              *const root::FloatComplexMatrix,
                                          b: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7lssolveERK11FloatMatrixRi"]
        pub fn FloatComplexMatrix_lssolve1(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatMatrix,
                                           info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7lssolveERK11FloatMatrixRiS3_"]
        pub fn FloatComplexMatrix_lssolve2(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatMatrix,
                                           info: *mut root::octave_idx_type,
                                           rank: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK11FloatMatrixRiS3_Rf"]
        pub fn FloatComplexMatrix_lssolve3(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatMatrix,
                                           info: *mut root::octave_idx_type,
                                           rank: *mut root::octave_idx_type,
                                           rcon: *mut f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7lssolveERKS_"]
        pub fn FloatComplexMatrix_lssolve4(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7lssolveERKS_Ri"]
        pub fn FloatComplexMatrix_lssolve5(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatComplexMatrix,
                                           info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7lssolveERKS_RiS2_"]
        pub fn FloatComplexMatrix_lssolve6(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rank: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7lssolveERKS_RiS2_Rf"]
        pub fn FloatComplexMatrix_lssolve7(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rank: *mut root::octave_idx_type,
                                           rcon: *mut f32)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK17FloatColumnVector"]
        pub fn FloatComplexMatrix_lssolve8(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK17FloatColumnVectorRi"]
        pub fn FloatComplexMatrix_lssolve9(this:
                                               *const root::FloatComplexMatrix,
                                           b: *const root::FloatColumnVector,
                                           info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK17FloatColumnVectorRiS3_"]
        pub fn FloatComplexMatrix_lssolve10(this:
                                                *const root::FloatComplexMatrix,
                                            b: *const root::FloatColumnVector,
                                            info: *mut root::octave_idx_type,
                                            rank: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK17FloatColumnVectorRiS3_Rf"]
        pub fn FloatComplexMatrix_lssolve11(this:
                                                *const root::FloatComplexMatrix,
                                            b: *const root::FloatColumnVector,
                                            info: *mut root::octave_idx_type,
                                            rank: *mut root::octave_idx_type,
                                            rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK24FloatComplexColumnVector"]
        pub fn FloatComplexMatrix_lssolve12(this:
                                                *const root::FloatComplexMatrix,
                                            b:
                                                *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK24FloatComplexColumnVectorRi"]
        pub fn FloatComplexMatrix_lssolve13(this:
                                                *const root::FloatComplexMatrix,
                                            b:
                                                *const root::FloatComplexColumnVector,
                                            info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK24FloatComplexColumnVectorRiS3_"]
        pub fn FloatComplexMatrix_lssolve14(this:
                                                *const root::FloatComplexMatrix,
                                            b:
                                                *const root::FloatComplexColumnVector,
                                            info: *mut root::octave_idx_type,
                                            rank: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK18FloatComplexMatrix7lssolveERK24FloatComplexColumnVectorRiS3_Rf"]
        pub fn FloatComplexMatrix_lssolve15(this:
                                                *const root::FloatComplexMatrix,
                                            b:
                                                *const root::FloatComplexColumnVector,
                                            info: *mut root::octave_idx_type,
                                            rank: *mut root::octave_idx_type,
                                            rcon: *mut f32)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix3allEi"]
        pub fn FloatComplexMatrix_all(this: *const root::FloatComplexMatrix,
                                      dim: ::std::os::raw::c_int)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix3anyEi"]
        pub fn FloatComplexMatrix_any(this: *const root::FloatComplexMatrix,
                                      dim: ::std::os::raw::c_int)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7cumprodEi"]
        pub fn FloatComplexMatrix_cumprod(this:
                                              *const root::FloatComplexMatrix,
                                          dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix6cumsumEi"]
        pub fn FloatComplexMatrix_cumsum(this:
                                             *const root::FloatComplexMatrix,
                                         dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix4prodEi"]
        pub fn FloatComplexMatrix_prod(this: *const root::FloatComplexMatrix,
                                       dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix3sumEi"]
        pub fn FloatComplexMatrix_sum(this: *const root::FloatComplexMatrix,
                                      dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix5sumsqEi"]
        pub fn FloatComplexMatrix_sumsq(this: *const root::FloatComplexMatrix,
                                        dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix3absEv"]
        pub fn FloatComplexMatrix_abs(this: *const root::FloatComplexMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix4diagEi"]
        pub fn FloatComplexMatrix_diag(this: *const root::FloatComplexMatrix,
                                       k: root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix4diagEii"]
        pub fn FloatComplexMatrix_diag1(this: *const root::FloatComplexMatrix,
                                        m: root::octave_idx_type,
                                        n: root::octave_idx_type)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix16row_is_real_onlyEi"]
        pub fn FloatComplexMatrix_row_is_real_only(this:
                                                       *const root::FloatComplexMatrix,
                                                   arg1:
                                                       root::octave_idx_type)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix19column_is_real_onlyEi"]
        pub fn FloatComplexMatrix_column_is_real_only(this:
                                                          *const root::FloatComplexMatrix,
                                                      arg1:
                                                          root::octave_idx_type)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7row_minEv"]
        pub fn FloatComplexMatrix_row_min(this:
                                              *const root::FloatComplexMatrix)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7row_maxEv"]
        pub fn FloatComplexMatrix_row_max(this:
                                              *const root::FloatComplexMatrix)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7row_minER5ArrayIiE"]
        pub fn FloatComplexMatrix_row_min1(this:
                                               *const root::FloatComplexMatrix,
                                           index: *mut [u64; 5usize])
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix7row_maxER5ArrayIiE"]
        pub fn FloatComplexMatrix_row_max1(this:
                                               *const root::FloatComplexMatrix,
                                           index: *mut [u64; 5usize])
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix10column_minEv"]
        pub fn FloatComplexMatrix_column_min(this:
                                                 *const root::FloatComplexMatrix)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix10column_maxEv"]
        pub fn FloatComplexMatrix_column_max(this:
                                                 *const root::FloatComplexMatrix)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix10column_minER5ArrayIiE"]
        pub fn FloatComplexMatrix_column_min1(this:
                                                  *const root::FloatComplexMatrix,
                                              index: *mut [u64; 5usize])
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK18FloatComplexMatrix10column_maxER5ArrayIiE"]
        pub fn FloatComplexMatrix_column_max1(this:
                                                  *const root::FloatComplexMatrix,
                                              index: *mut [u64; 5usize])
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK11FloatMatrix"]
        pub fn FloatComplexMatrix_FloatComplexMatrix(this:
                                                         *mut root::FloatComplexMatrix,
                                                     a:
                                                         *const root::FloatMatrix);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK14FloatRowVector"]
        pub fn FloatComplexMatrix_FloatComplexMatrix1(this:
                                                          *mut root::FloatComplexMatrix,
                                                      rv:
                                                          *const root::FloatRowVector);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK17FloatColumnVector"]
        pub fn FloatComplexMatrix_FloatComplexMatrix2(this:
                                                          *mut root::FloatComplexMatrix,
                                                      cv:
                                                          *const root::FloatColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK15FloatDiagMatrix"]
        pub fn FloatComplexMatrix_FloatComplexMatrix3(this:
                                                          *mut root::FloatComplexMatrix,
                                                      a:
                                                          *const root::FloatDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK11MDiagArray2IfE"]
        pub fn FloatComplexMatrix_FloatComplexMatrix4(this:
                                                          *mut root::FloatComplexMatrix,
                                                      a:
                                                          *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK10DiagArray2IfE"]
        pub fn FloatComplexMatrix_FloatComplexMatrix5(this:
                                                          *mut root::FloatComplexMatrix,
                                                      a:
                                                          *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK21FloatComplexRowVector"]
        pub fn FloatComplexMatrix_FloatComplexMatrix6(this:
                                                          *mut root::FloatComplexMatrix,
                                                      rv:
                                                          *const root::FloatComplexRowVector);
    }
    extern "C" {
        #[link_name =
              "_ZN18FloatComplexMatrixC1ERK24FloatComplexColumnVector"]
        pub fn FloatComplexMatrix_FloatComplexMatrix7(this:
                                                          *mut root::FloatComplexMatrix,
                                                      cv:
                                                          *const root::FloatComplexColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK22FloatComplexDiagMatrix"]
        pub fn FloatComplexMatrix_FloatComplexMatrix8(this:
                                                          *mut root::FloatComplexMatrix,
                                                      a:
                                                          *const root::FloatComplexDiagMatrix);
    }
    extern "C" {
        #[link_name =
              "_ZN18FloatComplexMatrixC1ERK11MDiagArray2ISt7complexIfEE"]
        pub fn FloatComplexMatrix_FloatComplexMatrix9(this:
                                                          *mut root::FloatComplexMatrix,
                                                      a:
                                                          *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name =
              "_ZN18FloatComplexMatrixC1ERK10DiagArray2ISt7complexIfEE"]
        pub fn FloatComplexMatrix_FloatComplexMatrix10(this:
                                                           *mut root::FloatComplexMatrix,
                                                       a:
                                                           *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK10boolMatrix"]
        pub fn FloatComplexMatrix_FloatComplexMatrix11(this:
                                                           *mut root::FloatComplexMatrix,
                                                       a:
                                                           *const root::boolMatrix);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK10charMatrix"]
        pub fn FloatComplexMatrix_FloatComplexMatrix12(this:
                                                           *mut root::FloatComplexMatrix,
                                                       a:
                                                           *const root::charMatrix);
    }
    extern "C" {
        #[link_name = "_ZN18FloatComplexMatrixC1ERK11FloatMatrixS2_"]
        pub fn FloatComplexMatrix_FloatComplexMatrix13(this:
                                                           *mut root::FloatComplexMatrix,
                                                       re:
                                                           *const root::FloatMatrix,
                                                       im:
                                                           *const root::FloatMatrix);
    }
    impl Clone for FloatComplexMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl FloatComplexMatrix {
        #[inline]
        pub unsafe fn is_hermitian(&self) -> bool {
            FloatComplexMatrix_is_hermitian(self)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::FloatMatrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::FloatRowVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_insert1(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert2(&mut self, a: *const root::FloatColumnVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_insert2(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert3(&mut self, a: *const root::FloatDiagMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_insert3(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert4(&mut self, a: *const root::FloatComplexMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_insert4(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert5(&mut self,
                              a: *const root::FloatComplexRowVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_insert5(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert6(&mut self,
                              a: *const root::FloatComplexColumnVector,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_insert6(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert7(&mut self,
                              a: *const root::FloatComplexDiagMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_insert7(self, a, r, c)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f32)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: *const root::FloatComplex)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_fill1(self, val)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, val: f32, r1: root::octave_idx_type,
                            c1: root::octave_idx_type,
                            r2: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_fill2(self, val, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, val: *const root::FloatComplex,
                            r1: root::octave_idx_type,
                            c1: root::octave_idx_type,
                            r2: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::FloatComplexMatrix {
            FloatComplexMatrix_fill3(self, val, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn append(&self, a: *const root::FloatMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_append(self, a)
        }
        #[inline]
        pub unsafe fn append1(&self, a: *const root::FloatRowVector)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_append1(self, a)
        }
        #[inline]
        pub unsafe fn append2(&self, a: *const root::FloatColumnVector)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_append2(self, a)
        }
        #[inline]
        pub unsafe fn append3(&self, a: *const root::FloatDiagMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_append3(self, a)
        }
        #[inline]
        pub unsafe fn append4(&self, a: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_append4(self, a)
        }
        #[inline]
        pub unsafe fn append5(&self, a: *const root::FloatComplexRowVector)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_append5(self, a)
        }
        #[inline]
        pub unsafe fn append6(&self, a: *const root::FloatComplexColumnVector)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_append6(self, a)
        }
        #[inline]
        pub unsafe fn append7(&self, a: *const root::FloatComplexDiagMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_append7(self, a)
        }
        #[inline]
        pub unsafe fn stack(&self, a: *const root::FloatMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_stack(self, a)
        }
        #[inline]
        pub unsafe fn stack1(&self, a: *const root::FloatRowVector)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_stack1(self, a)
        }
        #[inline]
        pub unsafe fn stack2(&self, a: *const root::FloatColumnVector)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_stack2(self, a)
        }
        #[inline]
        pub unsafe fn stack3(&self, a: *const root::FloatDiagMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_stack3(self, a)
        }
        #[inline]
        pub unsafe fn stack4(&self, a: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_stack4(self, a)
        }
        #[inline]
        pub unsafe fn stack5(&self, a: *const root::FloatComplexRowVector)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_stack5(self, a)
        }
        #[inline]
        pub unsafe fn stack6(&self, a: *const root::FloatComplexColumnVector)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_stack6(self, a)
        }
        #[inline]
        pub unsafe fn stack7(&self, a: *const root::FloatComplexDiagMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_stack7(self, a)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_extract(self, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, r1: root::octave_idx_type,
                                c1: root::octave_idx_type,
                                nr: root::octave_idx_type,
                                nc: root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_extract_n(self, r1, c1, nr, nc)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::FloatComplexRowVector {
            FloatComplexMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::FloatComplexMatrix {
            FloatComplexMatrix_inverse(self)
        }
        #[inline]
        pub unsafe fn inverse1(&self, info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_inverse1(self, info)
        }
        #[inline]
        pub unsafe fn inverse2(&self, info: *mut root::octave_idx_type,
                               rcon: *mut f32, force: bool, calc_cond: bool)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_inverse2(self, info, rcon, force, calc_cond)
        }
        #[inline]
        pub unsafe fn inverse3(&self, mattype: *mut root::MatrixType)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_inverse3(self, mattype)
        }
        #[inline]
        pub unsafe fn inverse4(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_inverse4(self, mattype, info)
        }
        #[inline]
        pub unsafe fn inverse5(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type,
                               rcon: *mut f32, force: bool, calc_cond: bool)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_inverse5(self, mattype, info, rcon, force,
                                        calc_cond)
        }
        #[inline]
        pub unsafe fn pseudo_inverse(&self, tol: f32)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_pseudo_inverse(self, tol)
        }
        #[inline]
        pub unsafe fn fourier(&self) -> root::FloatComplexMatrix {
            FloatComplexMatrix_fourier(self)
        }
        #[inline]
        pub unsafe fn ifourier(&self) -> root::FloatComplexMatrix {
            FloatComplexMatrix_ifourier(self)
        }
        #[inline]
        pub unsafe fn fourier2d(&self) -> root::FloatComplexMatrix {
            FloatComplexMatrix_fourier2d(self)
        }
        #[inline]
        pub unsafe fn ifourier2d(&self) -> root::FloatComplexMatrix {
            FloatComplexMatrix_ifourier2d(self)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::FloatComplexDET {
            FloatComplexMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn determinant1(&self, info: *mut root::octave_idx_type)
         -> root::FloatComplexDET {
            FloatComplexMatrix_determinant1(self, info)
        }
        #[inline]
        pub unsafe fn determinant2(&self, info: *mut root::octave_idx_type,
                                   rcon: *mut f32, calc_cond: bool)
         -> root::FloatComplexDET {
            FloatComplexMatrix_determinant2(self, info, rcon, calc_cond)
        }
        #[inline]
        pub unsafe fn determinant3(&self, mattype: *mut root::MatrixType,
                                   info: *mut root::octave_idx_type,
                                   rcon: *mut f32, calc_cond: bool)
         -> root::FloatComplexDET {
            FloatComplexMatrix_determinant3(self, mattype, info, rcon,
                                            calc_cond)
        }
        #[inline]
        pub unsafe fn rcond(&self) -> f32 { FloatComplexMatrix_rcond(self) }
        #[inline]
        pub unsafe fn rcond1(&self, mattype: *mut root::MatrixType) -> f32 {
            FloatComplexMatrix_rcond1(self, mattype)
        }
        #[inline]
        pub unsafe fn solve(&self, typ: *mut root::MatrixType,
                            b: *const root::FloatMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve1(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatMatrix,
                             info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve1(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve2(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f32)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve2(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve3(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f32,
                             sing_handler:
                                 root::FloatComplexMatrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve3(self, typ, b, info, rcon, sing_handler,
                                      singular_fallback, transt)
        }
        #[inline]
        pub unsafe fn solve4(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve4(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve5(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatComplexMatrix,
                             info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve5(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve6(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f32)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve6(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve7(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatComplexMatrix,
                             info: *mut root::octave_idx_type, rcon: *mut f32,
                             sing_handler:
                                 root::FloatComplexMatrix_solve_singularity_handler,
                             singular_fallback: bool,
                             transt: root::blas_trans_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve7(self, typ, b, info, rcon, sing_handler,
                                      singular_fallback, transt)
        }
        #[inline]
        pub unsafe fn solve8(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatColumnVector)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve8(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve9(&self, typ: *mut root::MatrixType,
                             b: *const root::FloatColumnVector,
                             info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve9(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve10(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve10(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve11(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve11(self, typ, b, info, rcon, sing_handler,
                                       transt)
        }
        #[inline]
        pub unsafe fn solve12(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve12(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve13(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve13(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve14(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve14(self, typ, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve15(&self, typ: *mut root::MatrixType,
                              b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve15(self, typ, b, info, rcon, sing_handler,
                                       transt)
        }
        #[inline]
        pub unsafe fn solve16(&self, b: *const root::FloatMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve16(self, b)
        }
        #[inline]
        pub unsafe fn solve17(&self, b: *const root::FloatMatrix,
                              info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve17(self, b, info)
        }
        #[inline]
        pub unsafe fn solve18(&self, b: *const root::FloatMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32) -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve18(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve19(&self, b: *const root::FloatMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve19(self, b, info, rcon, sing_handler,
                                       transt)
        }
        #[inline]
        pub unsafe fn solve20(&self, b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve20(self, b)
        }
        #[inline]
        pub unsafe fn solve21(&self, b: *const root::FloatComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve21(self, b, info)
        }
        #[inline]
        pub unsafe fn solve22(&self, b: *const root::FloatComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32) -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve22(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve23(&self, b: *const root::FloatComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_solve23(self, b, info, rcon, sing_handler,
                                       transt)
        }
        #[inline]
        pub unsafe fn solve24(&self, b: *const root::FloatColumnVector)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve24(self, b)
        }
        #[inline]
        pub unsafe fn solve25(&self, b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve25(self, b, info)
        }
        #[inline]
        pub unsafe fn solve26(&self, b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve26(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve27(&self, b: *const root::FloatColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve27(self, b, info, rcon, sing_handler,
                                       transt)
        }
        #[inline]
        pub unsafe fn solve28(&self, b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve28(self, b)
        }
        #[inline]
        pub unsafe fn solve29(&self, b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve29(self, b, info)
        }
        #[inline]
        pub unsafe fn solve30(&self, b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve30(self, b, info, rcon)
        }
        #[inline]
        pub unsafe fn solve31(&self, b: *const root::FloatComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcon: *mut f32,
                              sing_handler:
                                  root::FloatComplexMatrix_solve_singularity_handler,
                              transt: root::blas_trans_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_solve31(self, b, info, rcon, sing_handler,
                                       transt)
        }
        #[inline]
        pub unsafe fn lssolve(&self, b: *const root::FloatMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_lssolve(self, b)
        }
        #[inline]
        pub unsafe fn lssolve1(&self, b: *const root::FloatMatrix,
                               info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_lssolve1(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve2(&self, b: *const root::FloatMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_lssolve2(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve3(&self, b: *const root::FloatMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f32) -> root::FloatComplexMatrix {
            FloatComplexMatrix_lssolve3(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve4(&self, b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_lssolve4(self, b)
        }
        #[inline]
        pub unsafe fn lssolve5(&self, b: *const root::FloatComplexMatrix,
                               info: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_lssolve5(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve6(&self, b: *const root::FloatComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_lssolve6(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve7(&self, b: *const root::FloatComplexMatrix,
                               info: *mut root::octave_idx_type,
                               rank: *mut root::octave_idx_type,
                               rcon: *mut f32) -> root::FloatComplexMatrix {
            FloatComplexMatrix_lssolve7(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve8(&self, b: *const root::FloatColumnVector)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_lssolve8(self, b)
        }
        #[inline]
        pub unsafe fn lssolve9(&self, b: *const root::FloatColumnVector,
                               info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_lssolve9(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve10(&self, b: *const root::FloatColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_lssolve10(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve11(&self, b: *const root::FloatColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_lssolve11(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn lssolve12(&self,
                                b: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_lssolve12(self, b)
        }
        #[inline]
        pub unsafe fn lssolve13(&self,
                                b: *const root::FloatComplexColumnVector,
                                info: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_lssolve13(self, b, info)
        }
        #[inline]
        pub unsafe fn lssolve14(&self,
                                b: *const root::FloatComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_lssolve14(self, b, info, rank)
        }
        #[inline]
        pub unsafe fn lssolve15(&self,
                                b: *const root::FloatComplexColumnVector,
                                info: *mut root::octave_idx_type,
                                rank: *mut root::octave_idx_type,
                                rcon: *mut f32)
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_lssolve15(self, b, info, rank, rcon)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolMatrix {
            FloatComplexMatrix_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolMatrix {
            FloatComplexMatrix_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_prod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_sum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::FloatMatrix {
            FloatComplexMatrix_abs(self)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexMatrix_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type)
         -> root::FloatComplexDiagMatrix {
            FloatComplexMatrix_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn row_is_real_only(&self, arg1: root::octave_idx_type)
         -> bool {
            FloatComplexMatrix_row_is_real_only(self, arg1)
        }
        #[inline]
        pub unsafe fn column_is_real_only(&self, arg1: root::octave_idx_type)
         -> bool {
            FloatComplexMatrix_column_is_real_only(self, arg1)
        }
        #[inline]
        pub unsafe fn row_min(&self) -> root::FloatComplexColumnVector {
            FloatComplexMatrix_row_min(self)
        }
        #[inline]
        pub unsafe fn row_max(&self) -> root::FloatComplexColumnVector {
            FloatComplexMatrix_row_max(self)
        }
        #[inline]
        pub unsafe fn row_min1(&self, index: *mut [u64; 5usize])
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_row_min1(self, index)
        }
        #[inline]
        pub unsafe fn row_max1(&self, index: *mut [u64; 5usize])
         -> root::FloatComplexColumnVector {
            FloatComplexMatrix_row_max1(self, index)
        }
        #[inline]
        pub unsafe fn column_min(&self) -> root::FloatComplexRowVector {
            FloatComplexMatrix_column_min(self)
        }
        #[inline]
        pub unsafe fn column_max(&self) -> root::FloatComplexRowVector {
            FloatComplexMatrix_column_max(self)
        }
        #[inline]
        pub unsafe fn column_min1(&self, index: *mut [u64; 5usize])
         -> root::FloatComplexRowVector {
            FloatComplexMatrix_column_min1(self, index)
        }
        #[inline]
        pub unsafe fn column_max1(&self, index: *mut [u64; 5usize])
         -> root::FloatComplexRowVector {
            FloatComplexMatrix_column_max1(self, index)
        }
        #[inline]
        pub unsafe fn new(a: *const root::FloatMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(rv: *const root::FloatRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix1(&mut __bindgen_tmp, rv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(cv: *const root::FloatColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix2(&mut __bindgen_tmp, cv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(a: *const root::FloatDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix3(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix4(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new5(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix5(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new6(rv: *const root::FloatComplexRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix6(&mut __bindgen_tmp, rv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new7(cv: *const root::FloatComplexColumnVector)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix7(&mut __bindgen_tmp, cv);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new8(a: *const root::FloatComplexDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix8(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new9(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix9(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new10(a: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix10(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new11(a: *const root::boolMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix11(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new12(a: *const root::charMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix12(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new13(re: *const root::FloatMatrix,
                            im: *const root::FloatMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexMatrix_FloatComplexMatrix13(&mut __bindgen_tmp, re,
                                                    im);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct SparseMatrix {
        pub _bindgen_opaque_blob: [u64; 3usize],
    }
    pub type SparseMatrix_dense_matrix_type = [u64; 5usize];
    pub type SparseMatrix_solve_singularity_handler = u64;
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix12is_symmetricEv"]
        pub fn SparseMatrix_is_symmetric(this: *const root::SparseMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3maxEi"]
        pub fn SparseMatrix_max(this: *const root::SparseMatrix,
                                dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3maxER5ArrayIiEi"]
        pub fn SparseMatrix_max1(this: *const root::SparseMatrix,
                                 index: *mut [u64; 5usize],
                                 dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3minEi"]
        pub fn SparseMatrix_min(this: *const root::SparseMatrix,
                                dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3minER5ArrayIiEi"]
        pub fn SparseMatrix_min1(this: *const root::SparseMatrix,
                                 index: *mut [u64; 5usize],
                                 dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZN12SparseMatrix6insertERKS_ii"]
        pub fn SparseMatrix_insert(this: *mut root::SparseMatrix,
                                   a: *const root::SparseMatrix,
                                   r: root::octave_idx_type,
                                   c: root::octave_idx_type)
         -> *mut root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZN12SparseMatrix6insertERKS_RK5ArrayIiE"]
        pub fn SparseMatrix_insert1(this: *mut root::SparseMatrix,
                                    a: *const root::SparseMatrix,
                                    indx: *const [u64; 5usize])
         -> *mut root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZN12SparseMatrix6concatERKS_RK5ArrayIiE"]
        pub fn SparseMatrix_concat(this: *mut root::SparseMatrix,
                                   rb: *const root::SparseMatrix,
                                   ra_idx: *const [u64; 5usize])
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN12SparseMatrix6concatERK19SparseComplexMatrixRK5ArrayIiE"]
        pub fn SparseMatrix_concat1(this: *mut root::SparseMatrix,
                                    rb: *const root::SparseComplexMatrix,
                                    ra_idx: *const [u64; 5usize])
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3rowEi"]
        pub fn SparseMatrix_row(this: *const root::SparseMatrix,
                                i: root::octave_idx_type) -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix6columnEi"]
        pub fn SparseMatrix_column(this: *const root::SparseMatrix,
                                   i: root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix7inverseEv"]
        pub fn SparseMatrix_inverse(this: *const root::SparseMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix7inverseER10MatrixType"]
        pub fn SparseMatrix_inverse1(this: *const root::SparseMatrix,
                                     mattype: *mut root::MatrixType)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix7inverseER10MatrixTypeRi"]
        pub fn SparseMatrix_inverse2(this: *const root::SparseMatrix,
                                     mattype: *mut root::MatrixType,
                                     info: *mut root::octave_idx_type)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix7inverseER10MatrixTypeRiRdbb"]
        pub fn SparseMatrix_inverse3(this: *const root::SparseMatrix,
                                     mattype: *mut root::MatrixType,
                                     info: *mut root::octave_idx_type,
                                     rcond: *mut f64, force: bool,
                                     calc_cond: bool) -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix11determinantEv"]
        pub fn SparseMatrix_determinant(this: *const root::SparseMatrix)
         -> root::DET;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix11determinantERi"]
        pub fn SparseMatrix_determinant1(this: *const root::SparseMatrix,
                                         info: *mut root::octave_idx_type)
         -> root::DET;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix11determinantERiRdb"]
        pub fn SparseMatrix_determinant2(this: *const root::SparseMatrix,
                                         info: *mut root::octave_idx_type,
                                         rcond: *mut f64, calc_cond: bool)
         -> root::DET;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveER10MatrixTypeRK6Matrix"]
        pub fn SparseMatrix_solve(this: *const root::SparseMatrix,
                                  typ: *mut root::MatrixType,
                                  b: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveER10MatrixTypeRK6MatrixRi"]
        pub fn SparseMatrix_solve1(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::Matrix,
                                   info: *mut root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveER10MatrixTypeRK6MatrixRiRd"]
        pub fn SparseMatrix_solve2(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::Matrix,
                                   info: *mut root::octave_idx_type,
                                   rcond: *mut f64) -> root::Matrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK6MatrixRiRdPFvdEb"]
        pub fn SparseMatrix_solve3(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::Matrix,
                                   info: *mut root::octave_idx_type,
                                   rcond: *mut f64,
                                   sing_handler:
                                       root::SparseMatrix_solve_singularity_handler,
                                   singular_fallback: bool) -> root::Matrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK13ComplexMatrix"]
        pub fn SparseMatrix_solve4(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK13ComplexMatrixRi"]
        pub fn SparseMatrix_solve5(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::ComplexMatrix,
                                   info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK13ComplexMatrixRiRd"]
        pub fn SparseMatrix_solve6(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::ComplexMatrix,
                                   info: *mut root::octave_idx_type,
                                   rcond: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK13ComplexMatrixRiRdPFvdEb"]
        pub fn SparseMatrix_solve7(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::ComplexMatrix,
                                   info: *mut root::octave_idx_type,
                                   rcond: *mut f64,
                                   sing_handler:
                                       root::SparseMatrix_solve_singularity_handler,
                                   singular_fallback: bool)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveER10MatrixTypeRKS_"]
        pub fn SparseMatrix_solve8(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::SparseMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveER10MatrixTypeRKS_Ri"]
        pub fn SparseMatrix_solve9(this: *const root::SparseMatrix,
                                   typ: *mut root::MatrixType,
                                   b: *const root::SparseMatrix,
                                   info: *mut root::octave_idx_type)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveER10MatrixTypeRKS_RiRd"]
        pub fn SparseMatrix_solve10(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::SparseMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64) -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveER10MatrixTypeRKS_RiRdPFvdEb"]
        pub fn SparseMatrix_solve11(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::SparseMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler,
                                    singular_fallback: bool)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK19SparseComplexMatrix"]
        pub fn SparseMatrix_solve12(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK19SparseComplexMatrixRi"]
        pub fn SparseMatrix_solve13(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::SparseComplexMatrix,
                                    info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK19SparseComplexMatrixRiRd"]
        pub fn SparseMatrix_solve14(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::SparseComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK19SparseComplexMatrixRiRdPFvdEb"]
        pub fn SparseMatrix_solve15(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::SparseComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler,
                                    singular_fallabck: bool)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK12ColumnVector"]
        pub fn SparseMatrix_solve16(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK12ColumnVectorRi"]
        pub fn SparseMatrix_solve17(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ColumnVector,
                                    info: *mut root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK12ColumnVectorRiRd"]
        pub fn SparseMatrix_solve18(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ColumnVector,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64) -> root::ColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK12ColumnVectorRiRdPFvdE"]
        pub fn SparseMatrix_solve19(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ColumnVector,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK19ComplexColumnVector"]
        pub fn SparseMatrix_solve20(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRi"]
        pub fn SparseMatrix_solve21(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ComplexColumnVector,
                                    info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRiRd"]
        pub fn SparseMatrix_solve22(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ComplexColumnVector,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRiRdPFvdE"]
        pub fn SparseMatrix_solve23(this: *const root::SparseMatrix,
                                    typ: *mut root::MatrixType,
                                    b: *const root::ComplexColumnVector,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK6Matrix"]
        pub fn SparseMatrix_solve24(this: *const root::SparseMatrix,
                                    b: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK6MatrixRi"]
        pub fn SparseMatrix_solve25(this: *const root::SparseMatrix,
                                    b: *const root::Matrix,
                                    info: *mut root::octave_idx_type)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK6MatrixRiRd"]
        pub fn SparseMatrix_solve26(this: *const root::SparseMatrix,
                                    b: *const root::Matrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK6MatrixRiRdPFvdE"]
        pub fn SparseMatrix_solve27(this: *const root::SparseMatrix,
                                    b: *const root::Matrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK13ComplexMatrix"]
        pub fn SparseMatrix_solve28(this: *const root::SparseMatrix,
                                    b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK13ComplexMatrixRi"]
        pub fn SparseMatrix_solve29(this: *const root::SparseMatrix,
                                    b: *const root::ComplexMatrix,
                                    info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK13ComplexMatrixRiRd"]
        pub fn SparseMatrix_solve30(this: *const root::SparseMatrix,
                                    b: *const root::ComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK13ComplexMatrixRiRdPFvdE"]
        pub fn SparseMatrix_solve31(this: *const root::SparseMatrix,
                                    b: *const root::ComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERKS_"]
        pub fn SparseMatrix_solve32(this: *const root::SparseMatrix,
                                    b: *const root::SparseMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERKS_Ri"]
        pub fn SparseMatrix_solve33(this: *const root::SparseMatrix,
                                    b: *const root::SparseMatrix,
                                    info: *mut root::octave_idx_type)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERKS_RiRd"]
        pub fn SparseMatrix_solve34(this: *const root::SparseMatrix,
                                    b: *const root::SparseMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64) -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERKS_RiRdPFvdE"]
        pub fn SparseMatrix_solve35(this: *const root::SparseMatrix,
                                    b: *const root::SparseMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK19SparseComplexMatrix"]
        pub fn SparseMatrix_solve36(this: *const root::SparseMatrix,
                                    b: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK19SparseComplexMatrixRi"]
        pub fn SparseMatrix_solve37(this: *const root::SparseMatrix,
                                    b: *const root::SparseComplexMatrix,
                                    info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK19SparseComplexMatrixRiRd"]
        pub fn SparseMatrix_solve38(this: *const root::SparseMatrix,
                                    b: *const root::SparseComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveERK19SparseComplexMatrixRiRdPFvdE"]
        pub fn SparseMatrix_solve39(this: *const root::SparseMatrix,
                                    b: *const root::SparseComplexMatrix,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK12ColumnVector"]
        pub fn SparseMatrix_solve40(this: *const root::SparseMatrix,
                                    b: *const root::ColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK12ColumnVectorRi"]
        pub fn SparseMatrix_solve41(this: *const root::SparseMatrix,
                                    b: *const root::ColumnVector,
                                    info: *mut root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK12ColumnVectorRiRd"]
        pub fn SparseMatrix_solve42(this: *const root::SparseMatrix,
                                    b: *const root::ColumnVector,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64) -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK12ColumnVectorRiRdPFvdE"]
        pub fn SparseMatrix_solve43(this: *const root::SparseMatrix,
                                    b: *const root::ColumnVector,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK19ComplexColumnVector"]
        pub fn SparseMatrix_solve44(this: *const root::SparseMatrix,
                                    b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK19ComplexColumnVectorRi"]
        pub fn SparseMatrix_solve45(this: *const root::SparseMatrix,
                                    b: *const root::ComplexColumnVector,
                                    info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5solveERK19ComplexColumnVectorRiRd"]
        pub fn SparseMatrix_solve46(this: *const root::SparseMatrix,
                                    b: *const root::ComplexColumnVector,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix5solveERK19ComplexColumnVectorRiRdPFvdE"]
        pub fn SparseMatrix_solve47(this: *const root::SparseMatrix,
                                    b: *const root::ComplexColumnVector,
                                    info: *mut root::octave_idx_type,
                                    rcond: *mut f64,
                                    sing_handler:
                                        root::SparseMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix23any_element_is_negativeEb"]
        pub fn SparseMatrix_any_element_is_negative(this:
                                                        *const root::SparseMatrix,
                                                    arg1: bool) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix18any_element_is_nanEv"]
        pub fn SparseMatrix_any_element_is_nan(this:
                                                   *const root::SparseMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix25any_element_is_inf_or_nanEv"]
        pub fn SparseMatrix_any_element_is_inf_or_nan(this:
                                                          *const root::SparseMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix27any_element_not_one_or_zeroEv"]
        pub fn SparseMatrix_any_element_not_one_or_zero(this:
                                                            *const root::SparseMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix21all_elements_are_zeroEv"]
        pub fn SparseMatrix_all_elements_are_zero(this:
                                                      *const root::SparseMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZNK12SparseMatrix34all_elements_are_int_or_inf_or_nanEv"]
        pub fn SparseMatrix_all_elements_are_int_or_inf_or_nan(this:
                                                                   *const root::SparseMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix12all_integersERdS0_"]
        pub fn SparseMatrix_all_integers(this: *const root::SparseMatrix,
                                         max_val: *mut f64, min_val: *mut f64)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix19too_large_for_floatEv"]
        pub fn SparseMatrix_too_large_for_float(this:
                                                    *const root::SparseMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3allEi"]
        pub fn SparseMatrix_all(this: *const root::SparseMatrix,
                                dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3anyEi"]
        pub fn SparseMatrix_any(this: *const root::SparseMatrix,
                                dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix7cumprodEi"]
        pub fn SparseMatrix_cumprod(this: *const root::SparseMatrix,
                                    dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix6cumsumEi"]
        pub fn SparseMatrix_cumsum(this: *const root::SparseMatrix,
                                   dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix4prodEi"]
        pub fn SparseMatrix_prod(this: *const root::SparseMatrix,
                                 dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3sumEi"]
        pub fn SparseMatrix_sum(this: *const root::SparseMatrix,
                                dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix5sumsqEi"]
        pub fn SparseMatrix_sumsq(this: *const root::SparseMatrix,
                                  dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix3absEv"]
        pub fn SparseMatrix_abs(this: *const root::SparseMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix4diagEi"]
        pub fn SparseMatrix_diag(this: *const root::SparseMatrix,
                                 k: root::octave_idx_type)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix12matrix_valueEv"]
        pub fn SparseMatrix_matrix_value(this: *const root::SparseMatrix)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix7squeezeEv"]
        pub fn SparseMatrix_squeeze(this: *const root::SparseMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix7reshapeERK10dim_vector"]
        pub fn SparseMatrix_reshape(this: *const root::SparseMatrix,
                                    new_dims: *const root::dim_vector)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix7permuteERK5ArrayIiEb"]
        pub fn SparseMatrix_permute(this: *const root::SparseMatrix,
                                    vec: *const [u64; 5usize], inv: bool)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12SparseMatrix8ipermuteERK5ArrayIiE"]
        pub fn SparseMatrix_ipermute(this: *const root::SparseMatrix,
                                     vec: *const [u64; 5usize])
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZN12SparseMatrixC1ERK16SparseBoolMatrix"]
        pub fn SparseMatrix_SparseMatrix(this: *mut root::SparseMatrix,
                                         a: *const root::SparseBoolMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12SparseMatrixC1ERK10DiagMatrix"]
        pub fn SparseMatrix_SparseMatrix1(this: *mut root::SparseMatrix,
                                          a: *const root::DiagMatrix);
    }
    impl Clone for SparseMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl SparseMatrix {
        #[inline]
        pub unsafe fn is_symmetric(&self) -> bool {
            SparseMatrix_is_symmetric(self)
        }
        #[inline]
        pub unsafe fn max(&self, dim: ::std::os::raw::c_int)
         -> root::SparseMatrix {
            SparseMatrix_max(self, dim)
        }
        #[inline]
        pub unsafe fn max1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int) -> root::SparseMatrix {
            SparseMatrix_max1(self, index, dim)
        }
        #[inline]
        pub unsafe fn min(&self, dim: ::std::os::raw::c_int)
         -> root::SparseMatrix {
            SparseMatrix_min(self, dim)
        }
        #[inline]
        pub unsafe fn min1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int) -> root::SparseMatrix {
            SparseMatrix_min1(self, index, dim)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::SparseMatrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::SparseMatrix {
            SparseMatrix_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::SparseMatrix,
                              indx: *const [u64; 5usize])
         -> *mut root::SparseMatrix {
            SparseMatrix_insert1(self, a, indx)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::SparseMatrix,
                             ra_idx: *const [u64; 5usize])
         -> root::SparseMatrix {
            SparseMatrix_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat1(&mut self, rb: *const root::SparseComplexMatrix,
                              ra_idx: *const [u64; 5usize])
         -> root::SparseComplexMatrix {
            SparseMatrix_concat1(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::RowVector {
            SparseMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::ColumnVector {
            SparseMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::SparseMatrix {
            SparseMatrix_inverse(self)
        }
        #[inline]
        pub unsafe fn inverse1(&self, mattype: *mut root::MatrixType)
         -> root::SparseMatrix {
            SparseMatrix_inverse1(self, mattype)
        }
        #[inline]
        pub unsafe fn inverse2(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type)
         -> root::SparseMatrix {
            SparseMatrix_inverse2(self, mattype, info)
        }
        #[inline]
        pub unsafe fn inverse3(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type,
                               rcond: *mut f64, force: bool, calc_cond: bool)
         -> root::SparseMatrix {
            SparseMatrix_inverse3(self, mattype, info, rcond, force,
                                  calc_cond)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::DET {
            SparseMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn determinant1(&self, info: *mut root::octave_idx_type)
         -> root::DET {
            SparseMatrix_determinant1(self, info)
        }
        #[inline]
        pub unsafe fn determinant2(&self, info: *mut root::octave_idx_type,
                                   rcond: *mut f64, calc_cond: bool)
         -> root::DET {
            SparseMatrix_determinant2(self, info, rcond, calc_cond)
        }
        #[inline]
        pub unsafe fn solve(&self, typ: *mut root::MatrixType,
                            b: *const root::Matrix) -> root::Matrix {
            SparseMatrix_solve(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve1(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type)
         -> root::Matrix {
            SparseMatrix_solve1(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve2(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type,
                             rcond: *mut f64) -> root::Matrix {
            SparseMatrix_solve2(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve3(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type,
                             rcond: *mut f64,
                             sing_handler:
                                 root::SparseMatrix_solve_singularity_handler,
                             singular_fallback: bool) -> root::Matrix {
            SparseMatrix_solve3(self, typ, b, info, rcond, sing_handler,
                                singular_fallback)
        }
        #[inline]
        pub unsafe fn solve4(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            SparseMatrix_solve4(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve5(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            SparseMatrix_solve5(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve6(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type,
                             rcond: *mut f64) -> root::ComplexMatrix {
            SparseMatrix_solve6(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve7(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type,
                             rcond: *mut f64,
                             sing_handler:
                                 root::SparseMatrix_solve_singularity_handler,
                             singular_fallback: bool) -> root::ComplexMatrix {
            SparseMatrix_solve7(self, typ, b, info, rcond, sing_handler,
                                singular_fallback)
        }
        #[inline]
        pub unsafe fn solve8(&self, typ: *mut root::MatrixType,
                             b: *const root::SparseMatrix)
         -> root::SparseMatrix {
            SparseMatrix_solve8(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve9(&self, typ: *mut root::MatrixType,
                             b: *const root::SparseMatrix,
                             info: *mut root::octave_idx_type)
         -> root::SparseMatrix {
            SparseMatrix_solve9(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve10(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::SparseMatrix {
            SparseMatrix_solve10(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve11(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler,
                              singular_fallback: bool) -> root::SparseMatrix {
            SparseMatrix_solve11(self, typ, b, info, rcond, sing_handler,
                                 singular_fallback)
        }
        #[inline]
        pub unsafe fn solve12(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix {
            SparseMatrix_solve12(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve13(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix {
            SparseMatrix_solve13(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve14(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::SparseComplexMatrix {
            SparseMatrix_solve14(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve15(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler,
                              singular_fallabck: bool)
         -> root::SparseComplexMatrix {
            SparseMatrix_solve15(self, typ, b, info, rcond, sing_handler,
                                 singular_fallabck)
        }
        #[inline]
        pub unsafe fn solve16(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector)
         -> root::ColumnVector {
            SparseMatrix_solve16(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve17(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ColumnVector {
            SparseMatrix_solve17(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve18(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ColumnVector {
            SparseMatrix_solve18(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve19(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler)
         -> root::ColumnVector {
            SparseMatrix_solve19(self, typ, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve20(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            SparseMatrix_solve20(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve21(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            SparseMatrix_solve21(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve22(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexColumnVector {
            SparseMatrix_solve22(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve23(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector {
            SparseMatrix_solve23(self, typ, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve24(&self, b: *const root::Matrix) -> root::Matrix {
            SparseMatrix_solve24(self, b)
        }
        #[inline]
        pub unsafe fn solve25(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type)
         -> root::Matrix {
            SparseMatrix_solve25(self, b, info)
        }
        #[inline]
        pub unsafe fn solve26(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::Matrix {
            SparseMatrix_solve26(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve27(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler)
         -> root::Matrix {
            SparseMatrix_solve27(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve28(&self, b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            SparseMatrix_solve28(self, b)
        }
        #[inline]
        pub unsafe fn solve29(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            SparseMatrix_solve29(self, b, info)
        }
        #[inline]
        pub unsafe fn solve30(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexMatrix {
            SparseMatrix_solve30(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve31(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler)
         -> root::ComplexMatrix {
            SparseMatrix_solve31(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve32(&self, b: *const root::SparseMatrix)
         -> root::SparseMatrix {
            SparseMatrix_solve32(self, b)
        }
        #[inline]
        pub unsafe fn solve33(&self, b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type)
         -> root::SparseMatrix {
            SparseMatrix_solve33(self, b, info)
        }
        #[inline]
        pub unsafe fn solve34(&self, b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::SparseMatrix {
            SparseMatrix_solve34(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve35(&self, b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler)
         -> root::SparseMatrix {
            SparseMatrix_solve35(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve36(&self, b: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix {
            SparseMatrix_solve36(self, b)
        }
        #[inline]
        pub unsafe fn solve37(&self, b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix {
            SparseMatrix_solve37(self, b, info)
        }
        #[inline]
        pub unsafe fn solve38(&self, b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::SparseComplexMatrix {
            SparseMatrix_solve38(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve39(&self, b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler)
         -> root::SparseComplexMatrix {
            SparseMatrix_solve39(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve40(&self, b: *const root::ColumnVector)
         -> root::ColumnVector {
            SparseMatrix_solve40(self, b)
        }
        #[inline]
        pub unsafe fn solve41(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ColumnVector {
            SparseMatrix_solve41(self, b, info)
        }
        #[inline]
        pub unsafe fn solve42(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ColumnVector {
            SparseMatrix_solve42(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve43(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler)
         -> root::ColumnVector {
            SparseMatrix_solve43(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve44(&self, b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            SparseMatrix_solve44(self, b)
        }
        #[inline]
        pub unsafe fn solve45(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            SparseMatrix_solve45(self, b, info)
        }
        #[inline]
        pub unsafe fn solve46(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexColumnVector {
            SparseMatrix_solve46(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve47(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector {
            SparseMatrix_solve47(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn any_element_is_negative(&self, arg1: bool) -> bool {
            SparseMatrix_any_element_is_negative(self, arg1)
        }
        #[inline]
        pub unsafe fn any_element_is_nan(&self) -> bool {
            SparseMatrix_any_element_is_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_is_inf_or_nan(&self) -> bool {
            SparseMatrix_any_element_is_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_not_one_or_zero(&self) -> bool {
            SparseMatrix_any_element_not_one_or_zero(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_zero(&self) -> bool {
            SparseMatrix_all_elements_are_zero(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_int_or_inf_or_nan(&self) -> bool {
            SparseMatrix_all_elements_are_int_or_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn all_integers(&self, max_val: *mut f64,
                                   min_val: *mut f64) -> bool {
            SparseMatrix_all_integers(self, max_val, min_val)
        }
        #[inline]
        pub unsafe fn too_large_for_float(&self) -> bool {
            SparseMatrix_too_large_for_float(self)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix {
            SparseMatrix_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix {
            SparseMatrix_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::SparseMatrix {
            SparseMatrix_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::SparseMatrix {
            SparseMatrix_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::SparseMatrix {
            SparseMatrix_prod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::SparseMatrix {
            SparseMatrix_sum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::SparseMatrix {
            SparseMatrix_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::SparseMatrix {
            SparseMatrix_abs(self)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::SparseMatrix {
            SparseMatrix_diag(self, k)
        }
        #[inline]
        pub unsafe fn matrix_value(&self) -> root::Matrix {
            SparseMatrix_matrix_value(self)
        }
        #[inline]
        pub unsafe fn squeeze(&self) -> root::SparseMatrix {
            SparseMatrix_squeeze(self)
        }
        #[inline]
        pub unsafe fn reshape(&self, new_dims: *const root::dim_vector)
         -> root::SparseMatrix {
            SparseMatrix_reshape(self, new_dims)
        }
        #[inline]
        pub unsafe fn permute(&self, vec: *const [u64; 5usize], inv: bool)
         -> root::SparseMatrix {
            SparseMatrix_permute(self, vec, inv)
        }
        #[inline]
        pub unsafe fn ipermute(&self, vec: *const [u64; 5usize])
         -> root::SparseMatrix {
            SparseMatrix_ipermute(self, vec)
        }
        #[inline]
        pub unsafe fn new(a: *const root::SparseBoolMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SparseMatrix_SparseMatrix(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(a: *const root::DiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SparseMatrix_SparseMatrix1(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct SparseComplexMatrix {
        pub _bindgen_opaque_blob: [u64; 3usize],
    }
    pub type SparseComplexMatrix_dense_matrix_type = [u64; 5usize];
    pub type SparseComplexMatrix_solve_singularity_handler = u64;
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix12is_hermitianEv"]
        pub fn SparseComplexMatrix_is_hermitian(this:
                                                    *const root::SparseComplexMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3maxEi"]
        pub fn SparseComplexMatrix_max(this: *const root::SparseComplexMatrix,
                                       dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3maxER5ArrayIiEi"]
        pub fn SparseComplexMatrix_max1(this:
                                            *const root::SparseComplexMatrix,
                                        index: *mut [u64; 5usize],
                                        dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3minEi"]
        pub fn SparseComplexMatrix_min(this: *const root::SparseComplexMatrix,
                                       dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3minER5ArrayIiEi"]
        pub fn SparseComplexMatrix_min1(this:
                                            *const root::SparseComplexMatrix,
                                        index: *mut [u64; 5usize],
                                        dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN19SparseComplexMatrix6insertERKS_ii"]
        pub fn SparseComplexMatrix_insert(this:
                                              *mut root::SparseComplexMatrix,
                                          a: *const root::SparseComplexMatrix,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN19SparseComplexMatrix6insertERK12SparseMatrixii"]
        pub fn SparseComplexMatrix_insert1(this:
                                               *mut root::SparseComplexMatrix,
                                           a: *const root::SparseMatrix,
                                           r: root::octave_idx_type,
                                           c: root::octave_idx_type)
         -> *mut root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN19SparseComplexMatrix6insertERKS_RK5ArrayIiE"]
        pub fn SparseComplexMatrix_insert2(this:
                                               *mut root::SparseComplexMatrix,
                                           a:
                                               *const root::SparseComplexMatrix,
                                           indx: *const [u64; 5usize])
         -> *mut root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN19SparseComplexMatrix6insertERK12SparseMatrixRK5ArrayIiE"]
        pub fn SparseComplexMatrix_insert3(this:
                                               *mut root::SparseComplexMatrix,
                                           a: *const root::SparseMatrix,
                                           indx: *const [u64; 5usize])
         -> *mut root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN19SparseComplexMatrix6concatERKS_RK5ArrayIiE"]
        pub fn SparseComplexMatrix_concat(this:
                                              *mut root::SparseComplexMatrix,
                                          rb:
                                              *const root::SparseComplexMatrix,
                                          ra_idx: *const [u64; 5usize])
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN19SparseComplexMatrix6concatERK12SparseMatrixRK5ArrayIiE"]
        pub fn SparseComplexMatrix_concat1(this:
                                               *mut root::SparseComplexMatrix,
                                           rb: *const root::SparseMatrix,
                                           ra_idx: *const [u64; 5usize])
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix12matrix_valueEv"]
        pub fn SparseComplexMatrix_matrix_value(this:
                                                    *const root::SparseComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix9hermitianEv"]
        pub fn SparseComplexMatrix_hermitian(this:
                                                 *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3rowEi"]
        pub fn SparseComplexMatrix_row(this: *const root::SparseComplexMatrix,
                                       i: root::octave_idx_type)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix6columnEi"]
        pub fn SparseComplexMatrix_column(this:
                                              *const root::SparseComplexMatrix,
                                          i: root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix7inverseEv"]
        pub fn SparseComplexMatrix_inverse(this:
                                               *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix7inverseER10MatrixType"]
        pub fn SparseComplexMatrix_inverse1(this:
                                                *const root::SparseComplexMatrix,
                                            mattype: *mut root::MatrixType)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix7inverseER10MatrixTypeRi"]
        pub fn SparseComplexMatrix_inverse2(this:
                                                *const root::SparseComplexMatrix,
                                            mattype: *mut root::MatrixType,
                                            info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix7inverseER10MatrixTypeRiRdbb"]
        pub fn SparseComplexMatrix_inverse3(this:
                                                *const root::SparseComplexMatrix,
                                            mattype: *mut root::MatrixType,
                                            info: *mut root::octave_idx_type,
                                            rcond: *mut f64, force: bool,
                                            calc_cond: bool)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix11determinantEv"]
        pub fn SparseComplexMatrix_determinant(this:
                                                   *const root::SparseComplexMatrix)
         -> root::ComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix11determinantERi"]
        pub fn SparseComplexMatrix_determinant1(this:
                                                    *const root::SparseComplexMatrix,
                                                info:
                                                    *mut root::octave_idx_type)
         -> root::ComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix11determinantERiRdb"]
        pub fn SparseComplexMatrix_determinant2(this:
                                                    *const root::SparseComplexMatrix,
                                                info:
                                                    *mut root::octave_idx_type,
                                                rcond: *mut f64,
                                                calc_cond: bool)
         -> root::ComplexDET;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK6Matrix"]
        pub fn SparseComplexMatrix_solve(this:
                                             *const root::SparseComplexMatrix,
                                         typ: *mut root::MatrixType,
                                         b: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK6MatrixRi"]
        pub fn SparseComplexMatrix_solve1(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::Matrix,
                                          info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK6MatrixRiRd"]
        pub fn SparseComplexMatrix_solve2(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::Matrix,
                                          info: *mut root::octave_idx_type,
                                          rcond: *mut f64)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK6MatrixRiRdPFvdEb"]
        pub fn SparseComplexMatrix_solve3(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::Matrix,
                                          info: *mut root::octave_idx_type,
                                          rcond: *mut f64,
                                          sing_handler:
                                              root::SparseComplexMatrix_solve_singularity_handler,
                                          singular_fallback: bool)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK13ComplexMatrix"]
        pub fn SparseComplexMatrix_solve4(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK13ComplexMatrixRi"]
        pub fn SparseComplexMatrix_solve5(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::ComplexMatrix,
                                          info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK13ComplexMatrixRiRd"]
        pub fn SparseComplexMatrix_solve6(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::ComplexMatrix,
                                          info: *mut root::octave_idx_type,
                                          rcond: *mut f64)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK13ComplexMatrixRiRdPFvdEb"]
        pub fn SparseComplexMatrix_solve7(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::ComplexMatrix,
                                          info: *mut root::octave_idx_type,
                                          rcond: *mut f64,
                                          sing_handler:
                                              root::SparseComplexMatrix_solve_singularity_handler,
                                          singular_fallback: bool)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK12SparseMatrix"]
        pub fn SparseComplexMatrix_solve8(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::SparseMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK12SparseMatrixRi"]
        pub fn SparseComplexMatrix_solve9(this:
                                              *const root::SparseComplexMatrix,
                                          typ: *mut root::MatrixType,
                                          b: *const root::SparseMatrix,
                                          info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK12SparseMatrixRiRd"]
        pub fn SparseComplexMatrix_solve10(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b: *const root::SparseMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK12SparseMatrixRiRdPFvdEb"]
        pub fn SparseComplexMatrix_solve11(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b: *const root::SparseMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler,
                                           singular_fallback: bool)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRKS_"]
        pub fn SparseComplexMatrix_solve12(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b:
                                               *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRKS_Ri"]
        pub fn SparseComplexMatrix_solve13(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b:
                                               *const root::SparseComplexMatrix,
                                           info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRKS_RiRd"]
        pub fn SparseComplexMatrix_solve14(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b:
                                               *const root::SparseComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRKS_RiRdPFvdEb"]
        pub fn SparseComplexMatrix_solve15(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b:
                                               *const root::SparseComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler,
                                           singular_fallback: bool)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK12ColumnVector"]
        pub fn SparseComplexMatrix_solve16(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b: *const root::ColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK12ColumnVectorRi"]
        pub fn SparseComplexMatrix_solve17(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b: *const root::ColumnVector,
                                           info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK12ColumnVectorRiRd"]
        pub fn SparseComplexMatrix_solve18(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b: *const root::ColumnVector,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK12ColumnVectorRiRdPFvdE"]
        pub fn SparseComplexMatrix_solve19(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b: *const root::ColumnVector,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK19ComplexColumnVector"]
        pub fn SparseComplexMatrix_solve20(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b:
                                               *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRi"]
        pub fn SparseComplexMatrix_solve21(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b:
                                               *const root::ComplexColumnVector,
                                           info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRiRd"]
        pub fn SparseComplexMatrix_solve22(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b:
                                               *const root::ComplexColumnVector,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveER10MatrixTypeRK19ComplexColumnVectorRiRdPFvdE"]
        pub fn SparseComplexMatrix_solve23(this:
                                               *const root::SparseComplexMatrix,
                                           typ: *mut root::MatrixType,
                                           b:
                                               *const root::ComplexColumnVector,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK6Matrix"]
        pub fn SparseComplexMatrix_solve24(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::Matrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK6MatrixRi"]
        pub fn SparseComplexMatrix_solve25(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::Matrix,
                                           info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK6MatrixRiRd"]
        pub fn SparseComplexMatrix_solve26(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::Matrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK6MatrixRiRdPFvdE"]
        pub fn SparseComplexMatrix_solve27(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::Matrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK13ComplexMatrix"]
        pub fn SparseComplexMatrix_solve28(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK13ComplexMatrixRi"]
        pub fn SparseComplexMatrix_solve29(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::ComplexMatrix,
                                           info: *mut root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK13ComplexMatrixRiRd"]
        pub fn SparseComplexMatrix_solve30(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::ComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveERK13ComplexMatrixRiRdPFvdE"]
        pub fn SparseComplexMatrix_solve31(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::ComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK12SparseMatrix"]
        pub fn SparseComplexMatrix_solve32(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::SparseMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK12SparseMatrixRi"]
        pub fn SparseComplexMatrix_solve33(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::SparseMatrix,
                                           info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK12SparseMatrixRiRd"]
        pub fn SparseComplexMatrix_solve34(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::SparseMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveERK12SparseMatrixRiRdPFvdE"]
        pub fn SparseComplexMatrix_solve35(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::SparseMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERKS_"]
        pub fn SparseComplexMatrix_solve36(this:
                                               *const root::SparseComplexMatrix,
                                           b:
                                               *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERKS_Ri"]
        pub fn SparseComplexMatrix_solve37(this:
                                               *const root::SparseComplexMatrix,
                                           b:
                                               *const root::SparseComplexMatrix,
                                           info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERKS_RiRd"]
        pub fn SparseComplexMatrix_solve38(this:
                                               *const root::SparseComplexMatrix,
                                           b:
                                               *const root::SparseComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERKS_RiRdPFvdE"]
        pub fn SparseComplexMatrix_solve39(this:
                                               *const root::SparseComplexMatrix,
                                           b:
                                               *const root::SparseComplexMatrix,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK12ColumnVector"]
        pub fn SparseComplexMatrix_solve40(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::ColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK12ColumnVectorRi"]
        pub fn SparseComplexMatrix_solve41(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::ColumnVector,
                                           info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5solveERK12ColumnVectorRiRd"]
        pub fn SparseComplexMatrix_solve42(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::ColumnVector,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveERK12ColumnVectorRiRdPFvdE"]
        pub fn SparseComplexMatrix_solve43(this:
                                               *const root::SparseComplexMatrix,
                                           b: *const root::ColumnVector,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveERK19ComplexColumnVector"]
        pub fn SparseComplexMatrix_solve44(this:
                                               *const root::SparseComplexMatrix,
                                           b:
                                               *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveERK19ComplexColumnVectorRi"]
        pub fn SparseComplexMatrix_solve45(this:
                                               *const root::SparseComplexMatrix,
                                           b:
                                               *const root::ComplexColumnVector,
                                           info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveERK19ComplexColumnVectorRiRd"]
        pub fn SparseComplexMatrix_solve46(this:
                                               *const root::SparseComplexMatrix,
                                           b:
                                               *const root::ComplexColumnVector,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix5solveERK19ComplexColumnVectorRiRdPFvdE"]
        pub fn SparseComplexMatrix_solve47(this:
                                               *const root::SparseComplexMatrix,
                                           b:
                                               *const root::ComplexColumnVector,
                                           info: *mut root::octave_idx_type,
                                           rcond: *mut f64,
                                           sing_handler:
                                               root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix7squeezeEv"]
        pub fn SparseComplexMatrix_squeeze(this:
                                               *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix7reshapeERK10dim_vector"]
        pub fn SparseComplexMatrix_reshape(this:
                                               *const root::SparseComplexMatrix,
                                           new_dims: *const root::dim_vector)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix7permuteERK5ArrayIiEb"]
        pub fn SparseComplexMatrix_permute(this:
                                               *const root::SparseComplexMatrix,
                                           vec: *const [u64; 5usize],
                                           inv: bool)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix8ipermuteERK5ArrayIiE"]
        pub fn SparseComplexMatrix_ipermute(this:
                                                *const root::SparseComplexMatrix,
                                            vec: *const [u64; 5usize])
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix18any_element_is_nanEv"]
        pub fn SparseComplexMatrix_any_element_is_nan(this:
                                                          *const root::SparseComplexMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZNK19SparseComplexMatrix25any_element_is_inf_or_nanEv"]
        pub fn SparseComplexMatrix_any_element_is_inf_or_nan(this:
                                                                 *const root::SparseComplexMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix21all_elements_are_realEv"]
        pub fn SparseComplexMatrix_all_elements_are_real(this:
                                                             *const root::SparseComplexMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix12all_integersERdS0_"]
        pub fn SparseComplexMatrix_all_integers(this:
                                                    *const root::SparseComplexMatrix,
                                                max_val: *mut f64,
                                                min_val: *mut f64) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix19too_large_for_floatEv"]
        pub fn SparseComplexMatrix_too_large_for_float(this:
                                                           *const root::SparseComplexMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3allEi"]
        pub fn SparseComplexMatrix_all(this: *const root::SparseComplexMatrix,
                                       dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3anyEi"]
        pub fn SparseComplexMatrix_any(this: *const root::SparseComplexMatrix,
                                       dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix7cumprodEi"]
        pub fn SparseComplexMatrix_cumprod(this:
                                               *const root::SparseComplexMatrix,
                                           dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix6cumsumEi"]
        pub fn SparseComplexMatrix_cumsum(this:
                                              *const root::SparseComplexMatrix,
                                          dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix4prodEi"]
        pub fn SparseComplexMatrix_prod(this:
                                            *const root::SparseComplexMatrix,
                                        dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3sumEi"]
        pub fn SparseComplexMatrix_sum(this: *const root::SparseComplexMatrix,
                                       dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix5sumsqEi"]
        pub fn SparseComplexMatrix_sumsq(this:
                                             *const root::SparseComplexMatrix,
                                         dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix3absEv"]
        pub fn SparseComplexMatrix_abs(this: *const root::SparseComplexMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK19SparseComplexMatrix4diagEi"]
        pub fn SparseComplexMatrix_diag(this:
                                            *const root::SparseComplexMatrix,
                                        k: root::octave_idx_type)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZN19SparseComplexMatrixC1ERK12SparseMatrix"]
        pub fn SparseComplexMatrix_SparseComplexMatrix(this:
                                                           *mut root::SparseComplexMatrix,
                                                       a:
                                                           *const root::SparseMatrix);
    }
    extern "C" {
        #[link_name = "_ZN19SparseComplexMatrixC1ERK16SparseBoolMatrix"]
        pub fn SparseComplexMatrix_SparseComplexMatrix1(this:
                                                            *mut root::SparseComplexMatrix,
                                                        a:
                                                            *const root::SparseBoolMatrix);
    }
    extern "C" {
        #[link_name = "_ZN19SparseComplexMatrixC1ERK17ComplexDiagMatrix"]
        pub fn SparseComplexMatrix_SparseComplexMatrix2(this:
                                                            *mut root::SparseComplexMatrix,
                                                        a:
                                                            *const root::ComplexDiagMatrix);
    }
    impl Clone for SparseComplexMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl SparseComplexMatrix {
        #[inline]
        pub unsafe fn is_hermitian(&self) -> bool {
            SparseComplexMatrix_is_hermitian(self)
        }
        #[inline]
        pub unsafe fn max(&self, dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_max(self, dim)
        }
        #[inline]
        pub unsafe fn max1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_max1(self, index, dim)
        }
        #[inline]
        pub unsafe fn min(&self, dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_min(self, dim)
        }
        #[inline]
        pub unsafe fn min1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_min1(self, index, dim)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::SparseComplexMatrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::SparseComplexMatrix {
            SparseComplexMatrix_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::SparseMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::SparseComplexMatrix {
            SparseComplexMatrix_insert1(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert2(&mut self, a: *const root::SparseComplexMatrix,
                              indx: *const [u64; 5usize])
         -> *mut root::SparseComplexMatrix {
            SparseComplexMatrix_insert2(self, a, indx)
        }
        #[inline]
        pub unsafe fn insert3(&mut self, a: *const root::SparseMatrix,
                              indx: *const [u64; 5usize])
         -> *mut root::SparseComplexMatrix {
            SparseComplexMatrix_insert3(self, a, indx)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::SparseComplexMatrix,
                             ra_idx: *const [u64; 5usize])
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat1(&mut self, rb: *const root::SparseMatrix,
                              ra_idx: *const [u64; 5usize])
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_concat1(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn matrix_value(&self) -> root::ComplexMatrix {
            SparseComplexMatrix_matrix_value(self)
        }
        #[inline]
        pub unsafe fn hermitian(&self) -> root::SparseComplexMatrix {
            SparseComplexMatrix_hermitian(self)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::ComplexRowVector {
            SparseComplexMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::SparseComplexMatrix {
            SparseComplexMatrix_inverse(self)
        }
        #[inline]
        pub unsafe fn inverse1(&self, mattype: *mut root::MatrixType)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_inverse1(self, mattype)
        }
        #[inline]
        pub unsafe fn inverse2(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_inverse2(self, mattype, info)
        }
        #[inline]
        pub unsafe fn inverse3(&self, mattype: *mut root::MatrixType,
                               info: *mut root::octave_idx_type,
                               rcond: *mut f64, force: bool, calc_cond: bool)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_inverse3(self, mattype, info, rcond, force,
                                         calc_cond)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::ComplexDET {
            SparseComplexMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn determinant1(&self, info: *mut root::octave_idx_type)
         -> root::ComplexDET {
            SparseComplexMatrix_determinant1(self, info)
        }
        #[inline]
        pub unsafe fn determinant2(&self, info: *mut root::octave_idx_type,
                                   rcond: *mut f64, calc_cond: bool)
         -> root::ComplexDET {
            SparseComplexMatrix_determinant2(self, info, rcond, calc_cond)
        }
        #[inline]
        pub unsafe fn solve(&self, typ: *mut root::MatrixType,
                            b: *const root::Matrix) -> root::ComplexMatrix {
            SparseComplexMatrix_solve(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve1(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve1(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve2(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type,
                             rcond: *mut f64) -> root::ComplexMatrix {
            SparseComplexMatrix_solve2(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve3(&self, typ: *mut root::MatrixType,
                             b: *const root::Matrix,
                             info: *mut root::octave_idx_type,
                             rcond: *mut f64,
                             sing_handler:
                                 root::SparseComplexMatrix_solve_singularity_handler,
                             singular_fallback: bool) -> root::ComplexMatrix {
            SparseComplexMatrix_solve3(self, typ, b, info, rcond,
                                       sing_handler, singular_fallback)
        }
        #[inline]
        pub unsafe fn solve4(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve4(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve5(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve5(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve6(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type,
                             rcond: *mut f64) -> root::ComplexMatrix {
            SparseComplexMatrix_solve6(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve7(&self, typ: *mut root::MatrixType,
                             b: *const root::ComplexMatrix,
                             info: *mut root::octave_idx_type,
                             rcond: *mut f64,
                             sing_handler:
                                 root::SparseComplexMatrix_solve_singularity_handler,
                             singular_fallback: bool) -> root::ComplexMatrix {
            SparseComplexMatrix_solve7(self, typ, b, info, rcond,
                                       sing_handler, singular_fallback)
        }
        #[inline]
        pub unsafe fn solve8(&self, typ: *mut root::MatrixType,
                             b: *const root::SparseMatrix)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve8(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve9(&self, typ: *mut root::MatrixType,
                             b: *const root::SparseMatrix,
                             info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve9(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve10(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve10(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve11(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler,
                              singular_fallback: bool)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve11(self, typ, b, info, rcond,
                                        sing_handler, singular_fallback)
        }
        #[inline]
        pub unsafe fn solve12(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve12(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve13(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve13(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve14(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve14(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve15(&self, typ: *mut root::MatrixType,
                              b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler,
                              singular_fallback: bool)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve15(self, typ, b, info, rcond,
                                        sing_handler, singular_fallback)
        }
        #[inline]
        pub unsafe fn solve16(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve16(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve17(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve17(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve18(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexColumnVector {
            SparseComplexMatrix_solve18(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve19(&self, typ: *mut root::MatrixType,
                              b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve19(self, typ, b, info, rcond,
                                        sing_handler)
        }
        #[inline]
        pub unsafe fn solve20(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve20(self, typ, b)
        }
        #[inline]
        pub unsafe fn solve21(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve21(self, typ, b, info)
        }
        #[inline]
        pub unsafe fn solve22(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexColumnVector {
            SparseComplexMatrix_solve22(self, typ, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve23(&self, typ: *mut root::MatrixType,
                              b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve23(self, typ, b, info, rcond,
                                        sing_handler)
        }
        #[inline]
        pub unsafe fn solve24(&self, b: *const root::Matrix)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve24(self, b)
        }
        #[inline]
        pub unsafe fn solve25(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve25(self, b, info)
        }
        #[inline]
        pub unsafe fn solve26(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexMatrix {
            SparseComplexMatrix_solve26(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve27(&self, b: *const root::Matrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve27(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve28(&self, b: *const root::ComplexMatrix)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve28(self, b)
        }
        #[inline]
        pub unsafe fn solve29(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve29(self, b, info)
        }
        #[inline]
        pub unsafe fn solve30(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexMatrix {
            SparseComplexMatrix_solve30(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve31(&self, b: *const root::ComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexMatrix {
            SparseComplexMatrix_solve31(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve32(&self, b: *const root::SparseMatrix)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve32(self, b)
        }
        #[inline]
        pub unsafe fn solve33(&self, b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve33(self, b, info)
        }
        #[inline]
        pub unsafe fn solve34(&self, b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve34(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve35(&self, b: *const root::SparseMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve35(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve36(&self, b: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve36(self, b)
        }
        #[inline]
        pub unsafe fn solve37(&self, b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve37(self, b, info)
        }
        #[inline]
        pub unsafe fn solve38(&self, b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve38(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve39(&self, b: *const root::SparseComplexMatrix,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_solve39(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve40(&self, b: *const root::ColumnVector)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve40(self, b)
        }
        #[inline]
        pub unsafe fn solve41(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve41(self, b, info)
        }
        #[inline]
        pub unsafe fn solve42(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexColumnVector {
            SparseComplexMatrix_solve42(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve43(&self, b: *const root::ColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve43(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn solve44(&self, b: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve44(self, b)
        }
        #[inline]
        pub unsafe fn solve45(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve45(self, b, info)
        }
        #[inline]
        pub unsafe fn solve46(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64) -> root::ComplexColumnVector {
            SparseComplexMatrix_solve46(self, b, info, rcond)
        }
        #[inline]
        pub unsafe fn solve47(&self, b: *const root::ComplexColumnVector,
                              info: *mut root::octave_idx_type,
                              rcond: *mut f64,
                              sing_handler:
                                  root::SparseComplexMatrix_solve_singularity_handler)
         -> root::ComplexColumnVector {
            SparseComplexMatrix_solve47(self, b, info, rcond, sing_handler)
        }
        #[inline]
        pub unsafe fn squeeze(&self) -> root::SparseComplexMatrix {
            SparseComplexMatrix_squeeze(self)
        }
        #[inline]
        pub unsafe fn reshape(&self, new_dims: *const root::dim_vector)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_reshape(self, new_dims)
        }
        #[inline]
        pub unsafe fn permute(&self, vec: *const [u64; 5usize], inv: bool)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_permute(self, vec, inv)
        }
        #[inline]
        pub unsafe fn ipermute(&self, vec: *const [u64; 5usize])
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_ipermute(self, vec)
        }
        #[inline]
        pub unsafe fn any_element_is_nan(&self) -> bool {
            SparseComplexMatrix_any_element_is_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_is_inf_or_nan(&self) -> bool {
            SparseComplexMatrix_any_element_is_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_real(&self) -> bool {
            SparseComplexMatrix_all_elements_are_real(self)
        }
        #[inline]
        pub unsafe fn all_integers(&self, max_val: *mut f64,
                                   min_val: *mut f64) -> bool {
            SparseComplexMatrix_all_integers(self, max_val, min_val)
        }
        #[inline]
        pub unsafe fn too_large_for_float(&self) -> bool {
            SparseComplexMatrix_too_large_for_float(self)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix {
            SparseComplexMatrix_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix {
            SparseComplexMatrix_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_prod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_sum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::SparseMatrix {
            SparseComplexMatrix_abs(self)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::SparseComplexMatrix {
            SparseComplexMatrix_diag(self, k)
        }
        #[inline]
        pub unsafe fn new(a: *const root::SparseMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SparseComplexMatrix_SparseComplexMatrix(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(a: *const root::SparseBoolMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SparseComplexMatrix_SparseComplexMatrix1(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(a: *const root::ComplexDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SparseComplexMatrix_SparseComplexMatrix2(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct MatrixType {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum MatrixType_matrix_type {
        Unknown = 0,
        Full = 1,
        Diagonal = 2,
        Permuted_Diagonal = 3,
        Upper = 4,
        Lower = 5,
        Permuted_Upper = 6,
        Permuted_Lower = 7,
        Banded = 8,
        Hermitian = 9,
        Banded_Hermitian = 10,
        Tridiagonal = 11,
        Tridiagonal_Hermitian = 12,
        Rectangular = 13,
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType4typeEb"]
        pub fn MatrixType_type(this: *mut root::MatrixType, quiet: bool)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType4typeERK6Matrix"]
        pub fn MatrixType_type1(this: *mut root::MatrixType,
                                a: *const root::Matrix)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType4typeERK13ComplexMatrix"]
        pub fn MatrixType_type2(this: *mut root::MatrixType,
                                a: *const root::ComplexMatrix)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType4typeERK11FloatMatrix"]
        pub fn MatrixType_type3(this: *mut root::MatrixType,
                                a: *const root::FloatMatrix)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType4typeERK18FloatComplexMatrix"]
        pub fn MatrixType_type4(this: *mut root::MatrixType,
                                a: *const root::FloatComplexMatrix)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType4typeERK12SparseMatrix"]
        pub fn MatrixType_type5(this: *mut root::MatrixType,
                                a: *const root::SparseMatrix)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType4typeERK19SparseComplexMatrix"]
        pub fn MatrixType_type6(this: *mut root::MatrixType,
                                a: *const root::SparseComplexMatrix)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK10MatrixType4infoEv"]
        pub fn MatrixType_info(this: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType17mark_as_symmetricEv"]
        pub fn MatrixType_mark_as_symmetric(this: *mut root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType19mark_as_unsymmetricEv"]
        pub fn MatrixType_mark_as_unsymmetric(this: *mut root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType16mark_as_permutedEiPKi"]
        pub fn MatrixType_mark_as_permuted(this: *mut root::MatrixType,
                                           np: root::octave_idx_type,
                                           p: *const root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixType18mark_as_unpermutedEv"]
        pub fn MatrixType_mark_as_unpermuted(this: *mut root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZNK10MatrixType9transposeEv"]
        pub fn MatrixType_transpose(this: *const root::MatrixType)
         -> root::MatrixType;
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1Ev"]
        pub fn MatrixType_MatrixType(this: *mut root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1ERKS_"]
        pub fn MatrixType_MatrixType1(this: *mut root::MatrixType,
                                      a: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1ERK6Matrix"]
        pub fn MatrixType_MatrixType2(this: *mut root::MatrixType,
                                      a: *const root::Matrix);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1ERK13ComplexMatrix"]
        pub fn MatrixType_MatrixType3(this: *mut root::MatrixType,
                                      a: *const root::ComplexMatrix);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1ERK11FloatMatrix"]
        pub fn MatrixType_MatrixType4(this: *mut root::MatrixType,
                                      a: *const root::FloatMatrix);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1ERK18FloatComplexMatrix"]
        pub fn MatrixType_MatrixType5(this: *mut root::MatrixType,
                                      a: *const root::FloatComplexMatrix);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1ENS_11matrix_typeEb"]
        pub fn MatrixType_MatrixType6(this: *mut root::MatrixType,
                                      t: root::MatrixType_matrix_type,
                                      _full: bool);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1ENS_11matrix_typeEiPKib"]
        pub fn MatrixType_MatrixType7(this: *mut root::MatrixType,
                                      t: root::MatrixType_matrix_type,
                                      np: root::octave_idx_type,
                                      p: *const root::octave_idx_type,
                                      _full: bool);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeC1ENS_11matrix_typeEiib"]
        pub fn MatrixType_MatrixType8(this: *mut root::MatrixType,
                                      t: root::MatrixType_matrix_type,
                                      ku: root::octave_idx_type,
                                      kl: root::octave_idx_type, _full: bool);
    }
    extern "C" {
        #[link_name = "_ZN10MatrixTypeD1Ev"]
        pub fn MatrixType_MatrixType_destructor(this: *mut root::MatrixType);
    }
    impl Clone for MatrixType {
        fn clone(&self) -> Self { *self }
    }
    impl MatrixType {
        #[inline]
        pub unsafe fn type_(&mut self, quiet: bool) -> ::std::os::raw::c_int {
            MatrixType_type(self, quiet)
        }
        #[inline]
        pub unsafe fn type1(&mut self, a: *const root::Matrix)
         -> ::std::os::raw::c_int {
            MatrixType_type1(self, a)
        }
        #[inline]
        pub unsafe fn type2(&mut self, a: *const root::ComplexMatrix)
         -> ::std::os::raw::c_int {
            MatrixType_type2(self, a)
        }
        #[inline]
        pub unsafe fn type3(&mut self, a: *const root::FloatMatrix)
         -> ::std::os::raw::c_int {
            MatrixType_type3(self, a)
        }
        #[inline]
        pub unsafe fn type4(&mut self, a: *const root::FloatComplexMatrix)
         -> ::std::os::raw::c_int {
            MatrixType_type4(self, a)
        }
        #[inline]
        pub unsafe fn type5(&mut self, a: *const root::SparseMatrix)
         -> ::std::os::raw::c_int {
            MatrixType_type5(self, a)
        }
        #[inline]
        pub unsafe fn type6(&mut self, a: *const root::SparseComplexMatrix)
         -> ::std::os::raw::c_int {
            MatrixType_type6(self, a)
        }
        #[inline]
        pub unsafe fn info(&self) { MatrixType_info(self) }
        #[inline]
        pub unsafe fn mark_as_symmetric(&mut self) {
            MatrixType_mark_as_symmetric(self)
        }
        #[inline]
        pub unsafe fn mark_as_unsymmetric(&mut self) {
            MatrixType_mark_as_unsymmetric(self)
        }
        #[inline]
        pub unsafe fn mark_as_permuted(&mut self, np: root::octave_idx_type,
                                       p: *const root::octave_idx_type) {
            MatrixType_mark_as_permuted(self, np, p)
        }
        #[inline]
        pub unsafe fn mark_as_unpermuted(&mut self) {
            MatrixType_mark_as_unpermuted(self)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::MatrixType {
            MatrixType_transpose(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(a: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType1(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(a: *const root::Matrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType2(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(a: *const root::ComplexMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType3(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(a: *const root::FloatMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType4(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new5(a: *const root::FloatComplexMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType5(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new6(t: root::MatrixType_matrix_type, _full: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType6(&mut __bindgen_tmp, t, _full);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new7(t: root::MatrixType_matrix_type,
                           np: root::octave_idx_type,
                           p: *const root::octave_idx_type, _full: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType7(&mut __bindgen_tmp, t, np, p, _full);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new8(t: root::MatrixType_matrix_type,
                           ku: root::octave_idx_type,
                           kl: root::octave_idx_type, _full: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MatrixType_MatrixType8(&mut __bindgen_tmp, t, ku, kl, _full);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MatrixType_MatrixType_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct boolMatrix {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN10boolMatrix6insertERKS_ii"]
        pub fn boolMatrix_insert(this: *mut root::boolMatrix,
                                 a: *const root::boolMatrix,
                                 r: root::octave_idx_type,
                                 c: root::octave_idx_type)
         -> *mut root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10boolMatrix4diagEi"]
        pub fn boolMatrix_diag(this: *const root::boolMatrix,
                               k: root::octave_idx_type) -> root::boolMatrix;
    }
    impl Clone for boolMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl boolMatrix {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::boolMatrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::boolMatrix {
            boolMatrix_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::boolMatrix {
            boolMatrix_diag(self, k)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct charMatrix {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN10charMatrix6insertEPKcii"]
        pub fn charMatrix_insert(this: *mut root::charMatrix,
                                 s: *const ::std::os::raw::c_char,
                                 r: root::octave_idx_type,
                                 c: root::octave_idx_type)
         -> *mut root::charMatrix;
    }
    extern "C" {
        #[link_name = "_ZN10charMatrix6insertERKS_ii"]
        pub fn charMatrix_insert1(this: *mut root::charMatrix,
                                  a: *const root::charMatrix,
                                  r: root::octave_idx_type,
                                  c: root::octave_idx_type)
         -> *mut root::charMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10charMatrix13row_as_stringEib"]
        pub fn charMatrix_row_as_string(this: *const root::charMatrix,
                                        arg1: root::octave_idx_type,
                                        strip_ws: bool) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK10charMatrix7extractEiiii"]
        pub fn charMatrix_extract(this: *const root::charMatrix,
                                  r1: root::octave_idx_type,
                                  c1: root::octave_idx_type,
                                  r2: root::octave_idx_type,
                                  c2: root::octave_idx_type)
         -> root::charMatrix;
    }
    impl Clone for charMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl charMatrix {
        #[inline]
        pub unsafe fn insert(&mut self, s: *const ::std::os::raw::c_char,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::charMatrix {
            charMatrix_insert(self, s, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::charMatrix,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::charMatrix {
            charMatrix_insert1(self, a, r, c)
        }
        #[inline]
        pub unsafe fn row_as_string(&self, arg1: root::octave_idx_type,
                                    strip_ws: bool) -> root::std::string {
            charMatrix_row_as_string(self, arg1, strip_ws)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type) -> root::charMatrix {
            charMatrix_extract(self, r1, c1, r2, c2)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct NDArray {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray23any_element_is_negativeEb"]
        pub fn NDArray_any_element_is_negative(this: *const root::NDArray,
                                               arg1: bool) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray23any_element_is_positiveEb"]
        pub fn NDArray_any_element_is_positive(this: *const root::NDArray,
                                               arg1: bool) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray18any_element_is_nanEv"]
        pub fn NDArray_any_element_is_nan(this: *const root::NDArray) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray25any_element_is_inf_or_nanEv"]
        pub fn NDArray_any_element_is_inf_or_nan(this: *const root::NDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray27any_element_not_one_or_zeroEv"]
        pub fn NDArray_any_element_not_one_or_zero(this: *const root::NDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray21all_elements_are_zeroEv"]
        pub fn NDArray_all_elements_are_zero(this: *const root::NDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray34all_elements_are_int_or_inf_or_nanEv"]
        pub fn NDArray_all_elements_are_int_or_inf_or_nan(this:
                                                              *const root::NDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray12all_integersERdS0_"]
        pub fn NDArray_all_integers(this: *const root::NDArray,
                                    max_val: *mut f64, min_val: *mut f64)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray12all_integersEv"]
        pub fn NDArray_all_integers1(this: *const root::NDArray) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray19too_large_for_floatEv"]
        pub fn NDArray_too_large_for_float(this: *const root::NDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray3allEi"]
        pub fn NDArray_all(this: *const root::NDArray,
                           dim: ::std::os::raw::c_int) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray3anyEi"]
        pub fn NDArray_any(this: *const root::NDArray,
                           dim: ::std::os::raw::c_int) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray7cumprodEi"]
        pub fn NDArray_cumprod(this: *const root::NDArray,
                               dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray6cumsumEi"]
        pub fn NDArray_cumsum(this: *const root::NDArray,
                              dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray4prodEi"]
        pub fn NDArray_prod(this: *const root::NDArray,
                            dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray3sumEi"]
        pub fn NDArray_sum(this: *const root::NDArray,
                           dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray4xsumEi"]
        pub fn NDArray_xsum(this: *const root::NDArray,
                            dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray5sumsqEi"]
        pub fn NDArray_sumsq(this: *const root::NDArray,
                             dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZN7NDArray6concatERKS_RK5ArrayIiE"]
        pub fn NDArray_concat(this: *mut root::NDArray,
                              rb: *const root::NDArray,
                              ra_idx: *const [u64; 5usize]) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZN7NDArray6concatERK14ComplexNDArrayRK5ArrayIiE"]
        pub fn NDArray_concat1(this: *mut root::NDArray,
                               rb: *const root::ComplexNDArray,
                               ra_idx: *const [u64; 5usize])
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN7NDArray6concatERK11charNDArrayRK5ArrayIiE"]
        pub fn NDArray_concat2(this: *mut root::NDArray,
                               rb: *const root::charNDArray,
                               ra_idx: *const [u64; 5usize])
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray3maxEi"]
        pub fn NDArray_max(this: *const root::NDArray,
                           dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray3maxER5ArrayIiEi"]
        pub fn NDArray_max1(this: *const root::NDArray,
                            index: *mut [u64; 5usize],
                            dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray3minEi"]
        pub fn NDArray_min(this: *const root::NDArray,
                           dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray3minER5ArrayIiEi"]
        pub fn NDArray_min1(this: *const root::NDArray,
                            index: *mut [u64; 5usize],
                            dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray6cummaxEi"]
        pub fn NDArray_cummax(this: *const root::NDArray,
                              dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray6cummaxER5ArrayIiEi"]
        pub fn NDArray_cummax1(this: *const root::NDArray,
                               index: *mut [u64; 5usize],
                               dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray6cumminEi"]
        pub fn NDArray_cummin(this: *const root::NDArray,
                              dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray6cumminER5ArrayIiEi"]
        pub fn NDArray_cummin1(this: *const root::NDArray,
                               index: *mut [u64; 5usize],
                               dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray4diffEii"]
        pub fn NDArray_diff(this: *const root::NDArray,
                            order: root::octave_idx_type,
                            dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZN7NDArray6insertERKS_ii"]
        pub fn NDArray_insert(this: *mut root::NDArray,
                              a: *const root::NDArray,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type) -> *mut root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZN7NDArray6insertERKS_RK5ArrayIiE"]
        pub fn NDArray_insert1(this: *mut root::NDArray,
                               a: *const root::NDArray,
                               ra_idx: *const [u64; 5usize])
         -> *mut root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray3absEv"]
        pub fn NDArray_abs(this: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray5isnanEv"]
        pub fn NDArray_isnan(this: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray5isinfEv"]
        pub fn NDArray_isinf(this: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray8isfiniteEv"]
        pub fn NDArray_isfinite(this: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray7fourierEi"]
        pub fn NDArray_fourier(this: *const root::NDArray,
                               dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray8ifourierEi"]
        pub fn NDArray_ifourier(this: *const root::NDArray,
                                dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray9fourier2dEv"]
        pub fn NDArray_fourier2d(this: *const root::NDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray10ifourier2dEv"]
        pub fn NDArray_ifourier2d(this: *const root::NDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray9fourierNdEv"]
        pub fn NDArray_fourierNd(this: *const root::NDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray10ifourierNdEv"]
        pub fn NDArray_ifourierNd(this: *const root::NDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name =
              "_ZN7NDArray15increment_indexER5ArrayIiERK10dim_vectori"]
        pub fn NDArray_increment_index(ra_idx: *mut [u64; 5usize],
                                       dimensions: *const root::dim_vector,
                                       start_dimension:
                                           ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "_ZN7NDArray13compute_indexER5ArrayIiERK10dim_vector"]
        pub fn NDArray_compute_index(ra_idx: *mut [u64; 5usize],
                                     dimensions: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray4diagEi"]
        pub fn NDArray_diag(this: *const root::NDArray,
                            k: root::octave_idx_type) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK7NDArray4diagEii"]
        pub fn NDArray_diag1(this: *const root::NDArray,
                             m: root::octave_idx_type,
                             n: root::octave_idx_type) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZN7NDArrayC1ERK5ArrayIiEbb"]
        pub fn NDArray_NDArray(this: *mut root::NDArray,
                               a: *const [u64; 5usize], zero_based: bool,
                               negative_to_nan: bool);
    }
    extern "C" {
        #[link_name = "_ZN7NDArrayC1ERK11charNDArray"]
        pub fn NDArray_NDArray1(this: *mut root::NDArray,
                                arg1: *const root::charNDArray);
    }
    impl Clone for NDArray {
        fn clone(&self) -> Self { *self }
    }
    impl NDArray {
        #[inline]
        pub unsafe fn any_element_is_negative(&self, arg1: bool) -> bool {
            NDArray_any_element_is_negative(self, arg1)
        }
        #[inline]
        pub unsafe fn any_element_is_positive(&self, arg1: bool) -> bool {
            NDArray_any_element_is_positive(self, arg1)
        }
        #[inline]
        pub unsafe fn any_element_is_nan(&self) -> bool {
            NDArray_any_element_is_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_is_inf_or_nan(&self) -> bool {
            NDArray_any_element_is_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_not_one_or_zero(&self) -> bool {
            NDArray_any_element_not_one_or_zero(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_zero(&self) -> bool {
            NDArray_all_elements_are_zero(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_int_or_inf_or_nan(&self) -> bool {
            NDArray_all_elements_are_int_or_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn all_integers(&self, max_val: *mut f64,
                                   min_val: *mut f64) -> bool {
            NDArray_all_integers(self, max_val, min_val)
        }
        #[inline]
        pub unsafe fn all_integers1(&self) -> bool {
            NDArray_all_integers1(self)
        }
        #[inline]
        pub unsafe fn too_large_for_float(&self) -> bool {
            NDArray_too_large_for_float(self)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            NDArray_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            NDArray_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_prod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_sum(self, dim)
        }
        #[inline]
        pub unsafe fn xsum(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_xsum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::NDArray,
                             ra_idx: *const [u64; 5usize]) -> root::NDArray {
            NDArray_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat1(&mut self, rb: *const root::ComplexNDArray,
                              ra_idx: *const [u64; 5usize])
         -> root::ComplexNDArray {
            NDArray_concat1(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat2(&mut self, rb: *const root::charNDArray,
                              ra_idx: *const [u64; 5usize])
         -> root::charNDArray {
            NDArray_concat2(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn max(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_max(self, dim)
        }
        #[inline]
        pub unsafe fn max1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int) -> root::NDArray {
            NDArray_max1(self, index, dim)
        }
        #[inline]
        pub unsafe fn min(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_min(self, dim)
        }
        #[inline]
        pub unsafe fn min1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int) -> root::NDArray {
            NDArray_min1(self, index, dim)
        }
        #[inline]
        pub unsafe fn cummax(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_cummax(self, dim)
        }
        #[inline]
        pub unsafe fn cummax1(&self, index: *mut [u64; 5usize],
                              dim: ::std::os::raw::c_int) -> root::NDArray {
            NDArray_cummax1(self, index, dim)
        }
        #[inline]
        pub unsafe fn cummin(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            NDArray_cummin(self, dim)
        }
        #[inline]
        pub unsafe fn cummin1(&self, index: *mut [u64; 5usize],
                              dim: ::std::os::raw::c_int) -> root::NDArray {
            NDArray_cummin1(self, index, dim)
        }
        #[inline]
        pub unsafe fn diff(&self, order: root::octave_idx_type,
                           dim: ::std::os::raw::c_int) -> root::NDArray {
            NDArray_diff(self, order, dim)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::NDArray,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type) -> *mut root::NDArray {
            NDArray_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::NDArray,
                              ra_idx: *const [u64; 5usize])
         -> *mut root::NDArray {
            NDArray_insert1(self, a, ra_idx)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::NDArray { NDArray_abs(self) }
        #[inline]
        pub unsafe fn isnan(&self) -> root::boolNDArray {
            NDArray_isnan(self)
        }
        #[inline]
        pub unsafe fn isinf(&self) -> root::boolNDArray {
            NDArray_isinf(self)
        }
        #[inline]
        pub unsafe fn isfinite(&self) -> root::boolNDArray {
            NDArray_isfinite(self)
        }
        #[inline]
        pub unsafe fn fourier(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            NDArray_fourier(self, dim)
        }
        #[inline]
        pub unsafe fn ifourier(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            NDArray_ifourier(self, dim)
        }
        #[inline]
        pub unsafe fn fourier2d(&self) -> root::ComplexNDArray {
            NDArray_fourier2d(self)
        }
        #[inline]
        pub unsafe fn ifourier2d(&self) -> root::ComplexNDArray {
            NDArray_ifourier2d(self)
        }
        #[inline]
        pub unsafe fn fourierNd(&self) -> root::ComplexNDArray {
            NDArray_fourierNd(self)
        }
        #[inline]
        pub unsafe fn ifourierNd(&self) -> root::ComplexNDArray {
            NDArray_ifourierNd(self)
        }
        #[inline]
        pub unsafe fn increment_index(ra_idx: *mut [u64; 5usize],
                                      dimensions: *const root::dim_vector,
                                      start_dimension:
                                          ::std::os::raw::c_int) {
            NDArray_increment_index(ra_idx, dimensions, start_dimension)
        }
        #[inline]
        pub unsafe fn compute_index(ra_idx: *mut [u64; 5usize],
                                    dimensions: *const root::dim_vector)
         -> root::octave_idx_type {
            NDArray_compute_index(ra_idx, dimensions)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type) -> root::NDArray {
            NDArray_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type) -> root::NDArray {
            NDArray_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn new(a: *const [u64; 5usize], zero_based: bool,
                          negative_to_nan: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            NDArray_NDArray(&mut __bindgen_tmp, a, zero_based,
                            negative_to_nan);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const root::charNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            NDArray_NDArray1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct ComplexNDArray {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray18any_element_is_nanEv"]
        pub fn ComplexNDArray_any_element_is_nan(this:
                                                     *const root::ComplexNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray25any_element_is_inf_or_nanEv"]
        pub fn ComplexNDArray_any_element_is_inf_or_nan(this:
                                                            *const root::ComplexNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray21all_elements_are_realEv"]
        pub fn ComplexNDArray_all_elements_are_real(this:
                                                        *const root::ComplexNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray12all_integersERdS0_"]
        pub fn ComplexNDArray_all_integers(this: *const root::ComplexNDArray,
                                           max_val: *mut f64,
                                           min_val: *mut f64) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray19too_large_for_floatEv"]
        pub fn ComplexNDArray_too_large_for_float(this:
                                                      *const root::ComplexNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray3allEi"]
        pub fn ComplexNDArray_all(this: *const root::ComplexNDArray,
                                  dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray3anyEi"]
        pub fn ComplexNDArray_any(this: *const root::ComplexNDArray,
                                  dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray7cumprodEi"]
        pub fn ComplexNDArray_cumprod(this: *const root::ComplexNDArray,
                                      dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray6cumsumEi"]
        pub fn ComplexNDArray_cumsum(this: *const root::ComplexNDArray,
                                     dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray4prodEi"]
        pub fn ComplexNDArray_prod(this: *const root::ComplexNDArray,
                                   dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray3sumEi"]
        pub fn ComplexNDArray_sum(this: *const root::ComplexNDArray,
                                  dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray4xsumEi"]
        pub fn ComplexNDArray_xsum(this: *const root::ComplexNDArray,
                                   dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray5sumsqEi"]
        pub fn ComplexNDArray_sumsq(this: *const root::ComplexNDArray,
                                    dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN14ComplexNDArray6concatERKS_RK5ArrayIiE"]
        pub fn ComplexNDArray_concat(this: *mut root::ComplexNDArray,
                                     rb: *const root::ComplexNDArray,
                                     ra_idx: *const [u64; 5usize])
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN14ComplexNDArray6concatERK7NDArrayRK5ArrayIiE"]
        pub fn ComplexNDArray_concat1(this: *mut root::ComplexNDArray,
                                      rb: *const root::NDArray,
                                      ra_idx: *const [u64; 5usize])
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray3maxEi"]
        pub fn ComplexNDArray_max(this: *const root::ComplexNDArray,
                                  dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray3maxER5ArrayIiEi"]
        pub fn ComplexNDArray_max1(this: *const root::ComplexNDArray,
                                   index: *mut [u64; 5usize],
                                   dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray3minEi"]
        pub fn ComplexNDArray_min(this: *const root::ComplexNDArray,
                                  dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray3minER5ArrayIiEi"]
        pub fn ComplexNDArray_min1(this: *const root::ComplexNDArray,
                                   index: *mut [u64; 5usize],
                                   dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray6cummaxEi"]
        pub fn ComplexNDArray_cummax(this: *const root::ComplexNDArray,
                                     dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray6cummaxER5ArrayIiEi"]
        pub fn ComplexNDArray_cummax1(this: *const root::ComplexNDArray,
                                      index: *mut [u64; 5usize],
                                      dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray6cumminEi"]
        pub fn ComplexNDArray_cummin(this: *const root::ComplexNDArray,
                                     dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray6cumminER5ArrayIiEi"]
        pub fn ComplexNDArray_cummin1(this: *const root::ComplexNDArray,
                                      index: *mut [u64; 5usize],
                                      dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray4diffEii"]
        pub fn ComplexNDArray_diff(this: *const root::ComplexNDArray,
                                   order: root::octave_idx_type,
                                   dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN14ComplexNDArray6insertERK7NDArrayii"]
        pub fn ComplexNDArray_insert(this: *mut root::ComplexNDArray,
                                     a: *const root::NDArray,
                                     r: root::octave_idx_type,
                                     c: root::octave_idx_type)
         -> *mut root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN14ComplexNDArray6insertERKS_ii"]
        pub fn ComplexNDArray_insert1(this: *mut root::ComplexNDArray,
                                      a: *const root::ComplexNDArray,
                                      r: root::octave_idx_type,
                                      c: root::octave_idx_type)
         -> *mut root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN14ComplexNDArray6insertERKS_RK5ArrayIiE"]
        pub fn ComplexNDArray_insert2(this: *mut root::ComplexNDArray,
                                      a: *const root::ComplexNDArray,
                                      ra_idx: *const [u64; 5usize])
         -> *mut root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray3absEv"]
        pub fn ComplexNDArray_abs(this: *const root::ComplexNDArray)
         -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray5isnanEv"]
        pub fn ComplexNDArray_isnan(this: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray5isinfEv"]
        pub fn ComplexNDArray_isinf(this: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray8isfiniteEv"]
        pub fn ComplexNDArray_isfinite(this: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray7fourierEi"]
        pub fn ComplexNDArray_fourier(this: *const root::ComplexNDArray,
                                      dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray8ifourierEi"]
        pub fn ComplexNDArray_ifourier(this: *const root::ComplexNDArray,
                                       dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray9fourier2dEv"]
        pub fn ComplexNDArray_fourier2d(this: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray10ifourier2dEv"]
        pub fn ComplexNDArray_ifourier2d(this: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray9fourierNdEv"]
        pub fn ComplexNDArray_fourierNd(this: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray10ifourierNdEv"]
        pub fn ComplexNDArray_ifourierNd(this: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name =
              "_ZN14ComplexNDArray15increment_indexER5ArrayIiERK10dim_vectori"]
        pub fn ComplexNDArray_increment_index(ra_idx: *mut [u64; 5usize],
                                              dimensions:
                                                  *const root::dim_vector,
                                              start_dimension:
                                                  ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name =
              "_ZN14ComplexNDArray13compute_indexER5ArrayIiERK10dim_vector"]
        pub fn ComplexNDArray_compute_index(ra_idx: *mut [u64; 5usize],
                                            dimensions:
                                                *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray4diagEi"]
        pub fn ComplexNDArray_diag(this: *const root::ComplexNDArray,
                                   k: root::octave_idx_type)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK14ComplexNDArray4diagEii"]
        pub fn ComplexNDArray_diag1(this: *const root::ComplexNDArray,
                                    m: root::octave_idx_type,
                                    n: root::octave_idx_type)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN14ComplexNDArrayC1ERK11charNDArray"]
        pub fn ComplexNDArray_ComplexNDArray(this: *mut root::ComplexNDArray,
                                             arg1: *const root::charNDArray);
    }
    impl Clone for ComplexNDArray {
        fn clone(&self) -> Self { *self }
    }
    impl ComplexNDArray {
        #[inline]
        pub unsafe fn any_element_is_nan(&self) -> bool {
            ComplexNDArray_any_element_is_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_is_inf_or_nan(&self) -> bool {
            ComplexNDArray_any_element_is_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_real(&self) -> bool {
            ComplexNDArray_all_elements_are_real(self)
        }
        #[inline]
        pub unsafe fn all_integers(&self, max_val: *mut f64,
                                   min_val: *mut f64) -> bool {
            ComplexNDArray_all_integers(self, max_val, min_val)
        }
        #[inline]
        pub unsafe fn too_large_for_float(&self) -> bool {
            ComplexNDArray_too_large_for_float(self)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            ComplexNDArray_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            ComplexNDArray_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_prod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_sum(self, dim)
        }
        #[inline]
        pub unsafe fn xsum(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_xsum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::ComplexNDArray,
                             ra_idx: *const [u64; 5usize])
         -> root::ComplexNDArray {
            ComplexNDArray_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat1(&mut self, rb: *const root::NDArray,
                              ra_idx: *const [u64; 5usize])
         -> root::ComplexNDArray {
            ComplexNDArray_concat1(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn max(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_max(self, dim)
        }
        #[inline]
        pub unsafe fn max1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_max1(self, index, dim)
        }
        #[inline]
        pub unsafe fn min(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_min(self, dim)
        }
        #[inline]
        pub unsafe fn min1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_min1(self, index, dim)
        }
        #[inline]
        pub unsafe fn cummax(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_cummax(self, dim)
        }
        #[inline]
        pub unsafe fn cummax1(&self, index: *mut [u64; 5usize],
                              dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_cummax1(self, index, dim)
        }
        #[inline]
        pub unsafe fn cummin(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_cummin(self, dim)
        }
        #[inline]
        pub unsafe fn cummin1(&self, index: *mut [u64; 5usize],
                              dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_cummin1(self, index, dim)
        }
        #[inline]
        pub unsafe fn diff(&self, order: root::octave_idx_type,
                           dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_diff(self, order, dim)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::NDArray,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::ComplexNDArray {
            ComplexNDArray_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::ComplexNDArray,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::ComplexNDArray {
            ComplexNDArray_insert1(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert2(&mut self, a: *const root::ComplexNDArray,
                              ra_idx: *const [u64; 5usize])
         -> *mut root::ComplexNDArray {
            ComplexNDArray_insert2(self, a, ra_idx)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::NDArray { ComplexNDArray_abs(self) }
        #[inline]
        pub unsafe fn isnan(&self) -> root::boolNDArray {
            ComplexNDArray_isnan(self)
        }
        #[inline]
        pub unsafe fn isinf(&self) -> root::boolNDArray {
            ComplexNDArray_isinf(self)
        }
        #[inline]
        pub unsafe fn isfinite(&self) -> root::boolNDArray {
            ComplexNDArray_isfinite(self)
        }
        #[inline]
        pub unsafe fn fourier(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_fourier(self, dim)
        }
        #[inline]
        pub unsafe fn ifourier(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            ComplexNDArray_ifourier(self, dim)
        }
        #[inline]
        pub unsafe fn fourier2d(&self) -> root::ComplexNDArray {
            ComplexNDArray_fourier2d(self)
        }
        #[inline]
        pub unsafe fn ifourier2d(&self) -> root::ComplexNDArray {
            ComplexNDArray_ifourier2d(self)
        }
        #[inline]
        pub unsafe fn fourierNd(&self) -> root::ComplexNDArray {
            ComplexNDArray_fourierNd(self)
        }
        #[inline]
        pub unsafe fn ifourierNd(&self) -> root::ComplexNDArray {
            ComplexNDArray_ifourierNd(self)
        }
        #[inline]
        pub unsafe fn increment_index(ra_idx: *mut [u64; 5usize],
                                      dimensions: *const root::dim_vector,
                                      start_dimension:
                                          ::std::os::raw::c_int) {
            ComplexNDArray_increment_index(ra_idx, dimensions,
                                           start_dimension)
        }
        #[inline]
        pub unsafe fn compute_index(ra_idx: *mut [u64; 5usize],
                                    dimensions: *const root::dim_vector)
         -> root::octave_idx_type {
            ComplexNDArray_compute_index(ra_idx, dimensions)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::ComplexNDArray {
            ComplexNDArray_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type)
         -> root::ComplexNDArray {
            ComplexNDArray_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn new(arg1: *const root::charNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexNDArray_ComplexNDArray(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatNDArray {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray23any_element_is_negativeEb"]
        pub fn FloatNDArray_any_element_is_negative(this:
                                                        *const root::FloatNDArray,
                                                    arg1: bool) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray23any_element_is_positiveEb"]
        pub fn FloatNDArray_any_element_is_positive(this:
                                                        *const root::FloatNDArray,
                                                    arg1: bool) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray18any_element_is_nanEv"]
        pub fn FloatNDArray_any_element_is_nan(this:
                                                   *const root::FloatNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray25any_element_is_inf_or_nanEv"]
        pub fn FloatNDArray_any_element_is_inf_or_nan(this:
                                                          *const root::FloatNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray27any_element_not_one_or_zeroEv"]
        pub fn FloatNDArray_any_element_not_one_or_zero(this:
                                                            *const root::FloatNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray21all_elements_are_zeroEv"]
        pub fn FloatNDArray_all_elements_are_zero(this:
                                                      *const root::FloatNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZNK12FloatNDArray34all_elements_are_int_or_inf_or_nanEv"]
        pub fn FloatNDArray_all_elements_are_int_or_inf_or_nan(this:
                                                                   *const root::FloatNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray12all_integersERfS0_"]
        pub fn FloatNDArray_all_integers(this: *const root::FloatNDArray,
                                         max_val: *mut f32, min_val: *mut f32)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray12all_integersEv"]
        pub fn FloatNDArray_all_integers1(this: *const root::FloatNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray19too_large_for_floatEv"]
        pub fn FloatNDArray_too_large_for_float(this:
                                                    *const root::FloatNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray3allEi"]
        pub fn FloatNDArray_all(this: *const root::FloatNDArray,
                                dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray3anyEi"]
        pub fn FloatNDArray_any(this: *const root::FloatNDArray,
                                dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray7cumprodEi"]
        pub fn FloatNDArray_cumprod(this: *const root::FloatNDArray,
                                    dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray6cumsumEi"]
        pub fn FloatNDArray_cumsum(this: *const root::FloatNDArray,
                                   dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray4prodEi"]
        pub fn FloatNDArray_prod(this: *const root::FloatNDArray,
                                 dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray5dprodEi"]
        pub fn FloatNDArray_dprod(this: *const root::FloatNDArray,
                                  dim: ::std::os::raw::c_int)
         -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray3sumEi"]
        pub fn FloatNDArray_sum(this: *const root::FloatNDArray,
                                dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray4dsumEi"]
        pub fn FloatNDArray_dsum(this: *const root::FloatNDArray,
                                 dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray5sumsqEi"]
        pub fn FloatNDArray_sumsq(this: *const root::FloatNDArray,
                                  dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZN12FloatNDArray6concatERKS_RK5ArrayIiE"]
        pub fn FloatNDArray_concat(this: *mut root::FloatNDArray,
                                   rb: *const root::FloatNDArray,
                                   ra_idx: *const [u64; 5usize])
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name =
              "_ZN12FloatNDArray6concatERK19FloatComplexNDArrayRK5ArrayIiE"]
        pub fn FloatNDArray_concat1(this: *mut root::FloatNDArray,
                                    rb: *const root::FloatComplexNDArray,
                                    ra_idx: *const [u64; 5usize])
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN12FloatNDArray6concatERK11charNDArrayRK5ArrayIiE"]
        pub fn FloatNDArray_concat2(this: *mut root::FloatNDArray,
                                    rb: *const root::charNDArray,
                                    ra_idx: *const [u64; 5usize])
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray3maxEi"]
        pub fn FloatNDArray_max(this: *const root::FloatNDArray,
                                dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray3maxER5ArrayIiEi"]
        pub fn FloatNDArray_max1(this: *const root::FloatNDArray,
                                 index: *mut [u64; 5usize],
                                 dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray3minEi"]
        pub fn FloatNDArray_min(this: *const root::FloatNDArray,
                                dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray3minER5ArrayIiEi"]
        pub fn FloatNDArray_min1(this: *const root::FloatNDArray,
                                 index: *mut [u64; 5usize],
                                 dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray6cummaxEi"]
        pub fn FloatNDArray_cummax(this: *const root::FloatNDArray,
                                   dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray6cummaxER5ArrayIiEi"]
        pub fn FloatNDArray_cummax1(this: *const root::FloatNDArray,
                                    index: *mut [u64; 5usize],
                                    dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray6cumminEi"]
        pub fn FloatNDArray_cummin(this: *const root::FloatNDArray,
                                   dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray6cumminER5ArrayIiEi"]
        pub fn FloatNDArray_cummin1(this: *const root::FloatNDArray,
                                    index: *mut [u64; 5usize],
                                    dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray4diffEii"]
        pub fn FloatNDArray_diff(this: *const root::FloatNDArray,
                                 order: root::octave_idx_type,
                                 dim: ::std::os::raw::c_int)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZN12FloatNDArray6insertERKS_ii"]
        pub fn FloatNDArray_insert(this: *mut root::FloatNDArray,
                                   a: *const root::FloatNDArray,
                                   r: root::octave_idx_type,
                                   c: root::octave_idx_type)
         -> *mut root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZN12FloatNDArray6insertERKS_RK5ArrayIiE"]
        pub fn FloatNDArray_insert1(this: *mut root::FloatNDArray,
                                    a: *const root::FloatNDArray,
                                    ra_idx: *const [u64; 5usize])
         -> *mut root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray3absEv"]
        pub fn FloatNDArray_abs(this: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray5isnanEv"]
        pub fn FloatNDArray_isnan(this: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray5isinfEv"]
        pub fn FloatNDArray_isinf(this: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray8isfiniteEv"]
        pub fn FloatNDArray_isfinite(this: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray7fourierEi"]
        pub fn FloatNDArray_fourier(this: *const root::FloatNDArray,
                                    dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray8ifourierEi"]
        pub fn FloatNDArray_ifourier(this: *const root::FloatNDArray,
                                     dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray9fourier2dEv"]
        pub fn FloatNDArray_fourier2d(this: *const root::FloatNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray10ifourier2dEv"]
        pub fn FloatNDArray_ifourier2d(this: *const root::FloatNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray9fourierNdEv"]
        pub fn FloatNDArray_fourierNd(this: *const root::FloatNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray10ifourierNdEv"]
        pub fn FloatNDArray_ifourierNd(this: *const root::FloatNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name =
              "_ZN12FloatNDArray15increment_indexER5ArrayIiERK10dim_vectori"]
        pub fn FloatNDArray_increment_index(ra_idx: *mut [u64; 5usize],
                                            dimensions:
                                                *const root::dim_vector,
                                            start_dimension:
                                                ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name =
              "_ZN12FloatNDArray13compute_indexER5ArrayIiERK10dim_vector"]
        pub fn FloatNDArray_compute_index(ra_idx: *mut [u64; 5usize],
                                          dimensions: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray4diagEi"]
        pub fn FloatNDArray_diag(this: *const root::FloatNDArray,
                                 k: root::octave_idx_type)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12FloatNDArray4diagEii"]
        pub fn FloatNDArray_diag1(this: *const root::FloatNDArray,
                                  m: root::octave_idx_type,
                                  n: root::octave_idx_type)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZN12FloatNDArrayC1ERK11charNDArray"]
        pub fn FloatNDArray_FloatNDArray(this: *mut root::FloatNDArray,
                                         arg1: *const root::charNDArray);
    }
    impl Clone for FloatNDArray {
        fn clone(&self) -> Self { *self }
    }
    impl FloatNDArray {
        #[inline]
        pub unsafe fn any_element_is_negative(&self, arg1: bool) -> bool {
            FloatNDArray_any_element_is_negative(self, arg1)
        }
        #[inline]
        pub unsafe fn any_element_is_positive(&self, arg1: bool) -> bool {
            FloatNDArray_any_element_is_positive(self, arg1)
        }
        #[inline]
        pub unsafe fn any_element_is_nan(&self) -> bool {
            FloatNDArray_any_element_is_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_is_inf_or_nan(&self) -> bool {
            FloatNDArray_any_element_is_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_not_one_or_zero(&self) -> bool {
            FloatNDArray_any_element_not_one_or_zero(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_zero(&self) -> bool {
            FloatNDArray_all_elements_are_zero(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_int_or_inf_or_nan(&self) -> bool {
            FloatNDArray_all_elements_are_int_or_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn all_integers(&self, max_val: *mut f32,
                                   min_val: *mut f32) -> bool {
            FloatNDArray_all_integers(self, max_val, min_val)
        }
        #[inline]
        pub unsafe fn all_integers1(&self) -> bool {
            FloatNDArray_all_integers1(self)
        }
        #[inline]
        pub unsafe fn too_large_for_float(&self) -> bool {
            FloatNDArray_too_large_for_float(self)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            FloatNDArray_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            FloatNDArray_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_prod(self, dim)
        }
        #[inline]
        pub unsafe fn dprod(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            FloatNDArray_dprod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_sum(self, dim)
        }
        #[inline]
        pub unsafe fn dsum(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            FloatNDArray_dsum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::FloatNDArray,
                             ra_idx: *const [u64; 5usize])
         -> root::FloatNDArray {
            FloatNDArray_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat1(&mut self, rb: *const root::FloatComplexNDArray,
                              ra_idx: *const [u64; 5usize])
         -> root::FloatComplexNDArray {
            FloatNDArray_concat1(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat2(&mut self, rb: *const root::charNDArray,
                              ra_idx: *const [u64; 5usize])
         -> root::charNDArray {
            FloatNDArray_concat2(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn max(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_max(self, dim)
        }
        #[inline]
        pub unsafe fn max1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int) -> root::FloatNDArray {
            FloatNDArray_max1(self, index, dim)
        }
        #[inline]
        pub unsafe fn min(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_min(self, dim)
        }
        #[inline]
        pub unsafe fn min1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int) -> root::FloatNDArray {
            FloatNDArray_min1(self, index, dim)
        }
        #[inline]
        pub unsafe fn cummax(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_cummax(self, dim)
        }
        #[inline]
        pub unsafe fn cummax1(&self, index: *mut [u64; 5usize],
                              dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_cummax1(self, index, dim)
        }
        #[inline]
        pub unsafe fn cummin(&self, dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_cummin(self, dim)
        }
        #[inline]
        pub unsafe fn cummin1(&self, index: *mut [u64; 5usize],
                              dim: ::std::os::raw::c_int)
         -> root::FloatNDArray {
            FloatNDArray_cummin1(self, index, dim)
        }
        #[inline]
        pub unsafe fn diff(&self, order: root::octave_idx_type,
                           dim: ::std::os::raw::c_int) -> root::FloatNDArray {
            FloatNDArray_diff(self, order, dim)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::FloatNDArray,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::FloatNDArray {
            FloatNDArray_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::FloatNDArray,
                              ra_idx: *const [u64; 5usize])
         -> *mut root::FloatNDArray {
            FloatNDArray_insert1(self, a, ra_idx)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::FloatNDArray {
            FloatNDArray_abs(self)
        }
        #[inline]
        pub unsafe fn isnan(&self) -> root::boolNDArray {
            FloatNDArray_isnan(self)
        }
        #[inline]
        pub unsafe fn isinf(&self) -> root::boolNDArray {
            FloatNDArray_isinf(self)
        }
        #[inline]
        pub unsafe fn isfinite(&self) -> root::boolNDArray {
            FloatNDArray_isfinite(self)
        }
        #[inline]
        pub unsafe fn fourier(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatNDArray_fourier(self, dim)
        }
        #[inline]
        pub unsafe fn ifourier(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatNDArray_ifourier(self, dim)
        }
        #[inline]
        pub unsafe fn fourier2d(&self) -> root::FloatComplexNDArray {
            FloatNDArray_fourier2d(self)
        }
        #[inline]
        pub unsafe fn ifourier2d(&self) -> root::FloatComplexNDArray {
            FloatNDArray_ifourier2d(self)
        }
        #[inline]
        pub unsafe fn fourierNd(&self) -> root::FloatComplexNDArray {
            FloatNDArray_fourierNd(self)
        }
        #[inline]
        pub unsafe fn ifourierNd(&self) -> root::FloatComplexNDArray {
            FloatNDArray_ifourierNd(self)
        }
        #[inline]
        pub unsafe fn increment_index(ra_idx: *mut [u64; 5usize],
                                      dimensions: *const root::dim_vector,
                                      start_dimension:
                                          ::std::os::raw::c_int) {
            FloatNDArray_increment_index(ra_idx, dimensions, start_dimension)
        }
        #[inline]
        pub unsafe fn compute_index(ra_idx: *mut [u64; 5usize],
                                    dimensions: *const root::dim_vector)
         -> root::octave_idx_type {
            FloatNDArray_compute_index(ra_idx, dimensions)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::FloatNDArray {
            FloatNDArray_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type) -> root::FloatNDArray {
            FloatNDArray_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn new(arg1: *const root::charNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatNDArray_FloatNDArray(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatComplexNDArray {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray18any_element_is_nanEv"]
        pub fn FloatComplexNDArray_any_element_is_nan(this:
                                                          *const root::FloatComplexNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZNK19FloatComplexNDArray25any_element_is_inf_or_nanEv"]
        pub fn FloatComplexNDArray_any_element_is_inf_or_nan(this:
                                                                 *const root::FloatComplexNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray21all_elements_are_realEv"]
        pub fn FloatComplexNDArray_all_elements_are_real(this:
                                                             *const root::FloatComplexNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray12all_integersERfS0_"]
        pub fn FloatComplexNDArray_all_integers(this:
                                                    *const root::FloatComplexNDArray,
                                                max_val: *mut f32,
                                                min_val: *mut f32) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray19too_large_for_floatEv"]
        pub fn FloatComplexNDArray_too_large_for_float(this:
                                                           *const root::FloatComplexNDArray)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray3allEi"]
        pub fn FloatComplexNDArray_all(this: *const root::FloatComplexNDArray,
                                       dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray3anyEi"]
        pub fn FloatComplexNDArray_any(this: *const root::FloatComplexNDArray,
                                       dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray7cumprodEi"]
        pub fn FloatComplexNDArray_cumprod(this:
                                               *const root::FloatComplexNDArray,
                                           dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray6cumsumEi"]
        pub fn FloatComplexNDArray_cumsum(this:
                                              *const root::FloatComplexNDArray,
                                          dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray4prodEi"]
        pub fn FloatComplexNDArray_prod(this:
                                            *const root::FloatComplexNDArray,
                                        dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray5dprodEi"]
        pub fn FloatComplexNDArray_dprod(this:
                                             *const root::FloatComplexNDArray,
                                         dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray3sumEi"]
        pub fn FloatComplexNDArray_sum(this: *const root::FloatComplexNDArray,
                                       dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray4dsumEi"]
        pub fn FloatComplexNDArray_dsum(this:
                                            *const root::FloatComplexNDArray,
                                        dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray5sumsqEi"]
        pub fn FloatComplexNDArray_sumsq(this:
                                             *const root::FloatComplexNDArray,
                                         dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN19FloatComplexNDArray6concatERKS_RK5ArrayIiE"]
        pub fn FloatComplexNDArray_concat(this:
                                              *mut root::FloatComplexNDArray,
                                          rb:
                                              *const root::FloatComplexNDArray,
                                          ra_idx: *const [u64; 5usize])
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name =
              "_ZN19FloatComplexNDArray6concatERK12FloatNDArrayRK5ArrayIiE"]
        pub fn FloatComplexNDArray_concat1(this:
                                               *mut root::FloatComplexNDArray,
                                           rb: *const root::FloatNDArray,
                                           ra_idx: *const [u64; 5usize])
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray3maxEi"]
        pub fn FloatComplexNDArray_max(this: *const root::FloatComplexNDArray,
                                       dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray3maxER5ArrayIiEi"]
        pub fn FloatComplexNDArray_max1(this:
                                            *const root::FloatComplexNDArray,
                                        index: *mut [u64; 5usize],
                                        dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray3minEi"]
        pub fn FloatComplexNDArray_min(this: *const root::FloatComplexNDArray,
                                       dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray3minER5ArrayIiEi"]
        pub fn FloatComplexNDArray_min1(this:
                                            *const root::FloatComplexNDArray,
                                        index: *mut [u64; 5usize],
                                        dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray6cummaxEi"]
        pub fn FloatComplexNDArray_cummax(this:
                                              *const root::FloatComplexNDArray,
                                          dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray6cummaxER5ArrayIiEi"]
        pub fn FloatComplexNDArray_cummax1(this:
                                               *const root::FloatComplexNDArray,
                                           index: *mut [u64; 5usize],
                                           dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray6cumminEi"]
        pub fn FloatComplexNDArray_cummin(this:
                                              *const root::FloatComplexNDArray,
                                          dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray6cumminER5ArrayIiEi"]
        pub fn FloatComplexNDArray_cummin1(this:
                                               *const root::FloatComplexNDArray,
                                           index: *mut [u64; 5usize],
                                           dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray4diffEii"]
        pub fn FloatComplexNDArray_diff(this:
                                            *const root::FloatComplexNDArray,
                                        order: root::octave_idx_type,
                                        dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN19FloatComplexNDArray6insertERK7NDArrayii"]
        pub fn FloatComplexNDArray_insert(this:
                                              *mut root::FloatComplexNDArray,
                                          a: *const root::NDArray,
                                          r: root::octave_idx_type,
                                          c: root::octave_idx_type)
         -> *mut root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN19FloatComplexNDArray6insertERKS_ii"]
        pub fn FloatComplexNDArray_insert1(this:
                                               *mut root::FloatComplexNDArray,
                                           a:
                                               *const root::FloatComplexNDArray,
                                           r: root::octave_idx_type,
                                           c: root::octave_idx_type)
         -> *mut root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN19FloatComplexNDArray6insertERKS_RK5ArrayIiE"]
        pub fn FloatComplexNDArray_insert2(this:
                                               *mut root::FloatComplexNDArray,
                                           a:
                                               *const root::FloatComplexNDArray,
                                           ra_idx: *const [u64; 5usize])
         -> *mut root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray3absEv"]
        pub fn FloatComplexNDArray_abs(this: *const root::FloatComplexNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray5isnanEv"]
        pub fn FloatComplexNDArray_isnan(this:
                                             *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray5isinfEv"]
        pub fn FloatComplexNDArray_isinf(this:
                                             *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray8isfiniteEv"]
        pub fn FloatComplexNDArray_isfinite(this:
                                                *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray7fourierEi"]
        pub fn FloatComplexNDArray_fourier(this:
                                               *const root::FloatComplexNDArray,
                                           dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray8ifourierEi"]
        pub fn FloatComplexNDArray_ifourier(this:
                                                *const root::FloatComplexNDArray,
                                            dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray9fourier2dEv"]
        pub fn FloatComplexNDArray_fourier2d(this:
                                                 *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray10ifourier2dEv"]
        pub fn FloatComplexNDArray_ifourier2d(this:
                                                  *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray9fourierNdEv"]
        pub fn FloatComplexNDArray_fourierNd(this:
                                                 *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray10ifourierNdEv"]
        pub fn FloatComplexNDArray_ifourierNd(this:
                                                  *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name =
              "_ZN19FloatComplexNDArray15increment_indexER5ArrayIiERK10dim_vectori"]
        pub fn FloatComplexNDArray_increment_index(ra_idx: *mut [u64; 5usize],
                                                   dimensions:
                                                       *const root::dim_vector,
                                                   start_dimension:
                                                       ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name =
              "_ZN19FloatComplexNDArray13compute_indexER5ArrayIiERK10dim_vector"]
        pub fn FloatComplexNDArray_compute_index(ra_idx: *mut [u64; 5usize],
                                                 dimensions:
                                                     *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray4diagEi"]
        pub fn FloatComplexNDArray_diag(this:
                                            *const root::FloatComplexNDArray,
                                        k: root::octave_idx_type)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK19FloatComplexNDArray4diagEii"]
        pub fn FloatComplexNDArray_diag1(this:
                                             *const root::FloatComplexNDArray,
                                         m: root::octave_idx_type,
                                         n: root::octave_idx_type)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZN19FloatComplexNDArrayC1ERK11charNDArray"]
        pub fn FloatComplexNDArray_FloatComplexNDArray(this:
                                                           *mut root::FloatComplexNDArray,
                                                       arg1:
                                                           *const root::charNDArray);
    }
    impl Clone for FloatComplexNDArray {
        fn clone(&self) -> Self { *self }
    }
    impl FloatComplexNDArray {
        #[inline]
        pub unsafe fn any_element_is_nan(&self) -> bool {
            FloatComplexNDArray_any_element_is_nan(self)
        }
        #[inline]
        pub unsafe fn any_element_is_inf_or_nan(&self) -> bool {
            FloatComplexNDArray_any_element_is_inf_or_nan(self)
        }
        #[inline]
        pub unsafe fn all_elements_are_real(&self) -> bool {
            FloatComplexNDArray_all_elements_are_real(self)
        }
        #[inline]
        pub unsafe fn all_integers(&self, max_val: *mut f32,
                                   min_val: *mut f32) -> bool {
            FloatComplexNDArray_all_integers(self, max_val, min_val)
        }
        #[inline]
        pub unsafe fn too_large_for_float(&self) -> bool {
            FloatComplexNDArray_too_large_for_float(self)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            FloatComplexNDArray_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            FloatComplexNDArray_any(self, dim)
        }
        #[inline]
        pub unsafe fn cumprod(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_cumprod(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn prod(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_prod(self, dim)
        }
        #[inline]
        pub unsafe fn dprod(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            FloatComplexNDArray_dprod(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_sum(self, dim)
        }
        #[inline]
        pub unsafe fn dsum(&self, dim: ::std::os::raw::c_int)
         -> root::ComplexNDArray {
            FloatComplexNDArray_dsum(self, dim)
        }
        #[inline]
        pub unsafe fn sumsq(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_sumsq(self, dim)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::FloatComplexNDArray,
                             ra_idx: *const [u64; 5usize])
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat1(&mut self, rb: *const root::FloatNDArray,
                              ra_idx: *const [u64; 5usize])
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_concat1(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn max(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_max(self, dim)
        }
        #[inline]
        pub unsafe fn max1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_max1(self, index, dim)
        }
        #[inline]
        pub unsafe fn min(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_min(self, dim)
        }
        #[inline]
        pub unsafe fn min1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_min1(self, index, dim)
        }
        #[inline]
        pub unsafe fn cummax(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_cummax(self, dim)
        }
        #[inline]
        pub unsafe fn cummax1(&self, index: *mut [u64; 5usize],
                              dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_cummax1(self, index, dim)
        }
        #[inline]
        pub unsafe fn cummin(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_cummin(self, dim)
        }
        #[inline]
        pub unsafe fn cummin1(&self, index: *mut [u64; 5usize],
                              dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_cummin1(self, index, dim)
        }
        #[inline]
        pub unsafe fn diff(&self, order: root::octave_idx_type,
                           dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_diff(self, order, dim)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::NDArray,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::FloatComplexNDArray {
            FloatComplexNDArray_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::FloatComplexNDArray,
                              r: root::octave_idx_type,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexNDArray {
            FloatComplexNDArray_insert1(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert2(&mut self, a: *const root::FloatComplexNDArray,
                              ra_idx: *const [u64; 5usize])
         -> *mut root::FloatComplexNDArray {
            FloatComplexNDArray_insert2(self, a, ra_idx)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::FloatNDArray {
            FloatComplexNDArray_abs(self)
        }
        #[inline]
        pub unsafe fn isnan(&self) -> root::boolNDArray {
            FloatComplexNDArray_isnan(self)
        }
        #[inline]
        pub unsafe fn isinf(&self) -> root::boolNDArray {
            FloatComplexNDArray_isinf(self)
        }
        #[inline]
        pub unsafe fn isfinite(&self) -> root::boolNDArray {
            FloatComplexNDArray_isfinite(self)
        }
        #[inline]
        pub unsafe fn fourier(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_fourier(self, dim)
        }
        #[inline]
        pub unsafe fn ifourier(&self, dim: ::std::os::raw::c_int)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_ifourier(self, dim)
        }
        #[inline]
        pub unsafe fn fourier2d(&self) -> root::FloatComplexNDArray {
            FloatComplexNDArray_fourier2d(self)
        }
        #[inline]
        pub unsafe fn ifourier2d(&self) -> root::FloatComplexNDArray {
            FloatComplexNDArray_ifourier2d(self)
        }
        #[inline]
        pub unsafe fn fourierNd(&self) -> root::FloatComplexNDArray {
            FloatComplexNDArray_fourierNd(self)
        }
        #[inline]
        pub unsafe fn ifourierNd(&self) -> root::FloatComplexNDArray {
            FloatComplexNDArray_ifourierNd(self)
        }
        #[inline]
        pub unsafe fn increment_index(ra_idx: *mut [u64; 5usize],
                                      dimensions: *const root::dim_vector,
                                      start_dimension:
                                          ::std::os::raw::c_int) {
            FloatComplexNDArray_increment_index(ra_idx, dimensions,
                                                start_dimension)
        }
        #[inline]
        pub unsafe fn compute_index(ra_idx: *mut [u64; 5usize],
                                    dimensions: *const root::dim_vector)
         -> root::octave_idx_type {
            FloatComplexNDArray_compute_index(ra_idx, dimensions)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type)
         -> root::FloatComplexNDArray {
            FloatComplexNDArray_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn new(arg1: *const root::charNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexNDArray_FloatComplexNDArray(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct boolNDArray {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    pub type boolNDArray_matrix_type = [u64; 5usize];
    extern "C" {
        #[link_name = "_ZN11boolNDArray6invertEv"]
        pub fn boolNDArray_invert(this: *mut root::boolNDArray)
         -> *mut root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11boolNDArray3allEi"]
        pub fn boolNDArray_all(this: *const root::boolNDArray,
                               dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11boolNDArray3anyEi"]
        pub fn boolNDArray_any(this: *const root::boolNDArray,
                               dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11boolNDArray3sumEi"]
        pub fn boolNDArray_sum(this: *const root::boolNDArray,
                               dim: ::std::os::raw::c_int) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11boolNDArray6cumsumEi"]
        pub fn boolNDArray_cumsum(this: *const root::boolNDArray,
                                  dim: ::std::os::raw::c_int)
         -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZN11boolNDArray6concatERKS_RK5ArrayIiE"]
        pub fn boolNDArray_concat(this: *mut root::boolNDArray,
                                  rb: *const root::boolNDArray,
                                  ra_idx: *const [u64; 5usize])
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZN11boolNDArray6insertERKS_ii"]
        pub fn boolNDArray_insert(this: *mut root::boolNDArray,
                                  a: *const root::boolNDArray,
                                  r: root::octave_idx_type,
                                  c: root::octave_idx_type)
         -> *mut root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZN11boolNDArray6insertERKS_RK5ArrayIiE"]
        pub fn boolNDArray_insert1(this: *mut root::boolNDArray,
                                   a: *const root::boolNDArray,
                                   ra_idx: *const [u64; 5usize])
         -> *mut root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_ZN11boolNDArray15increment_indexER5ArrayIiERK10dim_vectori"]
        pub fn boolNDArray_increment_index(ra_idx: *mut [u64; 5usize],
                                           dimensions:
                                               *const root::dim_vector,
                                           start_dimension:
                                               ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name =
              "_ZN11boolNDArray13compute_indexER5ArrayIiERK10dim_vector"]
        pub fn boolNDArray_compute_index(ra_idx: *mut [u64; 5usize],
                                         dimensions: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK11boolNDArray4diagEi"]
        pub fn boolNDArray_diag(this: *const root::boolNDArray,
                                k: root::octave_idx_type)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11boolNDArray4diagEii"]
        pub fn boolNDArray_diag1(this: *const root::boolNDArray,
                                 m: root::octave_idx_type,
                                 n: root::octave_idx_type)
         -> root::boolNDArray;
    }
    impl Clone for boolNDArray {
        fn clone(&self) -> Self { *self }
    }
    impl boolNDArray {
        #[inline]
        pub unsafe fn invert(&mut self) -> *mut root::boolNDArray {
            boolNDArray_invert(self)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            boolNDArray_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            boolNDArray_any(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            boolNDArray_sum(self, dim)
        }
        #[inline]
        pub unsafe fn cumsum(&self, dim: ::std::os::raw::c_int)
         -> root::NDArray {
            boolNDArray_cumsum(self, dim)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::boolNDArray,
                             ra_idx: *const [u64; 5usize])
         -> root::boolNDArray {
            boolNDArray_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::boolNDArray,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::boolNDArray {
            boolNDArray_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::boolNDArray,
                              ra_idx: *const [u64; 5usize])
         -> *mut root::boolNDArray {
            boolNDArray_insert1(self, a, ra_idx)
        }
        #[inline]
        pub unsafe fn increment_index(ra_idx: *mut [u64; 5usize],
                                      dimensions: *const root::dim_vector,
                                      start_dimension:
                                          ::std::os::raw::c_int) {
            boolNDArray_increment_index(ra_idx, dimensions, start_dimension)
        }
        #[inline]
        pub unsafe fn compute_index(ra_idx: *mut [u64; 5usize],
                                    dimensions: *const root::dim_vector)
         -> root::octave_idx_type {
            boolNDArray_compute_index(ra_idx, dimensions)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::boolNDArray {
            boolNDArray_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type) -> root::boolNDArray {
            boolNDArray_diag1(self, m, n)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct charNDArray {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    pub type charNDArray_matrix_type = [u64; 5usize];
    extern "C" {
        #[link_name = "_ZNK11charNDArray3allEi"]
        pub fn charNDArray_all(this: *const root::charNDArray,
                               dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11charNDArray3anyEi"]
        pub fn charNDArray_any(this: *const root::charNDArray,
                               dim: ::std::os::raw::c_int)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZN11charNDArray6concatERKS_RK5ArrayIiE"]
        pub fn charNDArray_concat(this: *mut root::charNDArray,
                                  rb: *const root::charNDArray,
                                  ra_idx: *const [u64; 5usize])
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZN11charNDArray6concatERK7NDArrayRK5ArrayIiE"]
        pub fn charNDArray_concat1(this: *mut root::charNDArray,
                                   rb: *const root::NDArray,
                                   ra_idx: *const [u64; 5usize])
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11charNDArray3maxEi"]
        pub fn charNDArray_max(this: *const root::charNDArray,
                               dim: ::std::os::raw::c_int)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11charNDArray3maxER5ArrayIiEi"]
        pub fn charNDArray_max1(this: *const root::charNDArray,
                                index: *mut [u64; 5usize],
                                dim: ::std::os::raw::c_int)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11charNDArray3minEi"]
        pub fn charNDArray_min(this: *const root::charNDArray,
                               dim: ::std::os::raw::c_int)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11charNDArray3minER5ArrayIiEi"]
        pub fn charNDArray_min1(this: *const root::charNDArray,
                                index: *mut [u64; 5usize],
                                dim: ::std::os::raw::c_int)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZN11charNDArray6insertERKS_ii"]
        pub fn charNDArray_insert(this: *mut root::charNDArray,
                                  a: *const root::charNDArray,
                                  r: root::octave_idx_type,
                                  c: root::octave_idx_type)
         -> *mut root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZN11charNDArray6insertERKS_RK5ArrayIiE"]
        pub fn charNDArray_insert1(this: *mut root::charNDArray,
                                   a: *const root::charNDArray,
                                   ra_idx: *const [u64; 5usize])
         -> *mut root::charNDArray;
    }
    extern "C" {
        #[link_name =
              "_ZN11charNDArray15increment_indexER5ArrayIiERK10dim_vectori"]
        pub fn charNDArray_increment_index(ra_idx: *mut [u64; 5usize],
                                           dimensions:
                                               *const root::dim_vector,
                                           start_dimension:
                                               ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name =
              "_ZN11charNDArray13compute_indexER5ArrayIiERK10dim_vector"]
        pub fn charNDArray_compute_index(ra_idx: *mut [u64; 5usize],
                                         dimensions: *const root::dim_vector)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK11charNDArray4diagEi"]
        pub fn charNDArray_diag(this: *const root::charNDArray,
                                k: root::octave_idx_type)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK11charNDArray4diagEii"]
        pub fn charNDArray_diag1(this: *const root::charNDArray,
                                 m: root::octave_idx_type,
                                 n: root::octave_idx_type)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZN11charNDArrayC1Ec"]
        pub fn charNDArray_charNDArray(this: *mut root::charNDArray,
                                       c: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN11charNDArrayC1EPKc"]
        pub fn charNDArray_charNDArray1(this: *mut root::charNDArray,
                                        s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN11charNDArrayC1ERKSs"]
        pub fn charNDArray_charNDArray2(this: *mut root::charNDArray,
                                        s: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_ZN11charNDArrayC1ERK13string_vectorc"]
        pub fn charNDArray_charNDArray3(this: *mut root::charNDArray,
                                        s: *const root::string_vector,
                                        fill_value: ::std::os::raw::c_char);
    }
    impl Clone for charNDArray {
        fn clone(&self) -> Self { *self }
    }
    impl charNDArray {
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            charNDArray_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::boolNDArray {
            charNDArray_any(self, dim)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::charNDArray,
                             ra_idx: *const [u64; 5usize])
         -> root::charNDArray {
            charNDArray_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn concat1(&mut self, rb: *const root::NDArray,
                              ra_idx: *const [u64; 5usize])
         -> root::charNDArray {
            charNDArray_concat1(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn max(&self, dim: ::std::os::raw::c_int)
         -> root::charNDArray {
            charNDArray_max(self, dim)
        }
        #[inline]
        pub unsafe fn max1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int) -> root::charNDArray {
            charNDArray_max1(self, index, dim)
        }
        #[inline]
        pub unsafe fn min(&self, dim: ::std::os::raw::c_int)
         -> root::charNDArray {
            charNDArray_min(self, dim)
        }
        #[inline]
        pub unsafe fn min1(&self, index: *mut [u64; 5usize],
                           dim: ::std::os::raw::c_int) -> root::charNDArray {
            charNDArray_min1(self, index, dim)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::charNDArray,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::charNDArray {
            charNDArray_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::charNDArray,
                              ra_idx: *const [u64; 5usize])
         -> *mut root::charNDArray {
            charNDArray_insert1(self, a, ra_idx)
        }
        #[inline]
        pub unsafe fn increment_index(ra_idx: *mut [u64; 5usize],
                                      dimensions: *const root::dim_vector,
                                      start_dimension:
                                          ::std::os::raw::c_int) {
            charNDArray_increment_index(ra_idx, dimensions, start_dimension)
        }
        #[inline]
        pub unsafe fn compute_index(ra_idx: *mut [u64; 5usize],
                                    dimensions: *const root::dim_vector)
         -> root::octave_idx_type {
            charNDArray_compute_index(ra_idx, dimensions)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::charNDArray {
            charNDArray_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type) -> root::charNDArray {
            charNDArray_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn new(c: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            charNDArray_charNDArray(&mut __bindgen_tmp, c);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(s: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            charNDArray_charNDArray1(&mut __bindgen_tmp, s);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(s: *const root::std::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            charNDArray_charNDArray2(&mut __bindgen_tmp, s);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(s: *const root::string_vector,
                           fill_value: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            charNDArray_charNDArray3(&mut __bindgen_tmp, s, fill_value);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct ColumnVector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN12ColumnVector6insertERKS_i"]
        pub fn ColumnVector_insert(this: *mut root::ColumnVector,
                                   a: *const root::ColumnVector,
                                   r: root::octave_idx_type)
         -> *mut root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN12ColumnVector4fillEd"]
        pub fn ColumnVector_fill(this: *mut root::ColumnVector, val: f64)
         -> *mut root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN12ColumnVector4fillEdii"]
        pub fn ColumnVector_fill1(this: *mut root::ColumnVector, val: f64,
                                  r1: root::octave_idx_type,
                                  r2: root::octave_idx_type)
         -> *mut root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12ColumnVector5stackERKS_"]
        pub fn ColumnVector_stack(this: *const root::ColumnVector,
                                  a: *const root::ColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12ColumnVector9transposeEv"]
        pub fn ColumnVector_transpose(this: *const root::ColumnVector)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12ColumnVector7extractEii"]
        pub fn ColumnVector_extract(this: *const root::ColumnVector,
                                    r1: root::octave_idx_type,
                                    r2: root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12ColumnVector9extract_nEii"]
        pub fn ColumnVector_extract_n(this: *const root::ColumnVector,
                                      r1: root::octave_idx_type,
                                      n: root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12ColumnVector3minEv"]
        pub fn ColumnVector_min(this: *const root::ColumnVector) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK12ColumnVector3maxEv"]
        pub fn ColumnVector_max(this: *const root::ColumnVector) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK12ColumnVector3absEv"]
        pub fn ColumnVector_abs(this: *const root::ColumnVector)
         -> root::ColumnVector;
    }
    impl Clone for ColumnVector {
        fn clone(&self) -> Self { *self }
    }
    impl ColumnVector {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::ColumnVector,
                             r: root::octave_idx_type)
         -> *mut root::ColumnVector {
            ColumnVector_insert(self, a, r)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f64) -> *mut root::ColumnVector {
            ColumnVector_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: f64, r1: root::octave_idx_type,
                            r2: root::octave_idx_type)
         -> *mut root::ColumnVector {
            ColumnVector_fill1(self, val, r1, r2)
        }
        #[inline]
        pub unsafe fn stack(&self, a: *const root::ColumnVector)
         -> root::ColumnVector {
            ColumnVector_stack(self, a)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::RowVector {
            ColumnVector_transpose(self)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              r2: root::octave_idx_type)
         -> root::ColumnVector {
            ColumnVector_extract(self, r1, r2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, r1: root::octave_idx_type,
                                n: root::octave_idx_type)
         -> root::ColumnVector {
            ColumnVector_extract_n(self, r1, n)
        }
        #[inline]
        pub unsafe fn min(&self) -> f64 { ColumnVector_min(self) }
        #[inline]
        pub unsafe fn max(&self) -> f64 { ColumnVector_max(self) }
        #[inline]
        pub unsafe fn abs(&self) -> root::ColumnVector {
            ColumnVector_abs(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct ComplexColumnVector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN19ComplexColumnVector6insertERK12ColumnVectori"]
        pub fn ComplexColumnVector_insert(this:
                                              *mut root::ComplexColumnVector,
                                          a: *const root::ColumnVector,
                                          r: root::octave_idx_type)
         -> *mut root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN19ComplexColumnVector6insertERKS_i"]
        pub fn ComplexColumnVector_insert1(this:
                                               *mut root::ComplexColumnVector,
                                           a:
                                               *const root::ComplexColumnVector,
                                           r: root::octave_idx_type)
         -> *mut root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN19ComplexColumnVector4fillEd"]
        pub fn ComplexColumnVector_fill(this: *mut root::ComplexColumnVector,
                                        val: f64)
         -> *mut root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN19ComplexColumnVector4fillERKSt7complexIdE"]
        pub fn ComplexColumnVector_fill1(this: *mut root::ComplexColumnVector,
                                         val: *const root::Complex)
         -> *mut root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN19ComplexColumnVector4fillEdii"]
        pub fn ComplexColumnVector_fill2(this: *mut root::ComplexColumnVector,
                                         val: f64, r1: root::octave_idx_type,
                                         r2: root::octave_idx_type)
         -> *mut root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN19ComplexColumnVector4fillERKSt7complexIdEii"]
        pub fn ComplexColumnVector_fill3(this: *mut root::ComplexColumnVector,
                                         val: *const root::Complex,
                                         r1: root::octave_idx_type,
                                         r2: root::octave_idx_type)
         -> *mut root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector5stackERK12ColumnVector"]
        pub fn ComplexColumnVector_stack(this:
                                             *const root::ComplexColumnVector,
                                         a: *const root::ColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector5stackERKS_"]
        pub fn ComplexColumnVector_stack1(this:
                                              *const root::ComplexColumnVector,
                                          a: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector9hermitianEv"]
        pub fn ComplexColumnVector_hermitian(this:
                                                 *const root::ComplexColumnVector)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector9transposeEv"]
        pub fn ComplexColumnVector_transpose(this:
                                                 *const root::ComplexColumnVector)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector7extractEii"]
        pub fn ComplexColumnVector_extract(this:
                                               *const root::ComplexColumnVector,
                                           r1: root::octave_idx_type,
                                           r2: root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector9extract_nEii"]
        pub fn ComplexColumnVector_extract_n(this:
                                                 *const root::ComplexColumnVector,
                                             r1: root::octave_idx_type,
                                             n: root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector3minEv"]
        pub fn ComplexColumnVector_min(this: *const root::ComplexColumnVector)
         -> root::Complex;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector3maxEv"]
        pub fn ComplexColumnVector_max(this: *const root::ComplexColumnVector)
         -> root::Complex;
    }
    extern "C" {
        #[link_name = "_ZNK19ComplexColumnVector3absEv"]
        pub fn ComplexColumnVector_abs(this: *const root::ComplexColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN19ComplexColumnVectorC1ERK12ColumnVector"]
        pub fn ComplexColumnVector_ComplexColumnVector(this:
                                                           *mut root::ComplexColumnVector,
                                                       a:
                                                           *const root::ColumnVector);
    }
    impl Clone for ComplexColumnVector {
        fn clone(&self) -> Self { *self }
    }
    impl ComplexColumnVector {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::ColumnVector,
                             r: root::octave_idx_type)
         -> *mut root::ComplexColumnVector {
            ComplexColumnVector_insert(self, a, r)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::ComplexColumnVector,
                              r: root::octave_idx_type)
         -> *mut root::ComplexColumnVector {
            ComplexColumnVector_insert1(self, a, r)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f64)
         -> *mut root::ComplexColumnVector {
            ComplexColumnVector_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: *const root::Complex)
         -> *mut root::ComplexColumnVector {
            ComplexColumnVector_fill1(self, val)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, val: f64, r1: root::octave_idx_type,
                            r2: root::octave_idx_type)
         -> *mut root::ComplexColumnVector {
            ComplexColumnVector_fill2(self, val, r1, r2)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, val: *const root::Complex,
                            r1: root::octave_idx_type,
                            r2: root::octave_idx_type)
         -> *mut root::ComplexColumnVector {
            ComplexColumnVector_fill3(self, val, r1, r2)
        }
        #[inline]
        pub unsafe fn stack(&self, a: *const root::ColumnVector)
         -> root::ComplexColumnVector {
            ComplexColumnVector_stack(self, a)
        }
        #[inline]
        pub unsafe fn stack1(&self, a: *const root::ComplexColumnVector)
         -> root::ComplexColumnVector {
            ComplexColumnVector_stack1(self, a)
        }
        #[inline]
        pub unsafe fn hermitian(&self) -> root::ComplexRowVector {
            ComplexColumnVector_hermitian(self)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::ComplexRowVector {
            ComplexColumnVector_transpose(self)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              r2: root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexColumnVector_extract(self, r1, r2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, r1: root::octave_idx_type,
                                n: root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexColumnVector_extract_n(self, r1, n)
        }
        #[inline]
        pub unsafe fn min(&self) -> root::Complex {
            ComplexColumnVector_min(self)
        }
        #[inline]
        pub unsafe fn max(&self) -> root::Complex {
            ComplexColumnVector_max(self)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::ColumnVector {
            ComplexColumnVector_abs(self)
        }
        #[inline]
        pub unsafe fn new(a: *const root::ColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexColumnVector_ComplexColumnVector(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatColumnVector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN17FloatColumnVector6insertERKS_i"]
        pub fn FloatColumnVector_insert(this: *mut root::FloatColumnVector,
                                        a: *const root::FloatColumnVector,
                                        r: root::octave_idx_type)
         -> *mut root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN17FloatColumnVector4fillEf"]
        pub fn FloatColumnVector_fill(this: *mut root::FloatColumnVector,
                                      val: f32)
         -> *mut root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN17FloatColumnVector4fillEfii"]
        pub fn FloatColumnVector_fill1(this: *mut root::FloatColumnVector,
                                       val: f32, r1: root::octave_idx_type,
                                       r2: root::octave_idx_type)
         -> *mut root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK17FloatColumnVector5stackERKS_"]
        pub fn FloatColumnVector_stack(this: *const root::FloatColumnVector,
                                       a: *const root::FloatColumnVector)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK17FloatColumnVector9transposeEv"]
        pub fn FloatColumnVector_transpose(this:
                                               *const root::FloatColumnVector)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK17FloatColumnVector7extractEii"]
        pub fn FloatColumnVector_extract(this: *const root::FloatColumnVector,
                                         r1: root::octave_idx_type,
                                         r2: root::octave_idx_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK17FloatColumnVector9extract_nEii"]
        pub fn FloatColumnVector_extract_n(this:
                                               *const root::FloatColumnVector,
                                           r1: root::octave_idx_type,
                                           n: root::octave_idx_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK17FloatColumnVector3minEv"]
        pub fn FloatColumnVector_min(this: *const root::FloatColumnVector)
         -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK17FloatColumnVector3maxEv"]
        pub fn FloatColumnVector_max(this: *const root::FloatColumnVector)
         -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK17FloatColumnVector3absEv"]
        pub fn FloatColumnVector_abs(this: *const root::FloatColumnVector)
         -> root::FloatColumnVector;
    }
    impl Clone for FloatColumnVector {
        fn clone(&self) -> Self { *self }
    }
    impl FloatColumnVector {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::FloatColumnVector,
                             r: root::octave_idx_type)
         -> *mut root::FloatColumnVector {
            FloatColumnVector_insert(self, a, r)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f32)
         -> *mut root::FloatColumnVector {
            FloatColumnVector_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: f32, r1: root::octave_idx_type,
                            r2: root::octave_idx_type)
         -> *mut root::FloatColumnVector {
            FloatColumnVector_fill1(self, val, r1, r2)
        }
        #[inline]
        pub unsafe fn stack(&self, a: *const root::FloatColumnVector)
         -> root::FloatColumnVector {
            FloatColumnVector_stack(self, a)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::FloatRowVector {
            FloatColumnVector_transpose(self)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              r2: root::octave_idx_type)
         -> root::FloatColumnVector {
            FloatColumnVector_extract(self, r1, r2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, r1: root::octave_idx_type,
                                n: root::octave_idx_type)
         -> root::FloatColumnVector {
            FloatColumnVector_extract_n(self, r1, n)
        }
        #[inline]
        pub unsafe fn min(&self) -> f32 { FloatColumnVector_min(self) }
        #[inline]
        pub unsafe fn max(&self) -> f32 { FloatColumnVector_max(self) }
        #[inline]
        pub unsafe fn abs(&self) -> root::FloatColumnVector {
            FloatColumnVector_abs(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatComplexColumnVector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name =
              "_ZN24FloatComplexColumnVector6insertERK17FloatColumnVectori"]
        pub fn FloatComplexColumnVector_insert(this:
                                                   *mut root::FloatComplexColumnVector,
                                               a:
                                                   *const root::FloatColumnVector,
                                               r: root::octave_idx_type)
         -> *mut root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN24FloatComplexColumnVector6insertERKS_i"]
        pub fn FloatComplexColumnVector_insert1(this:
                                                    *mut root::FloatComplexColumnVector,
                                                a:
                                                    *const root::FloatComplexColumnVector,
                                                r: root::octave_idx_type)
         -> *mut root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN24FloatComplexColumnVector4fillEf"]
        pub fn FloatComplexColumnVector_fill(this:
                                                 *mut root::FloatComplexColumnVector,
                                             val: f32)
         -> *mut root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN24FloatComplexColumnVector4fillERKSt7complexIfE"]
        pub fn FloatComplexColumnVector_fill1(this:
                                                  *mut root::FloatComplexColumnVector,
                                              val: *const root::FloatComplex)
         -> *mut root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN24FloatComplexColumnVector4fillEfii"]
        pub fn FloatComplexColumnVector_fill2(this:
                                                  *mut root::FloatComplexColumnVector,
                                              val: f32,
                                              r1: root::octave_idx_type,
                                              r2: root::octave_idx_type)
         -> *mut root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN24FloatComplexColumnVector4fillERKSt7complexIfEii"]
        pub fn FloatComplexColumnVector_fill3(this:
                                                  *mut root::FloatComplexColumnVector,
                                              val: *const root::FloatComplex,
                                              r1: root::octave_idx_type,
                                              r2: root::octave_idx_type)
         -> *mut root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK24FloatComplexColumnVector5stackERK17FloatColumnVector"]
        pub fn FloatComplexColumnVector_stack(this:
                                                  *const root::FloatComplexColumnVector,
                                              a:
                                                  *const root::FloatColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK24FloatComplexColumnVector5stackERKS_"]
        pub fn FloatComplexColumnVector_stack1(this:
                                                   *const root::FloatComplexColumnVector,
                                               a:
                                                   *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK24FloatComplexColumnVector9hermitianEv"]
        pub fn FloatComplexColumnVector_hermitian(this:
                                                      *const root::FloatComplexColumnVector)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK24FloatComplexColumnVector9transposeEv"]
        pub fn FloatComplexColumnVector_transpose(this:
                                                      *const root::FloatComplexColumnVector)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK24FloatComplexColumnVector7extractEii"]
        pub fn FloatComplexColumnVector_extract(this:
                                                    *const root::FloatComplexColumnVector,
                                                r1: root::octave_idx_type,
                                                r2: root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK24FloatComplexColumnVector9extract_nEii"]
        pub fn FloatComplexColumnVector_extract_n(this:
                                                      *const root::FloatComplexColumnVector,
                                                  r1: root::octave_idx_type,
                                                  n: root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK24FloatComplexColumnVector3minEv"]
        pub fn FloatComplexColumnVector_min(this:
                                                *const root::FloatComplexColumnVector)
         -> root::FloatComplex;
    }
    extern "C" {
        #[link_name = "_ZNK24FloatComplexColumnVector3maxEv"]
        pub fn FloatComplexColumnVector_max(this:
                                                *const root::FloatComplexColumnVector)
         -> root::FloatComplex;
    }
    extern "C" {
        #[link_name = "_ZNK24FloatComplexColumnVector3absEv"]
        pub fn FloatComplexColumnVector_abs(this:
                                                *const root::FloatComplexColumnVector)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZN24FloatComplexColumnVectorC1ERK17FloatColumnVector"]
        pub fn FloatComplexColumnVector_FloatComplexColumnVector(this:
                                                                     *mut root::FloatComplexColumnVector,
                                                                 a:
                                                                     *const root::FloatColumnVector);
    }
    impl Clone for FloatComplexColumnVector {
        fn clone(&self) -> Self { *self }
    }
    impl FloatComplexColumnVector {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::FloatColumnVector,
                             r: root::octave_idx_type)
         -> *mut root::FloatComplexColumnVector {
            FloatComplexColumnVector_insert(self, a, r)
        }
        #[inline]
        pub unsafe fn insert1(&mut self,
                              a: *const root::FloatComplexColumnVector,
                              r: root::octave_idx_type)
         -> *mut root::FloatComplexColumnVector {
            FloatComplexColumnVector_insert1(self, a, r)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f32)
         -> *mut root::FloatComplexColumnVector {
            FloatComplexColumnVector_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: *const root::FloatComplex)
         -> *mut root::FloatComplexColumnVector {
            FloatComplexColumnVector_fill1(self, val)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, val: f32, r1: root::octave_idx_type,
                            r2: root::octave_idx_type)
         -> *mut root::FloatComplexColumnVector {
            FloatComplexColumnVector_fill2(self, val, r1, r2)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, val: *const root::FloatComplex,
                            r1: root::octave_idx_type,
                            r2: root::octave_idx_type)
         -> *mut root::FloatComplexColumnVector {
            FloatComplexColumnVector_fill3(self, val, r1, r2)
        }
        #[inline]
        pub unsafe fn stack(&self, a: *const root::FloatColumnVector)
         -> root::FloatComplexColumnVector {
            FloatComplexColumnVector_stack(self, a)
        }
        #[inline]
        pub unsafe fn stack1(&self, a: *const root::FloatComplexColumnVector)
         -> root::FloatComplexColumnVector {
            FloatComplexColumnVector_stack1(self, a)
        }
        #[inline]
        pub unsafe fn hermitian(&self) -> root::FloatComplexRowVector {
            FloatComplexColumnVector_hermitian(self)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::FloatComplexRowVector {
            FloatComplexColumnVector_transpose(self)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              r2: root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexColumnVector_extract(self, r1, r2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, r1: root::octave_idx_type,
                                n: root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexColumnVector_extract_n(self, r1, n)
        }
        #[inline]
        pub unsafe fn min(&self) -> root::FloatComplex {
            FloatComplexColumnVector_min(self)
        }
        #[inline]
        pub unsafe fn max(&self) -> root::FloatComplex {
            FloatComplexColumnVector_max(self)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::FloatColumnVector {
            FloatComplexColumnVector_abs(self)
        }
        #[inline]
        pub unsafe fn new(a: *const root::FloatColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexColumnVector_FloatComplexColumnVector(&mut __bindgen_tmp,
                                                              a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct RowVector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN9RowVector6insertERKS_i"]
        pub fn RowVector_insert(this: *mut root::RowVector,
                                a: *const root::RowVector,
                                c: root::octave_idx_type)
         -> *mut root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZN9RowVector4fillEd"]
        pub fn RowVector_fill(this: *mut root::RowVector, val: f64)
         -> *mut root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZN9RowVector4fillEdii"]
        pub fn RowVector_fill1(this: *mut root::RowVector, val: f64,
                               c1: root::octave_idx_type,
                               c2: root::octave_idx_type)
         -> *mut root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK9RowVector6appendERKS_"]
        pub fn RowVector_append(this: *const root::RowVector,
                                a: *const root::RowVector) -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK9RowVector9transposeEv"]
        pub fn RowVector_transpose(this: *const root::RowVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK9RowVector7extractEii"]
        pub fn RowVector_extract(this: *const root::RowVector,
                                 c1: root::octave_idx_type,
                                 c2: root::octave_idx_type)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK9RowVector9extract_nEii"]
        pub fn RowVector_extract_n(this: *const root::RowVector,
                                   c1: root::octave_idx_type,
                                   n: root::octave_idx_type)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK9RowVector3minEv"]
        pub fn RowVector_min(this: *const root::RowVector) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK9RowVector3maxEv"]
        pub fn RowVector_max(this: *const root::RowVector) -> f64;
    }
    impl Clone for RowVector {
        fn clone(&self) -> Self { *self }
    }
    impl RowVector {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::RowVector,
                             c: root::octave_idx_type)
         -> *mut root::RowVector {
            RowVector_insert(self, a, c)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f64) -> *mut root::RowVector {
            RowVector_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: f64, c1: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::RowVector {
            RowVector_fill1(self, val, c1, c2)
        }
        #[inline]
        pub unsafe fn append(&self, a: *const root::RowVector)
         -> root::RowVector {
            RowVector_append(self, a)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::ColumnVector {
            RowVector_transpose(self)
        }
        #[inline]
        pub unsafe fn extract(&self, c1: root::octave_idx_type,
                              c2: root::octave_idx_type) -> root::RowVector {
            RowVector_extract(self, c1, c2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, c1: root::octave_idx_type,
                                n: root::octave_idx_type) -> root::RowVector {
            RowVector_extract_n(self, c1, n)
        }
        #[inline]
        pub unsafe fn min(&self) -> f64 { RowVector_min(self) }
        #[inline]
        pub unsafe fn max(&self) -> f64 { RowVector_max(self) }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct ComplexRowVector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN16ComplexRowVector6insertERK9RowVectori"]
        pub fn ComplexRowVector_insert(this: *mut root::ComplexRowVector,
                                       a: *const root::RowVector,
                                       c: root::octave_idx_type)
         -> *mut root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN16ComplexRowVector6insertERKS_i"]
        pub fn ComplexRowVector_insert1(this: *mut root::ComplexRowVector,
                                        a: *const root::ComplexRowVector,
                                        c: root::octave_idx_type)
         -> *mut root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN16ComplexRowVector4fillEd"]
        pub fn ComplexRowVector_fill(this: *mut root::ComplexRowVector,
                                     val: f64) -> *mut root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN16ComplexRowVector4fillERKSt7complexIdE"]
        pub fn ComplexRowVector_fill1(this: *mut root::ComplexRowVector,
                                      val: *const root::Complex)
         -> *mut root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN16ComplexRowVector4fillEdii"]
        pub fn ComplexRowVector_fill2(this: *mut root::ComplexRowVector,
                                      val: f64, c1: root::octave_idx_type,
                                      c2: root::octave_idx_type)
         -> *mut root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN16ComplexRowVector4fillERKSt7complexIdEii"]
        pub fn ComplexRowVector_fill3(this: *mut root::ComplexRowVector,
                                      val: *const root::Complex,
                                      c1: root::octave_idx_type,
                                      c2: root::octave_idx_type)
         -> *mut root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK16ComplexRowVector6appendERK9RowVector"]
        pub fn ComplexRowVector_append(this: *const root::ComplexRowVector,
                                       a: *const root::RowVector)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK16ComplexRowVector6appendERKS_"]
        pub fn ComplexRowVector_append1(this: *const root::ComplexRowVector,
                                        a: *const root::ComplexRowVector)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK16ComplexRowVector9hermitianEv"]
        pub fn ComplexRowVector_hermitian(this: *const root::ComplexRowVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK16ComplexRowVector9transposeEv"]
        pub fn ComplexRowVector_transpose(this: *const root::ComplexRowVector)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK16ComplexRowVector7extractEii"]
        pub fn ComplexRowVector_extract(this: *const root::ComplexRowVector,
                                        c1: root::octave_idx_type,
                                        c2: root::octave_idx_type)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK16ComplexRowVector9extract_nEii"]
        pub fn ComplexRowVector_extract_n(this: *const root::ComplexRowVector,
                                          c1: root::octave_idx_type,
                                          n: root::octave_idx_type)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK16ComplexRowVector3minEv"]
        pub fn ComplexRowVector_min(this: *const root::ComplexRowVector)
         -> root::Complex;
    }
    extern "C" {
        #[link_name = "_ZNK16ComplexRowVector3maxEv"]
        pub fn ComplexRowVector_max(this: *const root::ComplexRowVector)
         -> root::Complex;
    }
    impl Clone for ComplexRowVector {
        fn clone(&self) -> Self { *self }
    }
    impl ComplexRowVector {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::RowVector,
                             c: root::octave_idx_type)
         -> *mut root::ComplexRowVector {
            ComplexRowVector_insert(self, a, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::ComplexRowVector,
                              c: root::octave_idx_type)
         -> *mut root::ComplexRowVector {
            ComplexRowVector_insert1(self, a, c)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f64)
         -> *mut root::ComplexRowVector {
            ComplexRowVector_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: *const root::Complex)
         -> *mut root::ComplexRowVector {
            ComplexRowVector_fill1(self, val)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, val: f64, c1: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::ComplexRowVector {
            ComplexRowVector_fill2(self, val, c1, c2)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, val: *const root::Complex,
                            c1: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::ComplexRowVector {
            ComplexRowVector_fill3(self, val, c1, c2)
        }
        #[inline]
        pub unsafe fn append(&self, a: *const root::RowVector)
         -> root::ComplexRowVector {
            ComplexRowVector_append(self, a)
        }
        #[inline]
        pub unsafe fn append1(&self, a: *const root::ComplexRowVector)
         -> root::ComplexRowVector {
            ComplexRowVector_append1(self, a)
        }
        #[inline]
        pub unsafe fn hermitian(&self) -> root::ComplexColumnVector {
            ComplexRowVector_hermitian(self)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::ComplexColumnVector {
            ComplexRowVector_transpose(self)
        }
        #[inline]
        pub unsafe fn extract(&self, c1: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::ComplexRowVector {
            ComplexRowVector_extract(self, c1, c2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, c1: root::octave_idx_type,
                                n: root::octave_idx_type)
         -> root::ComplexRowVector {
            ComplexRowVector_extract_n(self, c1, n)
        }
        #[inline]
        pub unsafe fn min(&self) -> root::Complex {
            ComplexRowVector_min(self)
        }
        #[inline]
        pub unsafe fn max(&self) -> root::Complex {
            ComplexRowVector_max(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatRowVector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN14FloatRowVector6insertERKS_i"]
        pub fn FloatRowVector_insert(this: *mut root::FloatRowVector,
                                     a: *const root::FloatRowVector,
                                     c: root::octave_idx_type)
         -> *mut root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZN14FloatRowVector4fillEf"]
        pub fn FloatRowVector_fill(this: *mut root::FloatRowVector, val: f32)
         -> *mut root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZN14FloatRowVector4fillEfii"]
        pub fn FloatRowVector_fill1(this: *mut root::FloatRowVector, val: f32,
                                    c1: root::octave_idx_type,
                                    c2: root::octave_idx_type)
         -> *mut root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK14FloatRowVector6appendERKS_"]
        pub fn FloatRowVector_append(this: *const root::FloatRowVector,
                                     a: *const root::FloatRowVector)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK14FloatRowVector9transposeEv"]
        pub fn FloatRowVector_transpose(this: *const root::FloatRowVector)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK14FloatRowVector7extractEii"]
        pub fn FloatRowVector_extract(this: *const root::FloatRowVector,
                                      c1: root::octave_idx_type,
                                      c2: root::octave_idx_type)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK14FloatRowVector9extract_nEii"]
        pub fn FloatRowVector_extract_n(this: *const root::FloatRowVector,
                                        c1: root::octave_idx_type,
                                        n: root::octave_idx_type)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK14FloatRowVector3minEv"]
        pub fn FloatRowVector_min(this: *const root::FloatRowVector) -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK14FloatRowVector3maxEv"]
        pub fn FloatRowVector_max(this: *const root::FloatRowVector) -> f32;
    }
    impl Clone for FloatRowVector {
        fn clone(&self) -> Self { *self }
    }
    impl FloatRowVector {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::FloatRowVector,
                             c: root::octave_idx_type)
         -> *mut root::FloatRowVector {
            FloatRowVector_insert(self, a, c)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f32) -> *mut root::FloatRowVector {
            FloatRowVector_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: f32, c1: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::FloatRowVector {
            FloatRowVector_fill1(self, val, c1, c2)
        }
        #[inline]
        pub unsafe fn append(&self, a: *const root::FloatRowVector)
         -> root::FloatRowVector {
            FloatRowVector_append(self, a)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::FloatColumnVector {
            FloatRowVector_transpose(self)
        }
        #[inline]
        pub unsafe fn extract(&self, c1: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::FloatRowVector {
            FloatRowVector_extract(self, c1, c2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, c1: root::octave_idx_type,
                                n: root::octave_idx_type)
         -> root::FloatRowVector {
            FloatRowVector_extract_n(self, c1, n)
        }
        #[inline]
        pub unsafe fn min(&self) -> f32 { FloatRowVector_min(self) }
        #[inline]
        pub unsafe fn max(&self) -> f32 { FloatRowVector_max(self) }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatComplexRowVector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN21FloatComplexRowVector6insertERK14FloatRowVectori"]
        pub fn FloatComplexRowVector_insert(this:
                                                *mut root::FloatComplexRowVector,
                                            a: *const root::FloatRowVector,
                                            c: root::octave_idx_type)
         -> *mut root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN21FloatComplexRowVector6insertERKS_i"]
        pub fn FloatComplexRowVector_insert1(this:
                                                 *mut root::FloatComplexRowVector,
                                             a:
                                                 *const root::FloatComplexRowVector,
                                             c: root::octave_idx_type)
         -> *mut root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN21FloatComplexRowVector4fillEf"]
        pub fn FloatComplexRowVector_fill(this:
                                              *mut root::FloatComplexRowVector,
                                          val: f32)
         -> *mut root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN21FloatComplexRowVector4fillERKSt7complexIfE"]
        pub fn FloatComplexRowVector_fill1(this:
                                               *mut root::FloatComplexRowVector,
                                           val: *const root::FloatComplex)
         -> *mut root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN21FloatComplexRowVector4fillEfii"]
        pub fn FloatComplexRowVector_fill2(this:
                                               *mut root::FloatComplexRowVector,
                                           val: f32,
                                           c1: root::octave_idx_type,
                                           c2: root::octave_idx_type)
         -> *mut root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZN21FloatComplexRowVector4fillERKSt7complexIfEii"]
        pub fn FloatComplexRowVector_fill3(this:
                                               *mut root::FloatComplexRowVector,
                                           val: *const root::FloatComplex,
                                           c1: root::octave_idx_type,
                                           c2: root::octave_idx_type)
         -> *mut root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK21FloatComplexRowVector6appendERK14FloatRowVector"]
        pub fn FloatComplexRowVector_append(this:
                                                *const root::FloatComplexRowVector,
                                            a: *const root::FloatRowVector)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK21FloatComplexRowVector6appendERKS_"]
        pub fn FloatComplexRowVector_append1(this:
                                                 *const root::FloatComplexRowVector,
                                             a:
                                                 *const root::FloatComplexRowVector)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK21FloatComplexRowVector9hermitianEv"]
        pub fn FloatComplexRowVector_hermitian(this:
                                                   *const root::FloatComplexRowVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK21FloatComplexRowVector9transposeEv"]
        pub fn FloatComplexRowVector_transpose(this:
                                                   *const root::FloatComplexRowVector)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK21FloatComplexRowVector7extractEii"]
        pub fn FloatComplexRowVector_extract(this:
                                                 *const root::FloatComplexRowVector,
                                             c1: root::octave_idx_type,
                                             c2: root::octave_idx_type)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK21FloatComplexRowVector9extract_nEii"]
        pub fn FloatComplexRowVector_extract_n(this:
                                                   *const root::FloatComplexRowVector,
                                               c1: root::octave_idx_type,
                                               n: root::octave_idx_type)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK21FloatComplexRowVector3minEv"]
        pub fn FloatComplexRowVector_min(this:
                                             *const root::FloatComplexRowVector)
         -> root::FloatComplex;
    }
    extern "C" {
        #[link_name = "_ZNK21FloatComplexRowVector3maxEv"]
        pub fn FloatComplexRowVector_max(this:
                                             *const root::FloatComplexRowVector)
         -> root::FloatComplex;
    }
    impl Clone for FloatComplexRowVector {
        fn clone(&self) -> Self { *self }
    }
    impl FloatComplexRowVector {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::FloatRowVector,
                             c: root::octave_idx_type)
         -> *mut root::FloatComplexRowVector {
            FloatComplexRowVector_insert(self, a, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self,
                              a: *const root::FloatComplexRowVector,
                              c: root::octave_idx_type)
         -> *mut root::FloatComplexRowVector {
            FloatComplexRowVector_insert1(self, a, c)
        }
        #[inline]
        pub unsafe fn fill(&mut self, val: f32)
         -> *mut root::FloatComplexRowVector {
            FloatComplexRowVector_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: *const root::FloatComplex)
         -> *mut root::FloatComplexRowVector {
            FloatComplexRowVector_fill1(self, val)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, val: f32, c1: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::FloatComplexRowVector {
            FloatComplexRowVector_fill2(self, val, c1, c2)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, val: *const root::FloatComplex,
                            c1: root::octave_idx_type,
                            c2: root::octave_idx_type)
         -> *mut root::FloatComplexRowVector {
            FloatComplexRowVector_fill3(self, val, c1, c2)
        }
        #[inline]
        pub unsafe fn append(&self, a: *const root::FloatRowVector)
         -> root::FloatComplexRowVector {
            FloatComplexRowVector_append(self, a)
        }
        #[inline]
        pub unsafe fn append1(&self, a: *const root::FloatComplexRowVector)
         -> root::FloatComplexRowVector {
            FloatComplexRowVector_append1(self, a)
        }
        #[inline]
        pub unsafe fn hermitian(&self) -> root::FloatComplexColumnVector {
            FloatComplexRowVector_hermitian(self)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::FloatComplexColumnVector {
            FloatComplexRowVector_transpose(self)
        }
        #[inline]
        pub unsafe fn extract(&self, c1: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::FloatComplexRowVector {
            FloatComplexRowVector_extract(self, c1, c2)
        }
        #[inline]
        pub unsafe fn extract_n(&self, c1: root::octave_idx_type,
                                n: root::octave_idx_type)
         -> root::FloatComplexRowVector {
            FloatComplexRowVector_extract_n(self, c1, n)
        }
        #[inline]
        pub unsafe fn min(&self) -> root::FloatComplex {
            FloatComplexRowVector_min(self)
        }
        #[inline]
        pub unsafe fn max(&self) -> root::FloatComplex {
            FloatComplexRowVector_max(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct DiagMatrix {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    extern "C" {
        #[link_name = "_ZN10DiagMatrix4fillEd"]
        pub fn DiagMatrix_fill(this: *mut root::DiagMatrix, val: f64)
         -> *mut root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN10DiagMatrix4fillEdii"]
        pub fn DiagMatrix_fill1(this: *mut root::DiagMatrix, val: f64,
                                beg: root::octave_idx_type,
                                end: root::octave_idx_type)
         -> *mut root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN10DiagMatrix4fillERK12ColumnVector"]
        pub fn DiagMatrix_fill2(this: *mut root::DiagMatrix,
                                a: *const root::ColumnVector)
         -> *mut root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN10DiagMatrix4fillERK9RowVector"]
        pub fn DiagMatrix_fill3(this: *mut root::DiagMatrix,
                                a: *const root::RowVector)
         -> *mut root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN10DiagMatrix4fillERK12ColumnVectori"]
        pub fn DiagMatrix_fill4(this: *mut root::DiagMatrix,
                                a: *const root::ColumnVector,
                                beg: root::octave_idx_type)
         -> *mut root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN10DiagMatrix4fillERK9RowVectori"]
        pub fn DiagMatrix_fill5(this: *mut root::DiagMatrix,
                                a: *const root::RowVector,
                                beg: root::octave_idx_type)
         -> *mut root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix3absEv"]
        pub fn DiagMatrix_abs(this: *const root::DiagMatrix)
         -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix7extractEiiii"]
        pub fn DiagMatrix_extract(this: *const root::DiagMatrix,
                                  r1: root::octave_idx_type,
                                  c1: root::octave_idx_type,
                                  r2: root::octave_idx_type,
                                  c2: root::octave_idx_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix3rowEi"]
        pub fn DiagMatrix_row(this: *const root::DiagMatrix,
                              i: root::octave_idx_type) -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix3rowEPc"]
        pub fn DiagMatrix_row1(this: *const root::DiagMatrix,
                               s: *mut ::std::os::raw::c_char)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix6columnEi"]
        pub fn DiagMatrix_column(this: *const root::DiagMatrix,
                                 i: root::octave_idx_type)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix6columnEPc"]
        pub fn DiagMatrix_column1(this: *const root::DiagMatrix,
                                  s: *mut ::std::os::raw::c_char)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix7inverseEv"]
        pub fn DiagMatrix_inverse(this: *const root::DiagMatrix)
         -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix7inverseERi"]
        pub fn DiagMatrix_inverse1(this: *const root::DiagMatrix,
                                   info: *mut root::octave_idx_type)
         -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix14pseudo_inverseEd"]
        pub fn DiagMatrix_pseudo_inverse(this: *const root::DiagMatrix,
                                         tol: f64) -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix11determinantEv"]
        pub fn DiagMatrix_determinant(this: *const root::DiagMatrix)
         -> root::DET;
    }
    extern "C" {
        #[link_name = "_ZNK10DiagMatrix5rcondEv"]
        pub fn DiagMatrix_rcond(this: *const root::DiagMatrix) -> f64;
    }
    impl Clone for DiagMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl DiagMatrix {
        #[inline]
        pub unsafe fn fill(&mut self, val: f64) -> *mut root::DiagMatrix {
            DiagMatrix_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: f64, beg: root::octave_idx_type,
                            end: root::octave_idx_type)
         -> *mut root::DiagMatrix {
            DiagMatrix_fill1(self, val, beg, end)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, a: *const root::ColumnVector)
         -> *mut root::DiagMatrix {
            DiagMatrix_fill2(self, a)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, a: *const root::RowVector)
         -> *mut root::DiagMatrix {
            DiagMatrix_fill3(self, a)
        }
        #[inline]
        pub unsafe fn fill4(&mut self, a: *const root::ColumnVector,
                            beg: root::octave_idx_type)
         -> *mut root::DiagMatrix {
            DiagMatrix_fill4(self, a, beg)
        }
        #[inline]
        pub unsafe fn fill5(&mut self, a: *const root::RowVector,
                            beg: root::octave_idx_type)
         -> *mut root::DiagMatrix {
            DiagMatrix_fill5(self, a, beg)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::DiagMatrix { DiagMatrix_abs(self) }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type) -> root::Matrix {
            DiagMatrix_extract(self, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::RowVector {
            DiagMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn row1(&self, s: *mut ::std::os::raw::c_char)
         -> root::RowVector {
            DiagMatrix_row1(self, s)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::ColumnVector {
            DiagMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn column1(&self, s: *mut ::std::os::raw::c_char)
         -> root::ColumnVector {
            DiagMatrix_column1(self, s)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::DiagMatrix {
            DiagMatrix_inverse(self)
        }
        #[inline]
        pub unsafe fn inverse1(&self, info: *mut root::octave_idx_type)
         -> root::DiagMatrix {
            DiagMatrix_inverse1(self, info)
        }
        #[inline]
        pub unsafe fn pseudo_inverse(&self, tol: f64) -> root::DiagMatrix {
            DiagMatrix_pseudo_inverse(self, tol)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::DET {
            DiagMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn rcond(&self) -> f64 { DiagMatrix_rcond(self) }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct ComplexDiagMatrix {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillEd"]
        pub fn ComplexDiagMatrix_fill(this: *mut root::ComplexDiagMatrix,
                                      val: f64)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERKSt7complexIdE"]
        pub fn ComplexDiagMatrix_fill1(this: *mut root::ComplexDiagMatrix,
                                       val: *const root::Complex)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillEdii"]
        pub fn ComplexDiagMatrix_fill2(this: *mut root::ComplexDiagMatrix,
                                       val: f64, beg: root::octave_idx_type,
                                       end: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERKSt7complexIdEii"]
        pub fn ComplexDiagMatrix_fill3(this: *mut root::ComplexDiagMatrix,
                                       val: *const root::Complex,
                                       beg: root::octave_idx_type,
                                       end: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERK12ColumnVector"]
        pub fn ComplexDiagMatrix_fill4(this: *mut root::ComplexDiagMatrix,
                                       a: *const root::ColumnVector)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERK19ComplexColumnVector"]
        pub fn ComplexDiagMatrix_fill5(this: *mut root::ComplexDiagMatrix,
                                       a: *const root::ComplexColumnVector)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERK9RowVector"]
        pub fn ComplexDiagMatrix_fill6(this: *mut root::ComplexDiagMatrix,
                                       a: *const root::RowVector)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERK16ComplexRowVector"]
        pub fn ComplexDiagMatrix_fill7(this: *mut root::ComplexDiagMatrix,
                                       a: *const root::ComplexRowVector)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERK12ColumnVectori"]
        pub fn ComplexDiagMatrix_fill8(this: *mut root::ComplexDiagMatrix,
                                       a: *const root::ColumnVector,
                                       beg: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERK19ComplexColumnVectori"]
        pub fn ComplexDiagMatrix_fill9(this: *mut root::ComplexDiagMatrix,
                                       a: *const root::ComplexColumnVector,
                                       beg: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERK9RowVectori"]
        pub fn ComplexDiagMatrix_fill10(this: *mut root::ComplexDiagMatrix,
                                        a: *const root::RowVector,
                                        beg: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrix4fillERK16ComplexRowVectori"]
        pub fn ComplexDiagMatrix_fill11(this: *mut root::ComplexDiagMatrix,
                                        a: *const root::ComplexRowVector,
                                        beg: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix3absEv"]
        pub fn ComplexDiagMatrix_abs(this: *const root::ComplexDiagMatrix)
         -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix7extractEiiii"]
        pub fn ComplexDiagMatrix_extract(this: *const root::ComplexDiagMatrix,
                                         r1: root::octave_idx_type,
                                         c1: root::octave_idx_type,
                                         r2: root::octave_idx_type,
                                         c2: root::octave_idx_type)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix3rowEi"]
        pub fn ComplexDiagMatrix_row(this: *const root::ComplexDiagMatrix,
                                     i: root::octave_idx_type)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix3rowEPc"]
        pub fn ComplexDiagMatrix_row1(this: *const root::ComplexDiagMatrix,
                                      s: *mut ::std::os::raw::c_char)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix6columnEi"]
        pub fn ComplexDiagMatrix_column(this: *const root::ComplexDiagMatrix,
                                        i: root::octave_idx_type)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix6columnEPc"]
        pub fn ComplexDiagMatrix_column1(this: *const root::ComplexDiagMatrix,
                                         s: *mut ::std::os::raw::c_char)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix7inverseERi"]
        pub fn ComplexDiagMatrix_inverse(this: *const root::ComplexDiagMatrix,
                                         info: *mut root::octave_idx_type)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix7inverseEv"]
        pub fn ComplexDiagMatrix_inverse1(this:
                                              *const root::ComplexDiagMatrix)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix14pseudo_inverseEd"]
        pub fn ComplexDiagMatrix_pseudo_inverse(this:
                                                    *const root::ComplexDiagMatrix,
                                                tol: f64)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix21all_elements_are_realEv"]
        pub fn ComplexDiagMatrix_all_elements_are_real(this:
                                                           *const root::ComplexDiagMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix11determinantEv"]
        pub fn ComplexDiagMatrix_determinant(this:
                                                 *const root::ComplexDiagMatrix)
         -> root::ComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK17ComplexDiagMatrix5rcondEv"]
        pub fn ComplexDiagMatrix_rcond(this: *const root::ComplexDiagMatrix)
         -> f64;
    }
    extern "C" {
        #[link_name = "_ZN17ComplexDiagMatrixC1ERK10DiagMatrix"]
        pub fn ComplexDiagMatrix_ComplexDiagMatrix(this:
                                                       *mut root::ComplexDiagMatrix,
                                                   a:
                                                       *const root::DiagMatrix);
    }
    impl Clone for ComplexDiagMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl ComplexDiagMatrix {
        #[inline]
        pub unsafe fn fill(&mut self, val: f64)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: *const root::Complex)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill1(self, val)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, val: f64, beg: root::octave_idx_type,
                            end: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill2(self, val, beg, end)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, val: *const root::Complex,
                            beg: root::octave_idx_type,
                            end: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill3(self, val, beg, end)
        }
        #[inline]
        pub unsafe fn fill4(&mut self, a: *const root::ColumnVector)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill4(self, a)
        }
        #[inline]
        pub unsafe fn fill5(&mut self, a: *const root::ComplexColumnVector)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill5(self, a)
        }
        #[inline]
        pub unsafe fn fill6(&mut self, a: *const root::RowVector)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill6(self, a)
        }
        #[inline]
        pub unsafe fn fill7(&mut self, a: *const root::ComplexRowVector)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill7(self, a)
        }
        #[inline]
        pub unsafe fn fill8(&mut self, a: *const root::ColumnVector,
                            beg: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill8(self, a, beg)
        }
        #[inline]
        pub unsafe fn fill9(&mut self, a: *const root::ComplexColumnVector,
                            beg: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill9(self, a, beg)
        }
        #[inline]
        pub unsafe fn fill10(&mut self, a: *const root::RowVector,
                             beg: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill10(self, a, beg)
        }
        #[inline]
        pub unsafe fn fill11(&mut self, a: *const root::ComplexRowVector,
                             beg: root::octave_idx_type)
         -> *mut root::ComplexDiagMatrix {
            ComplexDiagMatrix_fill11(self, a, beg)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::DiagMatrix {
            ComplexDiagMatrix_abs(self)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::ComplexMatrix {
            ComplexDiagMatrix_extract(self, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::ComplexRowVector {
            ComplexDiagMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn row1(&self, s: *mut ::std::os::raw::c_char)
         -> root::ComplexRowVector {
            ComplexDiagMatrix_row1(self, s)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::ComplexColumnVector {
            ComplexDiagMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn column1(&self, s: *mut ::std::os::raw::c_char)
         -> root::ComplexColumnVector {
            ComplexDiagMatrix_column1(self, s)
        }
        #[inline]
        pub unsafe fn inverse(&self, info: *mut root::octave_idx_type)
         -> root::ComplexDiagMatrix {
            ComplexDiagMatrix_inverse(self, info)
        }
        #[inline]
        pub unsafe fn inverse1(&self) -> root::ComplexDiagMatrix {
            ComplexDiagMatrix_inverse1(self)
        }
        #[inline]
        pub unsafe fn pseudo_inverse(&self, tol: f64)
         -> root::ComplexDiagMatrix {
            ComplexDiagMatrix_pseudo_inverse(self, tol)
        }
        #[inline]
        pub unsafe fn all_elements_are_real(&self) -> bool {
            ComplexDiagMatrix_all_elements_are_real(self)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::ComplexDET {
            ComplexDiagMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn rcond(&self) -> f64 { ComplexDiagMatrix_rcond(self) }
        #[inline]
        pub unsafe fn new(a: *const root::DiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ComplexDiagMatrix_ComplexDiagMatrix(&mut __bindgen_tmp, a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatDiagMatrix {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    extern "C" {
        #[link_name = "_ZN15FloatDiagMatrix4fillEf"]
        pub fn FloatDiagMatrix_fill(this: *mut root::FloatDiagMatrix,
                                    val: f32) -> *mut root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN15FloatDiagMatrix4fillEfii"]
        pub fn FloatDiagMatrix_fill1(this: *mut root::FloatDiagMatrix,
                                     val: f32, beg: root::octave_idx_type,
                                     end: root::octave_idx_type)
         -> *mut root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN15FloatDiagMatrix4fillERK17FloatColumnVector"]
        pub fn FloatDiagMatrix_fill2(this: *mut root::FloatDiagMatrix,
                                     a: *const root::FloatColumnVector)
         -> *mut root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN15FloatDiagMatrix4fillERK14FloatRowVector"]
        pub fn FloatDiagMatrix_fill3(this: *mut root::FloatDiagMatrix,
                                     a: *const root::FloatRowVector)
         -> *mut root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN15FloatDiagMatrix4fillERK17FloatColumnVectori"]
        pub fn FloatDiagMatrix_fill4(this: *mut root::FloatDiagMatrix,
                                     a: *const root::FloatColumnVector,
                                     beg: root::octave_idx_type)
         -> *mut root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN15FloatDiagMatrix4fillERK14FloatRowVectori"]
        pub fn FloatDiagMatrix_fill5(this: *mut root::FloatDiagMatrix,
                                     a: *const root::FloatRowVector,
                                     beg: root::octave_idx_type)
         -> *mut root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix3absEv"]
        pub fn FloatDiagMatrix_abs(this: *const root::FloatDiagMatrix)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix7extractEiiii"]
        pub fn FloatDiagMatrix_extract(this: *const root::FloatDiagMatrix,
                                       r1: root::octave_idx_type,
                                       c1: root::octave_idx_type,
                                       r2: root::octave_idx_type,
                                       c2: root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix3rowEi"]
        pub fn FloatDiagMatrix_row(this: *const root::FloatDiagMatrix,
                                   i: root::octave_idx_type)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix3rowEPc"]
        pub fn FloatDiagMatrix_row1(this: *const root::FloatDiagMatrix,
                                    s: *mut ::std::os::raw::c_char)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix6columnEi"]
        pub fn FloatDiagMatrix_column(this: *const root::FloatDiagMatrix,
                                      i: root::octave_idx_type)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix6columnEPc"]
        pub fn FloatDiagMatrix_column1(this: *const root::FloatDiagMatrix,
                                       s: *mut ::std::os::raw::c_char)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix7inverseEv"]
        pub fn FloatDiagMatrix_inverse(this: *const root::FloatDiagMatrix)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix7inverseERi"]
        pub fn FloatDiagMatrix_inverse1(this: *const root::FloatDiagMatrix,
                                        info: *mut root::octave_idx_type)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix14pseudo_inverseEf"]
        pub fn FloatDiagMatrix_pseudo_inverse(this:
                                                  *const root::FloatDiagMatrix,
                                              tol: f32)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix11determinantEv"]
        pub fn FloatDiagMatrix_determinant(this: *const root::FloatDiagMatrix)
         -> root::FloatDET;
    }
    extern "C" {
        #[link_name = "_ZNK15FloatDiagMatrix5rcondEv"]
        pub fn FloatDiagMatrix_rcond(this: *const root::FloatDiagMatrix)
         -> f32;
    }
    impl Clone for FloatDiagMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl FloatDiagMatrix {
        #[inline]
        pub unsafe fn fill(&mut self, val: f32)
         -> *mut root::FloatDiagMatrix {
            FloatDiagMatrix_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: f32, beg: root::octave_idx_type,
                            end: root::octave_idx_type)
         -> *mut root::FloatDiagMatrix {
            FloatDiagMatrix_fill1(self, val, beg, end)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, a: *const root::FloatColumnVector)
         -> *mut root::FloatDiagMatrix {
            FloatDiagMatrix_fill2(self, a)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, a: *const root::FloatRowVector)
         -> *mut root::FloatDiagMatrix {
            FloatDiagMatrix_fill3(self, a)
        }
        #[inline]
        pub unsafe fn fill4(&mut self, a: *const root::FloatColumnVector,
                            beg: root::octave_idx_type)
         -> *mut root::FloatDiagMatrix {
            FloatDiagMatrix_fill4(self, a, beg)
        }
        #[inline]
        pub unsafe fn fill5(&mut self, a: *const root::FloatRowVector,
                            beg: root::octave_idx_type)
         -> *mut root::FloatDiagMatrix {
            FloatDiagMatrix_fill5(self, a, beg)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::FloatDiagMatrix {
            FloatDiagMatrix_abs(self)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::FloatMatrix {
            FloatDiagMatrix_extract(self, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::FloatRowVector {
            FloatDiagMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn row1(&self, s: *mut ::std::os::raw::c_char)
         -> root::FloatRowVector {
            FloatDiagMatrix_row1(self, s)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::FloatColumnVector {
            FloatDiagMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn column1(&self, s: *mut ::std::os::raw::c_char)
         -> root::FloatColumnVector {
            FloatDiagMatrix_column1(self, s)
        }
        #[inline]
        pub unsafe fn inverse(&self) -> root::FloatDiagMatrix {
            FloatDiagMatrix_inverse(self)
        }
        #[inline]
        pub unsafe fn inverse1(&self, info: *mut root::octave_idx_type)
         -> root::FloatDiagMatrix {
            FloatDiagMatrix_inverse1(self, info)
        }
        #[inline]
        pub unsafe fn pseudo_inverse(&self, tol: f32)
         -> root::FloatDiagMatrix {
            FloatDiagMatrix_pseudo_inverse(self, tol)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::FloatDET {
            FloatDiagMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn rcond(&self) -> f32 { FloatDiagMatrix_rcond(self) }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct FloatComplexDiagMatrix {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    extern "C" {
        #[link_name = "_ZN22FloatComplexDiagMatrix4fillEf"]
        pub fn FloatComplexDiagMatrix_fill(this:
                                               *mut root::FloatComplexDiagMatrix,
                                           val: f32)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN22FloatComplexDiagMatrix4fillERKSt7complexIfE"]
        pub fn FloatComplexDiagMatrix_fill1(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            val: *const root::FloatComplex)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN22FloatComplexDiagMatrix4fillEfii"]
        pub fn FloatComplexDiagMatrix_fill2(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            val: f32,
                                            beg: root::octave_idx_type,
                                            end: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN22FloatComplexDiagMatrix4fillERKSt7complexIfEii"]
        pub fn FloatComplexDiagMatrix_fill3(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            val: *const root::FloatComplex,
                                            beg: root::octave_idx_type,
                                            end: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN22FloatComplexDiagMatrix4fillERK17FloatColumnVector"]
        pub fn FloatComplexDiagMatrix_fill4(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            a: *const root::FloatColumnVector)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN22FloatComplexDiagMatrix4fillERK24FloatComplexColumnVector"]
        pub fn FloatComplexDiagMatrix_fill5(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            a:
                                                *const root::FloatComplexColumnVector)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN22FloatComplexDiagMatrix4fillERK14FloatRowVector"]
        pub fn FloatComplexDiagMatrix_fill6(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            a: *const root::FloatRowVector)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN22FloatComplexDiagMatrix4fillERK21FloatComplexRowVector"]
        pub fn FloatComplexDiagMatrix_fill7(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            a:
                                                *const root::FloatComplexRowVector)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN22FloatComplexDiagMatrix4fillERK17FloatColumnVectori"]
        pub fn FloatComplexDiagMatrix_fill8(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            a: *const root::FloatColumnVector,
                                            beg: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN22FloatComplexDiagMatrix4fillERK24FloatComplexColumnVectori"]
        pub fn FloatComplexDiagMatrix_fill9(this:
                                                *mut root::FloatComplexDiagMatrix,
                                            a:
                                                *const root::FloatComplexColumnVector,
                                            beg: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZN22FloatComplexDiagMatrix4fillERK14FloatRowVectori"]
        pub fn FloatComplexDiagMatrix_fill10(this:
                                                 *mut root::FloatComplexDiagMatrix,
                                             a: *const root::FloatRowVector,
                                             beg: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZN22FloatComplexDiagMatrix4fillERK21FloatComplexRowVectori"]
        pub fn FloatComplexDiagMatrix_fill11(this:
                                                 *mut root::FloatComplexDiagMatrix,
                                             a:
                                                 *const root::FloatComplexRowVector,
                                             beg: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix3absEv"]
        pub fn FloatComplexDiagMatrix_abs(this:
                                              *const root::FloatComplexDiagMatrix)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix7extractEiiii"]
        pub fn FloatComplexDiagMatrix_extract(this:
                                                  *const root::FloatComplexDiagMatrix,
                                              r1: root::octave_idx_type,
                                              c1: root::octave_idx_type,
                                              r2: root::octave_idx_type,
                                              c2: root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix3rowEi"]
        pub fn FloatComplexDiagMatrix_row(this:
                                              *const root::FloatComplexDiagMatrix,
                                          i: root::octave_idx_type)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix3rowEPc"]
        pub fn FloatComplexDiagMatrix_row1(this:
                                               *const root::FloatComplexDiagMatrix,
                                           s: *mut ::std::os::raw::c_char)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix6columnEi"]
        pub fn FloatComplexDiagMatrix_column(this:
                                                 *const root::FloatComplexDiagMatrix,
                                             i: root::octave_idx_type)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix6columnEPc"]
        pub fn FloatComplexDiagMatrix_column1(this:
                                                  *const root::FloatComplexDiagMatrix,
                                              s: *mut ::std::os::raw::c_char)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix7inverseERi"]
        pub fn FloatComplexDiagMatrix_inverse(this:
                                                  *const root::FloatComplexDiagMatrix,
                                              info:
                                                  *mut root::octave_idx_type)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix7inverseEv"]
        pub fn FloatComplexDiagMatrix_inverse1(this:
                                                   *const root::FloatComplexDiagMatrix)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix14pseudo_inverseEf"]
        pub fn FloatComplexDiagMatrix_pseudo_inverse(this:
                                                         *const root::FloatComplexDiagMatrix,
                                                     tol: f32)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix21all_elements_are_realEv"]
        pub fn FloatComplexDiagMatrix_all_elements_are_real(this:
                                                                *const root::FloatComplexDiagMatrix)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix11determinantEv"]
        pub fn FloatComplexDiagMatrix_determinant(this:
                                                      *const root::FloatComplexDiagMatrix)
         -> root::FloatComplexDET;
    }
    extern "C" {
        #[link_name = "_ZNK22FloatComplexDiagMatrix5rcondEv"]
        pub fn FloatComplexDiagMatrix_rcond(this:
                                                *const root::FloatComplexDiagMatrix)
         -> f32;
    }
    extern "C" {
        #[link_name = "_ZN22FloatComplexDiagMatrixC1ERK15FloatDiagMatrix"]
        pub fn FloatComplexDiagMatrix_FloatComplexDiagMatrix(this:
                                                                 *mut root::FloatComplexDiagMatrix,
                                                             a:
                                                                 *const root::FloatDiagMatrix);
    }
    impl Clone for FloatComplexDiagMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl FloatComplexDiagMatrix {
        #[inline]
        pub unsafe fn fill(&mut self, val: f32)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill(self, val)
        }
        #[inline]
        pub unsafe fn fill1(&mut self, val: *const root::FloatComplex)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill1(self, val)
        }
        #[inline]
        pub unsafe fn fill2(&mut self, val: f32, beg: root::octave_idx_type,
                            end: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill2(self, val, beg, end)
        }
        #[inline]
        pub unsafe fn fill3(&mut self, val: *const root::FloatComplex,
                            beg: root::octave_idx_type,
                            end: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill3(self, val, beg, end)
        }
        #[inline]
        pub unsafe fn fill4(&mut self, a: *const root::FloatColumnVector)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill4(self, a)
        }
        #[inline]
        pub unsafe fn fill5(&mut self,
                            a: *const root::FloatComplexColumnVector)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill5(self, a)
        }
        #[inline]
        pub unsafe fn fill6(&mut self, a: *const root::FloatRowVector)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill6(self, a)
        }
        #[inline]
        pub unsafe fn fill7(&mut self, a: *const root::FloatComplexRowVector)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill7(self, a)
        }
        #[inline]
        pub unsafe fn fill8(&mut self, a: *const root::FloatColumnVector,
                            beg: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill8(self, a, beg)
        }
        #[inline]
        pub unsafe fn fill9(&mut self,
                            a: *const root::FloatComplexColumnVector,
                            beg: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill9(self, a, beg)
        }
        #[inline]
        pub unsafe fn fill10(&mut self, a: *const root::FloatRowVector,
                             beg: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill10(self, a, beg)
        }
        #[inline]
        pub unsafe fn fill11(&mut self, a: *const root::FloatComplexRowVector,
                             beg: root::octave_idx_type)
         -> *mut root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_fill11(self, a, beg)
        }
        #[inline]
        pub unsafe fn abs(&self) -> root::FloatDiagMatrix {
            FloatComplexDiagMatrix_abs(self)
        }
        #[inline]
        pub unsafe fn extract(&self, r1: root::octave_idx_type,
                              c1: root::octave_idx_type,
                              r2: root::octave_idx_type,
                              c2: root::octave_idx_type)
         -> root::FloatComplexMatrix {
            FloatComplexDiagMatrix_extract(self, r1, c1, r2, c2)
        }
        #[inline]
        pub unsafe fn row(&self, i: root::octave_idx_type)
         -> root::FloatComplexRowVector {
            FloatComplexDiagMatrix_row(self, i)
        }
        #[inline]
        pub unsafe fn row1(&self, s: *mut ::std::os::raw::c_char)
         -> root::FloatComplexRowVector {
            FloatComplexDiagMatrix_row1(self, s)
        }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type)
         -> root::FloatComplexColumnVector {
            FloatComplexDiagMatrix_column(self, i)
        }
        #[inline]
        pub unsafe fn column1(&self, s: *mut ::std::os::raw::c_char)
         -> root::FloatComplexColumnVector {
            FloatComplexDiagMatrix_column1(self, s)
        }
        #[inline]
        pub unsafe fn inverse(&self, info: *mut root::octave_idx_type)
         -> root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_inverse(self, info)
        }
        #[inline]
        pub unsafe fn inverse1(&self) -> root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_inverse1(self)
        }
        #[inline]
        pub unsafe fn pseudo_inverse(&self, tol: f32)
         -> root::FloatComplexDiagMatrix {
            FloatComplexDiagMatrix_pseudo_inverse(self, tol)
        }
        #[inline]
        pub unsafe fn all_elements_are_real(&self) -> bool {
            FloatComplexDiagMatrix_all_elements_are_real(self)
        }
        #[inline]
        pub unsafe fn determinant(&self) -> root::FloatComplexDET {
            FloatComplexDiagMatrix_determinant(self)
        }
        #[inline]
        pub unsafe fn rcond(&self) -> f32 {
            FloatComplexDiagMatrix_rcond(self)
        }
        #[inline]
        pub unsafe fn new(a: *const root::FloatDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FloatComplexDiagMatrix_FloatComplexDiagMatrix(&mut __bindgen_tmp,
                                                          a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct aepbalance {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct gepbalance {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct chol {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct EIG {
        pub _bindgen_opaque_blob: [u64; 15usize],
    }
    impl Clone for EIG {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct hess {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct schur {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct svd {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lu {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct qr {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct qrp {
        pub _address: u8,
    }
    pub type b_d_Mapper = u64;
    pub type b_c_Mapper = u64;
    pub type d_d_Mapper = u64;
    pub type d_c_Mapper = u64;
    pub type c_c_Mapper = u64;
    pub type b_f_Mapper = u64;
    pub type b_fc_Mapper = u64;
    pub type f_f_Mapper = u64;
    pub type f_fc_Mapper = u64;
    pub type fc_fc_Mapper = u64;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum blas_trans_type {
        blas_no_trans = 78,
        blas_trans = 84,
        blas_conj_trans = 67,
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK11boolNDArrayS1_"]
        pub fn mx_el_and(arg1: *const root::boolNDArray,
                         arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK11boolNDArrayS1_"]
        pub fn mx_el_or(arg1: *const root::boolNDArray,
                        arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK11boolNDArrayS1_"]
        pub fn mx_el_and_not(arg1: *const root::boolNDArray,
                             arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK11boolNDArrayS1_"]
        pub fn mx_el_or_not(arg1: *const root::boolNDArray,
                            arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK11boolNDArrayS1_"]
        pub fn mx_el_not_and(arg1: *const root::boolNDArray,
                             arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK11boolNDArrayS1_"]
        pub fn mx_el_not_or(arg1: *const root::boolNDArray,
                            arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK11boolNDArrayS1_"]
        pub fn mx_el_lt(arg1: *const root::boolNDArray,
                        arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK11boolNDArrayS1_"]
        pub fn mx_el_le(arg1: *const root::boolNDArray,
                        arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK11boolNDArrayS1_"]
        pub fn mx_el_ge(arg1: *const root::boolNDArray,
                        arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK11boolNDArrayS1_"]
        pub fn mx_el_gt(arg1: *const root::boolNDArray,
                        arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK11boolNDArrayS1_"]
        pub fn mx_el_eq(arg1: *const root::boolNDArray,
                        arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK11boolNDArrayS1_"]
        pub fn mx_el_ne(arg1: *const root::boolNDArray,
                        arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK11boolNDArrayRKb"]
        pub fn mx_el_and1(arg1: *const root::boolNDArray, arg2: *const bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK11boolNDArrayRKb"]
        pub fn mx_el_or1(arg1: *const root::boolNDArray, arg2: *const bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK11boolNDArrayRKb"]
        pub fn mx_el_not_and1(arg1: *const root::boolNDArray,
                              arg2: *const bool) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK11boolNDArrayRKb"]
        pub fn mx_el_not_or1(arg1: *const root::boolNDArray,
                             arg2: *const bool) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK11boolNDArrayRKb"]
        pub fn mx_el_lt1(arg1: *const root::boolNDArray, arg2: *const bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK11boolNDArrayRKb"]
        pub fn mx_el_le1(arg1: *const root::boolNDArray, arg2: *const bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK11boolNDArrayRKb"]
        pub fn mx_el_ge1(arg1: *const root::boolNDArray, arg2: *const bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK11boolNDArrayRKb"]
        pub fn mx_el_gt1(arg1: *const root::boolNDArray, arg2: *const bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK11boolNDArrayRKb"]
        pub fn mx_el_eq1(arg1: *const root::boolNDArray, arg2: *const bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK11boolNDArrayRKb"]
        pub fn mx_el_ne1(arg1: *const root::boolNDArray, arg2: *const bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKbRK11boolNDArray"]
        pub fn mx_el_and2(arg1: *const bool, arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKbRK11boolNDArray"]
        pub fn mx_el_or2(arg1: *const bool, arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKbRK11boolNDArray"]
        pub fn mx_el_and_not1(arg1: *const bool,
                              arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKbRK11boolNDArray"]
        pub fn mx_el_or_not1(arg1: *const bool,
                             arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKbRK11boolNDArray"]
        pub fn mx_el_lt2(arg1: *const bool, arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKbRK11boolNDArray"]
        pub fn mx_el_le2(arg1: *const bool, arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKbRK11boolNDArray"]
        pub fn mx_el_ge2(arg1: *const bool, arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKbRK11boolNDArray"]
        pub fn mx_el_gt2(arg1: *const bool, arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKbRK11boolNDArray"]
        pub fn mx_el_eq2(arg1: *const bool, arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKbRK11boolNDArray"]
        pub fn mx_el_ne2(arg1: *const bool, arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z16mx_el_and_assignR11boolNDArrayRKS_"]
        pub fn mx_el_and_assign(m: *mut root::boolNDArray,
                                a: *const root::boolNDArray)
         -> *mut root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z15mx_el_or_assignR11boolNDArrayRKS_"]
        pub fn mx_el_or_assign(m: *mut root::boolNDArray,
                               a: *const root::boolNDArray)
         -> *mut root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_andRK11boolNDArrayS1_"]
        pub fn bsxfun_and(arg1: *const root::boolNDArray,
                          arg2: *const root::boolNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_orRK11boolNDArrayS1_"]
        pub fn bsxfun_or(arg1: *const root::boolNDArray,
                         arg2: *const root::boolNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10boolMatrixS1_"]
        pub fn mx_el_and3(arg1: *const root::boolMatrix,
                          arg2: *const root::boolMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10boolMatrixS1_"]
        pub fn mx_el_or3(arg1: *const root::boolMatrix,
                         arg2: *const root::boolMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10boolMatrixRKb"]
        pub fn mx_el_and4(arg1: *const root::boolMatrix, arg2: *const bool)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10boolMatrixRKb"]
        pub fn mx_el_or4(arg1: *const root::boolMatrix, arg2: *const bool)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKbRK10boolMatrix"]
        pub fn mx_el_and5(arg1: *const bool, arg2: *const root::boolMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKbRK10boolMatrix"]
        pub fn mx_el_or5(arg1: *const bool, arg2: *const root::boolMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10boolMatrixS1_"]
        pub fn mx_el_lt3(arg1: *const root::boolMatrix,
                         arg2: *const root::boolMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10boolMatrixS1_"]
        pub fn mx_el_le3(arg1: *const root::boolMatrix,
                         arg2: *const root::boolMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10boolMatrixS1_"]
        pub fn mx_el_ge3(arg1: *const root::boolMatrix,
                         arg2: *const root::boolMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10boolMatrixS1_"]
        pub fn mx_el_gt3(arg1: *const root::boolMatrix,
                         arg2: *const root::boolMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10boolMatrixS1_"]
        pub fn mx_el_eq3(arg1: *const root::boolMatrix,
                         arg2: *const root::boolMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10boolMatrixS1_"]
        pub fn mx_el_ne3(arg1: *const root::boolMatrix,
                         arg2: *const root::boolMatrix) -> root::boolMatrix;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct string_vector {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    extern "C" {
        #[link_name = "_ZN13string_vector4sortEb"]
        pub fn string_vector_sort(this: *mut root::string_vector,
                                  make_uniq: bool)
         -> *mut root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZN13string_vector4uniqEv"]
        pub fn string_vector_uniq(this: *mut root::string_vector)
         -> *mut root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZN13string_vector6appendERKSs"]
        pub fn string_vector_append(this: *mut root::string_vector,
                                    s: *const root::std::string)
         -> *mut root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZN13string_vector6appendERKS_"]
        pub fn string_vector_append1(this: *mut root::string_vector,
                                     sv: *const root::string_vector)
         -> *mut root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZNK13string_vector4joinERKSs"]
        pub fn string_vector_join(this: *const root::string_vector,
                                  sep: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK13string_vector9c_str_vecEv"]
        pub fn string_vector_c_str_vec(this: *const root::string_vector)
         -> *mut *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_ZNK13string_vector8std_listEv"]
        pub fn string_vector_std_list(this: *const root::string_vector)
         -> [u64; 2usize];
    }
    extern "C" {
        #[link_name = "_ZN13string_vector16delete_c_str_vecEPKPKc"]
        pub fn string_vector_delete_c_str_vec(arg1:
                                                  *const *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZNK13string_vector15list_in_columnsERSoiRKSs"]
        pub fn string_vector_list_in_columns(this: *const root::string_vector,
                                             arg1: *mut root::std::ostream,
                                             width: ::std::os::raw::c_int,
                                             prefix: *const root::std::string)
         -> *mut root::std::ostream;
    }
    extern "C" {
        #[link_name = "_ZN13string_vectorC1EPKPKc"]
        pub fn string_vector_string_vector(this: *mut root::string_vector,
                                           s:
                                               *const *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN13string_vectorC1EPKPKci"]
        pub fn string_vector_string_vector1(this: *mut root::string_vector,
                                            s:
                                                *const *const ::std::os::raw::c_char,
                                            n: root::octave_idx_type);
    }
    impl Clone for string_vector {
        fn clone(&self) -> Self { *self }
    }
    impl string_vector {
        #[inline]
        pub unsafe fn sort(&mut self, make_uniq: bool)
         -> *mut root::string_vector {
            string_vector_sort(self, make_uniq)
        }
        #[inline]
        pub unsafe fn uniq(&mut self) -> *mut root::string_vector {
            string_vector_uniq(self)
        }
        #[inline]
        pub unsafe fn append(&mut self, s: *const root::std::string)
         -> *mut root::string_vector {
            string_vector_append(self, s)
        }
        #[inline]
        pub unsafe fn append1(&mut self, sv: *const root::string_vector)
         -> *mut root::string_vector {
            string_vector_append1(self, sv)
        }
        #[inline]
        pub unsafe fn join(&self, sep: *const root::std::string)
         -> root::std::string {
            string_vector_join(self, sep)
        }
        #[inline]
        pub unsafe fn c_str_vec(&self) -> *mut *mut ::std::os::raw::c_char {
            string_vector_c_str_vec(self)
        }
        #[inline]
        pub unsafe fn std_list(&self) -> [u64; 2usize] {
            string_vector_std_list(self)
        }
        #[inline]
        pub unsafe fn delete_c_str_vec(arg1:
                                           *const *const ::std::os::raw::c_char) {
            string_vector_delete_c_str_vec(arg1)
        }
        #[inline]
        pub unsafe fn list_in_columns(&self, arg1: *mut root::std::ostream,
                                      width: ::std::os::raw::c_int,
                                      prefix: *const root::std::string)
         -> *mut root::std::ostream {
            string_vector_list_in_columns(self, arg1, width, prefix)
        }
        #[inline]
        pub unsafe fn new(s: *const *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            string_vector_string_vector(&mut __bindgen_tmp, s);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(s: *const *const ::std::os::raw::c_char,
                           n: root::octave_idx_type) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            string_vector_string_vector1(&mut __bindgen_tmp, s, n);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "_Z3mincRK11charNDArray"]
        pub fn min(d: ::std::os::raw::c_char, m: *const root::charNDArray)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK11charNDArrayc"]
        pub fn min1(m: *const root::charNDArray, d: ::std::os::raw::c_char)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK11charNDArrayS1_"]
        pub fn min2(a: *const root::charNDArray, b: *const root::charNDArray)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxcRK11charNDArray"]
        pub fn max(d: ::std::os::raw::c_char, m: *const root::charNDArray)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK11charNDArrayc"]
        pub fn max1(m: *const root::charNDArray, d: ::std::os::raw::c_char)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK11charNDArrayS1_"]
        pub fn max2(a: *const root::charNDArray, b: *const root::charNDArray)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK11charNDArrayRKc"]
        pub fn mx_el_lt4(arg1: *const root::charNDArray,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK11charNDArrayRKc"]
        pub fn mx_el_le4(arg1: *const root::charNDArray,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK11charNDArrayRKc"]
        pub fn mx_el_ge4(arg1: *const root::charNDArray,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK11charNDArrayRKc"]
        pub fn mx_el_gt4(arg1: *const root::charNDArray,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK11charNDArrayRKc"]
        pub fn mx_el_eq4(arg1: *const root::charNDArray,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK11charNDArrayRKc"]
        pub fn mx_el_ne4(arg1: *const root::charNDArray,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK11charNDArrayRKc"]
        pub fn mx_el_and6(arg1: *const root::charNDArray,
                          arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK11charNDArrayRKc"]
        pub fn mx_el_or6(arg1: *const root::charNDArray,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK11charNDArrayRKc"]
        pub fn mx_el_not_and2(arg1: *const root::charNDArray,
                              arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK11charNDArrayRKc"]
        pub fn mx_el_not_or2(arg1: *const root::charNDArray,
                             arg2: *const ::std::os::raw::c_char)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKcRK11charNDArray"]
        pub fn mx_el_lt5(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKcRK11charNDArray"]
        pub fn mx_el_le5(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKcRK11charNDArray"]
        pub fn mx_el_ge5(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKcRK11charNDArray"]
        pub fn mx_el_gt5(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKcRK11charNDArray"]
        pub fn mx_el_eq5(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKcRK11charNDArray"]
        pub fn mx_el_ne5(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKcRK11charNDArray"]
        pub fn mx_el_and7(arg1: *const ::std::os::raw::c_char,
                          arg2: *const root::charNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKcRK11charNDArray"]
        pub fn mx_el_or7(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKcRK11charNDArray"]
        pub fn mx_el_and_not2(arg1: *const ::std::os::raw::c_char,
                              arg2: *const root::charNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKcRK11charNDArray"]
        pub fn mx_el_or_not2(arg1: *const ::std::os::raw::c_char,
                             arg2: *const root::charNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK11charNDArrayS1_"]
        pub fn mx_el_lt6(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK11charNDArrayS1_"]
        pub fn mx_el_le6(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK11charNDArrayS1_"]
        pub fn mx_el_ge6(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK11charNDArrayS1_"]
        pub fn mx_el_gt6(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK11charNDArrayS1_"]
        pub fn mx_el_eq6(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK11charNDArrayS1_"]
        pub fn mx_el_ne6(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK11charNDArrayS1_"]
        pub fn mx_el_and8(arg1: *const root::charNDArray,
                          arg2: *const root::charNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK11charNDArrayS1_"]
        pub fn mx_el_or8(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK11charNDArrayS1_"]
        pub fn mx_el_and_not3(arg1: *const root::charNDArray,
                              arg2: *const root::charNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK11charNDArrayS1_"]
        pub fn mx_el_or_not3(arg1: *const root::charNDArray,
                             arg2: *const root::charNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK11charNDArrayS1_"]
        pub fn mx_el_not_and3(arg1: *const root::charNDArray,
                              arg2: *const root::charNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK11charNDArrayS1_"]
        pub fn mx_el_not_or3(arg1: *const root::charNDArray,
                             arg2: *const root::charNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK11charNDArrayS1_"]
        pub fn bsxfun_eq(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK11charNDArrayS1_"]
        pub fn bsxfun_ne(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK11charNDArrayS1_"]
        pub fn bsxfun_lt(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK11charNDArrayS1_"]
        pub fn bsxfun_le(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK11charNDArrayS1_"]
        pub fn bsxfun_gt(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK11charNDArrayS1_"]
        pub fn bsxfun_ge(arg1: *const root::charNDArray,
                         arg2: *const root::charNDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10charMatrixRKc"]
        pub fn mx_el_lt7(arg1: *const root::charMatrix,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10charMatrixRKc"]
        pub fn mx_el_le7(arg1: *const root::charMatrix,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10charMatrixRKc"]
        pub fn mx_el_ge7(arg1: *const root::charMatrix,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10charMatrixRKc"]
        pub fn mx_el_gt7(arg1: *const root::charMatrix,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10charMatrixRKc"]
        pub fn mx_el_eq7(arg1: *const root::charMatrix,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10charMatrixRKc"]
        pub fn mx_el_ne7(arg1: *const root::charMatrix,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10charMatrixRKc"]
        pub fn mx_el_and9(arg1: *const root::charMatrix,
                          arg2: *const ::std::os::raw::c_char)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10charMatrixRKc"]
        pub fn mx_el_or9(arg1: *const root::charMatrix,
                         arg2: *const ::std::os::raw::c_char)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKcRK10charMatrix"]
        pub fn mx_el_lt8(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKcRK10charMatrix"]
        pub fn mx_el_le8(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKcRK10charMatrix"]
        pub fn mx_el_ge8(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKcRK10charMatrix"]
        pub fn mx_el_gt8(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKcRK10charMatrix"]
        pub fn mx_el_eq8(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKcRK10charMatrix"]
        pub fn mx_el_ne8(arg1: *const ::std::os::raw::c_char,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKcRK10charMatrix"]
        pub fn mx_el_and10(arg1: *const ::std::os::raw::c_char,
                           arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKcRK10charMatrix"]
        pub fn mx_el_or10(arg1: *const ::std::os::raw::c_char,
                          arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10charMatrixS1_"]
        pub fn mx_el_lt9(arg1: *const root::charMatrix,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10charMatrixS1_"]
        pub fn mx_el_le9(arg1: *const root::charMatrix,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10charMatrixS1_"]
        pub fn mx_el_ge9(arg1: *const root::charMatrix,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10charMatrixS1_"]
        pub fn mx_el_gt9(arg1: *const root::charMatrix,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10charMatrixS1_"]
        pub fn mx_el_eq9(arg1: *const root::charMatrix,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10charMatrixS1_"]
        pub fn mx_el_ne9(arg1: *const root::charMatrix,
                         arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10charMatrixS1_"]
        pub fn mx_el_and11(arg1: *const root::charMatrix,
                           arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10charMatrixS1_"]
        pub fn mx_el_or11(arg1: *const root::charMatrix,
                          arg2: *const root::charMatrix) -> root::boolMatrix;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct intNDArray {
    }
    extern "C" {
        #[link_name = "_Z4realRK14ComplexNDArray"]
        pub fn real(a: *const root::ComplexNDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z4imagRK14ComplexNDArray"]
        pub fn imag(a: *const root::ComplexNDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z3mindRK7NDArray"]
        pub fn min3(d: f64, m: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK7NDArrayd"]
        pub fn min4(m: *const root::NDArray, d: f64) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK7NDArrayS1_"]
        pub fn min5(a: *const root::NDArray, b: *const root::NDArray)
         -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxdRK7NDArray"]
        pub fn max3(d: f64, m: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK7NDArrayd"]
        pub fn max4(m: *const root::NDArray, d: f64) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK7NDArrayS1_"]
        pub fn max5(a: *const root::NDArray, b: *const root::NDArray)
         -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRKd"]
        pub fn mx_el_lt10(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRKd"]
        pub fn mx_el_le10(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRKd"]
        pub fn mx_el_ge10(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRKd"]
        pub fn mx_el_gt10(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRKd"]
        pub fn mx_el_eq10(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRKd"]
        pub fn mx_el_ne10(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRKd"]
        pub fn mx_el_and12(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRKd"]
        pub fn mx_el_or12(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRKd"]
        pub fn mx_el_not_and4(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRKd"]
        pub fn mx_el_not_or4(arg1: *const root::NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK7NDArray"]
        pub fn mx_el_lt11(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK7NDArray"]
        pub fn mx_el_le11(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK7NDArray"]
        pub fn mx_el_ge11(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK7NDArray"]
        pub fn mx_el_gt11(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK7NDArray"]
        pub fn mx_el_eq11(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK7NDArray"]
        pub fn mx_el_ne11(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK7NDArray"]
        pub fn mx_el_and13(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK7NDArray"]
        pub fn mx_el_or13(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK7NDArray"]
        pub fn mx_el_and_not4(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK7NDArray"]
        pub fn mx_el_or_not4(arg1: *const f64, arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayS1_"]
        pub fn mx_el_lt12(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayS1_"]
        pub fn mx_el_le12(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayS1_"]
        pub fn mx_el_ge12(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayS1_"]
        pub fn mx_el_gt12(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayS1_"]
        pub fn mx_el_eq12(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayS1_"]
        pub fn mx_el_ne12(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayS1_"]
        pub fn mx_el_and14(arg1: *const root::NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayS1_"]
        pub fn mx_el_or14(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK7NDArrayS1_"]
        pub fn mx_el_and_not5(arg1: *const root::NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK7NDArrayS1_"]
        pub fn mx_el_or_not5(arg1: *const root::NDArray,
                             arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayS1_"]
        pub fn mx_el_not_and5(arg1: *const root::NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayS1_"]
        pub fn mx_el_not_or5(arg1: *const root::NDArray,
                             arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK7NDArrayS1_"]
        pub fn bsxfun_add(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK7NDArrayS1_"]
        pub fn bsxfun_sub(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK7NDArrayS1_"]
        pub fn bsxfun_mul(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK7NDArrayS1_"]
        pub fn bsxfun_div(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK7NDArrayS1_"]
        pub fn bsxfun_pow(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK7NDArrayS1_"]
        pub fn bsxfun_min(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK7NDArrayS1_"]
        pub fn bsxfun_max(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK7NDArrayS1_"]
        pub fn bsxfun_eq1(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK7NDArrayS1_"]
        pub fn bsxfun_ne1(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK7NDArrayS1_"]
        pub fn bsxfun_lt1(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK7NDArrayS1_"]
        pub fn bsxfun_le1(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK7NDArrayS1_"]
        pub fn bsxfun_gt1(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK7NDArrayS1_"]
        pub fn bsxfun_ge1(arg1: *const root::NDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK14ComplexNDArrayRK7NDArray"]
        pub fn bsxfun_pow1(arg1: *const root::ComplexNDArray,
                           arg2: *const root::NDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK7NDArrayRK14ComplexNDArray"]
        pub fn bsxfun_pow2(arg1: *const root::NDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct DiagArray2 {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MDiagArray2 {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct base_det {
    }
    pub type DET = u8;
    pub type FloatDET = u8;
    pub type ComplexDET = u8;
    pub type FloatComplexDET = u8;
    extern "C" {
        #[link_name = "_Z4realRK13ComplexMatrix"]
        pub fn real1(a: *const root::ComplexMatrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z4imagRK13ComplexMatrix"]
        pub fn imag1(a: *const root::ComplexMatrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z6Givensdd"]
        pub fn Givens(arg1: f64, arg2: f64) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z9SylvesterRK6MatrixS1_S1_"]
        pub fn Sylvester(arg1: *const root::Matrix, arg2: *const root::Matrix,
                         arg3: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z5xgemmRK6MatrixS1_15blas_trans_typeS2_"]
        pub fn xgemm(a: *const root::Matrix, b: *const root::Matrix,
                     transa: root::blas_trans_type,
                     transb: root::blas_trans_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z3mindRK6Matrix"]
        pub fn min6(d: f64, m: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK6Matrixd"]
        pub fn min7(m: *const root::Matrix, d: f64) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK6MatrixS1_"]
        pub fn min8(a: *const root::Matrix, b: *const root::Matrix)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z3maxdRK6Matrix"]
        pub fn max6(d: f64, m: *const root::Matrix) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK6Matrixd"]
        pub fn max7(m: *const root::Matrix, d: f64) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK6MatrixS1_"]
        pub fn max8(a: *const root::Matrix, b: *const root::Matrix)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z8linspaceRK12ColumnVectorS1_i"]
        pub fn linspace(x1: *const root::ColumnVector,
                        x2: *const root::ColumnVector,
                        n: root::octave_idx_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK6MatrixRKd"]
        pub fn mx_el_lt13(arg1: *const root::Matrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK6MatrixRKd"]
        pub fn mx_el_le13(arg1: *const root::Matrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK6MatrixRKd"]
        pub fn mx_el_ge13(arg1: *const root::Matrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK6MatrixRKd"]
        pub fn mx_el_gt13(arg1: *const root::Matrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK6MatrixRKd"]
        pub fn mx_el_eq13(arg1: *const root::Matrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK6MatrixRKd"]
        pub fn mx_el_ne13(arg1: *const root::Matrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK6MatrixRKd"]
        pub fn mx_el_and15(arg1: *const root::Matrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK6MatrixRKd"]
        pub fn mx_el_or15(arg1: *const root::Matrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK6Matrix"]
        pub fn mx_el_lt14(arg1: *const f64, arg2: *const root::Matrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK6Matrix"]
        pub fn mx_el_le14(arg1: *const f64, arg2: *const root::Matrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK6Matrix"]
        pub fn mx_el_ge14(arg1: *const f64, arg2: *const root::Matrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK6Matrix"]
        pub fn mx_el_gt14(arg1: *const f64, arg2: *const root::Matrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK6Matrix"]
        pub fn mx_el_eq14(arg1: *const f64, arg2: *const root::Matrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK6Matrix"]
        pub fn mx_el_ne14(arg1: *const f64, arg2: *const root::Matrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK6Matrix"]
        pub fn mx_el_and16(arg1: *const f64, arg2: *const root::Matrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK6Matrix"]
        pub fn mx_el_or16(arg1: *const f64, arg2: *const root::Matrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK6MatrixS1_"]
        pub fn mx_el_lt15(arg1: *const root::Matrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK6MatrixS1_"]
        pub fn mx_el_le15(arg1: *const root::Matrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK6MatrixS1_"]
        pub fn mx_el_ge15(arg1: *const root::Matrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK6MatrixS1_"]
        pub fn mx_el_gt15(arg1: *const root::Matrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK6MatrixS1_"]
        pub fn mx_el_eq15(arg1: *const root::Matrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK6MatrixS1_"]
        pub fn mx_el_ne15(arg1: *const root::Matrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK6MatrixS1_"]
        pub fn mx_el_and17(arg1: *const root::Matrix,
                           arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK6MatrixS1_"]
        pub fn mx_el_or17(arg1: *const root::Matrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z4conjRK14ComplexNDArray"]
        pub fn conj(a: *const root::ComplexNDArray) -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minSt7complexIdERK14ComplexNDArray"]
        pub fn min9(d: root::Complex, m: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK14ComplexNDArraySt7complexIdE"]
        pub fn min10(m: *const root::ComplexNDArray, d: root::Complex)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK14ComplexNDArrayS1_"]
        pub fn min11(a: *const root::ComplexNDArray,
                     b: *const root::ComplexNDArray) -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxSt7complexIdERK14ComplexNDArray"]
        pub fn max9(d: root::Complex, m: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK14ComplexNDArraySt7complexIdE"]
        pub fn max10(m: *const root::ComplexNDArray, d: root::Complex)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK14ComplexNDArrayS1_"]
        pub fn max11(a: *const root::ComplexNDArray,
                     b: *const root::ComplexNDArray) -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_lt16(arg1: *const root::ComplexNDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_le16(arg1: *const root::ComplexNDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_ge16(arg1: *const root::ComplexNDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_gt16(arg1: *const root::ComplexNDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_eq16(arg1: *const root::ComplexNDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_ne16(arg1: *const root::ComplexNDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_and18(arg1: *const root::ComplexNDArray,
                           arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_or18(arg1: *const root::ComplexNDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_not_and6(arg1: *const root::ComplexNDArray,
                              arg2: *const root::Complex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK14ComplexNDArrayRKSt7complexIdE"]
        pub fn mx_el_not_or6(arg1: *const root::ComplexNDArray,
                             arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_lt17(arg1: *const root::Complex,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_le17(arg1: *const root::Complex,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_ge17(arg1: *const root::Complex,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_gt17(arg1: *const root::Complex,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_eq17(arg1: *const root::Complex,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_ne17(arg1: *const root::Complex,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_and19(arg1: *const root::Complex,
                           arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_or19(arg1: *const root::Complex,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_and_not6(arg1: *const root::Complex,
                              arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKSt7complexIdERK14ComplexNDArray"]
        pub fn mx_el_or_not6(arg1: *const root::Complex,
                             arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK14ComplexNDArrayS1_"]
        pub fn mx_el_lt18(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK14ComplexNDArrayS1_"]
        pub fn mx_el_le18(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK14ComplexNDArrayS1_"]
        pub fn mx_el_ge18(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK14ComplexNDArrayS1_"]
        pub fn mx_el_gt18(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK14ComplexNDArrayS1_"]
        pub fn mx_el_eq18(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK14ComplexNDArrayS1_"]
        pub fn mx_el_ne18(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK14ComplexNDArrayS1_"]
        pub fn mx_el_and20(arg1: *const root::ComplexNDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK14ComplexNDArrayS1_"]
        pub fn mx_el_or20(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK14ComplexNDArrayS1_"]
        pub fn mx_el_and_not7(arg1: *const root::ComplexNDArray,
                              arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK14ComplexNDArrayS1_"]
        pub fn mx_el_or_not7(arg1: *const root::ComplexNDArray,
                             arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK14ComplexNDArrayS1_"]
        pub fn mx_el_not_and7(arg1: *const root::ComplexNDArray,
                              arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK14ComplexNDArrayS1_"]
        pub fn mx_el_not_or7(arg1: *const root::ComplexNDArray,
                             arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK14ComplexNDArrayS1_"]
        pub fn bsxfun_add1(arg1: *const root::ComplexNDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK14ComplexNDArrayS1_"]
        pub fn bsxfun_sub1(arg1: *const root::ComplexNDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK14ComplexNDArrayS1_"]
        pub fn bsxfun_mul1(arg1: *const root::ComplexNDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK14ComplexNDArrayS1_"]
        pub fn bsxfun_div1(arg1: *const root::ComplexNDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK14ComplexNDArrayS1_"]
        pub fn bsxfun_pow3(arg1: *const root::ComplexNDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK14ComplexNDArrayS1_"]
        pub fn bsxfun_min1(arg1: *const root::ComplexNDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK14ComplexNDArrayS1_"]
        pub fn bsxfun_max1(arg1: *const root::ComplexNDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK14ComplexNDArrayS1_"]
        pub fn bsxfun_eq2(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK14ComplexNDArrayS1_"]
        pub fn bsxfun_ne2(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK14ComplexNDArrayS1_"]
        pub fn bsxfun_lt2(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK14ComplexNDArrayS1_"]
        pub fn bsxfun_le2(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK14ComplexNDArrayS1_"]
        pub fn bsxfun_gt2(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK14ComplexNDArrayS1_"]
        pub fn bsxfun_ge2(arg1: *const root::ComplexNDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z4conjRK13ComplexMatrix"]
        pub fn conj1(a: *const root::ComplexMatrix) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z6GivensRKSt7complexIdES2_"]
        pub fn Givens1(arg1: *const root::Complex, arg2: *const root::Complex)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z9SylvesterRK13ComplexMatrixS1_S1_"]
        pub fn Sylvester1(arg1: *const root::ComplexMatrix,
                          arg2: *const root::ComplexMatrix,
                          arg3: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z5xgemmRK13ComplexMatrixS1_15blas_trans_typeS2_"]
        pub fn xgemm1(a: *const root::ComplexMatrix,
                      b: *const root::ComplexMatrix,
                      transa: root::blas_trans_type,
                      transb: root::blas_trans_type) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRKSt7complexIdERK13ComplexMatrix"]
        pub fn min12(c: *const root::Complex, m: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK13ComplexMatrixRKSt7complexIdE"]
        pub fn min13(m: *const root::ComplexMatrix, c: *const root::Complex)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK13ComplexMatrixS1_"]
        pub fn min14(a: *const root::ComplexMatrix,
                     b: *const root::ComplexMatrix) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRKSt7complexIdERK13ComplexMatrix"]
        pub fn max12(c: *const root::Complex, m: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK13ComplexMatrixRKSt7complexIdE"]
        pub fn max13(m: *const root::ComplexMatrix, c: *const root::Complex)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK13ComplexMatrixS1_"]
        pub fn max14(a: *const root::ComplexMatrix,
                     b: *const root::ComplexMatrix) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8linspaceRK19ComplexColumnVectorS1_i"]
        pub fn linspace1(x1: *const root::ComplexColumnVector,
                         x2: *const root::ComplexColumnVector,
                         n: root::octave_idx_type) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK13ComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_lt19(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK13ComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_le19(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK13ComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_ge19(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK13ComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_gt19(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK13ComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_eq19(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK13ComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_ne19(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK13ComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_and21(arg1: *const root::ComplexMatrix,
                           arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK13ComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_or21(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIdERK13ComplexMatrix"]
        pub fn mx_el_lt20(arg1: *const root::Complex,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIdERK13ComplexMatrix"]
        pub fn mx_el_le20(arg1: *const root::Complex,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIdERK13ComplexMatrix"]
        pub fn mx_el_ge20(arg1: *const root::Complex,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIdERK13ComplexMatrix"]
        pub fn mx_el_gt20(arg1: *const root::Complex,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIdERK13ComplexMatrix"]
        pub fn mx_el_eq20(arg1: *const root::Complex,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIdERK13ComplexMatrix"]
        pub fn mx_el_ne20(arg1: *const root::Complex,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIdERK13ComplexMatrix"]
        pub fn mx_el_and22(arg1: *const root::Complex,
                           arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIdERK13ComplexMatrix"]
        pub fn mx_el_or22(arg1: *const root::Complex,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK13ComplexMatrixS1_"]
        pub fn mx_el_lt21(arg1: *const root::ComplexMatrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK13ComplexMatrixS1_"]
        pub fn mx_el_le21(arg1: *const root::ComplexMatrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK13ComplexMatrixS1_"]
        pub fn mx_el_ge21(arg1: *const root::ComplexMatrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK13ComplexMatrixS1_"]
        pub fn mx_el_gt21(arg1: *const root::ComplexMatrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK13ComplexMatrixS1_"]
        pub fn mx_el_eq21(arg1: *const root::ComplexMatrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK13ComplexMatrixS1_"]
        pub fn mx_el_ne21(arg1: *const root::ComplexMatrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK13ComplexMatrixS1_"]
        pub fn mx_el_and23(arg1: *const root::ComplexMatrix,
                           arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK13ComplexMatrixS1_"]
        pub fn mx_el_or23(arg1: *const root::ComplexMatrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z4realRK19FloatComplexNDArray"]
        pub fn real2(a: *const root::FloatComplexNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z4imagRK19FloatComplexNDArray"]
        pub fn imag2(a: *const root::FloatComplexNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minfRK12FloatNDArray"]
        pub fn min15(d: f32, m: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK12FloatNDArrayf"]
        pub fn min16(m: *const root::FloatNDArray, d: f32)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK12FloatNDArrayS1_"]
        pub fn min17(a: *const root::FloatNDArray,
                     b: *const root::FloatNDArray) -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxfRK12FloatNDArray"]
        pub fn max15(d: f32, m: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK12FloatNDArrayf"]
        pub fn max16(m: *const root::FloatNDArray, d: f32)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK12FloatNDArrayS1_"]
        pub fn max17(a: *const root::FloatNDArray,
                     b: *const root::FloatNDArray) -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRKf"]
        pub fn mx_el_lt22(arg1: *const root::FloatNDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRKf"]
        pub fn mx_el_le22(arg1: *const root::FloatNDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRKf"]
        pub fn mx_el_ge22(arg1: *const root::FloatNDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRKf"]
        pub fn mx_el_gt22(arg1: *const root::FloatNDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRKf"]
        pub fn mx_el_eq22(arg1: *const root::FloatNDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRKf"]
        pub fn mx_el_ne22(arg1: *const root::FloatNDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRKf"]
        pub fn mx_el_and24(arg1: *const root::FloatNDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRKf"]
        pub fn mx_el_or24(arg1: *const root::FloatNDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRKf"]
        pub fn mx_el_not_and8(arg1: *const root::FloatNDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRKf"]
        pub fn mx_el_not_or8(arg1: *const root::FloatNDArray,
                             arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK12FloatNDArray"]
        pub fn mx_el_lt23(arg1: *const f32, arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK12FloatNDArray"]
        pub fn mx_el_le23(arg1: *const f32, arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK12FloatNDArray"]
        pub fn mx_el_ge23(arg1: *const f32, arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK12FloatNDArray"]
        pub fn mx_el_gt23(arg1: *const f32, arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK12FloatNDArray"]
        pub fn mx_el_eq23(arg1: *const f32, arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK12FloatNDArray"]
        pub fn mx_el_ne23(arg1: *const f32, arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK12FloatNDArray"]
        pub fn mx_el_and25(arg1: *const f32, arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK12FloatNDArray"]
        pub fn mx_el_or25(arg1: *const f32, arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK12FloatNDArray"]
        pub fn mx_el_and_not8(arg1: *const f32,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK12FloatNDArray"]
        pub fn mx_el_or_not8(arg1: *const f32,
                             arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayS1_"]
        pub fn mx_el_lt24(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayS1_"]
        pub fn mx_el_le24(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayS1_"]
        pub fn mx_el_ge24(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayS1_"]
        pub fn mx_el_gt24(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayS1_"]
        pub fn mx_el_eq24(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayS1_"]
        pub fn mx_el_ne24(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayS1_"]
        pub fn mx_el_and26(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayS1_"]
        pub fn mx_el_or26(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK12FloatNDArrayS1_"]
        pub fn mx_el_and_not9(arg1: *const root::FloatNDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK12FloatNDArrayS1_"]
        pub fn mx_el_or_not9(arg1: *const root::FloatNDArray,
                             arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayS1_"]
        pub fn mx_el_not_and9(arg1: *const root::FloatNDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayS1_"]
        pub fn mx_el_not_or9(arg1: *const root::FloatNDArray,
                             arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK12FloatNDArrayS1_"]
        pub fn bsxfun_add2(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK12FloatNDArrayS1_"]
        pub fn bsxfun_sub2(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK12FloatNDArrayS1_"]
        pub fn bsxfun_mul2(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK12FloatNDArrayS1_"]
        pub fn bsxfun_div2(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK12FloatNDArrayS1_"]
        pub fn bsxfun_pow4(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK12FloatNDArrayS1_"]
        pub fn bsxfun_min2(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK12FloatNDArrayS1_"]
        pub fn bsxfun_max2(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK12FloatNDArrayS1_"]
        pub fn bsxfun_eq3(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK12FloatNDArrayS1_"]
        pub fn bsxfun_ne3(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK12FloatNDArrayS1_"]
        pub fn bsxfun_lt3(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK12FloatNDArrayS1_"]
        pub fn bsxfun_le3(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK12FloatNDArrayS1_"]
        pub fn bsxfun_gt3(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK12FloatNDArrayS1_"]
        pub fn bsxfun_ge3(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn bsxfun_pow5(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn bsxfun_pow6(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z4realRK18FloatComplexMatrix"]
        pub fn real3(a: *const root::FloatComplexMatrix) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z4imagRK18FloatComplexMatrix"]
        pub fn imag3(a: *const root::FloatComplexMatrix) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z6Givensff"]
        pub fn Givens2(arg1: f32, arg2: f32) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z9SylvesterRK11FloatMatrixS1_S1_"]
        pub fn Sylvester2(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatMatrix,
                          arg3: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z5xgemmRK11FloatMatrixS1_15blas_trans_typeS2_"]
        pub fn xgemm2(a: *const root::FloatMatrix,
                      b: *const root::FloatMatrix,
                      transa: root::blas_trans_type,
                      transb: root::blas_trans_type) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minfRK11FloatMatrix"]
        pub fn min18(d: f32, m: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK11FloatMatrixf"]
        pub fn min19(m: *const root::FloatMatrix, d: f32)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK11FloatMatrixS1_"]
        pub fn min20(a: *const root::FloatMatrix, b: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxfRK11FloatMatrix"]
        pub fn max18(d: f32, m: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK11FloatMatrixf"]
        pub fn max19(m: *const root::FloatMatrix, d: f32)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK11FloatMatrixS1_"]
        pub fn max20(a: *const root::FloatMatrix, b: *const root::FloatMatrix)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z8linspaceRK17FloatColumnVectorS1_i"]
        pub fn linspace2(x1: *const root::FloatColumnVector,
                         x2: *const root::FloatColumnVector,
                         n: root::octave_idx_type) -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK11FloatMatrixRKf"]
        pub fn mx_el_lt25(arg1: *const root::FloatMatrix, arg2: *const f32)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK11FloatMatrixRKf"]
        pub fn mx_el_le25(arg1: *const root::FloatMatrix, arg2: *const f32)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK11FloatMatrixRKf"]
        pub fn mx_el_ge25(arg1: *const root::FloatMatrix, arg2: *const f32)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK11FloatMatrixRKf"]
        pub fn mx_el_gt25(arg1: *const root::FloatMatrix, arg2: *const f32)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK11FloatMatrixRKf"]
        pub fn mx_el_eq25(arg1: *const root::FloatMatrix, arg2: *const f32)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK11FloatMatrixRKf"]
        pub fn mx_el_ne25(arg1: *const root::FloatMatrix, arg2: *const f32)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK11FloatMatrixRKf"]
        pub fn mx_el_and27(arg1: *const root::FloatMatrix, arg2: *const f32)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK11FloatMatrixRKf"]
        pub fn mx_el_or27(arg1: *const root::FloatMatrix, arg2: *const f32)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK11FloatMatrix"]
        pub fn mx_el_lt26(arg1: *const f32, arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK11FloatMatrix"]
        pub fn mx_el_le26(arg1: *const f32, arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK11FloatMatrix"]
        pub fn mx_el_ge26(arg1: *const f32, arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK11FloatMatrix"]
        pub fn mx_el_gt26(arg1: *const f32, arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK11FloatMatrix"]
        pub fn mx_el_eq26(arg1: *const f32, arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK11FloatMatrix"]
        pub fn mx_el_ne26(arg1: *const f32, arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK11FloatMatrix"]
        pub fn mx_el_and28(arg1: *const f32, arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK11FloatMatrix"]
        pub fn mx_el_or28(arg1: *const f32, arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK11FloatMatrixS1_"]
        pub fn mx_el_lt27(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK11FloatMatrixS1_"]
        pub fn mx_el_le27(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK11FloatMatrixS1_"]
        pub fn mx_el_ge27(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK11FloatMatrixS1_"]
        pub fn mx_el_gt27(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK11FloatMatrixS1_"]
        pub fn mx_el_eq27(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK11FloatMatrixS1_"]
        pub fn mx_el_ne27(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK11FloatMatrixS1_"]
        pub fn mx_el_and29(arg1: *const root::FloatMatrix,
                           arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK11FloatMatrixS1_"]
        pub fn mx_el_or29(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z4conjRK19FloatComplexNDArray"]
        pub fn conj2(a: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minSt7complexIfERK19FloatComplexNDArray"]
        pub fn min21(d: root::FloatComplex,
                     m: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK19FloatComplexNDArraySt7complexIfE"]
        pub fn min22(m: *const root::FloatComplexNDArray,
                     d: root::FloatComplex) -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK19FloatComplexNDArrayS1_"]
        pub fn min23(a: *const root::FloatComplexNDArray,
                     b: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxSt7complexIfERK19FloatComplexNDArray"]
        pub fn max21(d: root::FloatComplex,
                     m: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK19FloatComplexNDArraySt7complexIfE"]
        pub fn max22(m: *const root::FloatComplexNDArray,
                     d: root::FloatComplex) -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK19FloatComplexNDArrayS1_"]
        pub fn max23(a: *const root::FloatComplexNDArray,
                     b: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_lt28(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_le28(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_ge28(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_gt28(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_eq28(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_ne28(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_and30(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_or30(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_not_and10(arg1: *const root::FloatComplexNDArray,
                               arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK19FloatComplexNDArrayRKSt7complexIfE"]
        pub fn mx_el_not_or10(arg1: *const root::FloatComplexNDArray,
                              arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_lt29(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_le29(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_ge29(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_gt29(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_eq29(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_ne29(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_and31(arg1: *const root::FloatComplex,
                           arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_or31(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_and_not10(arg1: *const root::FloatComplex,
                               arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRKSt7complexIfERK19FloatComplexNDArray"]
        pub fn mx_el_or_not10(arg1: *const root::FloatComplex,
                              arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_lt30(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_le30(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_ge30(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_gt30(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_eq30(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_ne30(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_and32(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_or32(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_and_not11(arg1: *const root::FloatComplexNDArray,
                               arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_or_not11(arg1: *const root::FloatComplexNDArray,
                              arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_not_and11(arg1: *const root::FloatComplexNDArray,
                               arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK19FloatComplexNDArrayS1_"]
        pub fn mx_el_not_or11(arg1: *const root::FloatComplexNDArray,
                              arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_add3(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_sub3(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_mul3(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_div3(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_pow7(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_min3(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_max3(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_eq4(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_ne4(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_lt4(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_le4(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_gt4(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK19FloatComplexNDArrayS1_"]
        pub fn bsxfun_ge4(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z4conjRK18FloatComplexMatrix"]
        pub fn conj3(a: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z6GivensRKSt7complexIfES2_"]
        pub fn Givens3(arg1: *const root::FloatComplex,
                       arg2: *const root::FloatComplex)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z9SylvesterRK18FloatComplexMatrixS1_S1_"]
        pub fn Sylvester3(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplexMatrix,
                          arg3: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z5xgemmRK18FloatComplexMatrixS1_15blas_trans_typeS2_"]
        pub fn xgemm3(a: *const root::FloatComplexMatrix,
                      b: *const root::FloatComplexMatrix,
                      transa: root::blas_trans_type,
                      transb: root::blas_trans_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn min24(c: *const root::FloatComplex,
                     m: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn min25(m: *const root::FloatComplexMatrix,
                     c: *const root::FloatComplex)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK18FloatComplexMatrixS1_"]
        pub fn min26(a: *const root::FloatComplexMatrix,
                     b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn max24(c: *const root::FloatComplex,
                     m: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn max25(m: *const root::FloatComplexMatrix,
                     c: *const root::FloatComplex)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK18FloatComplexMatrixS1_"]
        pub fn max26(a: *const root::FloatComplexMatrix,
                     b: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8linspaceRK24FloatComplexColumnVectorS1_i"]
        pub fn linspace3(x1: *const root::FloatComplexColumnVector,
                         x2: *const root::FloatComplexColumnVector,
                         n: root::octave_idx_type)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn mx_el_lt31(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn mx_el_le31(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn mx_el_ge31(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn mx_el_gt31(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn mx_el_eq31(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn mx_el_ne31(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn mx_el_and33(arg1: *const root::FloatComplexMatrix,
                           arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK18FloatComplexMatrixRKSt7complexIfE"]
        pub fn mx_el_or33(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn mx_el_lt32(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn mx_el_le32(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn mx_el_ge32(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn mx_el_gt32(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn mx_el_eq32(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn mx_el_ne32(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn mx_el_and34(arg1: *const root::FloatComplex,
                           arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIfERK18FloatComplexMatrix"]
        pub fn mx_el_or34(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK18FloatComplexMatrixS1_"]
        pub fn mx_el_lt33(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK18FloatComplexMatrixS1_"]
        pub fn mx_el_le33(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK18FloatComplexMatrixS1_"]
        pub fn mx_el_ge33(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK18FloatComplexMatrixS1_"]
        pub fn mx_el_gt33(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK18FloatComplexMatrixS1_"]
        pub fn mx_el_eq33(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK18FloatComplexMatrixS1_"]
        pub fn mx_el_ne33(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK18FloatComplexMatrixS1_"]
        pub fn mx_el_and35(arg1: *const root::FloatComplexMatrix,
                           arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK18FloatComplexMatrixS1_"]
        pub fn mx_el_or35(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z4realRK19ComplexColumnVector"]
        pub fn real4(a: *const root::ComplexColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_Z4imagRK19ComplexColumnVector"]
        pub fn imag4(a: *const root::ComplexColumnVector)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_Z4realRK24FloatComplexColumnVector"]
        pub fn real5(a: *const root::FloatComplexColumnVector)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_Z4imagRK24FloatComplexColumnVector"]
        pub fn imag5(a: *const root::FloatComplexColumnVector)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name = "_Z8linspaceddi"]
        pub fn linspace4(x1: f64, x2: f64, n: root::octave_idx_type)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_Z8linspaceRKSt7complexIdES2_i"]
        pub fn linspace5(x1: *const root::Complex, x2: *const root::Complex,
                         n: root::octave_idx_type) -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_Z8linspaceffi"]
        pub fn linspace6(x1: f32, x2: f32, n: root::octave_idx_type)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_Z8linspaceRKSt7complexIfES2_i"]
        pub fn linspace7(x1: *const root::FloatComplex,
                         x2: *const root::FloatComplex,
                         n: root::octave_idx_type)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_Z4realRK17ComplexDiagMatrix"]
        pub fn real6(a: *const root::ComplexDiagMatrix) -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_Z4imagRK17ComplexDiagMatrix"]
        pub fn imag6(a: *const root::ComplexDiagMatrix) -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_Z4conjRK17ComplexDiagMatrix"]
        pub fn conj4(a: *const root::ComplexDiagMatrix)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_Z4realRK22FloatComplexDiagMatrix"]
        pub fn real7(a: *const root::FloatComplexDiagMatrix)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_Z4imagRK22FloatComplexDiagMatrix"]
        pub fn imag7(a: *const root::FloatComplexDiagMatrix)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_Z4conjRK22FloatComplexDiagMatrix"]
        pub fn conj5(a: *const root::FloatComplexDiagMatrix)
         -> root::FloatComplexDiagMatrix;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct SparseBoolMatrix {
        pub _bindgen_opaque_blob: [u64; 3usize],
    }
    pub type SparseBoolMatrix_dense_matrix_type = [u64; 5usize];
    extern "C" {
        #[link_name = "_ZN16SparseBoolMatrix6insertERKS_ii"]
        pub fn SparseBoolMatrix_insert(this: *mut root::SparseBoolMatrix,
                                       a: *const root::SparseBoolMatrix,
                                       r: root::octave_idx_type,
                                       c: root::octave_idx_type)
         -> *mut root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZN16SparseBoolMatrix6insertERKS_RK5ArrayIiE"]
        pub fn SparseBoolMatrix_insert1(this: *mut root::SparseBoolMatrix,
                                        a: *const root::SparseBoolMatrix,
                                        indx: *const [u64; 5usize])
         -> *mut root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZN16SparseBoolMatrix6concatERKS_RK5ArrayIiE"]
        pub fn SparseBoolMatrix_concat(this: *mut root::SparseBoolMatrix,
                                       rb: *const root::SparseBoolMatrix,
                                       ra_idx: *const [u64; 5usize])
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix4diagEi"]
        pub fn SparseBoolMatrix_diag(this: *const root::SparseBoolMatrix,
                                     k: root::octave_idx_type)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix12matrix_valueEv"]
        pub fn SparseBoolMatrix_matrix_value(this:
                                                 *const root::SparseBoolMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix7squeezeEv"]
        pub fn SparseBoolMatrix_squeeze(this: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix5indexERK10idx_vectorb"]
        pub fn SparseBoolMatrix_index(this: *const root::SparseBoolMatrix,
                                      i: *const root::idx_vector,
                                      resize_ok: bool)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix5indexERK10idx_vectorS2_b"]
        pub fn SparseBoolMatrix_index1(this: *const root::SparseBoolMatrix,
                                       i: *const root::idx_vector,
                                       j: *const root::idx_vector,
                                       resize_ok: bool)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix7reshapeERK10dim_vector"]
        pub fn SparseBoolMatrix_reshape(this: *const root::SparseBoolMatrix,
                                        new_dims: *const root::dim_vector)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix7permuteERK5ArrayIiEb"]
        pub fn SparseBoolMatrix_permute(this: *const root::SparseBoolMatrix,
                                        vec: *const [u64; 5usize], inv: bool)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix8ipermuteERK5ArrayIiE"]
        pub fn SparseBoolMatrix_ipermute(this: *const root::SparseBoolMatrix,
                                         vec: *const [u64; 5usize])
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix3allEi"]
        pub fn SparseBoolMatrix_all(this: *const root::SparseBoolMatrix,
                                    dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix3anyEi"]
        pub fn SparseBoolMatrix_any(this: *const root::SparseBoolMatrix,
                                    dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK16SparseBoolMatrix3sumEi"]
        pub fn SparseBoolMatrix_sum(this: *const root::SparseBoolMatrix,
                                    dim: ::std::os::raw::c_int)
         -> root::SparseMatrix;
    }
    impl Clone for SparseBoolMatrix {
        fn clone(&self) -> Self { *self }
    }
    impl SparseBoolMatrix {
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::SparseBoolMatrix,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type)
         -> *mut root::SparseBoolMatrix {
            SparseBoolMatrix_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::SparseBoolMatrix,
                              indx: *const [u64; 5usize])
         -> *mut root::SparseBoolMatrix {
            SparseBoolMatrix_insert1(self, a, indx)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::SparseBoolMatrix,
                             ra_idx: *const [u64; 5usize])
         -> root::SparseBoolMatrix {
            SparseBoolMatrix_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type)
         -> root::SparseBoolMatrix {
            SparseBoolMatrix_diag(self, k)
        }
        #[inline]
        pub unsafe fn matrix_value(&self) -> root::boolMatrix {
            SparseBoolMatrix_matrix_value(self)
        }
        #[inline]
        pub unsafe fn squeeze(&self) -> root::SparseBoolMatrix {
            SparseBoolMatrix_squeeze(self)
        }
        #[inline]
        pub unsafe fn index(&self, i: *const root::idx_vector,
                            resize_ok: bool) -> root::SparseBoolMatrix {
            SparseBoolMatrix_index(self, i, resize_ok)
        }
        #[inline]
        pub unsafe fn index1(&self, i: *const root::idx_vector,
                             j: *const root::idx_vector, resize_ok: bool)
         -> root::SparseBoolMatrix {
            SparseBoolMatrix_index1(self, i, j, resize_ok)
        }
        #[inline]
        pub unsafe fn reshape(&self, new_dims: *const root::dim_vector)
         -> root::SparseBoolMatrix {
            SparseBoolMatrix_reshape(self, new_dims)
        }
        #[inline]
        pub unsafe fn permute(&self, vec: *const [u64; 5usize], inv: bool)
         -> root::SparseBoolMatrix {
            SparseBoolMatrix_permute(self, vec, inv)
        }
        #[inline]
        pub unsafe fn ipermute(&self, vec: *const [u64; 5usize])
         -> root::SparseBoolMatrix {
            SparseBoolMatrix_ipermute(self, vec)
        }
        #[inline]
        pub unsafe fn all(&self, dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix {
            SparseBoolMatrix_all(self, dim)
        }
        #[inline]
        pub unsafe fn any(&self, dim: ::std::os::raw::c_int)
         -> root::SparseBoolMatrix {
            SparseBoolMatrix_any(self, dim)
        }
        #[inline]
        pub unsafe fn sum(&self, dim: ::std::os::raw::c_int)
         -> root::SparseMatrix {
            SparseBoolMatrix_sum(self, dim)
        }
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK16SparseBoolMatrixRKb"]
        pub fn mx_el_eq34(arg1: *const root::SparseBoolMatrix,
                          arg2: *const bool) -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK16SparseBoolMatrixRKb"]
        pub fn mx_el_ne34(arg1: *const root::SparseBoolMatrix,
                          arg2: *const bool) -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK16SparseBoolMatrixRKb"]
        pub fn mx_el_and36(arg1: *const root::SparseBoolMatrix,
                           arg2: *const bool) -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK16SparseBoolMatrixRKb"]
        pub fn mx_el_or36(arg1: *const root::SparseBoolMatrix,
                          arg2: *const bool) -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKbRK16SparseBoolMatrix"]
        pub fn mx_el_eq35(arg1: *const bool,
                          arg2: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKbRK16SparseBoolMatrix"]
        pub fn mx_el_ne35(arg1: *const bool,
                          arg2: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKbRK16SparseBoolMatrix"]
        pub fn mx_el_and37(arg1: *const bool,
                           arg2: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKbRK16SparseBoolMatrix"]
        pub fn mx_el_or37(arg1: *const bool,
                          arg2: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK16SparseBoolMatrixS1_"]
        pub fn mx_el_eq36(arg1: *const root::SparseBoolMatrix,
                          arg2: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK16SparseBoolMatrixS1_"]
        pub fn mx_el_ne36(arg1: *const root::SparseBoolMatrix,
                          arg2: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK16SparseBoolMatrixS1_"]
        pub fn mx_el_and38(arg1: *const root::SparseBoolMatrix,
                           arg2: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK16SparseBoolMatrixS1_"]
        pub fn mx_el_or38(arg1: *const root::SparseBoolMatrix,
                          arg2: *const root::SparseBoolMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z4realRK19SparseComplexMatrix"]
        pub fn real8(a: *const root::SparseComplexMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_Z4imagRK19SparseComplexMatrix"]
        pub fn imag8(a: *const root::SparseComplexMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mul_transRK6MatrixRK12SparseMatrix"]
        pub fn mul_trans(a: *const root::Matrix, b: *const root::SparseMatrix)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z9trans_mulRK12SparseMatrixRK6Matrix"]
        pub fn trans_mul(a: *const root::SparseMatrix, b: *const root::Matrix)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z3mindRK12SparseMatrix"]
        pub fn min27(d: f64, m: *const root::SparseMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK12SparseMatrixd"]
        pub fn min28(m: *const root::SparseMatrix, d: f64)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK12SparseMatrixS1_"]
        pub fn min29(a: *const root::SparseMatrix,
                     b: *const root::SparseMatrix) -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxdRK12SparseMatrix"]
        pub fn max27(d: f64, m: *const root::SparseMatrix)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK12SparseMatrixd"]
        pub fn max28(m: *const root::SparseMatrix, d: f64)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK12SparseMatrixS1_"]
        pub fn max29(a: *const root::SparseMatrix,
                     b: *const root::SparseMatrix) -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12SparseMatrixRKd"]
        pub fn mx_el_lt34(arg1: *const root::SparseMatrix, arg2: *const f64)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12SparseMatrixRKd"]
        pub fn mx_el_le34(arg1: *const root::SparseMatrix, arg2: *const f64)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12SparseMatrixRKd"]
        pub fn mx_el_ge34(arg1: *const root::SparseMatrix, arg2: *const f64)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12SparseMatrixRKd"]
        pub fn mx_el_gt34(arg1: *const root::SparseMatrix, arg2: *const f64)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12SparseMatrixRKd"]
        pub fn mx_el_eq37(arg1: *const root::SparseMatrix, arg2: *const f64)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12SparseMatrixRKd"]
        pub fn mx_el_ne37(arg1: *const root::SparseMatrix, arg2: *const f64)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12SparseMatrixRKd"]
        pub fn mx_el_and39(arg1: *const root::SparseMatrix, arg2: *const f64)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12SparseMatrixRKd"]
        pub fn mx_el_or39(arg1: *const root::SparseMatrix, arg2: *const f64)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK12SparseMatrix"]
        pub fn mx_el_lt35(arg1: *const f64, arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK12SparseMatrix"]
        pub fn mx_el_le35(arg1: *const f64, arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK12SparseMatrix"]
        pub fn mx_el_ge35(arg1: *const f64, arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK12SparseMatrix"]
        pub fn mx_el_gt35(arg1: *const f64, arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK12SparseMatrix"]
        pub fn mx_el_eq38(arg1: *const f64, arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK12SparseMatrix"]
        pub fn mx_el_ne38(arg1: *const f64, arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK12SparseMatrix"]
        pub fn mx_el_and40(arg1: *const f64, arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK12SparseMatrix"]
        pub fn mx_el_or40(arg1: *const f64, arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12SparseMatrixS1_"]
        pub fn mx_el_lt36(arg1: *const root::SparseMatrix,
                          arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12SparseMatrixS1_"]
        pub fn mx_el_le36(arg1: *const root::SparseMatrix,
                          arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12SparseMatrixS1_"]
        pub fn mx_el_ge36(arg1: *const root::SparseMatrix,
                          arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12SparseMatrixS1_"]
        pub fn mx_el_gt36(arg1: *const root::SparseMatrix,
                          arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12SparseMatrixS1_"]
        pub fn mx_el_eq39(arg1: *const root::SparseMatrix,
                          arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12SparseMatrixS1_"]
        pub fn mx_el_ne39(arg1: *const root::SparseMatrix,
                          arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12SparseMatrixS1_"]
        pub fn mx_el_and41(arg1: *const root::SparseMatrix,
                           arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12SparseMatrixS1_"]
        pub fn mx_el_or41(arg1: *const root::SparseMatrix,
                          arg2: *const root::SparseMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mul_transRK13ComplexMatrixRK19SparseComplexMatrix"]
        pub fn mul_trans1(arg1: *const root::ComplexMatrix,
                          arg2: *const root::SparseComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mul_hermRK13ComplexMatrixRK19SparseComplexMatrix"]
        pub fn mul_herm(arg1: *const root::ComplexMatrix,
                        arg2: *const root::SparseComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z9trans_mulRK19SparseComplexMatrixRK13ComplexMatrix"]
        pub fn trans_mul1(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8herm_mulRK19SparseComplexMatrixRK13ComplexMatrix"]
        pub fn herm_mul(arg1: *const root::SparseComplexMatrix,
                        arg2: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn min30(c: *const root::Complex,
                     m: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn min31(m: *const root::SparseComplexMatrix,
                     c: *const root::Complex) -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3minRK19SparseComplexMatrixS1_"]
        pub fn min32(a: *const root::SparseComplexMatrix,
                     b: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn max30(c: *const root::Complex,
                     m: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn max31(m: *const root::SparseComplexMatrix,
                     c: *const root::Complex) -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z3maxRK19SparseComplexMatrixS1_"]
        pub fn max32(a: *const root::SparseComplexMatrix,
                     b: *const root::SparseComplexMatrix)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_lt37(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::Complex)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_le37(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::Complex)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_ge37(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::Complex)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_gt37(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::Complex)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_eq40(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::Complex)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_ne40(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::Complex)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_and42(arg1: *const root::SparseComplexMatrix,
                           arg2: *const root::Complex)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK19SparseComplexMatrixRKSt7complexIdE"]
        pub fn mx_el_or42(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::Complex)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn mx_el_lt38(arg1: *const root::Complex,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn mx_el_le38(arg1: *const root::Complex,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn mx_el_ge38(arg1: *const root::Complex,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn mx_el_gt38(arg1: *const root::Complex,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn mx_el_eq41(arg1: *const root::Complex,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn mx_el_ne41(arg1: *const root::Complex,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn mx_el_and43(arg1: *const root::Complex,
                           arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIdERK19SparseComplexMatrix"]
        pub fn mx_el_or43(arg1: *const root::Complex,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK19SparseComplexMatrixS1_"]
        pub fn mx_el_lt39(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK19SparseComplexMatrixS1_"]
        pub fn mx_el_le39(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK19SparseComplexMatrixS1_"]
        pub fn mx_el_ge39(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK19SparseComplexMatrixS1_"]
        pub fn mx_el_gt39(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK19SparseComplexMatrixS1_"]
        pub fn mx_el_eq42(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK19SparseComplexMatrixS1_"]
        pub fn mx_el_ne42(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK19SparseComplexMatrixS1_"]
        pub fn mx_el_and44(arg1: *const root::SparseComplexMatrix,
                           arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK19SparseComplexMatrixS1_"]
        pub fn mx_el_or44(arg1: *const root::SparseComplexMatrix,
                          arg2: *const root::SparseComplexMatrix)
         -> root::SparseBoolMatrix;
    }
    pub type int8NDArray = [u64; 5usize];
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_lt40(arg1: *const root::int8NDArray,
                          arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_le40(arg1: *const root::int8NDArray,
                          arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_ge40(arg1: *const root::int8NDArray,
                          arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_gt40(arg1: *const root::int8NDArray,
                          arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_eq43(arg1: *const root::int8NDArray,
                          arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_ne43(arg1: *const root::int8NDArray,
                          arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_and45(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_or45(arg1: *const root::int8NDArray,
                          arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_not_and12(arg1: *const root::int8NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS1_"]
        pub fn mx_el_not_or12(arg1: *const root::int8NDArray,
                              arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_lt41(arg1: *const root::octave_int8,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_le41(arg1: *const root::octave_int8,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_ge41(arg1: *const root::octave_int8,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_gt41(arg1: *const root::octave_int8,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_eq44(arg1: *const root::octave_int8,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_ne44(arg1: *const root::octave_int8,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_and46(arg1: *const root::octave_int8,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_or46(arg1: *const root::octave_int8,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_and_not12(arg1: *const root::octave_int8,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIaERK10intNDArrayIS0_E"]
        pub fn mx_el_or_not12(arg1: *const root::octave_int8,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_lt42(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_le42(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_ge42(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_gt42(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_eq45(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_ne45(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_and47(arg1: *const root::int8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_or47(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_and_not13(arg1: *const root::int8NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_or_not13(arg1: *const root::int8NDArray,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_not_and13(arg1: *const root::int8NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEES4_"]
        pub fn mx_el_not_or13(arg1: *const root::int8NDArray,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z3min10octave_intIaERK10intNDArrayIS0_E"]
        pub fn min33(d: root::octave_int8, m: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIaEES1_"]
        pub fn min34(m: *const root::int8NDArray, d: root::octave_int8)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIaEES4_"]
        pub fn min35(a: *const root::int8NDArray, b: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3max10octave_intIaERK10intNDArrayIS0_E"]
        pub fn max33(d: root::octave_int8, m: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIaEES1_"]
        pub fn max34(m: *const root::int8NDArray, d: root::octave_int8)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIaEES4_"]
        pub fn max35(a: *const root::int8NDArray, b: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_add4(arg1: *const root::int8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_sub4(arg1: *const root::int8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_mul4(arg1: *const root::int8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_div4(arg1: *const root::int8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_pow8(arg1: *const root::int8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_min4(arg1: *const root::int8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_max4(arg1: *const root::int8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn bsxfun_pow9(arg1: *const root::int8NDArray,
                           arg2: *const root::NDArray) -> root::int8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn bsxfun_pow10(arg1: *const root::int8NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn bsxfun_pow11(arg1: *const root::NDArray,
                            arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn bsxfun_pow12(arg1: *const root::FloatNDArray,
                            arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_eq5(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_ne5(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_lt5(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_le5(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_gt5(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK10intNDArrayI10octave_intIaEES4_"]
        pub fn bsxfun_ge5(arg1: *const root::int8NDArray,
                          arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    pub type int16NDArray = [u64; 5usize];
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_lt43(arg1: *const root::int16NDArray,
                          arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_le43(arg1: *const root::int16NDArray,
                          arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_ge43(arg1: *const root::int16NDArray,
                          arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_gt43(arg1: *const root::int16NDArray,
                          arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_eq46(arg1: *const root::int16NDArray,
                          arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_ne46(arg1: *const root::int16NDArray,
                          arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_and48(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_or48(arg1: *const root::int16NDArray,
                          arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_not_and14(arg1: *const root::int16NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS1_"]
        pub fn mx_el_not_or14(arg1: *const root::int16NDArray,
                              arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_lt44(arg1: *const root::octave_int16,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_le44(arg1: *const root::octave_int16,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_ge44(arg1: *const root::octave_int16,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_gt44(arg1: *const root::octave_int16,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_eq47(arg1: *const root::octave_int16,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_ne47(arg1: *const root::octave_int16,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_and49(arg1: *const root::octave_int16,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_or49(arg1: *const root::octave_int16,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_and_not14(arg1: *const root::octave_int16,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIsERK10intNDArrayIS0_E"]
        pub fn mx_el_or_not14(arg1: *const root::octave_int16,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_lt45(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_le45(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_ge45(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_gt45(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_eq48(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_ne48(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_and50(arg1: *const root::int16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_or50(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_and_not15(arg1: *const root::int16NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_or_not15(arg1: *const root::int16NDArray,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_not_and15(arg1: *const root::int16NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEES4_"]
        pub fn mx_el_not_or15(arg1: *const root::int16NDArray,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z3min10octave_intIsERK10intNDArrayIS0_E"]
        pub fn min36(d: root::octave_int16, m: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIsEES1_"]
        pub fn min37(m: *const root::int16NDArray, d: root::octave_int16)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIsEES4_"]
        pub fn min38(a: *const root::int16NDArray,
                     b: *const root::int16NDArray) -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3max10octave_intIsERK10intNDArrayIS0_E"]
        pub fn max36(d: root::octave_int16, m: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIsEES1_"]
        pub fn max37(m: *const root::int16NDArray, d: root::octave_int16)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIsEES4_"]
        pub fn max38(a: *const root::int16NDArray,
                     b: *const root::int16NDArray) -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_add5(arg1: *const root::int16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_sub5(arg1: *const root::int16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_mul5(arg1: *const root::int16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_div5(arg1: *const root::int16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_pow13(arg1: *const root::int16NDArray,
                            arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_min5(arg1: *const root::int16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_max5(arg1: *const root::int16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn bsxfun_pow14(arg1: *const root::int16NDArray,
                            arg2: *const root::NDArray) -> root::int16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn bsxfun_pow15(arg1: *const root::int16NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn bsxfun_pow16(arg1: *const root::NDArray,
                            arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn bsxfun_pow17(arg1: *const root::FloatNDArray,
                            arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_eq6(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_ne6(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_lt6(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_le6(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_gt6(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK10intNDArrayI10octave_intIsEES4_"]
        pub fn bsxfun_ge6(arg1: *const root::int16NDArray,
                          arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    pub type int32NDArray = [u64; 5usize];
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_lt46(arg1: *const root::int32NDArray,
                          arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_le46(arg1: *const root::int32NDArray,
                          arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_ge46(arg1: *const root::int32NDArray,
                          arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_gt46(arg1: *const root::int32NDArray,
                          arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_eq49(arg1: *const root::int32NDArray,
                          arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_ne49(arg1: *const root::int32NDArray,
                          arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_and51(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_or51(arg1: *const root::int32NDArray,
                          arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_not_and16(arg1: *const root::int32NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS1_"]
        pub fn mx_el_not_or16(arg1: *const root::int32NDArray,
                              arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_lt47(arg1: *const root::octave_int32,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_le47(arg1: *const root::octave_int32,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_ge47(arg1: *const root::octave_int32,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_gt47(arg1: *const root::octave_int32,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_eq50(arg1: *const root::octave_int32,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_ne50(arg1: *const root::octave_int32,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_and52(arg1: *const root::octave_int32,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_or52(arg1: *const root::octave_int32,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_and_not16(arg1: *const root::octave_int32,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIiERK10intNDArrayIS0_E"]
        pub fn mx_el_or_not16(arg1: *const root::octave_int32,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_lt48(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_le48(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_ge48(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_gt48(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_eq51(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_ne51(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_and53(arg1: *const root::int32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_or53(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_and_not17(arg1: *const root::int32NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_or_not17(arg1: *const root::int32NDArray,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_not_and17(arg1: *const root::int32NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEES4_"]
        pub fn mx_el_not_or17(arg1: *const root::int32NDArray,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z3min10octave_intIiERK10intNDArrayIS0_E"]
        pub fn min39(d: root::octave_int32, m: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIiEES1_"]
        pub fn min40(m: *const root::int32NDArray, d: root::octave_int32)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIiEES4_"]
        pub fn min41(a: *const root::int32NDArray,
                     b: *const root::int32NDArray) -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3max10octave_intIiERK10intNDArrayIS0_E"]
        pub fn max39(d: root::octave_int32, m: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIiEES1_"]
        pub fn max40(m: *const root::int32NDArray, d: root::octave_int32)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIiEES4_"]
        pub fn max41(a: *const root::int32NDArray,
                     b: *const root::int32NDArray) -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_add6(arg1: *const root::int32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_sub6(arg1: *const root::int32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_mul6(arg1: *const root::int32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_div6(arg1: *const root::int32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_pow18(arg1: *const root::int32NDArray,
                            arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_min6(arg1: *const root::int32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_max6(arg1: *const root::int32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn bsxfun_pow19(arg1: *const root::int32NDArray,
                            arg2: *const root::NDArray) -> root::int32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn bsxfun_pow20(arg1: *const root::int32NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn bsxfun_pow21(arg1: *const root::NDArray,
                            arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn bsxfun_pow22(arg1: *const root::FloatNDArray,
                            arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_eq7(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_ne7(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_lt7(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_le7(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_gt7(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK10intNDArrayI10octave_intIiEES4_"]
        pub fn bsxfun_ge7(arg1: *const root::int32NDArray,
                          arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    pub type int64NDArray = [u64; 5usize];
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_lt49(arg1: *const root::int64NDArray,
                          arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_le49(arg1: *const root::int64NDArray,
                          arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_ge49(arg1: *const root::int64NDArray,
                          arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_gt49(arg1: *const root::int64NDArray,
                          arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_eq52(arg1: *const root::int64NDArray,
                          arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_ne52(arg1: *const root::int64NDArray,
                          arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_and54(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_or54(arg1: *const root::int64NDArray,
                          arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_not_and18(arg1: *const root::int64NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS1_"]
        pub fn mx_el_not_or18(arg1: *const root::int64NDArray,
                              arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_lt50(arg1: *const root::octave_int64,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_le50(arg1: *const root::octave_int64,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_ge50(arg1: *const root::octave_int64,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_gt50(arg1: *const root::octave_int64,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_eq53(arg1: *const root::octave_int64,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_ne53(arg1: *const root::octave_int64,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_and55(arg1: *const root::octave_int64,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_or55(arg1: *const root::octave_int64,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_and_not18(arg1: *const root::octave_int64,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIxERK10intNDArrayIS0_E"]
        pub fn mx_el_or_not18(arg1: *const root::octave_int64,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_lt51(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_le51(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_ge51(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_gt51(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_eq54(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_ne54(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_and56(arg1: *const root::int64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_or56(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_and_not19(arg1: *const root::int64NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_or_not19(arg1: *const root::int64NDArray,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_not_and19(arg1: *const root::int64NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEES4_"]
        pub fn mx_el_not_or19(arg1: *const root::int64NDArray,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z3min10octave_intIxERK10intNDArrayIS0_E"]
        pub fn min42(d: root::octave_int64, m: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIxEES1_"]
        pub fn min43(m: *const root::int64NDArray, d: root::octave_int64)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIxEES4_"]
        pub fn min44(a: *const root::int64NDArray,
                     b: *const root::int64NDArray) -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3max10octave_intIxERK10intNDArrayIS0_E"]
        pub fn max42(d: root::octave_int64, m: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIxEES1_"]
        pub fn max43(m: *const root::int64NDArray, d: root::octave_int64)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIxEES4_"]
        pub fn max44(a: *const root::int64NDArray,
                     b: *const root::int64NDArray) -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_add7(arg1: *const root::int64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_sub7(arg1: *const root::int64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_mul7(arg1: *const root::int64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_div7(arg1: *const root::int64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_pow23(arg1: *const root::int64NDArray,
                            arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_min7(arg1: *const root::int64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_max7(arg1: *const root::int64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn bsxfun_pow24(arg1: *const root::int64NDArray,
                            arg2: *const root::NDArray) -> root::int64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn bsxfun_pow25(arg1: *const root::int64NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn bsxfun_pow26(arg1: *const root::NDArray,
                            arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn bsxfun_pow27(arg1: *const root::FloatNDArray,
                            arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_eq8(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_ne8(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_lt8(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_le8(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_gt8(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK10intNDArrayI10octave_intIxEES4_"]
        pub fn bsxfun_ge8(arg1: *const root::int64NDArray,
                          arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    pub type uint8NDArray = [u64; 5usize];
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_lt52(arg1: *const root::uint8NDArray,
                          arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_le52(arg1: *const root::uint8NDArray,
                          arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_ge52(arg1: *const root::uint8NDArray,
                          arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_gt52(arg1: *const root::uint8NDArray,
                          arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_eq55(arg1: *const root::uint8NDArray,
                          arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_ne55(arg1: *const root::uint8NDArray,
                          arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_and57(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_or57(arg1: *const root::uint8NDArray,
                          arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_not_and20(arg1: *const root::uint8NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS1_"]
        pub fn mx_el_not_or20(arg1: *const root::uint8NDArray,
                              arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_lt53(arg1: *const root::octave_uint8,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_le53(arg1: *const root::octave_uint8,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_ge53(arg1: *const root::octave_uint8,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_gt53(arg1: *const root::octave_uint8,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_eq56(arg1: *const root::octave_uint8,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_ne56(arg1: *const root::octave_uint8,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_and58(arg1: *const root::octave_uint8,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_or58(arg1: *const root::octave_uint8,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_and_not20(arg1: *const root::octave_uint8,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIhERK10intNDArrayIS0_E"]
        pub fn mx_el_or_not20(arg1: *const root::octave_uint8,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_lt54(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_le54(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_ge54(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_gt54(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_eq57(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_ne57(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_and59(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_or59(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_and_not21(arg1: *const root::uint8NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_or_not21(arg1: *const root::uint8NDArray,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_not_and21(arg1: *const root::uint8NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEES4_"]
        pub fn mx_el_not_or21(arg1: *const root::uint8NDArray,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z3min10octave_intIhERK10intNDArrayIS0_E"]
        pub fn min45(d: root::octave_uint8, m: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIhEES1_"]
        pub fn min46(m: *const root::uint8NDArray, d: root::octave_uint8)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIhEES4_"]
        pub fn min47(a: *const root::uint8NDArray,
                     b: *const root::uint8NDArray) -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3max10octave_intIhERK10intNDArrayIS0_E"]
        pub fn max45(d: root::octave_uint8, m: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIhEES1_"]
        pub fn max46(m: *const root::uint8NDArray, d: root::octave_uint8)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIhEES4_"]
        pub fn max47(a: *const root::uint8NDArray,
                     b: *const root::uint8NDArray) -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_add8(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_sub8(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_mul8(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_div8(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_pow28(arg1: *const root::uint8NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_min8(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_max8(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn bsxfun_pow29(arg1: *const root::uint8NDArray,
                            arg2: *const root::NDArray) -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn bsxfun_pow30(arg1: *const root::uint8NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn bsxfun_pow31(arg1: *const root::NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn bsxfun_pow32(arg1: *const root::FloatNDArray,
                            arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_eq9(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_ne9(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_lt9(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_le9(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_gt9(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK10intNDArrayI10octave_intIhEES4_"]
        pub fn bsxfun_ge9(arg1: *const root::uint8NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    pub type uint16NDArray = [u64; 5usize];
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_lt55(arg1: *const root::uint16NDArray,
                          arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_le55(arg1: *const root::uint16NDArray,
                          arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_ge55(arg1: *const root::uint16NDArray,
                          arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_gt55(arg1: *const root::uint16NDArray,
                          arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_eq58(arg1: *const root::uint16NDArray,
                          arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_ne58(arg1: *const root::uint16NDArray,
                          arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_and60(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_or60(arg1: *const root::uint16NDArray,
                          arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_not_and22(arg1: *const root::uint16NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS1_"]
        pub fn mx_el_not_or22(arg1: *const root::uint16NDArray,
                              arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_lt56(arg1: *const root::octave_uint16,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_le56(arg1: *const root::octave_uint16,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_ge56(arg1: *const root::octave_uint16,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_gt56(arg1: *const root::octave_uint16,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_eq59(arg1: *const root::octave_uint16,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_ne59(arg1: *const root::octave_uint16,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_and61(arg1: *const root::octave_uint16,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_or61(arg1: *const root::octave_uint16,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_and_not22(arg1: *const root::octave_uint16,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intItERK10intNDArrayIS0_E"]
        pub fn mx_el_or_not22(arg1: *const root::octave_uint16,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_lt57(arg1: *const root::uint16NDArray,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_le57(arg1: *const root::uint16NDArray,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_ge57(arg1: *const root::uint16NDArray,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_gt57(arg1: *const root::uint16NDArray,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_eq60(arg1: *const root::uint16NDArray,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_ne60(arg1: *const root::uint16NDArray,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_and62(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_or62(arg1: *const root::uint16NDArray,
                          arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_and_not23(arg1: *const root::uint16NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_or_not23(arg1: *const root::uint16NDArray,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_not_and23(arg1: *const root::uint16NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEES4_"]
        pub fn mx_el_not_or23(arg1: *const root::uint16NDArray,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z3min10octave_intItERK10intNDArrayIS0_E"]
        pub fn min48(d: root::octave_uint16, m: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intItEES1_"]
        pub fn min49(m: *const root::uint16NDArray, d: root::octave_uint16)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intItEES4_"]
        pub fn min50(a: *const root::uint16NDArray,
                     b: *const root::uint16NDArray) -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3max10octave_intItERK10intNDArrayIS0_E"]
        pub fn max48(d: root::octave_uint16, m: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intItEES1_"]
        pub fn max49(m: *const root::uint16NDArray, d: root::octave_uint16)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intItEES4_"]
        pub fn max50(a: *const root::uint16NDArray,
                     b: *const root::uint16NDArray) -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_add9(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_sub9(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_mul9(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_div9(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_pow33(arg1: *const root::uint16NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_min9(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_max9(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn bsxfun_pow34(arg1: *const root::uint16NDArray,
                            arg2: *const root::NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn bsxfun_pow35(arg1: *const root::uint16NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn bsxfun_pow36(arg1: *const root::NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn bsxfun_pow37(arg1: *const root::FloatNDArray,
                            arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_eq10(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_ne10(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_lt10(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_le10(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_gt10(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK10intNDArrayI10octave_intItEES4_"]
        pub fn bsxfun_ge10(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    pub type uint32NDArray = [u64; 5usize];
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_lt58(arg1: *const root::uint32NDArray,
                          arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_le58(arg1: *const root::uint32NDArray,
                          arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_ge58(arg1: *const root::uint32NDArray,
                          arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_gt58(arg1: *const root::uint32NDArray,
                          arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_eq61(arg1: *const root::uint32NDArray,
                          arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_ne61(arg1: *const root::uint32NDArray,
                          arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_and63(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_or63(arg1: *const root::uint32NDArray,
                          arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_not_and24(arg1: *const root::uint32NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS1_"]
        pub fn mx_el_not_or24(arg1: *const root::uint32NDArray,
                              arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_lt59(arg1: *const root::octave_uint32,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_le59(arg1: *const root::octave_uint32,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_ge59(arg1: *const root::octave_uint32,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_gt59(arg1: *const root::octave_uint32,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_eq62(arg1: *const root::octave_uint32,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_ne62(arg1: *const root::octave_uint32,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_and64(arg1: *const root::octave_uint32,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_or64(arg1: *const root::octave_uint32,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_and_not24(arg1: *const root::octave_uint32,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIjERK10intNDArrayIS0_E"]
        pub fn mx_el_or_not24(arg1: *const root::octave_uint32,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_lt60(arg1: *const root::uint32NDArray,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_le60(arg1: *const root::uint32NDArray,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_ge60(arg1: *const root::uint32NDArray,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_gt60(arg1: *const root::uint32NDArray,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_eq63(arg1: *const root::uint32NDArray,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_ne63(arg1: *const root::uint32NDArray,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_and65(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_or65(arg1: *const root::uint32NDArray,
                          arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_and_not25(arg1: *const root::uint32NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_or_not25(arg1: *const root::uint32NDArray,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_not_and25(arg1: *const root::uint32NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEES4_"]
        pub fn mx_el_not_or25(arg1: *const root::uint32NDArray,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z3min10octave_intIjERK10intNDArrayIS0_E"]
        pub fn min51(d: root::octave_uint32, m: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIjEES1_"]
        pub fn min52(m: *const root::uint32NDArray, d: root::octave_uint32)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIjEES4_"]
        pub fn min53(a: *const root::uint32NDArray,
                     b: *const root::uint32NDArray) -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3max10octave_intIjERK10intNDArrayIS0_E"]
        pub fn max51(d: root::octave_uint32, m: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIjEES1_"]
        pub fn max52(m: *const root::uint32NDArray, d: root::octave_uint32)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIjEES4_"]
        pub fn max53(a: *const root::uint32NDArray,
                     b: *const root::uint32NDArray) -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_add10(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_sub10(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_mul10(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_div10(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_pow38(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_min10(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_max10(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn bsxfun_pow39(arg1: *const root::uint32NDArray,
                            arg2: *const root::NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn bsxfun_pow40(arg1: *const root::uint32NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn bsxfun_pow41(arg1: *const root::NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn bsxfun_pow42(arg1: *const root::FloatNDArray,
                            arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_eq11(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_ne11(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_lt11(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_le11(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_gt11(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK10intNDArrayI10octave_intIjEES4_"]
        pub fn bsxfun_ge11(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    pub type uint64NDArray = [u64; 5usize];
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_lt61(arg1: *const root::uint64NDArray,
                          arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_le61(arg1: *const root::uint64NDArray,
                          arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_ge61(arg1: *const root::uint64NDArray,
                          arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_gt61(arg1: *const root::uint64NDArray,
                          arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_eq64(arg1: *const root::uint64NDArray,
                          arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_ne64(arg1: *const root::uint64NDArray,
                          arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_and66(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_or66(arg1: *const root::uint64NDArray,
                          arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_not_and26(arg1: *const root::uint64NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS1_"]
        pub fn mx_el_not_or26(arg1: *const root::uint64NDArray,
                              arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_lt62(arg1: *const root::octave_uint64,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_le62(arg1: *const root::octave_uint64,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_ge62(arg1: *const root::octave_uint64,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_gt62(arg1: *const root::octave_uint64,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_eq65(arg1: *const root::octave_uint64,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_ne65(arg1: *const root::octave_uint64,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_and67(arg1: *const root::octave_uint64,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_or67(arg1: *const root::octave_uint64,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_and_not26(arg1: *const root::octave_uint64,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIyERK10intNDArrayIS0_E"]
        pub fn mx_el_or_not26(arg1: *const root::octave_uint64,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_lt63(arg1: *const root::uint64NDArray,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_le63(arg1: *const root::uint64NDArray,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_ge63(arg1: *const root::uint64NDArray,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_gt63(arg1: *const root::uint64NDArray,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_eq66(arg1: *const root::uint64NDArray,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_ne66(arg1: *const root::uint64NDArray,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_and68(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_or68(arg1: *const root::uint64NDArray,
                          arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_and_not27(arg1: *const root::uint64NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_or_not27(arg1: *const root::uint64NDArray,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_not_and27(arg1: *const root::uint64NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEES4_"]
        pub fn mx_el_not_or27(arg1: *const root::uint64NDArray,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z3min10octave_intIyERK10intNDArrayIS0_E"]
        pub fn min54(d: root::octave_uint64, m: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIyEES1_"]
        pub fn min55(m: *const root::uint64NDArray, d: root::octave_uint64)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3minRK10intNDArrayI10octave_intIyEES4_"]
        pub fn min56(a: *const root::uint64NDArray,
                     b: *const root::uint64NDArray) -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3max10octave_intIyERK10intNDArrayIS0_E"]
        pub fn max54(d: root::octave_uint64, m: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIyEES1_"]
        pub fn max55(m: *const root::uint64NDArray, d: root::octave_uint64)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z3maxRK10intNDArrayI10octave_intIyEES4_"]
        pub fn max56(a: *const root::uint64NDArray,
                     b: *const root::uint64NDArray) -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_addRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_add11(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_subRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_sub11(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_mulRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_mul11(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_divRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_div11(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_powRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_pow43(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_minRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_min11(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z10bsxfun_maxRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_max11(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn bsxfun_pow44(arg1: *const root::uint64NDArray,
                            arg2: *const root::NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn bsxfun_pow45(arg1: *const root::uint64NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn bsxfun_pow46(arg1: *const root::NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z10bsxfun_powRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn bsxfun_pow47(arg1: *const root::FloatNDArray,
                            arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_eqRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_eq12(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_neRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_ne12(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_ltRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_lt12(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_leRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_le12(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_gtRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_gt12(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9bsxfun_geRK10intNDArrayI10octave_intIyEES4_"]
        pub fn bsxfun_ge12(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK17ComplexDiagMatrixRK10DiagMatrix"]
        pub fn product(arg1: *const root::ComplexDiagMatrix,
                       arg2: *const root::DiagMatrix)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_Z7productRK10DiagMatrixRK17ComplexDiagMatrix"]
        pub fn product1(arg1: *const root::DiagMatrix,
                        arg2: *const root::ComplexDiagMatrix)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIdERK6Matrix"]
        pub fn mx_el_lt64(arg1: *const root::Complex,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIdERK6Matrix"]
        pub fn mx_el_le64(arg1: *const root::Complex,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIdERK6Matrix"]
        pub fn mx_el_ge64(arg1: *const root::Complex,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIdERK6Matrix"]
        pub fn mx_el_gt64(arg1: *const root::Complex,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIdERK6Matrix"]
        pub fn mx_el_eq67(arg1: *const root::Complex,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIdERK6Matrix"]
        pub fn mx_el_ne67(arg1: *const root::Complex,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIdERK6Matrix"]
        pub fn mx_el_and69(arg1: *const root::Complex,
                           arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIdERK6Matrix"]
        pub fn mx_el_or69(arg1: *const root::Complex,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIdERK7NDArray"]
        pub fn mx_el_lt65(arg1: *const root::Complex,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIdERK7NDArray"]
        pub fn mx_el_le65(arg1: *const root::Complex,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIdERK7NDArray"]
        pub fn mx_el_ge65(arg1: *const root::Complex,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIdERK7NDArray"]
        pub fn mx_el_gt65(arg1: *const root::Complex,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIdERK7NDArray"]
        pub fn mx_el_eq68(arg1: *const root::Complex,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIdERK7NDArray"]
        pub fn mx_el_ne68(arg1: *const root::Complex,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIdERK7NDArray"]
        pub fn mx_el_and70(arg1: *const root::Complex,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIdERK7NDArray"]
        pub fn mx_el_or70(arg1: *const root::Complex,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKSt7complexIdERK7NDArray"]
        pub fn mx_el_and_not28(arg1: *const root::Complex,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKSt7complexIdERK7NDArray"]
        pub fn mx_el_or_not28(arg1: *const root::Complex,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK13ComplexMatrixRK6Matrix"]
        pub fn product2(arg1: *const root::ComplexMatrix,
                        arg2: *const root::Matrix) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK13ComplexMatrixRK6Matrix"]
        pub fn quotient(arg1: *const root::ComplexMatrix,
                        arg2: *const root::Matrix) -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK13ComplexMatrixRK6Matrix"]
        pub fn mx_el_lt66(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK13ComplexMatrixRK6Matrix"]
        pub fn mx_el_le66(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK13ComplexMatrixRK6Matrix"]
        pub fn mx_el_ge66(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK13ComplexMatrixRK6Matrix"]
        pub fn mx_el_gt66(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK13ComplexMatrixRK6Matrix"]
        pub fn mx_el_eq69(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK13ComplexMatrixRK6Matrix"]
        pub fn mx_el_ne69(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK13ComplexMatrixRK6Matrix"]
        pub fn mx_el_and71(arg1: *const root::ComplexMatrix,
                           arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK13ComplexMatrixRK6Matrix"]
        pub fn mx_el_or71(arg1: *const root::ComplexMatrix,
                          arg2: *const root::Matrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z7productRK14ComplexNDArrayRK7NDArray"]
        pub fn product3(arg1: *const root::ComplexNDArray,
                        arg2: *const root::NDArray) -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK14ComplexNDArrayRK7NDArray"]
        pub fn quotient1(arg1: *const root::ComplexNDArray,
                         arg2: *const root::NDArray) -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_lt67(arg1: *const root::ComplexNDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_le67(arg1: *const root::ComplexNDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_ge67(arg1: *const root::ComplexNDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_gt67(arg1: *const root::ComplexNDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_eq70(arg1: *const root::ComplexNDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_ne70(arg1: *const root::ComplexNDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_and72(arg1: *const root::ComplexNDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_or72(arg1: *const root::ComplexNDArray,
                          arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_and_not29(arg1: *const root::ComplexNDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_or_not29(arg1: *const root::ComplexNDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_not_and28(arg1: *const root::ComplexNDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK14ComplexNDArrayRK7NDArray"]
        pub fn mx_el_not_or28(arg1: *const root::ComplexNDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK13ComplexMatrixRKd"]
        pub fn mx_el_lt68(arg1: *const root::ComplexMatrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK13ComplexMatrixRKd"]
        pub fn mx_el_le68(arg1: *const root::ComplexMatrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK13ComplexMatrixRKd"]
        pub fn mx_el_ge68(arg1: *const root::ComplexMatrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK13ComplexMatrixRKd"]
        pub fn mx_el_gt68(arg1: *const root::ComplexMatrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK13ComplexMatrixRKd"]
        pub fn mx_el_eq71(arg1: *const root::ComplexMatrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK13ComplexMatrixRKd"]
        pub fn mx_el_ne71(arg1: *const root::ComplexMatrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK13ComplexMatrixRKd"]
        pub fn mx_el_and73(arg1: *const root::ComplexMatrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK13ComplexMatrixRKd"]
        pub fn mx_el_or73(arg1: *const root::ComplexMatrix, arg2: *const f64)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK14ComplexNDArrayRKd"]
        pub fn mx_el_lt69(arg1: *const root::ComplexNDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK14ComplexNDArrayRKd"]
        pub fn mx_el_le69(arg1: *const root::ComplexNDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK14ComplexNDArrayRKd"]
        pub fn mx_el_ge69(arg1: *const root::ComplexNDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK14ComplexNDArrayRKd"]
        pub fn mx_el_gt69(arg1: *const root::ComplexNDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK14ComplexNDArrayRKd"]
        pub fn mx_el_eq72(arg1: *const root::ComplexNDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK14ComplexNDArrayRKd"]
        pub fn mx_el_ne72(arg1: *const root::ComplexNDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK14ComplexNDArrayRKd"]
        pub fn mx_el_and74(arg1: *const root::ComplexNDArray,
                           arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK14ComplexNDArrayRKd"]
        pub fn mx_el_or74(arg1: *const root::ComplexNDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK14ComplexNDArrayRKd"]
        pub fn mx_el_not_and29(arg1: *const root::ComplexNDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK14ComplexNDArrayRKd"]
        pub fn mx_el_not_or29(arg1: *const root::ComplexNDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK6MatrixRKSt7complexIdE"]
        pub fn mx_el_lt70(arg1: *const root::Matrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK6MatrixRKSt7complexIdE"]
        pub fn mx_el_le70(arg1: *const root::Matrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK6MatrixRKSt7complexIdE"]
        pub fn mx_el_ge70(arg1: *const root::Matrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK6MatrixRKSt7complexIdE"]
        pub fn mx_el_gt70(arg1: *const root::Matrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK6MatrixRKSt7complexIdE"]
        pub fn mx_el_eq73(arg1: *const root::Matrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK6MatrixRKSt7complexIdE"]
        pub fn mx_el_ne73(arg1: *const root::Matrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK6MatrixRKSt7complexIdE"]
        pub fn mx_el_and75(arg1: *const root::Matrix,
                           arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK6MatrixRKSt7complexIdE"]
        pub fn mx_el_or75(arg1: *const root::Matrix,
                          arg2: *const root::Complex) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_lt71(arg1: *const root::NDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_le71(arg1: *const root::NDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_ge71(arg1: *const root::NDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_gt71(arg1: *const root::NDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_eq74(arg1: *const root::NDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_ne74(arg1: *const root::NDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_and76(arg1: *const root::NDArray,
                           arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_or76(arg1: *const root::NDArray,
                          arg2: *const root::Complex) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_not_and30(arg1: *const root::NDArray,
                               arg2: *const root::Complex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRKSt7complexIdE"]
        pub fn mx_el_not_or30(arg1: *const root::NDArray,
                              arg2: *const root::Complex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK6MatrixRK13ComplexMatrix"]
        pub fn product4(arg1: *const root::Matrix,
                        arg2: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK6MatrixRK13ComplexMatrix"]
        pub fn quotient2(arg1: *const root::Matrix,
                         arg2: *const root::ComplexMatrix)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK6MatrixRK13ComplexMatrix"]
        pub fn mx_el_lt72(arg1: *const root::Matrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK6MatrixRK13ComplexMatrix"]
        pub fn mx_el_le72(arg1: *const root::Matrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK6MatrixRK13ComplexMatrix"]
        pub fn mx_el_ge72(arg1: *const root::Matrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK6MatrixRK13ComplexMatrix"]
        pub fn mx_el_gt72(arg1: *const root::Matrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK6MatrixRK13ComplexMatrix"]
        pub fn mx_el_eq75(arg1: *const root::Matrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK6MatrixRK13ComplexMatrix"]
        pub fn mx_el_ne75(arg1: *const root::Matrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK6MatrixRK13ComplexMatrix"]
        pub fn mx_el_and77(arg1: *const root::Matrix,
                           arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK6MatrixRK13ComplexMatrix"]
        pub fn mx_el_or77(arg1: *const root::Matrix,
                          arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK14ComplexNDArray"]
        pub fn product5(arg1: *const root::NDArray,
                        arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK14ComplexNDArray"]
        pub fn quotient3(arg1: *const root::NDArray,
                         arg2: *const root::ComplexNDArray)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_lt73(arg1: *const root::NDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_le73(arg1: *const root::NDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_ge73(arg1: *const root::NDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_gt73(arg1: *const root::NDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_eq76(arg1: *const root::NDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_ne76(arg1: *const root::NDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_and78(arg1: *const root::NDArray,
                           arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_or78(arg1: *const root::NDArray,
                          arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_and_not30(arg1: *const root::NDArray,
                               arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_or_not30(arg1: *const root::NDArray,
                              arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_not_and31(arg1: *const root::NDArray,
                               arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK14ComplexNDArray"]
        pub fn mx_el_not_or31(arg1: *const root::NDArray,
                              arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK13ComplexMatrix"]
        pub fn mx_el_lt74(arg1: *const f64, arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK13ComplexMatrix"]
        pub fn mx_el_le74(arg1: *const f64, arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK13ComplexMatrix"]
        pub fn mx_el_ge74(arg1: *const f64, arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK13ComplexMatrix"]
        pub fn mx_el_gt74(arg1: *const f64, arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK13ComplexMatrix"]
        pub fn mx_el_eq77(arg1: *const f64, arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK13ComplexMatrix"]
        pub fn mx_el_ne77(arg1: *const f64, arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK13ComplexMatrix"]
        pub fn mx_el_and79(arg1: *const f64, arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK13ComplexMatrix"]
        pub fn mx_el_or79(arg1: *const f64, arg2: *const root::ComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK14ComplexNDArray"]
        pub fn mx_el_lt75(arg1: *const f64, arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK14ComplexNDArray"]
        pub fn mx_el_le75(arg1: *const f64, arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK14ComplexNDArray"]
        pub fn mx_el_ge75(arg1: *const f64, arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK14ComplexNDArray"]
        pub fn mx_el_gt75(arg1: *const f64, arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK14ComplexNDArray"]
        pub fn mx_el_eq78(arg1: *const f64, arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK14ComplexNDArray"]
        pub fn mx_el_ne78(arg1: *const f64, arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK14ComplexNDArray"]
        pub fn mx_el_and80(arg1: *const f64,
                           arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK14ComplexNDArray"]
        pub fn mx_el_or80(arg1: *const f64, arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK14ComplexNDArray"]
        pub fn mx_el_and_not31(arg1: *const f64,
                               arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK14ComplexNDArray"]
        pub fn mx_el_or_not31(arg1: *const f64,
                              arg2: *const root::ComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK22FloatComplexDiagMatrixRK15FloatDiagMatrix"]
        pub fn product6(arg1: *const root::FloatComplexDiagMatrix,
                        arg2: *const root::FloatDiagMatrix)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK15FloatDiagMatrixRK22FloatComplexDiagMatrix"]
        pub fn product7(arg1: *const root::FloatDiagMatrix,
                        arg2: *const root::FloatComplexDiagMatrix)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIfERK11FloatMatrix"]
        pub fn mx_el_lt76(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIfERK11FloatMatrix"]
        pub fn mx_el_le76(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIfERK11FloatMatrix"]
        pub fn mx_el_ge76(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIfERK11FloatMatrix"]
        pub fn mx_el_gt76(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIfERK11FloatMatrix"]
        pub fn mx_el_eq79(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIfERK11FloatMatrix"]
        pub fn mx_el_ne79(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIfERK11FloatMatrix"]
        pub fn mx_el_and81(arg1: *const root::FloatComplex,
                           arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIfERK11FloatMatrix"]
        pub fn mx_el_or81(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_lt77(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_le77(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_ge77(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_gt77(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_eq80(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_ne80(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_and82(arg1: *const root::FloatComplex,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_or82(arg1: *const root::FloatComplex,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_and_not32(arg1: *const root::FloatComplex,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKSt7complexIfERK12FloatNDArray"]
        pub fn mx_el_or_not32(arg1: *const root::FloatComplex,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn product8(arg1: *const root::FloatComplexMatrix,
                        arg2: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn quotient4(arg1: *const root::FloatComplexMatrix,
                         arg2: *const root::FloatMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn mx_el_lt78(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn mx_el_le78(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn mx_el_ge78(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn mx_el_gt78(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn mx_el_eq81(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn mx_el_ne81(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn mx_el_and83(arg1: *const root::FloatComplexMatrix,
                           arg2: *const root::FloatMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK18FloatComplexMatrixRK11FloatMatrix"]
        pub fn mx_el_or83(arg1: *const root::FloatComplexMatrix,
                          arg2: *const root::FloatMatrix) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z7productRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn product9(arg1: *const root::FloatComplexNDArray,
                        arg2: *const root::FloatNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn quotient5(arg1: *const root::FloatComplexNDArray,
                         arg2: *const root::FloatNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_lt79(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_le79(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_ge79(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_gt79(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_eq82(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_ne82(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_and84(arg1: *const root::FloatComplexNDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_or84(arg1: *const root::FloatComplexNDArray,
                          arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_and_not33(arg1: *const root::FloatComplexNDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_or_not33(arg1: *const root::FloatComplexNDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_not_and32(arg1: *const root::FloatComplexNDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK19FloatComplexNDArrayRK12FloatNDArray"]
        pub fn mx_el_not_or32(arg1: *const root::FloatComplexNDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK18FloatComplexMatrixRKf"]
        pub fn mx_el_lt80(arg1: *const root::FloatComplexMatrix,
                          arg2: *const f32) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK18FloatComplexMatrixRKf"]
        pub fn mx_el_le80(arg1: *const root::FloatComplexMatrix,
                          arg2: *const f32) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK18FloatComplexMatrixRKf"]
        pub fn mx_el_ge80(arg1: *const root::FloatComplexMatrix,
                          arg2: *const f32) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK18FloatComplexMatrixRKf"]
        pub fn mx_el_gt80(arg1: *const root::FloatComplexMatrix,
                          arg2: *const f32) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK18FloatComplexMatrixRKf"]
        pub fn mx_el_eq83(arg1: *const root::FloatComplexMatrix,
                          arg2: *const f32) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK18FloatComplexMatrixRKf"]
        pub fn mx_el_ne83(arg1: *const root::FloatComplexMatrix,
                          arg2: *const f32) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK18FloatComplexMatrixRKf"]
        pub fn mx_el_and85(arg1: *const root::FloatComplexMatrix,
                           arg2: *const f32) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK18FloatComplexMatrixRKf"]
        pub fn mx_el_or85(arg1: *const root::FloatComplexMatrix,
                          arg2: *const f32) -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_lt81(arg1: *const root::FloatComplexNDArray,
                          arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_le81(arg1: *const root::FloatComplexNDArray,
                          arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_ge81(arg1: *const root::FloatComplexNDArray,
                          arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_gt81(arg1: *const root::FloatComplexNDArray,
                          arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_eq84(arg1: *const root::FloatComplexNDArray,
                          arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_ne84(arg1: *const root::FloatComplexNDArray,
                          arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_and86(arg1: *const root::FloatComplexNDArray,
                           arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_or86(arg1: *const root::FloatComplexNDArray,
                          arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_not_and33(arg1: *const root::FloatComplexNDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK19FloatComplexNDArrayRKf"]
        pub fn mx_el_not_or33(arg1: *const root::FloatComplexNDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK11FloatMatrixRKSt7complexIfE"]
        pub fn mx_el_lt82(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK11FloatMatrixRKSt7complexIfE"]
        pub fn mx_el_le82(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK11FloatMatrixRKSt7complexIfE"]
        pub fn mx_el_ge82(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK11FloatMatrixRKSt7complexIfE"]
        pub fn mx_el_gt82(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK11FloatMatrixRKSt7complexIfE"]
        pub fn mx_el_eq85(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK11FloatMatrixRKSt7complexIfE"]
        pub fn mx_el_ne85(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK11FloatMatrixRKSt7complexIfE"]
        pub fn mx_el_and87(arg1: *const root::FloatMatrix,
                           arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK11FloatMatrixRKSt7complexIfE"]
        pub fn mx_el_or87(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplex)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_lt83(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_le83(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_ge83(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_gt83(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_eq86(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_ne86(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_and88(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_or88(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_not_and34(arg1: *const root::FloatNDArray,
                               arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRKSt7complexIfE"]
        pub fn mx_el_not_or34(arg1: *const root::FloatNDArray,
                              arg2: *const root::FloatComplex)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn product10(arg1: *const root::FloatMatrix,
                         arg2: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn quotient6(arg1: *const root::FloatMatrix,
                         arg2: *const root::FloatComplexMatrix)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn mx_el_lt84(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn mx_el_le84(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn mx_el_ge84(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn mx_el_gt84(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn mx_el_eq87(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn mx_el_ne87(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn mx_el_and89(arg1: *const root::FloatMatrix,
                           arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK11FloatMatrixRK18FloatComplexMatrix"]
        pub fn mx_el_or89(arg1: *const root::FloatMatrix,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z7productRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn product11(arg1: *const root::FloatNDArray,
                         arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn quotient7(arg1: *const root::FloatNDArray,
                         arg2: *const root::FloatComplexNDArray)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_lt85(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_le85(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_ge85(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_gt85(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_eq88(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_ne88(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_and90(arg1: *const root::FloatNDArray,
                           arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_or90(arg1: *const root::FloatNDArray,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_and_not34(arg1: *const root::FloatNDArray,
                               arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_or_not34(arg1: *const root::FloatNDArray,
                              arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_not_and35(arg1: *const root::FloatNDArray,
                               arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK19FloatComplexNDArray"]
        pub fn mx_el_not_or35(arg1: *const root::FloatNDArray,
                              arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK18FloatComplexMatrix"]
        pub fn mx_el_lt86(arg1: *const f32,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK18FloatComplexMatrix"]
        pub fn mx_el_le86(arg1: *const f32,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK18FloatComplexMatrix"]
        pub fn mx_el_ge86(arg1: *const f32,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK18FloatComplexMatrix"]
        pub fn mx_el_gt86(arg1: *const f32,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK18FloatComplexMatrix"]
        pub fn mx_el_eq89(arg1: *const f32,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK18FloatComplexMatrix"]
        pub fn mx_el_ne89(arg1: *const f32,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK18FloatComplexMatrix"]
        pub fn mx_el_and91(arg1: *const f32,
                           arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK18FloatComplexMatrix"]
        pub fn mx_el_or91(arg1: *const f32,
                          arg2: *const root::FloatComplexMatrix)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK19FloatComplexNDArray"]
        pub fn mx_el_lt87(arg1: *const f32,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK19FloatComplexNDArray"]
        pub fn mx_el_le87(arg1: *const f32,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK19FloatComplexNDArray"]
        pub fn mx_el_ge87(arg1: *const f32,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK19FloatComplexNDArray"]
        pub fn mx_el_gt87(arg1: *const f32,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK19FloatComplexNDArray"]
        pub fn mx_el_eq90(arg1: *const f32,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK19FloatComplexNDArray"]
        pub fn mx_el_ne90(arg1: *const f32,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK19FloatComplexNDArray"]
        pub fn mx_el_and92(arg1: *const f32,
                           arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK19FloatComplexNDArray"]
        pub fn mx_el_or92(arg1: *const f32,
                          arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK19FloatComplexNDArray"]
        pub fn mx_el_and_not35(arg1: *const f32,
                               arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK19FloatComplexNDArray"]
        pub fn mx_el_or_not35(arg1: *const f32,
                              arg2: *const root::FloatComplexNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_lt88(arg1: *const f64, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_le88(arg1: *const f64, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_ge88(arg1: *const f64, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_gt88(arg1: *const f64, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_eq91(arg1: *const f64, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_ne91(arg1: *const f64, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_and93(arg1: *const f64, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_or93(arg1: *const f64, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_and_not36(arg1: *const f64,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_or_not36(arg1: *const f64,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_lt89(arg1: *const root::int8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_le89(arg1: *const root::int8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_ge89(arg1: *const root::int8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_gt89(arg1: *const root::int8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_eq92(arg1: *const root::int8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_ne92(arg1: *const root::int8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_and94(arg1: *const root::int8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_or94(arg1: *const root::int8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_not_and36(arg1: *const root::int8NDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKd"]
        pub fn mx_el_not_or36(arg1: *const root::int8NDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_lt90(arg1: *const f64, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_le90(arg1: *const f64, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_ge90(arg1: *const f64, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_gt90(arg1: *const f64, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_eq93(arg1: *const f64, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_ne93(arg1: *const f64, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_and95(arg1: *const f64, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_or95(arg1: *const f64, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_and_not37(arg1: *const f64,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_or_not37(arg1: *const f64,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_lt91(arg1: *const root::uint8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_le91(arg1: *const root::uint8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_ge91(arg1: *const root::uint8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_gt91(arg1: *const root::uint8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_eq94(arg1: *const root::uint8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_ne94(arg1: *const root::uint8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_and96(arg1: *const root::uint8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_or96(arg1: *const root::uint8NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_not_and37(arg1: *const root::uint8NDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKd"]
        pub fn mx_el_not_or37(arg1: *const root::uint8NDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_lt92(arg1: *const f64, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_le92(arg1: *const f64, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_ge92(arg1: *const f64, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_gt92(arg1: *const f64, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_eq95(arg1: *const f64, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_ne95(arg1: *const f64, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_and97(arg1: *const f64, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_or97(arg1: *const f64, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_and_not38(arg1: *const f64,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_or_not38(arg1: *const f64,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_lt93(arg1: *const root::int16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_le93(arg1: *const root::int16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_ge93(arg1: *const root::int16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_gt93(arg1: *const root::int16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_eq96(arg1: *const root::int16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_ne96(arg1: *const root::int16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_and98(arg1: *const root::int16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_or98(arg1: *const root::int16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_not_and38(arg1: *const root::int16NDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKd"]
        pub fn mx_el_not_or38(arg1: *const root::int16NDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_lt94(arg1: *const f64, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_le94(arg1: *const f64, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_ge94(arg1: *const f64, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_gt94(arg1: *const f64, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_eq97(arg1: *const f64, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_ne97(arg1: *const f64, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_and99(arg1: *const f64, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_or99(arg1: *const f64, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_and_not39(arg1: *const f64,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_or_not39(arg1: *const f64,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_lt95(arg1: *const root::uint16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_le95(arg1: *const root::uint16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_ge95(arg1: *const root::uint16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_gt95(arg1: *const root::uint16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_eq98(arg1: *const root::uint16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_ne98(arg1: *const root::uint16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_and100(arg1: *const root::uint16NDArray,
                            arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_or100(arg1: *const root::uint16NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_not_and39(arg1: *const root::uint16NDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKd"]
        pub fn mx_el_not_or39(arg1: *const root::uint16NDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_lt96(arg1: *const f64, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_le96(arg1: *const f64, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_ge96(arg1: *const f64, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_gt96(arg1: *const f64, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_eq99(arg1: *const f64, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_ne99(arg1: *const f64, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_and101(arg1: *const f64, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_or101(arg1: *const f64, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_and_not40(arg1: *const f64,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_or_not40(arg1: *const f64,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_lt97(arg1: *const root::int32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_le97(arg1: *const root::int32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_ge97(arg1: *const root::int32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_gt97(arg1: *const root::int32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_eq100(arg1: *const root::int32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_ne100(arg1: *const root::int32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_and102(arg1: *const root::int32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_or102(arg1: *const root::int32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_not_and40(arg1: *const root::int32NDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKd"]
        pub fn mx_el_not_or40(arg1: *const root::int32NDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_lt98(arg1: *const f64, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_le98(arg1: *const f64, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_ge98(arg1: *const f64, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_gt98(arg1: *const f64, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_eq101(arg1: *const f64, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_ne101(arg1: *const f64, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_and103(arg1: *const f64,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_or103(arg1: *const f64, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_and_not41(arg1: *const f64,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_or_not41(arg1: *const f64,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_lt99(arg1: *const root::uint32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_le99(arg1: *const root::uint32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_ge99(arg1: *const root::uint32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_gt99(arg1: *const root::uint32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_eq102(arg1: *const root::uint32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_ne102(arg1: *const root::uint32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_and104(arg1: *const root::uint32NDArray,
                            arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_or104(arg1: *const root::uint32NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_not_and41(arg1: *const root::uint32NDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKd"]
        pub fn mx_el_not_or41(arg1: *const root::uint32NDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_lt100(arg1: *const f64, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_le100(arg1: *const f64, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_ge100(arg1: *const f64, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_gt100(arg1: *const f64, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_eq103(arg1: *const f64, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_ne103(arg1: *const f64, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_and105(arg1: *const f64, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_or105(arg1: *const f64, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_and_not42(arg1: *const f64,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_or_not42(arg1: *const f64,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_lt101(arg1: *const root::int64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_le101(arg1: *const root::int64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_ge101(arg1: *const root::int64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_gt101(arg1: *const root::int64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_eq104(arg1: *const root::int64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_ne104(arg1: *const root::int64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_and106(arg1: *const root::int64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_or106(arg1: *const root::int64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_not_and42(arg1: *const root::int64NDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKd"]
        pub fn mx_el_not_or42(arg1: *const root::int64NDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_lt102(arg1: *const f64, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_le102(arg1: *const f64, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_ge102(arg1: *const f64, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_gt102(arg1: *const f64, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_eq105(arg1: *const f64, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_ne105(arg1: *const f64, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_and107(arg1: *const f64,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_or107(arg1: *const f64, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_and_not43(arg1: *const f64,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKdRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_or_not43(arg1: *const f64,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_lt103(arg1: *const root::uint64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_le103(arg1: *const root::uint64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_ge103(arg1: *const root::uint64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_gt103(arg1: *const root::uint64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_eq106(arg1: *const root::uint64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_ne106(arg1: *const root::uint64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_and108(arg1: *const root::uint64NDArray,
                            arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_or108(arg1: *const root::uint64NDArray, arg2: *const f64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_not_and43(arg1: *const root::uint64NDArray,
                               arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKd"]
        pub fn mx_el_not_or43(arg1: *const root::uint64NDArray,
                              arg2: *const f64) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_lt104(arg1: *const f32, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_le104(arg1: *const f32, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_ge104(arg1: *const f32, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_gt104(arg1: *const f32, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_eq107(arg1: *const f32, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_ne107(arg1: *const f32, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_and109(arg1: *const f32, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_or109(arg1: *const f32, arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_and_not44(arg1: *const f32,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_or_not44(arg1: *const f32,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_lt105(arg1: *const root::int8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_le105(arg1: *const root::int8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_ge105(arg1: *const root::int8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_gt105(arg1: *const root::int8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_eq108(arg1: *const root::int8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_ne108(arg1: *const root::int8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_and110(arg1: *const root::int8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_or110(arg1: *const root::int8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_not_and44(arg1: *const root::int8NDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKf"]
        pub fn mx_el_not_or44(arg1: *const root::int8NDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_lt106(arg1: *const f32, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_le106(arg1: *const f32, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_ge106(arg1: *const f32, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_gt106(arg1: *const f32, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_eq109(arg1: *const f32, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_ne109(arg1: *const f32, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_and111(arg1: *const f32, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_or111(arg1: *const f32, arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_and_not45(arg1: *const f32,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_or_not45(arg1: *const f32,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_lt107(arg1: *const root::uint8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_le107(arg1: *const root::uint8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_ge107(arg1: *const root::uint8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_gt107(arg1: *const root::uint8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_eq110(arg1: *const root::uint8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_ne110(arg1: *const root::uint8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_and112(arg1: *const root::uint8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_or112(arg1: *const root::uint8NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_not_and45(arg1: *const root::uint8NDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKf"]
        pub fn mx_el_not_or45(arg1: *const root::uint8NDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_lt108(arg1: *const f32, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_le108(arg1: *const f32, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_ge108(arg1: *const f32, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_gt108(arg1: *const f32, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_eq111(arg1: *const f32, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_ne111(arg1: *const f32, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_and113(arg1: *const f32, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_or113(arg1: *const f32, arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_and_not46(arg1: *const f32,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_or_not46(arg1: *const f32,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_lt109(arg1: *const root::int16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_le109(arg1: *const root::int16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_ge109(arg1: *const root::int16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_gt109(arg1: *const root::int16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_eq112(arg1: *const root::int16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_ne112(arg1: *const root::int16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_and114(arg1: *const root::int16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_or114(arg1: *const root::int16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_not_and46(arg1: *const root::int16NDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKf"]
        pub fn mx_el_not_or46(arg1: *const root::int16NDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_lt110(arg1: *const f32, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_le110(arg1: *const f32, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_ge110(arg1: *const f32, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_gt110(arg1: *const f32, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_eq113(arg1: *const f32, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_ne113(arg1: *const f32, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_and115(arg1: *const f32,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_or115(arg1: *const f32, arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_and_not47(arg1: *const f32,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_or_not47(arg1: *const f32,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_lt111(arg1: *const root::uint16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_le111(arg1: *const root::uint16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_ge111(arg1: *const root::uint16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_gt111(arg1: *const root::uint16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_eq114(arg1: *const root::uint16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_ne114(arg1: *const root::uint16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_and116(arg1: *const root::uint16NDArray,
                            arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_or116(arg1: *const root::uint16NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_not_and47(arg1: *const root::uint16NDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKf"]
        pub fn mx_el_not_or47(arg1: *const root::uint16NDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_lt112(arg1: *const f32, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_le112(arg1: *const f32, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_ge112(arg1: *const f32, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_gt112(arg1: *const f32, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_eq115(arg1: *const f32, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_ne115(arg1: *const f32, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_and117(arg1: *const f32, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_or117(arg1: *const f32, arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_and_not48(arg1: *const f32,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_or_not48(arg1: *const f32,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_lt113(arg1: *const root::int32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_le113(arg1: *const root::int32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_ge113(arg1: *const root::int32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_gt113(arg1: *const root::int32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_eq116(arg1: *const root::int32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_ne116(arg1: *const root::int32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_and118(arg1: *const root::int32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_or118(arg1: *const root::int32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_not_and48(arg1: *const root::int32NDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKf"]
        pub fn mx_el_not_or48(arg1: *const root::int32NDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_lt114(arg1: *const f32, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_le114(arg1: *const f32, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_ge114(arg1: *const f32, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_gt114(arg1: *const f32, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_eq117(arg1: *const f32, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_ne117(arg1: *const f32, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_and119(arg1: *const f32,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_or119(arg1: *const f32, arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_and_not49(arg1: *const f32,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_or_not49(arg1: *const f32,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_lt115(arg1: *const root::uint32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_le115(arg1: *const root::uint32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_ge115(arg1: *const root::uint32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_gt115(arg1: *const root::uint32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_eq118(arg1: *const root::uint32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_ne118(arg1: *const root::uint32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_and120(arg1: *const root::uint32NDArray,
                            arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_or120(arg1: *const root::uint32NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_not_and49(arg1: *const root::uint32NDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKf"]
        pub fn mx_el_not_or49(arg1: *const root::uint32NDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_lt116(arg1: *const f32, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_le116(arg1: *const f32, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_ge116(arg1: *const f32, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_gt116(arg1: *const f32, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_eq119(arg1: *const f32, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_ne119(arg1: *const f32, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_and121(arg1: *const f32, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_or121(arg1: *const f32, arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_and_not50(arg1: *const f32,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_or_not50(arg1: *const f32,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_lt117(arg1: *const root::int64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_le117(arg1: *const root::int64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_ge117(arg1: *const root::int64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_gt117(arg1: *const root::int64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_eq120(arg1: *const root::int64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_ne120(arg1: *const root::int64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_and122(arg1: *const root::int64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_or122(arg1: *const root::int64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_not_and50(arg1: *const root::int64NDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKf"]
        pub fn mx_el_not_or50(arg1: *const root::int64NDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_lt118(arg1: *const f32, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_le118(arg1: *const f32, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_ge118(arg1: *const f32, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_gt118(arg1: *const f32, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_eq121(arg1: *const f32, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_ne121(arg1: *const f32, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_and123(arg1: *const f32,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_or123(arg1: *const f32, arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_and_not51(arg1: *const f32,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRKfRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_or_not51(arg1: *const f32,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_lt119(arg1: *const root::uint64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_le119(arg1: *const root::uint64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_ge119(arg1: *const root::uint64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_gt119(arg1: *const root::uint64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_eq122(arg1: *const root::uint64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_ne122(arg1: *const root::uint64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_and124(arg1: *const root::uint64NDArray,
                            arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_or124(arg1: *const root::uint64NDArray, arg2: *const f32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_not_and51(arg1: *const root::uint64NDArray,
                               arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKf"]
        pub fn mx_el_not_or51(arg1: *const root::uint64NDArray,
                              arg2: *const f32) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_lt120(arg1: *const root::NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_le120(arg1: *const root::NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_ge120(arg1: *const root::NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_gt120(arg1: *const root::NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_eq123(arg1: *const root::NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_ne123(arg1: *const root::NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_and125(arg1: *const root::NDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_or125(arg1: *const root::NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_not_and52(arg1: *const root::NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK10octave_intIaE"]
        pub fn mx_el_not_or52(arg1: *const root::NDArray,
                              arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK7NDArray"]
        pub fn mx_el_lt121(arg1: *const root::octave_int8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK7NDArray"]
        pub fn mx_el_le121(arg1: *const root::octave_int8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK7NDArray"]
        pub fn mx_el_ge121(arg1: *const root::octave_int8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK7NDArray"]
        pub fn mx_el_gt121(arg1: *const root::octave_int8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK7NDArray"]
        pub fn mx_el_eq124(arg1: *const root::octave_int8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK7NDArray"]
        pub fn mx_el_ne124(arg1: *const root::octave_int8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK7NDArray"]
        pub fn mx_el_and126(arg1: *const root::octave_int8,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK7NDArray"]
        pub fn mx_el_or126(arg1: *const root::octave_int8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIaERK7NDArray"]
        pub fn mx_el_and_not52(arg1: *const root::octave_int8,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIaERK7NDArray"]
        pub fn mx_el_or_not52(arg1: *const root::octave_int8,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_lt122(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_le122(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_ge122(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_gt122(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_eq125(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_ne125(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_and127(arg1: *const root::NDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_or127(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_not_and53(arg1: *const root::NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK10octave_intIhE"]
        pub fn mx_el_not_or53(arg1: *const root::NDArray,
                              arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK7NDArray"]
        pub fn mx_el_lt123(arg1: *const root::octave_uint8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK7NDArray"]
        pub fn mx_el_le123(arg1: *const root::octave_uint8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK7NDArray"]
        pub fn mx_el_ge123(arg1: *const root::octave_uint8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK7NDArray"]
        pub fn mx_el_gt123(arg1: *const root::octave_uint8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK7NDArray"]
        pub fn mx_el_eq126(arg1: *const root::octave_uint8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK7NDArray"]
        pub fn mx_el_ne126(arg1: *const root::octave_uint8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK7NDArray"]
        pub fn mx_el_and128(arg1: *const root::octave_uint8,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK7NDArray"]
        pub fn mx_el_or128(arg1: *const root::octave_uint8,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIhERK7NDArray"]
        pub fn mx_el_and_not53(arg1: *const root::octave_uint8,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIhERK7NDArray"]
        pub fn mx_el_or_not53(arg1: *const root::octave_uint8,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_lt124(arg1: *const root::NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_le124(arg1: *const root::NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_ge124(arg1: *const root::NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_gt124(arg1: *const root::NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_eq127(arg1: *const root::NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_ne127(arg1: *const root::NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_and129(arg1: *const root::NDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_or129(arg1: *const root::NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_not_and54(arg1: *const root::NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK10octave_intIsE"]
        pub fn mx_el_not_or54(arg1: *const root::NDArray,
                              arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK7NDArray"]
        pub fn mx_el_lt125(arg1: *const root::octave_int16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK7NDArray"]
        pub fn mx_el_le125(arg1: *const root::octave_int16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK7NDArray"]
        pub fn mx_el_ge125(arg1: *const root::octave_int16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK7NDArray"]
        pub fn mx_el_gt125(arg1: *const root::octave_int16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK7NDArray"]
        pub fn mx_el_eq128(arg1: *const root::octave_int16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK7NDArray"]
        pub fn mx_el_ne128(arg1: *const root::octave_int16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK7NDArray"]
        pub fn mx_el_and130(arg1: *const root::octave_int16,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK7NDArray"]
        pub fn mx_el_or130(arg1: *const root::octave_int16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIsERK7NDArray"]
        pub fn mx_el_and_not54(arg1: *const root::octave_int16,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIsERK7NDArray"]
        pub fn mx_el_or_not54(arg1: *const root::octave_int16,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_lt126(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_le126(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_ge126(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_gt126(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_eq129(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_ne129(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_and131(arg1: *const root::NDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_or131(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_not_and55(arg1: *const root::NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK10octave_intItE"]
        pub fn mx_el_not_or55(arg1: *const root::NDArray,
                              arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK7NDArray"]
        pub fn mx_el_lt127(arg1: *const root::octave_uint16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK7NDArray"]
        pub fn mx_el_le127(arg1: *const root::octave_uint16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK7NDArray"]
        pub fn mx_el_ge127(arg1: *const root::octave_uint16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK7NDArray"]
        pub fn mx_el_gt127(arg1: *const root::octave_uint16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK7NDArray"]
        pub fn mx_el_eq130(arg1: *const root::octave_uint16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK7NDArray"]
        pub fn mx_el_ne130(arg1: *const root::octave_uint16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK7NDArray"]
        pub fn mx_el_and132(arg1: *const root::octave_uint16,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK7NDArray"]
        pub fn mx_el_or132(arg1: *const root::octave_uint16,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intItERK7NDArray"]
        pub fn mx_el_and_not55(arg1: *const root::octave_uint16,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intItERK7NDArray"]
        pub fn mx_el_or_not55(arg1: *const root::octave_uint16,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_lt128(arg1: *const root::NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_le128(arg1: *const root::NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_ge128(arg1: *const root::NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_gt128(arg1: *const root::NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_eq131(arg1: *const root::NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_ne131(arg1: *const root::NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_and133(arg1: *const root::NDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_or133(arg1: *const root::NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_not_and56(arg1: *const root::NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK10octave_intIiE"]
        pub fn mx_el_not_or56(arg1: *const root::NDArray,
                              arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK7NDArray"]
        pub fn mx_el_lt129(arg1: *const root::octave_int32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK7NDArray"]
        pub fn mx_el_le129(arg1: *const root::octave_int32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK7NDArray"]
        pub fn mx_el_ge129(arg1: *const root::octave_int32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK7NDArray"]
        pub fn mx_el_gt129(arg1: *const root::octave_int32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK7NDArray"]
        pub fn mx_el_eq132(arg1: *const root::octave_int32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK7NDArray"]
        pub fn mx_el_ne132(arg1: *const root::octave_int32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK7NDArray"]
        pub fn mx_el_and134(arg1: *const root::octave_int32,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK7NDArray"]
        pub fn mx_el_or134(arg1: *const root::octave_int32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIiERK7NDArray"]
        pub fn mx_el_and_not56(arg1: *const root::octave_int32,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIiERK7NDArray"]
        pub fn mx_el_or_not56(arg1: *const root::octave_int32,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_lt130(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_le130(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_ge130(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_gt130(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_eq133(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_ne133(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_and135(arg1: *const root::NDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_or135(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_not_and57(arg1: *const root::NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK10octave_intIjE"]
        pub fn mx_el_not_or57(arg1: *const root::NDArray,
                              arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK7NDArray"]
        pub fn mx_el_lt131(arg1: *const root::octave_uint32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK7NDArray"]
        pub fn mx_el_le131(arg1: *const root::octave_uint32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK7NDArray"]
        pub fn mx_el_ge131(arg1: *const root::octave_uint32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK7NDArray"]
        pub fn mx_el_gt131(arg1: *const root::octave_uint32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK7NDArray"]
        pub fn mx_el_eq134(arg1: *const root::octave_uint32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK7NDArray"]
        pub fn mx_el_ne134(arg1: *const root::octave_uint32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK7NDArray"]
        pub fn mx_el_and136(arg1: *const root::octave_uint32,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK7NDArray"]
        pub fn mx_el_or136(arg1: *const root::octave_uint32,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIjERK7NDArray"]
        pub fn mx_el_and_not57(arg1: *const root::octave_uint32,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIjERK7NDArray"]
        pub fn mx_el_or_not57(arg1: *const root::octave_uint32,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_lt132(arg1: *const root::NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_le132(arg1: *const root::NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_ge132(arg1: *const root::NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_gt132(arg1: *const root::NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_eq135(arg1: *const root::NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_ne135(arg1: *const root::NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_and137(arg1: *const root::NDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_or137(arg1: *const root::NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_not_and58(arg1: *const root::NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK10octave_intIxE"]
        pub fn mx_el_not_or58(arg1: *const root::NDArray,
                              arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK7NDArray"]
        pub fn mx_el_lt133(arg1: *const root::octave_int64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK7NDArray"]
        pub fn mx_el_le133(arg1: *const root::octave_int64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK7NDArray"]
        pub fn mx_el_ge133(arg1: *const root::octave_int64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK7NDArray"]
        pub fn mx_el_gt133(arg1: *const root::octave_int64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK7NDArray"]
        pub fn mx_el_eq136(arg1: *const root::octave_int64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK7NDArray"]
        pub fn mx_el_ne136(arg1: *const root::octave_int64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK7NDArray"]
        pub fn mx_el_and138(arg1: *const root::octave_int64,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK7NDArray"]
        pub fn mx_el_or138(arg1: *const root::octave_int64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIxERK7NDArray"]
        pub fn mx_el_and_not58(arg1: *const root::octave_int64,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIxERK7NDArray"]
        pub fn mx_el_or_not58(arg1: *const root::octave_int64,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_lt134(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_le134(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_ge134(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_gt134(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_eq137(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_ne137(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_and139(arg1: *const root::NDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_or139(arg1: *const root::NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_not_and59(arg1: *const root::NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK7NDArrayRK10octave_intIyE"]
        pub fn mx_el_not_or59(arg1: *const root::NDArray,
                              arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK7NDArray"]
        pub fn mx_el_lt135(arg1: *const root::octave_uint64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK7NDArray"]
        pub fn mx_el_le135(arg1: *const root::octave_uint64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK7NDArray"]
        pub fn mx_el_ge135(arg1: *const root::octave_uint64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK7NDArray"]
        pub fn mx_el_gt135(arg1: *const root::octave_uint64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK7NDArray"]
        pub fn mx_el_eq138(arg1: *const root::octave_uint64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK7NDArray"]
        pub fn mx_el_ne138(arg1: *const root::octave_uint64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK7NDArray"]
        pub fn mx_el_and140(arg1: *const root::octave_uint64,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK7NDArray"]
        pub fn mx_el_or140(arg1: *const root::octave_uint64,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIyERK7NDArray"]
        pub fn mx_el_and_not59(arg1: *const root::octave_uint64,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIyERK7NDArray"]
        pub fn mx_el_or_not59(arg1: *const root::octave_uint64,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_lt136(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_le136(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_ge136(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_gt136(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_eq139(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_ne139(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_and141(arg1: *const root::FloatNDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_or141(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_not_and60(arg1: *const root::FloatNDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRK10octave_intIaE"]
        pub fn mx_el_not_or60(arg1: *const root::FloatNDArray,
                              arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_lt137(arg1: *const root::octave_int8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_le137(arg1: *const root::octave_int8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_ge137(arg1: *const root::octave_int8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_gt137(arg1: *const root::octave_int8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_eq140(arg1: *const root::octave_int8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_ne140(arg1: *const root::octave_int8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_and142(arg1: *const root::octave_int8,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_or142(arg1: *const root::octave_int8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_and_not60(arg1: *const root::octave_int8,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIaERK12FloatNDArray"]
        pub fn mx_el_or_not60(arg1: *const root::octave_int8,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_lt138(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_le138(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_ge138(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_gt138(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_eq141(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_ne141(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_and143(arg1: *const root::FloatNDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_or143(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_not_and61(arg1: *const root::FloatNDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRK10octave_intIhE"]
        pub fn mx_el_not_or61(arg1: *const root::FloatNDArray,
                              arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_lt139(arg1: *const root::octave_uint8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_le139(arg1: *const root::octave_uint8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_ge139(arg1: *const root::octave_uint8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_gt139(arg1: *const root::octave_uint8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_eq142(arg1: *const root::octave_uint8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_ne142(arg1: *const root::octave_uint8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_and144(arg1: *const root::octave_uint8,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_or144(arg1: *const root::octave_uint8,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_and_not61(arg1: *const root::octave_uint8,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIhERK12FloatNDArray"]
        pub fn mx_el_or_not61(arg1: *const root::octave_uint8,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_lt140(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_le140(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_ge140(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_gt140(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_eq143(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_ne143(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_and145(arg1: *const root::FloatNDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_or145(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_not_and62(arg1: *const root::FloatNDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRK10octave_intIsE"]
        pub fn mx_el_not_or62(arg1: *const root::FloatNDArray,
                              arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_lt141(arg1: *const root::octave_int16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_le141(arg1: *const root::octave_int16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_ge141(arg1: *const root::octave_int16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_gt141(arg1: *const root::octave_int16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_eq144(arg1: *const root::octave_int16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_ne144(arg1: *const root::octave_int16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_and146(arg1: *const root::octave_int16,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_or146(arg1: *const root::octave_int16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_and_not62(arg1: *const root::octave_int16,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIsERK12FloatNDArray"]
        pub fn mx_el_or_not62(arg1: *const root::octave_int16,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_lt142(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_le142(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_ge142(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_gt142(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_eq145(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_ne145(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_and147(arg1: *const root::FloatNDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_or147(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_not_and63(arg1: *const root::FloatNDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRK10octave_intItE"]
        pub fn mx_el_not_or63(arg1: *const root::FloatNDArray,
                              arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_lt143(arg1: *const root::octave_uint16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_le143(arg1: *const root::octave_uint16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_ge143(arg1: *const root::octave_uint16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_gt143(arg1: *const root::octave_uint16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_eq146(arg1: *const root::octave_uint16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_ne146(arg1: *const root::octave_uint16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_and148(arg1: *const root::octave_uint16,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_or148(arg1: *const root::octave_uint16,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_and_not63(arg1: *const root::octave_uint16,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intItERK12FloatNDArray"]
        pub fn mx_el_or_not63(arg1: *const root::octave_uint16,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_lt144(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_le144(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_ge144(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_gt144(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_eq147(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_ne147(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_and149(arg1: *const root::FloatNDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_or149(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_not_and64(arg1: *const root::FloatNDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRK10octave_intIiE"]
        pub fn mx_el_not_or64(arg1: *const root::FloatNDArray,
                              arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_lt145(arg1: *const root::octave_int32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_le145(arg1: *const root::octave_int32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_ge145(arg1: *const root::octave_int32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_gt145(arg1: *const root::octave_int32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_eq148(arg1: *const root::octave_int32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_ne148(arg1: *const root::octave_int32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_and150(arg1: *const root::octave_int32,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_or150(arg1: *const root::octave_int32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_and_not64(arg1: *const root::octave_int32,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIiERK12FloatNDArray"]
        pub fn mx_el_or_not64(arg1: *const root::octave_int32,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_lt146(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_le146(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_ge146(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_gt146(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_eq149(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_ne149(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_and151(arg1: *const root::FloatNDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_or151(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_not_and65(arg1: *const root::FloatNDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRK10octave_intIjE"]
        pub fn mx_el_not_or65(arg1: *const root::FloatNDArray,
                              arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_lt147(arg1: *const root::octave_uint32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_le147(arg1: *const root::octave_uint32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_ge147(arg1: *const root::octave_uint32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_gt147(arg1: *const root::octave_uint32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_eq150(arg1: *const root::octave_uint32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_ne150(arg1: *const root::octave_uint32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_and152(arg1: *const root::octave_uint32,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_or152(arg1: *const root::octave_uint32,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_and_not65(arg1: *const root::octave_uint32,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIjERK12FloatNDArray"]
        pub fn mx_el_or_not65(arg1: *const root::octave_uint32,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_lt148(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_le148(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_ge148(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_gt148(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_eq151(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_ne151(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_and153(arg1: *const root::FloatNDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_or153(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_not_and66(arg1: *const root::FloatNDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRK10octave_intIxE"]
        pub fn mx_el_not_or66(arg1: *const root::FloatNDArray,
                              arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_lt149(arg1: *const root::octave_int64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_le149(arg1: *const root::octave_int64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_ge149(arg1: *const root::octave_int64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_gt149(arg1: *const root::octave_int64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_eq152(arg1: *const root::octave_int64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_ne152(arg1: *const root::octave_int64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_and154(arg1: *const root::octave_int64,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_or154(arg1: *const root::octave_int64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_and_not66(arg1: *const root::octave_int64,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIxERK12FloatNDArray"]
        pub fn mx_el_or_not66(arg1: *const root::octave_int64,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_lt150(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_le150(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_ge150(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_gt150(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_eq153(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_ne153(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_and155(arg1: *const root::FloatNDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_or155(arg1: *const root::FloatNDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_not_andRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_not_and67(arg1: *const root::FloatNDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_not_orRK12FloatNDArrayRK10octave_intIyE"]
        pub fn mx_el_not_or67(arg1: *const root::FloatNDArray,
                              arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_lt151(arg1: *const root::octave_uint64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_le151(arg1: *const root::octave_uint64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_ge151(arg1: *const root::octave_uint64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_gt151(arg1: *const root::octave_uint64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_eq154(arg1: *const root::octave_uint64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_ne154(arg1: *const root::octave_uint64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_and156(arg1: *const root::octave_uint64,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_or156(arg1: *const root::octave_uint64,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z13mx_el_and_notRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_and_not67(arg1: *const root::octave_uint64,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z12mx_el_or_notRK10octave_intIyERK12FloatNDArray"]
        pub fn mx_el_or_not67(arg1: *const root::octave_uint64,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn product12(arg1: *const root::NDArray,
                         arg2: *const root::int8NDArray) -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn quotient8(arg1: *const root::NDArray,
                         arg2: *const root::int8NDArray) -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_lt152(arg1: *const root::NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_le152(arg1: *const root::NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_ge152(arg1: *const root::NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_gt152(arg1: *const root::NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_eq155(arg1: *const root::NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_ne155(arg1: *const root::NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_and157(arg1: *const root::NDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_or157(arg1: *const root::NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_and_not68(arg1: *const root::NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_or_not68(arg1: *const root::NDArray,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_not_and68(arg1: *const root::NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK7NDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_not_or68(arg1: *const root::NDArray,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn product13(arg1: *const root::int8NDArray,
                         arg2: *const root::NDArray) -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn quotient9(arg1: *const root::int8NDArray,
                         arg2: *const root::NDArray) -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_lt153(arg1: *const root::int8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_le153(arg1: *const root::int8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_ge153(arg1: *const root::int8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_gt153(arg1: *const root::int8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_eq156(arg1: *const root::int8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_ne156(arg1: *const root::int8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_and158(arg1: *const root::int8NDArray,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_or158(arg1: *const root::int8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_and_not69(arg1: *const root::int8NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_or_not69(arg1: *const root::int8NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_not_and69(arg1: *const root::int8NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERK7NDArray"]
        pub fn mx_el_not_or69(arg1: *const root::int8NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn product14(arg1: *const root::NDArray,
                         arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn quotient10(arg1: *const root::NDArray,
                          arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_lt154(arg1: *const root::NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_le154(arg1: *const root::NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_ge154(arg1: *const root::NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_gt154(arg1: *const root::NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_eq157(arg1: *const root::NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_ne157(arg1: *const root::NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_and159(arg1: *const root::NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_or159(arg1: *const root::NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_and_not70(arg1: *const root::NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_or_not70(arg1: *const root::NDArray,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_not_and70(arg1: *const root::NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK7NDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_not_or70(arg1: *const root::NDArray,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn product15(arg1: *const root::uint8NDArray,
                         arg2: *const root::NDArray) -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn quotient11(arg1: *const root::uint8NDArray,
                          arg2: *const root::NDArray) -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_lt155(arg1: *const root::uint8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_le155(arg1: *const root::uint8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_ge155(arg1: *const root::uint8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_gt155(arg1: *const root::uint8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_eq158(arg1: *const root::uint8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_ne158(arg1: *const root::uint8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_and160(arg1: *const root::uint8NDArray,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_or160(arg1: *const root::uint8NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_and_not71(arg1: *const root::uint8NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_or_not71(arg1: *const root::uint8NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_not_and71(arg1: *const root::uint8NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERK7NDArray"]
        pub fn mx_el_not_or71(arg1: *const root::uint8NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn product16(arg1: *const root::NDArray,
                         arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn quotient12(arg1: *const root::NDArray,
                          arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_lt156(arg1: *const root::NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_le156(arg1: *const root::NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_ge156(arg1: *const root::NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_gt156(arg1: *const root::NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_eq159(arg1: *const root::NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_ne159(arg1: *const root::NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_and161(arg1: *const root::NDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_or161(arg1: *const root::NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_and_not72(arg1: *const root::NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_or_not72(arg1: *const root::NDArray,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_not_and72(arg1: *const root::NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK7NDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_not_or72(arg1: *const root::NDArray,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn product17(arg1: *const root::int16NDArray,
                         arg2: *const root::NDArray) -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn quotient13(arg1: *const root::int16NDArray,
                          arg2: *const root::NDArray) -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_lt157(arg1: *const root::int16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_le157(arg1: *const root::int16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_ge157(arg1: *const root::int16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_gt157(arg1: *const root::int16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_eq160(arg1: *const root::int16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_ne160(arg1: *const root::int16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_and162(arg1: *const root::int16NDArray,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_or162(arg1: *const root::int16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_and_not73(arg1: *const root::int16NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_or_not73(arg1: *const root::int16NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_not_and73(arg1: *const root::int16NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERK7NDArray"]
        pub fn mx_el_not_or73(arg1: *const root::int16NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn product18(arg1: *const root::NDArray,
                         arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn quotient14(arg1: *const root::NDArray,
                          arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_lt158(arg1: *const root::NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_le158(arg1: *const root::NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_ge158(arg1: *const root::NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_gt158(arg1: *const root::NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_eq161(arg1: *const root::NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_ne161(arg1: *const root::NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_and163(arg1: *const root::NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_or163(arg1: *const root::NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_and_not74(arg1: *const root::NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_or_not74(arg1: *const root::NDArray,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_not_and74(arg1: *const root::NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK7NDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_not_or74(arg1: *const root::NDArray,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn product19(arg1: *const root::uint16NDArray,
                         arg2: *const root::NDArray) -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn quotient15(arg1: *const root::uint16NDArray,
                          arg2: *const root::NDArray) -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_lt159(arg1: *const root::uint16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_le159(arg1: *const root::uint16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_ge159(arg1: *const root::uint16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_gt159(arg1: *const root::uint16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_eq162(arg1: *const root::uint16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_ne162(arg1: *const root::uint16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_and164(arg1: *const root::uint16NDArray,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_or164(arg1: *const root::uint16NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_and_not75(arg1: *const root::uint16NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_or_not75(arg1: *const root::uint16NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_not_and75(arg1: *const root::uint16NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERK7NDArray"]
        pub fn mx_el_not_or75(arg1: *const root::uint16NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn product20(arg1: *const root::NDArray,
                         arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn quotient16(arg1: *const root::NDArray,
                          arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_lt160(arg1: *const root::NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_le160(arg1: *const root::NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_ge160(arg1: *const root::NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_gt160(arg1: *const root::NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_eq163(arg1: *const root::NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_ne163(arg1: *const root::NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_and165(arg1: *const root::NDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_or165(arg1: *const root::NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_and_not76(arg1: *const root::NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_or_not76(arg1: *const root::NDArray,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_not_and76(arg1: *const root::NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK7NDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_not_or76(arg1: *const root::NDArray,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn product21(arg1: *const root::int32NDArray,
                         arg2: *const root::NDArray) -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn quotient17(arg1: *const root::int32NDArray,
                          arg2: *const root::NDArray) -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_lt161(arg1: *const root::int32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_le161(arg1: *const root::int32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_ge161(arg1: *const root::int32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_gt161(arg1: *const root::int32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_eq164(arg1: *const root::int32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_ne164(arg1: *const root::int32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_and166(arg1: *const root::int32NDArray,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_or166(arg1: *const root::int32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_and_not77(arg1: *const root::int32NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_or_not77(arg1: *const root::int32NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_not_and77(arg1: *const root::int32NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERK7NDArray"]
        pub fn mx_el_not_or77(arg1: *const root::int32NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn product22(arg1: *const root::NDArray,
                         arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn quotient18(arg1: *const root::NDArray,
                          arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_lt162(arg1: *const root::NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_le162(arg1: *const root::NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_ge162(arg1: *const root::NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_gt162(arg1: *const root::NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_eq165(arg1: *const root::NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_ne165(arg1: *const root::NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_and167(arg1: *const root::NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_or167(arg1: *const root::NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_and_not78(arg1: *const root::NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_or_not78(arg1: *const root::NDArray,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_not_and78(arg1: *const root::NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK7NDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_not_or78(arg1: *const root::NDArray,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn product23(arg1: *const root::uint32NDArray,
                         arg2: *const root::NDArray) -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn quotient19(arg1: *const root::uint32NDArray,
                          arg2: *const root::NDArray) -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_lt163(arg1: *const root::uint32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_le163(arg1: *const root::uint32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_ge163(arg1: *const root::uint32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_gt163(arg1: *const root::uint32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_eq166(arg1: *const root::uint32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_ne166(arg1: *const root::uint32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_and168(arg1: *const root::uint32NDArray,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_or168(arg1: *const root::uint32NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_and_not79(arg1: *const root::uint32NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_or_not79(arg1: *const root::uint32NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_not_and79(arg1: *const root::uint32NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERK7NDArray"]
        pub fn mx_el_not_or79(arg1: *const root::uint32NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn product24(arg1: *const root::NDArray,
                         arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn quotient20(arg1: *const root::NDArray,
                          arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_lt164(arg1: *const root::NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_le164(arg1: *const root::NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_ge164(arg1: *const root::NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_gt164(arg1: *const root::NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_eq167(arg1: *const root::NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_ne167(arg1: *const root::NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_and169(arg1: *const root::NDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_or169(arg1: *const root::NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_and_not80(arg1: *const root::NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_or_not80(arg1: *const root::NDArray,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_not_and80(arg1: *const root::NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK7NDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_not_or80(arg1: *const root::NDArray,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn product25(arg1: *const root::int64NDArray,
                         arg2: *const root::NDArray) -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn quotient21(arg1: *const root::int64NDArray,
                          arg2: *const root::NDArray) -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_lt165(arg1: *const root::int64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_le165(arg1: *const root::int64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_ge165(arg1: *const root::int64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_gt165(arg1: *const root::int64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_eq168(arg1: *const root::int64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_ne168(arg1: *const root::int64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_and170(arg1: *const root::int64NDArray,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_or170(arg1: *const root::int64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_and_not81(arg1: *const root::int64NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_or_not81(arg1: *const root::int64NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_not_and81(arg1: *const root::int64NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERK7NDArray"]
        pub fn mx_el_not_or81(arg1: *const root::int64NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn product26(arg1: *const root::NDArray,
                         arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn quotient22(arg1: *const root::NDArray,
                          arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_lt166(arg1: *const root::NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_le166(arg1: *const root::NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_ge166(arg1: *const root::NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_gt166(arg1: *const root::NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_eq169(arg1: *const root::NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_ne169(arg1: *const root::NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_and171(arg1: *const root::NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_or171(arg1: *const root::NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_and_not82(arg1: *const root::NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_or_not82(arg1: *const root::NDArray,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_not_and82(arg1: *const root::NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK7NDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_not_or82(arg1: *const root::NDArray,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z7productRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn product27(arg1: *const root::uint64NDArray,
                         arg2: *const root::NDArray) -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z8quotientRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn quotient23(arg1: *const root::uint64NDArray,
                          arg2: *const root::NDArray) -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_lt167(arg1: *const root::uint64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_le167(arg1: *const root::uint64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_ge167(arg1: *const root::uint64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_gt167(arg1: *const root::uint64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_eq170(arg1: *const root::uint64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_ne170(arg1: *const root::uint64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_and172(arg1: *const root::uint64NDArray,
                            arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_or172(arg1: *const root::uint64NDArray,
                           arg2: *const root::NDArray) -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_and_not83(arg1: *const root::uint64NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_or_not83(arg1: *const root::uint64NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_not_and83(arg1: *const root::uint64NDArray,
                               arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERK7NDArray"]
        pub fn mx_el_not_or83(arg1: *const root::uint64NDArray,
                              arg2: *const root::NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn product28(arg1: *const root::FloatNDArray,
                         arg2: *const root::int8NDArray) -> root::int8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn quotient24(arg1: *const root::FloatNDArray,
                          arg2: *const root::int8NDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_lt168(arg1: *const root::FloatNDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_le168(arg1: *const root::FloatNDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_ge168(arg1: *const root::FloatNDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_gt168(arg1: *const root::FloatNDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_eq171(arg1: *const root::FloatNDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_ne171(arg1: *const root::FloatNDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_and173(arg1: *const root::FloatNDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_or173(arg1: *const root::FloatNDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_and_not84(arg1: *const root::FloatNDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_or_not84(arg1: *const root::FloatNDArray,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_not_and84(arg1: *const root::FloatNDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK10intNDArrayI10octave_intIaEE"]
        pub fn mx_el_not_or84(arg1: *const root::FloatNDArray,
                              arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn product29(arg1: *const root::int8NDArray,
                         arg2: *const root::FloatNDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn quotient25(arg1: *const root::int8NDArray,
                          arg2: *const root::FloatNDArray)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_lt169(arg1: *const root::int8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_le169(arg1: *const root::int8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_ge169(arg1: *const root::int8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_gt169(arg1: *const root::int8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_eq172(arg1: *const root::int8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_ne172(arg1: *const root::int8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_and174(arg1: *const root::int8NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_or174(arg1: *const root::int8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_and_not85(arg1: *const root::int8NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_or_not85(arg1: *const root::int8NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_not_and85(arg1: *const root::int8NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERK12FloatNDArray"]
        pub fn mx_el_not_or85(arg1: *const root::int8NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn product30(arg1: *const root::FloatNDArray,
                         arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn quotient26(arg1: *const root::FloatNDArray,
                          arg2: *const root::uint8NDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_lt170(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_le170(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_ge170(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_gt170(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_eq173(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_ne173(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_and175(arg1: *const root::FloatNDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_or175(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_and_not86(arg1: *const root::FloatNDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_or_not86(arg1: *const root::FloatNDArray,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_not_and86(arg1: *const root::FloatNDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK10intNDArrayI10octave_intIhEE"]
        pub fn mx_el_not_or86(arg1: *const root::FloatNDArray,
                              arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn product31(arg1: *const root::uint8NDArray,
                         arg2: *const root::FloatNDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn quotient27(arg1: *const root::uint8NDArray,
                          arg2: *const root::FloatNDArray)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_lt171(arg1: *const root::uint8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_le171(arg1: *const root::uint8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_ge171(arg1: *const root::uint8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_gt171(arg1: *const root::uint8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_eq174(arg1: *const root::uint8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_ne174(arg1: *const root::uint8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_and176(arg1: *const root::uint8NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_or176(arg1: *const root::uint8NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_and_not87(arg1: *const root::uint8NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_or_not87(arg1: *const root::uint8NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_not_and87(arg1: *const root::uint8NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERK12FloatNDArray"]
        pub fn mx_el_not_or87(arg1: *const root::uint8NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn product32(arg1: *const root::FloatNDArray,
                         arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn quotient28(arg1: *const root::FloatNDArray,
                          arg2: *const root::int16NDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_lt172(arg1: *const root::FloatNDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_le172(arg1: *const root::FloatNDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_ge172(arg1: *const root::FloatNDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_gt172(arg1: *const root::FloatNDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_eq175(arg1: *const root::FloatNDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_ne175(arg1: *const root::FloatNDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_and177(arg1: *const root::FloatNDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_or177(arg1: *const root::FloatNDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_and_not88(arg1: *const root::FloatNDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_or_not88(arg1: *const root::FloatNDArray,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_not_and88(arg1: *const root::FloatNDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK10intNDArrayI10octave_intIsEE"]
        pub fn mx_el_not_or88(arg1: *const root::FloatNDArray,
                              arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn product33(arg1: *const root::int16NDArray,
                         arg2: *const root::FloatNDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn quotient29(arg1: *const root::int16NDArray,
                          arg2: *const root::FloatNDArray)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_lt173(arg1: *const root::int16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_le173(arg1: *const root::int16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_ge173(arg1: *const root::int16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_gt173(arg1: *const root::int16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_eq176(arg1: *const root::int16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_ne176(arg1: *const root::int16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_and178(arg1: *const root::int16NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_or178(arg1: *const root::int16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_and_not89(arg1: *const root::int16NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_or_not89(arg1: *const root::int16NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_not_and89(arg1: *const root::int16NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERK12FloatNDArray"]
        pub fn mx_el_not_or89(arg1: *const root::int16NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn product34(arg1: *const root::FloatNDArray,
                         arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn quotient30(arg1: *const root::FloatNDArray,
                          arg2: *const root::uint16NDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_lt174(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_le174(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_ge174(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_gt174(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_eq177(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_ne177(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_and179(arg1: *const root::FloatNDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_or179(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_and_not90(arg1: *const root::FloatNDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_or_not90(arg1: *const root::FloatNDArray,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_not_and90(arg1: *const root::FloatNDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK10intNDArrayI10octave_intItEE"]
        pub fn mx_el_not_or90(arg1: *const root::FloatNDArray,
                              arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn product35(arg1: *const root::uint16NDArray,
                         arg2: *const root::FloatNDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn quotient31(arg1: *const root::uint16NDArray,
                          arg2: *const root::FloatNDArray)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_lt175(arg1: *const root::uint16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_le175(arg1: *const root::uint16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_ge175(arg1: *const root::uint16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_gt175(arg1: *const root::uint16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_eq178(arg1: *const root::uint16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_ne178(arg1: *const root::uint16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_and180(arg1: *const root::uint16NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_or180(arg1: *const root::uint16NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_and_not91(arg1: *const root::uint16NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_or_not91(arg1: *const root::uint16NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_not_and91(arg1: *const root::uint16NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERK12FloatNDArray"]
        pub fn mx_el_not_or91(arg1: *const root::uint16NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn product36(arg1: *const root::FloatNDArray,
                         arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn quotient32(arg1: *const root::FloatNDArray,
                          arg2: *const root::int32NDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_lt176(arg1: *const root::FloatNDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_le176(arg1: *const root::FloatNDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_ge176(arg1: *const root::FloatNDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_gt176(arg1: *const root::FloatNDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_eq179(arg1: *const root::FloatNDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_ne179(arg1: *const root::FloatNDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_and181(arg1: *const root::FloatNDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_or181(arg1: *const root::FloatNDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_and_not92(arg1: *const root::FloatNDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_or_not92(arg1: *const root::FloatNDArray,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_not_and92(arg1: *const root::FloatNDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK10intNDArrayI10octave_intIiEE"]
        pub fn mx_el_not_or92(arg1: *const root::FloatNDArray,
                              arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn product37(arg1: *const root::int32NDArray,
                         arg2: *const root::FloatNDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn quotient33(arg1: *const root::int32NDArray,
                          arg2: *const root::FloatNDArray)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_lt177(arg1: *const root::int32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_le177(arg1: *const root::int32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_ge177(arg1: *const root::int32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_gt177(arg1: *const root::int32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_eq180(arg1: *const root::int32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_ne180(arg1: *const root::int32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_and182(arg1: *const root::int32NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_or182(arg1: *const root::int32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_and_not93(arg1: *const root::int32NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_or_not93(arg1: *const root::int32NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_not_and93(arg1: *const root::int32NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERK12FloatNDArray"]
        pub fn mx_el_not_or93(arg1: *const root::int32NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn product38(arg1: *const root::FloatNDArray,
                         arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn quotient34(arg1: *const root::FloatNDArray,
                          arg2: *const root::uint32NDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_lt178(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_le178(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_ge178(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_gt178(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_eq181(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_ne181(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_and183(arg1: *const root::FloatNDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_or183(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_and_not94(arg1: *const root::FloatNDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_or_not94(arg1: *const root::FloatNDArray,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_not_and94(arg1: *const root::FloatNDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK10intNDArrayI10octave_intIjEE"]
        pub fn mx_el_not_or94(arg1: *const root::FloatNDArray,
                              arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn product39(arg1: *const root::uint32NDArray,
                         arg2: *const root::FloatNDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn quotient35(arg1: *const root::uint32NDArray,
                          arg2: *const root::FloatNDArray)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_lt179(arg1: *const root::uint32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_le179(arg1: *const root::uint32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_ge179(arg1: *const root::uint32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_gt179(arg1: *const root::uint32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_eq182(arg1: *const root::uint32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_ne182(arg1: *const root::uint32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_and184(arg1: *const root::uint32NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_or184(arg1: *const root::uint32NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_and_not95(arg1: *const root::uint32NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_or_not95(arg1: *const root::uint32NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_not_and95(arg1: *const root::uint32NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERK12FloatNDArray"]
        pub fn mx_el_not_or95(arg1: *const root::uint32NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn product40(arg1: *const root::FloatNDArray,
                         arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn quotient36(arg1: *const root::FloatNDArray,
                          arg2: *const root::int64NDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_lt180(arg1: *const root::FloatNDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_le180(arg1: *const root::FloatNDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_ge180(arg1: *const root::FloatNDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_gt180(arg1: *const root::FloatNDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_eq183(arg1: *const root::FloatNDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_ne183(arg1: *const root::FloatNDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_and185(arg1: *const root::FloatNDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_or185(arg1: *const root::FloatNDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_and_not96(arg1: *const root::FloatNDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_or_not96(arg1: *const root::FloatNDArray,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_not_and96(arg1: *const root::FloatNDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK10intNDArrayI10octave_intIxEE"]
        pub fn mx_el_not_or96(arg1: *const root::FloatNDArray,
                              arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn product41(arg1: *const root::int64NDArray,
                         arg2: *const root::FloatNDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn quotient37(arg1: *const root::int64NDArray,
                          arg2: *const root::FloatNDArray)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_lt181(arg1: *const root::int64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_le181(arg1: *const root::int64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_ge181(arg1: *const root::int64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_gt181(arg1: *const root::int64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_eq184(arg1: *const root::int64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_ne184(arg1: *const root::int64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_and186(arg1: *const root::int64NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_or186(arg1: *const root::int64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_and_not97(arg1: *const root::int64NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_or_not97(arg1: *const root::int64NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_not_and97(arg1: *const root::int64NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERK12FloatNDArray"]
        pub fn mx_el_not_or97(arg1: *const root::int64NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn product42(arg1: *const root::FloatNDArray,
                         arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn quotient38(arg1: *const root::FloatNDArray,
                          arg2: *const root::uint64NDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_lt182(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_le182(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_ge182(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_gt182(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_eq185(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_ne185(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_and187(arg1: *const root::FloatNDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_or187(arg1: *const root::FloatNDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_and_not98(arg1: *const root::FloatNDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_or_not98(arg1: *const root::FloatNDArray,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_not_and98(arg1: *const root::FloatNDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK12FloatNDArrayRK10intNDArrayI10octave_intIyEE"]
        pub fn mx_el_not_or98(arg1: *const root::FloatNDArray,
                              arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z7productRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn product43(arg1: *const root::uint64NDArray,
                         arg2: *const root::FloatNDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8quotientRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn quotient39(arg1: *const root::uint64NDArray,
                          arg2: *const root::FloatNDArray)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_lt183(arg1: *const root::uint64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_le183(arg1: *const root::uint64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_ge183(arg1: *const root::uint64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_gt183(arg1: *const root::uint64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_eq186(arg1: *const root::uint64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_ne186(arg1: *const root::uint64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_and188(arg1: *const root::uint64NDArray,
                            arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_or188(arg1: *const root::uint64NDArray,
                           arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_and_not99(arg1: *const root::uint64NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_or_not99(arg1: *const root::uint64NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_not_and99(arg1: *const root::uint64NDArray,
                               arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERK12FloatNDArray"]
        pub fn mx_el_not_or99(arg1: *const root::uint64NDArray,
                              arg2: *const root::FloatNDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_lt184(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_le184(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_ge184(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_gt184(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_eq187(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_ne187(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_and189(arg1: *const root::int8NDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_or189(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_not_and100(arg1: *const root::int8NDArray,
                                arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS0_IhE"]
        pub fn mx_el_not_or100(arg1: *const root::int8NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_lt185(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_le185(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_ge185(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_gt185(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_eq188(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_ne188(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_and190(arg1: *const root::int8NDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_or190(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_not_and101(arg1: *const root::int8NDArray,
                                arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS0_IsE"]
        pub fn mx_el_not_or101(arg1: *const root::int8NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_lt186(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_le186(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_ge186(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_gt186(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_eq189(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_ne189(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_and191(arg1: *const root::int8NDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_or191(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_not_and102(arg1: *const root::int8NDArray,
                                arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS0_ItE"]
        pub fn mx_el_not_or102(arg1: *const root::int8NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_lt187(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_le187(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_ge187(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_gt187(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_eq190(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_ne190(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_and192(arg1: *const root::int8NDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_or192(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_not_and103(arg1: *const root::int8NDArray,
                                arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS0_IiE"]
        pub fn mx_el_not_or103(arg1: *const root::int8NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_lt188(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_le188(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_ge188(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_gt188(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_eq191(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_ne191(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_and193(arg1: *const root::int8NDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_or193(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_not_and104(arg1: *const root::int8NDArray,
                                arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS0_IjE"]
        pub fn mx_el_not_or104(arg1: *const root::int8NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_lt189(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_le189(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_ge189(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_gt189(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_eq192(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_ne192(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_and194(arg1: *const root::int8NDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_or194(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_not_and105(arg1: *const root::int8NDArray,
                                arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS0_IxE"]
        pub fn mx_el_not_or105(arg1: *const root::int8NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_lt190(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_le190(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_ge190(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_gt190(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_eq193(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_ne193(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_and195(arg1: *const root::int8NDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_or195(arg1: *const root::int8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_not_and106(arg1: *const root::int8NDArray,
                                arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS0_IyE"]
        pub fn mx_el_not_or106(arg1: *const root::int8NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_lt191(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_le191(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_ge191(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_gt191(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_eq194(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_ne194(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_and196(arg1: *const root::int16NDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_or196(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_not_and107(arg1: *const root::int16NDArray,
                                arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS0_IaE"]
        pub fn mx_el_not_or107(arg1: *const root::int16NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_lt192(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_le192(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_ge192(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_gt192(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_eq195(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_ne195(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_and197(arg1: *const root::int16NDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_or197(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_not_and108(arg1: *const root::int16NDArray,
                                arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS0_IhE"]
        pub fn mx_el_not_or108(arg1: *const root::int16NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_lt193(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_le193(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_ge193(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_gt193(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_eq196(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_ne196(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_and198(arg1: *const root::int16NDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_or198(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_not_and109(arg1: *const root::int16NDArray,
                                arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS0_ItE"]
        pub fn mx_el_not_or109(arg1: *const root::int16NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_lt194(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_le194(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_ge194(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_gt194(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_eq197(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_ne197(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_and199(arg1: *const root::int16NDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_or199(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_not_and110(arg1: *const root::int16NDArray,
                                arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS0_IiE"]
        pub fn mx_el_not_or110(arg1: *const root::int16NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_lt195(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_le195(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_ge195(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_gt195(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_eq198(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_ne198(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_and200(arg1: *const root::int16NDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_or200(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_not_and111(arg1: *const root::int16NDArray,
                                arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS0_IjE"]
        pub fn mx_el_not_or111(arg1: *const root::int16NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_lt196(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_le196(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_ge196(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_gt196(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_eq199(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_ne199(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_and201(arg1: *const root::int16NDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_or201(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_not_and112(arg1: *const root::int16NDArray,
                                arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS0_IxE"]
        pub fn mx_el_not_or112(arg1: *const root::int16NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_lt197(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_le197(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_ge197(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_gt197(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_eq200(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_ne200(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_and202(arg1: *const root::int16NDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_or202(arg1: *const root::int16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_not_and113(arg1: *const root::int16NDArray,
                                arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS0_IyE"]
        pub fn mx_el_not_or113(arg1: *const root::int16NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_lt198(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_le198(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_ge198(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_gt198(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_eq201(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_ne201(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_and203(arg1: *const root::int32NDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_or203(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_not_and114(arg1: *const root::int32NDArray,
                                arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS0_IaE"]
        pub fn mx_el_not_or114(arg1: *const root::int32NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_lt199(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_le199(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_ge199(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_gt199(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_eq202(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_ne202(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_and204(arg1: *const root::int32NDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_or204(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_not_and115(arg1: *const root::int32NDArray,
                                arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS0_IhE"]
        pub fn mx_el_not_or115(arg1: *const root::int32NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_lt200(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_le200(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_ge200(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_gt200(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_eq203(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_ne203(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_and205(arg1: *const root::int32NDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_or205(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_not_and116(arg1: *const root::int32NDArray,
                                arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS0_IsE"]
        pub fn mx_el_not_or116(arg1: *const root::int32NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_lt201(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_le201(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_ge201(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_gt201(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_eq204(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_ne204(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_and206(arg1: *const root::int32NDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_or206(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_not_and117(arg1: *const root::int32NDArray,
                                arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS0_ItE"]
        pub fn mx_el_not_or117(arg1: *const root::int32NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_lt202(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_le202(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_ge202(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_gt202(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_eq205(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_ne205(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_and207(arg1: *const root::int32NDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_or207(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_not_and118(arg1: *const root::int32NDArray,
                                arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS0_IjE"]
        pub fn mx_el_not_or118(arg1: *const root::int32NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_lt203(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_le203(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_ge203(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_gt203(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_eq206(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_ne206(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_and208(arg1: *const root::int32NDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_or208(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_not_and119(arg1: *const root::int32NDArray,
                                arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS0_IxE"]
        pub fn mx_el_not_or119(arg1: *const root::int32NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_lt204(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_le204(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_ge204(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_gt204(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_eq207(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_ne207(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_and209(arg1: *const root::int32NDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_or209(arg1: *const root::int32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_not_and120(arg1: *const root::int32NDArray,
                                arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS0_IyE"]
        pub fn mx_el_not_or120(arg1: *const root::int32NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_lt205(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_le205(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_ge205(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_gt205(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_eq208(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_ne208(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_and210(arg1: *const root::int64NDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_or210(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_not_and121(arg1: *const root::int64NDArray,
                                arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS0_IaE"]
        pub fn mx_el_not_or121(arg1: *const root::int64NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_lt206(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_le206(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_ge206(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_gt206(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_eq209(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_ne209(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_and211(arg1: *const root::int64NDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_or211(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_not_and122(arg1: *const root::int64NDArray,
                                arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS0_IhE"]
        pub fn mx_el_not_or122(arg1: *const root::int64NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_lt207(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_le207(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_ge207(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_gt207(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_eq210(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_ne210(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_and212(arg1: *const root::int64NDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_or212(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_not_and123(arg1: *const root::int64NDArray,
                                arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS0_IsE"]
        pub fn mx_el_not_or123(arg1: *const root::int64NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_lt208(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_le208(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_ge208(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_gt208(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_eq211(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_ne211(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_and213(arg1: *const root::int64NDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_or213(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_not_and124(arg1: *const root::int64NDArray,
                                arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS0_ItE"]
        pub fn mx_el_not_or124(arg1: *const root::int64NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_lt209(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_le209(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_ge209(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_gt209(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_eq212(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_ne212(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_and214(arg1: *const root::int64NDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_or214(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_not_and125(arg1: *const root::int64NDArray,
                                arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS0_IiE"]
        pub fn mx_el_not_or125(arg1: *const root::int64NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_lt210(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_le210(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_ge210(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_gt210(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_eq213(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_ne213(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_and215(arg1: *const root::int64NDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_or215(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_not_and126(arg1: *const root::int64NDArray,
                                arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS0_IjE"]
        pub fn mx_el_not_or126(arg1: *const root::int64NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_lt211(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_le211(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_ge211(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_gt211(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_eq214(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_ne214(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_and216(arg1: *const root::int64NDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_or216(arg1: *const root::int64NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_not_and127(arg1: *const root::int64NDArray,
                                arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS0_IyE"]
        pub fn mx_el_not_or127(arg1: *const root::int64NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_lt212(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_le212(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_ge212(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_gt212(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_eq215(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_ne215(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_and217(arg1: *const root::uint8NDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_or217(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_not_and128(arg1: *const root::uint8NDArray,
                                arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS0_IaE"]
        pub fn mx_el_not_or128(arg1: *const root::uint8NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_lt213(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_le213(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_ge213(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_gt213(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_eq216(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_ne216(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_and218(arg1: *const root::uint8NDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_or218(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_not_and129(arg1: *const root::uint8NDArray,
                                arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS0_IsE"]
        pub fn mx_el_not_or129(arg1: *const root::uint8NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_lt214(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_le214(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_ge214(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_gt214(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_eq217(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_ne217(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_and219(arg1: *const root::uint8NDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_or219(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_not_and130(arg1: *const root::uint8NDArray,
                                arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS0_ItE"]
        pub fn mx_el_not_or130(arg1: *const root::uint8NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_lt215(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_le215(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_ge215(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_gt215(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_eq218(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_ne218(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_and220(arg1: *const root::uint8NDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_or220(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_not_and131(arg1: *const root::uint8NDArray,
                                arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS0_IiE"]
        pub fn mx_el_not_or131(arg1: *const root::uint8NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_lt216(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_le216(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_ge216(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_gt216(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_eq219(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_ne219(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_and221(arg1: *const root::uint8NDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_or221(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_not_and132(arg1: *const root::uint8NDArray,
                                arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS0_IjE"]
        pub fn mx_el_not_or132(arg1: *const root::uint8NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_lt217(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_le217(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_ge217(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_gt217(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_eq220(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_ne220(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_and222(arg1: *const root::uint8NDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_or222(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_not_and133(arg1: *const root::uint8NDArray,
                                arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS0_IxE"]
        pub fn mx_el_not_or133(arg1: *const root::uint8NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_lt218(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_le218(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_ge218(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_gt218(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_eq221(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_ne221(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_and223(arg1: *const root::uint8NDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_or223(arg1: *const root::uint8NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_not_and134(arg1: *const root::uint8NDArray,
                                arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS0_IyE"]
        pub fn mx_el_not_or134(arg1: *const root::uint8NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_lt219(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_le219(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_ge219(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_gt219(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_eq222(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_ne222(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_and224(arg1: *const root::uint16NDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_or224(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_not_and135(arg1: *const root::uint16NDArray,
                                arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS0_IaE"]
        pub fn mx_el_not_or135(arg1: *const root::uint16NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_lt220(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_le220(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_ge220(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_gt220(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_eq223(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_ne223(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_and225(arg1: *const root::uint16NDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_or225(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_not_and136(arg1: *const root::uint16NDArray,
                                arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS0_IhE"]
        pub fn mx_el_not_or136(arg1: *const root::uint16NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_lt221(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_le221(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_ge221(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_gt221(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_eq224(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_ne224(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_and226(arg1: *const root::uint16NDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_or226(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_not_and137(arg1: *const root::uint16NDArray,
                                arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS0_IsE"]
        pub fn mx_el_not_or137(arg1: *const root::uint16NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_lt222(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_le222(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_ge222(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_gt222(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_eq225(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_ne225(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_and227(arg1: *const root::uint16NDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_or227(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_not_and138(arg1: *const root::uint16NDArray,
                                arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS0_IiE"]
        pub fn mx_el_not_or138(arg1: *const root::uint16NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_lt223(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_le223(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_ge223(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_gt223(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_eq226(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_ne226(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_and228(arg1: *const root::uint16NDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_or228(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_not_and139(arg1: *const root::uint16NDArray,
                                arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS0_IjE"]
        pub fn mx_el_not_or139(arg1: *const root::uint16NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_lt224(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_le224(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_ge224(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_gt224(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_eq227(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_ne227(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_and229(arg1: *const root::uint16NDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_or229(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_not_and140(arg1: *const root::uint16NDArray,
                                arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS0_IxE"]
        pub fn mx_el_not_or140(arg1: *const root::uint16NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_lt225(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_le225(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_ge225(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_gt225(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_eq228(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_ne228(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_and230(arg1: *const root::uint16NDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_or230(arg1: *const root::uint16NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_not_and141(arg1: *const root::uint16NDArray,
                                arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS0_IyE"]
        pub fn mx_el_not_or141(arg1: *const root::uint16NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_lt226(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_le226(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_ge226(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_gt226(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_eq229(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_ne229(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_and231(arg1: *const root::uint32NDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_or231(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_not_and142(arg1: *const root::uint32NDArray,
                                arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS0_IaE"]
        pub fn mx_el_not_or142(arg1: *const root::uint32NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_lt227(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_le227(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_ge227(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_gt227(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_eq230(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_ne230(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_and232(arg1: *const root::uint32NDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_or232(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_not_and143(arg1: *const root::uint32NDArray,
                                arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS0_IhE"]
        pub fn mx_el_not_or143(arg1: *const root::uint32NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_lt228(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_le228(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_ge228(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_gt228(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_eq231(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_ne231(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_and233(arg1: *const root::uint32NDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_or233(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_not_and144(arg1: *const root::uint32NDArray,
                                arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS0_IsE"]
        pub fn mx_el_not_or144(arg1: *const root::uint32NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_lt229(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_le229(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_ge229(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_gt229(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_eq232(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_ne232(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_and234(arg1: *const root::uint32NDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_or234(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_not_and145(arg1: *const root::uint32NDArray,
                                arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS0_ItE"]
        pub fn mx_el_not_or145(arg1: *const root::uint32NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_lt230(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_le230(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_ge230(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_gt230(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_eq233(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_ne233(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_and235(arg1: *const root::uint32NDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_or235(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_not_and146(arg1: *const root::uint32NDArray,
                                arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS0_IiE"]
        pub fn mx_el_not_or146(arg1: *const root::uint32NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_lt231(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_le231(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_ge231(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_gt231(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_eq234(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_ne234(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_and236(arg1: *const root::uint32NDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_or236(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_not_and147(arg1: *const root::uint32NDArray,
                                arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS0_IxE"]
        pub fn mx_el_not_or147(arg1: *const root::uint32NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_lt232(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_le232(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_ge232(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_gt232(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_eq235(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_ne235(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_and237(arg1: *const root::uint32NDArray,
                            arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_or237(arg1: *const root::uint32NDArray,
                           arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_not_and148(arg1: *const root::uint32NDArray,
                                arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS0_IyE"]
        pub fn mx_el_not_or148(arg1: *const root::uint32NDArray,
                               arg2: *const root::octave_uint64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_lt233(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_le233(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_ge233(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_gt233(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_eq236(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_ne236(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_and238(arg1: *const root::uint64NDArray,
                            arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_or238(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_not_and149(arg1: *const root::uint64NDArray,
                                arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS0_IaE"]
        pub fn mx_el_not_or149(arg1: *const root::uint64NDArray,
                               arg2: *const root::octave_int8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_lt234(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_le234(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_ge234(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_gt234(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_eq237(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_ne237(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_and239(arg1: *const root::uint64NDArray,
                            arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_or239(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_not_and150(arg1: *const root::uint64NDArray,
                                arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS0_IhE"]
        pub fn mx_el_not_or150(arg1: *const root::uint64NDArray,
                               arg2: *const root::octave_uint8)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_lt235(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_le235(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_ge235(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_gt235(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_eq238(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_ne238(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_and240(arg1: *const root::uint64NDArray,
                            arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_or240(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_not_and151(arg1: *const root::uint64NDArray,
                                arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS0_IsE"]
        pub fn mx_el_not_or151(arg1: *const root::uint64NDArray,
                               arg2: *const root::octave_int16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_lt236(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_le236(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_ge236(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_gt236(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_eq239(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_ne239(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_and241(arg1: *const root::uint64NDArray,
                            arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_or241(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_not_and152(arg1: *const root::uint64NDArray,
                                arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS0_ItE"]
        pub fn mx_el_not_or152(arg1: *const root::uint64NDArray,
                               arg2: *const root::octave_uint16)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_lt237(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_le237(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_ge237(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_gt237(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_eq240(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_ne240(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_and242(arg1: *const root::uint64NDArray,
                            arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_or242(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_not_and153(arg1: *const root::uint64NDArray,
                                arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS0_IiE"]
        pub fn mx_el_not_or153(arg1: *const root::uint64NDArray,
                               arg2: *const root::octave_int32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_lt238(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_le238(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_ge238(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_gt238(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_eq241(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_ne241(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_and243(arg1: *const root::uint64NDArray,
                            arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_or243(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_not_and154(arg1: *const root::uint64NDArray,
                                arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS0_IjE"]
        pub fn mx_el_not_or154(arg1: *const root::uint64NDArray,
                               arg2: *const root::octave_uint32)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_lt239(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_le239(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_ge239(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_gt239(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_eq242(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_ne242(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_and244(arg1: *const root::uint64NDArray,
                            arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_or244(arg1: *const root::uint64NDArray,
                           arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_not_and155(arg1: *const root::uint64NDArray,
                                arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS0_IxE"]
        pub fn mx_el_not_or155(arg1: *const root::uint64NDArray,
                               arg2: *const root::octave_int64)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_lt240(arg1: *const root::octave_int8,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_le240(arg1: *const root::octave_int8,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ge240(arg1: *const root::octave_int8,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_gt240(arg1: *const root::octave_int8,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_eq243(arg1: *const root::octave_int8,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ne243(arg1: *const root::octave_int8,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and245(arg1: *const root::octave_int8,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or245(arg1: *const root::octave_int8,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and_not100(arg1: *const root::octave_int8,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIaERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or_not100(arg1: *const root::octave_int8,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_lt241(arg1: *const root::octave_int8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_le241(arg1: *const root::octave_int8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ge241(arg1: *const root::octave_int8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_gt241(arg1: *const root::octave_int8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_eq244(arg1: *const root::octave_int8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ne244(arg1: *const root::octave_int8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and246(arg1: *const root::octave_int8,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or246(arg1: *const root::octave_int8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and_not101(arg1: *const root::octave_int8,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIaERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or_not101(arg1: *const root::octave_int8,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_lt242(arg1: *const root::octave_int8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_le242(arg1: *const root::octave_int8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ge242(arg1: *const root::octave_int8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_gt242(arg1: *const root::octave_int8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_eq245(arg1: *const root::octave_int8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ne245(arg1: *const root::octave_int8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and247(arg1: *const root::octave_int8,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or247(arg1: *const root::octave_int8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and_not102(arg1: *const root::octave_int8,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIaERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or_not102(arg1: *const root::octave_int8,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_lt243(arg1: *const root::octave_int8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_le243(arg1: *const root::octave_int8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ge243(arg1: *const root::octave_int8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_gt243(arg1: *const root::octave_int8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_eq246(arg1: *const root::octave_int8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ne246(arg1: *const root::octave_int8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and248(arg1: *const root::octave_int8,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or248(arg1: *const root::octave_int8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and_not103(arg1: *const root::octave_int8,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIaERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or_not103(arg1: *const root::octave_int8,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_lt244(arg1: *const root::octave_int8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_le244(arg1: *const root::octave_int8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ge244(arg1: *const root::octave_int8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_gt244(arg1: *const root::octave_int8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_eq247(arg1: *const root::octave_int8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ne247(arg1: *const root::octave_int8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and249(arg1: *const root::octave_int8,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or249(arg1: *const root::octave_int8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and_not104(arg1: *const root::octave_int8,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIaERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or_not104(arg1: *const root::octave_int8,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_lt245(arg1: *const root::octave_int8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_le245(arg1: *const root::octave_int8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ge245(arg1: *const root::octave_int8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_gt245(arg1: *const root::octave_int8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_eq248(arg1: *const root::octave_int8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ne248(arg1: *const root::octave_int8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and250(arg1: *const root::octave_int8,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or250(arg1: *const root::octave_int8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and_not105(arg1: *const root::octave_int8,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIaERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or_not105(arg1: *const root::octave_int8,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_lt246(arg1: *const root::octave_int8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_le246(arg1: *const root::octave_int8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ge246(arg1: *const root::octave_int8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_gt246(arg1: *const root::octave_int8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_eq249(arg1: *const root::octave_int8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ne249(arg1: *const root::octave_int8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and251(arg1: *const root::octave_int8,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or251(arg1: *const root::octave_int8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and_not106(arg1: *const root::octave_int8,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIaERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or_not106(arg1: *const root::octave_int8,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_lt247(arg1: *const root::octave_int16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_le247(arg1: *const root::octave_int16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ge247(arg1: *const root::octave_int16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_gt247(arg1: *const root::octave_int16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_eq250(arg1: *const root::octave_int16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ne250(arg1: *const root::octave_int16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and252(arg1: *const root::octave_int16,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or252(arg1: *const root::octave_int16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and_not107(arg1: *const root::octave_int16,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIsERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or_not107(arg1: *const root::octave_int16,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_lt248(arg1: *const root::octave_int16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_le248(arg1: *const root::octave_int16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ge248(arg1: *const root::octave_int16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_gt248(arg1: *const root::octave_int16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_eq251(arg1: *const root::octave_int16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ne251(arg1: *const root::octave_int16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and253(arg1: *const root::octave_int16,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or253(arg1: *const root::octave_int16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and_not108(arg1: *const root::octave_int16,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIsERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or_not108(arg1: *const root::octave_int16,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_lt249(arg1: *const root::octave_int16,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_le249(arg1: *const root::octave_int16,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ge249(arg1: *const root::octave_int16,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_gt249(arg1: *const root::octave_int16,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_eq252(arg1: *const root::octave_int16,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ne252(arg1: *const root::octave_int16,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and254(arg1: *const root::octave_int16,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or254(arg1: *const root::octave_int16,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and_not109(arg1: *const root::octave_int16,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIsERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or_not109(arg1: *const root::octave_int16,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_lt250(arg1: *const root::octave_int16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_le250(arg1: *const root::octave_int16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ge250(arg1: *const root::octave_int16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_gt250(arg1: *const root::octave_int16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_eq253(arg1: *const root::octave_int16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ne253(arg1: *const root::octave_int16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and255(arg1: *const root::octave_int16,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or255(arg1: *const root::octave_int16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and_not110(arg1: *const root::octave_int16,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIsERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or_not110(arg1: *const root::octave_int16,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_lt251(arg1: *const root::octave_int16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_le251(arg1: *const root::octave_int16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ge251(arg1: *const root::octave_int16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_gt251(arg1: *const root::octave_int16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_eq254(arg1: *const root::octave_int16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ne254(arg1: *const root::octave_int16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and256(arg1: *const root::octave_int16,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or256(arg1: *const root::octave_int16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and_not111(arg1: *const root::octave_int16,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIsERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or_not111(arg1: *const root::octave_int16,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_lt252(arg1: *const root::octave_int16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_le252(arg1: *const root::octave_int16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ge252(arg1: *const root::octave_int16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_gt252(arg1: *const root::octave_int16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_eq255(arg1: *const root::octave_int16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ne255(arg1: *const root::octave_int16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and257(arg1: *const root::octave_int16,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or257(arg1: *const root::octave_int16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and_not112(arg1: *const root::octave_int16,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIsERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or_not112(arg1: *const root::octave_int16,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_lt253(arg1: *const root::octave_int16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_le253(arg1: *const root::octave_int16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ge253(arg1: *const root::octave_int16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_gt253(arg1: *const root::octave_int16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_eq256(arg1: *const root::octave_int16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ne256(arg1: *const root::octave_int16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and258(arg1: *const root::octave_int16,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or258(arg1: *const root::octave_int16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and_not113(arg1: *const root::octave_int16,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIsERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or_not113(arg1: *const root::octave_int16,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_lt254(arg1: *const root::octave_int32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_le254(arg1: *const root::octave_int32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ge254(arg1: *const root::octave_int32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_gt254(arg1: *const root::octave_int32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_eq257(arg1: *const root::octave_int32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ne257(arg1: *const root::octave_int32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and259(arg1: *const root::octave_int32,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or259(arg1: *const root::octave_int32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and_not114(arg1: *const root::octave_int32,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIiERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or_not114(arg1: *const root::octave_int32,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_lt255(arg1: *const root::octave_int32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_le255(arg1: *const root::octave_int32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ge255(arg1: *const root::octave_int32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_gt255(arg1: *const root::octave_int32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_eq258(arg1: *const root::octave_int32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ne258(arg1: *const root::octave_int32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and260(arg1: *const root::octave_int32,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or260(arg1: *const root::octave_int32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and_not115(arg1: *const root::octave_int32,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIiERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or_not115(arg1: *const root::octave_int32,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_lt256(arg1: *const root::octave_int32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_le256(arg1: *const root::octave_int32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ge256(arg1: *const root::octave_int32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_gt256(arg1: *const root::octave_int32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_eq259(arg1: *const root::octave_int32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ne259(arg1: *const root::octave_int32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and261(arg1: *const root::octave_int32,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or261(arg1: *const root::octave_int32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and_not116(arg1: *const root::octave_int32,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIiERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or_not116(arg1: *const root::octave_int32,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_lt257(arg1: *const root::octave_int32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_le257(arg1: *const root::octave_int32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ge257(arg1: *const root::octave_int32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_gt257(arg1: *const root::octave_int32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_eq260(arg1: *const root::octave_int32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ne260(arg1: *const root::octave_int32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and262(arg1: *const root::octave_int32,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or262(arg1: *const root::octave_int32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and_not117(arg1: *const root::octave_int32,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIiERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or_not117(arg1: *const root::octave_int32,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_lt258(arg1: *const root::octave_int32,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_le258(arg1: *const root::octave_int32,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ge258(arg1: *const root::octave_int32,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_gt258(arg1: *const root::octave_int32,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_eq261(arg1: *const root::octave_int32,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ne261(arg1: *const root::octave_int32,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and263(arg1: *const root::octave_int32,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or263(arg1: *const root::octave_int32,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and_not118(arg1: *const root::octave_int32,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIiERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or_not118(arg1: *const root::octave_int32,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_lt259(arg1: *const root::octave_int32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_le259(arg1: *const root::octave_int32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ge259(arg1: *const root::octave_int32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_gt259(arg1: *const root::octave_int32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_eq262(arg1: *const root::octave_int32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ne262(arg1: *const root::octave_int32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and264(arg1: *const root::octave_int32,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or264(arg1: *const root::octave_int32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and_not119(arg1: *const root::octave_int32,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIiERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or_not119(arg1: *const root::octave_int32,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_lt260(arg1: *const root::octave_int32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_le260(arg1: *const root::octave_int32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ge260(arg1: *const root::octave_int32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_gt260(arg1: *const root::octave_int32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_eq263(arg1: *const root::octave_int32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ne263(arg1: *const root::octave_int32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and265(arg1: *const root::octave_int32,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or265(arg1: *const root::octave_int32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and_not120(arg1: *const root::octave_int32,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIiERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or_not120(arg1: *const root::octave_int32,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_lt261(arg1: *const root::octave_int64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_le261(arg1: *const root::octave_int64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ge261(arg1: *const root::octave_int64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_gt261(arg1: *const root::octave_int64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_eq264(arg1: *const root::octave_int64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ne264(arg1: *const root::octave_int64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and266(arg1: *const root::octave_int64,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or266(arg1: *const root::octave_int64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and_not121(arg1: *const root::octave_int64,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIxERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or_not121(arg1: *const root::octave_int64,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_lt262(arg1: *const root::octave_int64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_le262(arg1: *const root::octave_int64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ge262(arg1: *const root::octave_int64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_gt262(arg1: *const root::octave_int64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_eq265(arg1: *const root::octave_int64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ne265(arg1: *const root::octave_int64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and267(arg1: *const root::octave_int64,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or267(arg1: *const root::octave_int64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and_not122(arg1: *const root::octave_int64,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIxERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or_not122(arg1: *const root::octave_int64,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_lt263(arg1: *const root::octave_int64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_le263(arg1: *const root::octave_int64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ge263(arg1: *const root::octave_int64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_gt263(arg1: *const root::octave_int64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_eq266(arg1: *const root::octave_int64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ne266(arg1: *const root::octave_int64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and268(arg1: *const root::octave_int64,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or268(arg1: *const root::octave_int64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and_not123(arg1: *const root::octave_int64,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIxERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or_not123(arg1: *const root::octave_int64,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_lt264(arg1: *const root::octave_int64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_le264(arg1: *const root::octave_int64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ge264(arg1: *const root::octave_int64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_gt264(arg1: *const root::octave_int64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_eq267(arg1: *const root::octave_int64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ne267(arg1: *const root::octave_int64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and269(arg1: *const root::octave_int64,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or269(arg1: *const root::octave_int64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and_not124(arg1: *const root::octave_int64,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIxERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or_not124(arg1: *const root::octave_int64,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_lt265(arg1: *const root::octave_int64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_le265(arg1: *const root::octave_int64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ge265(arg1: *const root::octave_int64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_gt265(arg1: *const root::octave_int64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_eq268(arg1: *const root::octave_int64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ne268(arg1: *const root::octave_int64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and270(arg1: *const root::octave_int64,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or270(arg1: *const root::octave_int64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and_not125(arg1: *const root::octave_int64,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIxERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or_not125(arg1: *const root::octave_int64,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_lt266(arg1: *const root::octave_int64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_le266(arg1: *const root::octave_int64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ge266(arg1: *const root::octave_int64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_gt266(arg1: *const root::octave_int64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_eq269(arg1: *const root::octave_int64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ne269(arg1: *const root::octave_int64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and271(arg1: *const root::octave_int64,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or271(arg1: *const root::octave_int64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and_not126(arg1: *const root::octave_int64,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIxERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or_not126(arg1: *const root::octave_int64,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_lt267(arg1: *const root::octave_int64,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_le267(arg1: *const root::octave_int64,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ge267(arg1: *const root::octave_int64,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_gt267(arg1: *const root::octave_int64,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_eq270(arg1: *const root::octave_int64,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ne270(arg1: *const root::octave_int64,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and272(arg1: *const root::octave_int64,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or272(arg1: *const root::octave_int64,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and_not127(arg1: *const root::octave_int64,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIxERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or_not127(arg1: *const root::octave_int64,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_lt268(arg1: *const root::octave_uint8,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_le268(arg1: *const root::octave_uint8,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ge268(arg1: *const root::octave_uint8,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_gt268(arg1: *const root::octave_uint8,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_eq271(arg1: *const root::octave_uint8,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ne271(arg1: *const root::octave_uint8,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and273(arg1: *const root::octave_uint8,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or273(arg1: *const root::octave_uint8,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and_not128(arg1: *const root::octave_uint8,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIhERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or_not128(arg1: *const root::octave_uint8,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_lt269(arg1: *const root::octave_uint8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_le269(arg1: *const root::octave_uint8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ge269(arg1: *const root::octave_uint8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_gt269(arg1: *const root::octave_uint8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_eq272(arg1: *const root::octave_uint8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ne272(arg1: *const root::octave_uint8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and274(arg1: *const root::octave_uint8,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or274(arg1: *const root::octave_uint8,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and_not129(arg1: *const root::octave_uint8,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIhERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or_not129(arg1: *const root::octave_uint8,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_lt270(arg1: *const root::octave_uint8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_le270(arg1: *const root::octave_uint8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ge270(arg1: *const root::octave_uint8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_gt270(arg1: *const root::octave_uint8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_eq273(arg1: *const root::octave_uint8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ne273(arg1: *const root::octave_uint8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and275(arg1: *const root::octave_uint8,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or275(arg1: *const root::octave_uint8,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and_not130(arg1: *const root::octave_uint8,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIhERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or_not130(arg1: *const root::octave_uint8,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_lt271(arg1: *const root::octave_uint8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_le271(arg1: *const root::octave_uint8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ge271(arg1: *const root::octave_uint8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_gt271(arg1: *const root::octave_uint8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_eq274(arg1: *const root::octave_uint8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ne274(arg1: *const root::octave_uint8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and276(arg1: *const root::octave_uint8,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or276(arg1: *const root::octave_uint8,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and_not131(arg1: *const root::octave_uint8,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIhERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or_not131(arg1: *const root::octave_uint8,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_lt272(arg1: *const root::octave_uint8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_le272(arg1: *const root::octave_uint8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ge272(arg1: *const root::octave_uint8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_gt272(arg1: *const root::octave_uint8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_eq275(arg1: *const root::octave_uint8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ne275(arg1: *const root::octave_uint8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and277(arg1: *const root::octave_uint8,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or277(arg1: *const root::octave_uint8,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and_not132(arg1: *const root::octave_uint8,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIhERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or_not132(arg1: *const root::octave_uint8,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_lt273(arg1: *const root::octave_uint8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_le273(arg1: *const root::octave_uint8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ge273(arg1: *const root::octave_uint8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_gt273(arg1: *const root::octave_uint8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_eq276(arg1: *const root::octave_uint8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ne276(arg1: *const root::octave_uint8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and278(arg1: *const root::octave_uint8,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or278(arg1: *const root::octave_uint8,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and_not133(arg1: *const root::octave_uint8,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIhERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or_not133(arg1: *const root::octave_uint8,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_lt274(arg1: *const root::octave_uint8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_le274(arg1: *const root::octave_uint8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ge274(arg1: *const root::octave_uint8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_gt274(arg1: *const root::octave_uint8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_eq277(arg1: *const root::octave_uint8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ne277(arg1: *const root::octave_uint8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and279(arg1: *const root::octave_uint8,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or279(arg1: *const root::octave_uint8,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and_not134(arg1: *const root::octave_uint8,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIhERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or_not134(arg1: *const root::octave_uint8,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_lt275(arg1: *const root::octave_uint16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_le275(arg1: *const root::octave_uint16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ge275(arg1: *const root::octave_uint16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_gt275(arg1: *const root::octave_uint16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_eq278(arg1: *const root::octave_uint16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ne278(arg1: *const root::octave_uint16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and280(arg1: *const root::octave_uint16,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or280(arg1: *const root::octave_uint16,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and_not135(arg1: *const root::octave_uint16,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intItERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or_not135(arg1: *const root::octave_uint16,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_lt276(arg1: *const root::octave_uint16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_le276(arg1: *const root::octave_uint16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ge276(arg1: *const root::octave_uint16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_gt276(arg1: *const root::octave_uint16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_eq279(arg1: *const root::octave_uint16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ne279(arg1: *const root::octave_uint16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and281(arg1: *const root::octave_uint16,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or281(arg1: *const root::octave_uint16,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and_not136(arg1: *const root::octave_uint16,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intItERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or_not136(arg1: *const root::octave_uint16,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_lt277(arg1: *const root::octave_uint16,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_le277(arg1: *const root::octave_uint16,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ge277(arg1: *const root::octave_uint16,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_gt277(arg1: *const root::octave_uint16,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_eq280(arg1: *const root::octave_uint16,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ne280(arg1: *const root::octave_uint16,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and282(arg1: *const root::octave_uint16,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or282(arg1: *const root::octave_uint16,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and_not137(arg1: *const root::octave_uint16,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intItERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or_not137(arg1: *const root::octave_uint16,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_lt278(arg1: *const root::octave_uint16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_le278(arg1: *const root::octave_uint16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ge278(arg1: *const root::octave_uint16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_gt278(arg1: *const root::octave_uint16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_eq281(arg1: *const root::octave_uint16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ne281(arg1: *const root::octave_uint16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and283(arg1: *const root::octave_uint16,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or283(arg1: *const root::octave_uint16,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and_not138(arg1: *const root::octave_uint16,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intItERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or_not138(arg1: *const root::octave_uint16,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_lt279(arg1: *const root::octave_uint16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_le279(arg1: *const root::octave_uint16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ge279(arg1: *const root::octave_uint16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_gt279(arg1: *const root::octave_uint16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_eq282(arg1: *const root::octave_uint16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ne282(arg1: *const root::octave_uint16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and284(arg1: *const root::octave_uint16,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or284(arg1: *const root::octave_uint16,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and_not139(arg1: *const root::octave_uint16,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intItERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or_not139(arg1: *const root::octave_uint16,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_lt280(arg1: *const root::octave_uint16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_le280(arg1: *const root::octave_uint16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ge280(arg1: *const root::octave_uint16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_gt280(arg1: *const root::octave_uint16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_eq283(arg1: *const root::octave_uint16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ne283(arg1: *const root::octave_uint16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and285(arg1: *const root::octave_uint16,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or285(arg1: *const root::octave_uint16,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and_not140(arg1: *const root::octave_uint16,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intItERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or_not140(arg1: *const root::octave_uint16,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_lt281(arg1: *const root::octave_uint16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_le281(arg1: *const root::octave_uint16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ge281(arg1: *const root::octave_uint16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_gt281(arg1: *const root::octave_uint16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_eq284(arg1: *const root::octave_uint16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ne284(arg1: *const root::octave_uint16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and286(arg1: *const root::octave_uint16,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or286(arg1: *const root::octave_uint16,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and_not141(arg1: *const root::octave_uint16,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intItERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or_not141(arg1: *const root::octave_uint16,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_lt282(arg1: *const root::octave_uint32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_le282(arg1: *const root::octave_uint32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ge282(arg1: *const root::octave_uint32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_gt282(arg1: *const root::octave_uint32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_eq285(arg1: *const root::octave_uint32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ne285(arg1: *const root::octave_uint32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and287(arg1: *const root::octave_uint32,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or287(arg1: *const root::octave_uint32,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and_not142(arg1: *const root::octave_uint32,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIjERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or_not142(arg1: *const root::octave_uint32,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_lt283(arg1: *const root::octave_uint32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_le283(arg1: *const root::octave_uint32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ge283(arg1: *const root::octave_uint32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_gt283(arg1: *const root::octave_uint32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_eq286(arg1: *const root::octave_uint32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ne286(arg1: *const root::octave_uint32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and288(arg1: *const root::octave_uint32,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or288(arg1: *const root::octave_uint32,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and_not143(arg1: *const root::octave_uint32,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIjERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or_not143(arg1: *const root::octave_uint32,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_lt284(arg1: *const root::octave_uint32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_le284(arg1: *const root::octave_uint32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ge284(arg1: *const root::octave_uint32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_gt284(arg1: *const root::octave_uint32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_eq287(arg1: *const root::octave_uint32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ne287(arg1: *const root::octave_uint32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and289(arg1: *const root::octave_uint32,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or289(arg1: *const root::octave_uint32,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and_not144(arg1: *const root::octave_uint32,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIjERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or_not144(arg1: *const root::octave_uint32,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_lt285(arg1: *const root::octave_uint32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_le285(arg1: *const root::octave_uint32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ge285(arg1: *const root::octave_uint32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_gt285(arg1: *const root::octave_uint32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_eq288(arg1: *const root::octave_uint32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ne288(arg1: *const root::octave_uint32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and290(arg1: *const root::octave_uint32,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or290(arg1: *const root::octave_uint32,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and_not145(arg1: *const root::octave_uint32,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIjERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or_not145(arg1: *const root::octave_uint32,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_lt286(arg1: *const root::octave_uint32,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_le286(arg1: *const root::octave_uint32,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ge286(arg1: *const root::octave_uint32,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_gt286(arg1: *const root::octave_uint32,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_eq289(arg1: *const root::octave_uint32,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ne289(arg1: *const root::octave_uint32,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and291(arg1: *const root::octave_uint32,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or291(arg1: *const root::octave_uint32,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and_not146(arg1: *const root::octave_uint32,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIjERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or_not146(arg1: *const root::octave_uint32,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_lt287(arg1: *const root::octave_uint32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_le287(arg1: *const root::octave_uint32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ge287(arg1: *const root::octave_uint32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_gt287(arg1: *const root::octave_uint32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_eq290(arg1: *const root::octave_uint32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ne290(arg1: *const root::octave_uint32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and292(arg1: *const root::octave_uint32,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or292(arg1: *const root::octave_uint32,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and_not147(arg1: *const root::octave_uint32,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIjERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or_not147(arg1: *const root::octave_uint32,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_lt288(arg1: *const root::octave_uint32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_le288(arg1: *const root::octave_uint32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ge288(arg1: *const root::octave_uint32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_gt288(arg1: *const root::octave_uint32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_eq291(arg1: *const root::octave_uint32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_ne291(arg1: *const root::octave_uint32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and293(arg1: *const root::octave_uint32,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or293(arg1: *const root::octave_uint32,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_and_not148(arg1: *const root::octave_uint32,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIjERK10intNDArrayIS_IyEE"]
        pub fn mx_el_or_not148(arg1: *const root::octave_uint32,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_lt289(arg1: *const root::octave_uint64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_le289(arg1: *const root::octave_uint64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ge289(arg1: *const root::octave_uint64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_gt289(arg1: *const root::octave_uint64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_eq292(arg1: *const root::octave_uint64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_ne292(arg1: *const root::octave_uint64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and294(arg1: *const root::octave_uint64,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or294(arg1: *const root::octave_uint64,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_and_not149(arg1: *const root::octave_uint64,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIyERK10intNDArrayIS_IaEE"]
        pub fn mx_el_or_not149(arg1: *const root::octave_uint64,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_lt290(arg1: *const root::octave_uint64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_le290(arg1: *const root::octave_uint64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ge290(arg1: *const root::octave_uint64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_gt290(arg1: *const root::octave_uint64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_eq293(arg1: *const root::octave_uint64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_ne293(arg1: *const root::octave_uint64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and295(arg1: *const root::octave_uint64,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or295(arg1: *const root::octave_uint64,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_and_not150(arg1: *const root::octave_uint64,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIyERK10intNDArrayIS_IhEE"]
        pub fn mx_el_or_not150(arg1: *const root::octave_uint64,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_lt291(arg1: *const root::octave_uint64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_le291(arg1: *const root::octave_uint64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ge291(arg1: *const root::octave_uint64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_gt291(arg1: *const root::octave_uint64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_eq294(arg1: *const root::octave_uint64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_ne294(arg1: *const root::octave_uint64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and296(arg1: *const root::octave_uint64,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or296(arg1: *const root::octave_uint64,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_and_not151(arg1: *const root::octave_uint64,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIyERK10intNDArrayIS_IsEE"]
        pub fn mx_el_or_not151(arg1: *const root::octave_uint64,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_lt292(arg1: *const root::octave_uint64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_le292(arg1: *const root::octave_uint64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ge292(arg1: *const root::octave_uint64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_gt292(arg1: *const root::octave_uint64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_eq295(arg1: *const root::octave_uint64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_ne295(arg1: *const root::octave_uint64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and297(arg1: *const root::octave_uint64,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or297(arg1: *const root::octave_uint64,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_and_not152(arg1: *const root::octave_uint64,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIyERK10intNDArrayIS_ItEE"]
        pub fn mx_el_or_not152(arg1: *const root::octave_uint64,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_lt293(arg1: *const root::octave_uint64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_le293(arg1: *const root::octave_uint64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ge293(arg1: *const root::octave_uint64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_gt293(arg1: *const root::octave_uint64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_eq296(arg1: *const root::octave_uint64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_ne296(arg1: *const root::octave_uint64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and298(arg1: *const root::octave_uint64,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or298(arg1: *const root::octave_uint64,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_and_not153(arg1: *const root::octave_uint64,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIyERK10intNDArrayIS_IiEE"]
        pub fn mx_el_or_not153(arg1: *const root::octave_uint64,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_lt294(arg1: *const root::octave_uint64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_le294(arg1: *const root::octave_uint64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ge294(arg1: *const root::octave_uint64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_gt294(arg1: *const root::octave_uint64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_eq297(arg1: *const root::octave_uint64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_ne297(arg1: *const root::octave_uint64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and299(arg1: *const root::octave_uint64,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or299(arg1: *const root::octave_uint64,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_and_not154(arg1: *const root::octave_uint64,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIyERK10intNDArrayIS_IjEE"]
        pub fn mx_el_or_not154(arg1: *const root::octave_uint64,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_ltRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_lt295(arg1: *const root::octave_uint64,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_leRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_le295(arg1: *const root::octave_uint64,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_geRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ge295(arg1: *const root::octave_uint64,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_gtRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_gt295(arg1: *const root::octave_uint64,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_eqRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_eq298(arg1: *const root::octave_uint64,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_neRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_ne298(arg1: *const root::octave_uint64,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z9mx_el_andRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and300(arg1: *const root::octave_uint64,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_Z8mx_el_orRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or300(arg1: *const root::octave_uint64,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_and_not155(arg1: *const root::octave_uint64,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10octave_intIyERK10intNDArrayIS_IxEE"]
        pub fn mx_el_or_not155(arg1: *const root::octave_uint64,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_lt296(arg1: *const root::int8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_le296(arg1: *const root::int8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_ge296(arg1: *const root::int8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_gt296(arg1: *const root::int8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_eq299(arg1: *const root::int8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_ne299(arg1: *const root::int8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_and301(arg1: *const root::int8NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_or301(arg1: *const root::int8NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_and_not156(arg1: *const root::int8NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_or_not156(arg1: *const root::int8NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_not_and156(arg1: *const root::int8NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS_IS0_IhEE"]
        pub fn mx_el_not_or156(arg1: *const root::int8NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_lt297(arg1: *const root::int8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_le297(arg1: *const root::int8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_ge297(arg1: *const root::int8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_gt297(arg1: *const root::int8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_eq300(arg1: *const root::int8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_ne300(arg1: *const root::int8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_and302(arg1: *const root::int8NDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_or302(arg1: *const root::int8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_and_not157(arg1: *const root::int8NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_or_not157(arg1: *const root::int8NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_not_and157(arg1: *const root::int8NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS_IS0_IsEE"]
        pub fn mx_el_not_or157(arg1: *const root::int8NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_lt298(arg1: *const root::int8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_le298(arg1: *const root::int8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_ge298(arg1: *const root::int8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_gt298(arg1: *const root::int8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_eq301(arg1: *const root::int8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_ne301(arg1: *const root::int8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_and303(arg1: *const root::int8NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_or303(arg1: *const root::int8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_and_not158(arg1: *const root::int8NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_or_not158(arg1: *const root::int8NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_not_and158(arg1: *const root::int8NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS_IS0_ItEE"]
        pub fn mx_el_not_or158(arg1: *const root::int8NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_lt299(arg1: *const root::int8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_le299(arg1: *const root::int8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_ge299(arg1: *const root::int8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_gt299(arg1: *const root::int8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_eq302(arg1: *const root::int8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_ne302(arg1: *const root::int8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_and304(arg1: *const root::int8NDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_or304(arg1: *const root::int8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_and_not159(arg1: *const root::int8NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_or_not159(arg1: *const root::int8NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_not_and159(arg1: *const root::int8NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS_IS0_IiEE"]
        pub fn mx_el_not_or159(arg1: *const root::int8NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_lt300(arg1: *const root::int8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_le300(arg1: *const root::int8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_ge300(arg1: *const root::int8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_gt300(arg1: *const root::int8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_eq303(arg1: *const root::int8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_ne303(arg1: *const root::int8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_and305(arg1: *const root::int8NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_or305(arg1: *const root::int8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_and_not160(arg1: *const root::int8NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_or_not160(arg1: *const root::int8NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_not_and160(arg1: *const root::int8NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS_IS0_IjEE"]
        pub fn mx_el_not_or160(arg1: *const root::int8NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_lt301(arg1: *const root::int8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_le301(arg1: *const root::int8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_ge301(arg1: *const root::int8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_gt301(arg1: *const root::int8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_eq304(arg1: *const root::int8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_ne304(arg1: *const root::int8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_and306(arg1: *const root::int8NDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_or306(arg1: *const root::int8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_and_not161(arg1: *const root::int8NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_or_not161(arg1: *const root::int8NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_not_and161(arg1: *const root::int8NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS_IS0_IxEE"]
        pub fn mx_el_not_or161(arg1: *const root::int8NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_lt302(arg1: *const root::int8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_le302(arg1: *const root::int8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_ge302(arg1: *const root::int8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_gt302(arg1: *const root::int8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_eq305(arg1: *const root::int8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_ne305(arg1: *const root::int8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_and307(arg1: *const root::int8NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_or307(arg1: *const root::int8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_and_not162(arg1: *const root::int8NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_or_not162(arg1: *const root::int8NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_not_and162(arg1: *const root::int8NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIaEERKS_IS0_IyEE"]
        pub fn mx_el_not_or162(arg1: *const root::int8NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_lt303(arg1: *const root::int16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_le303(arg1: *const root::int16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_ge303(arg1: *const root::int16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_gt303(arg1: *const root::int16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_eq306(arg1: *const root::int16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_ne306(arg1: *const root::int16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_and308(arg1: *const root::int16NDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_or308(arg1: *const root::int16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_and_not163(arg1: *const root::int16NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_or_not163(arg1: *const root::int16NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_not_and163(arg1: *const root::int16NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS_IS0_IaEE"]
        pub fn mx_el_not_or163(arg1: *const root::int16NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_lt304(arg1: *const root::int16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_le304(arg1: *const root::int16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_ge304(arg1: *const root::int16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_gt304(arg1: *const root::int16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_eq307(arg1: *const root::int16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_ne307(arg1: *const root::int16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_and309(arg1: *const root::int16NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_or309(arg1: *const root::int16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_and_not164(arg1: *const root::int16NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_or_not164(arg1: *const root::int16NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_not_and164(arg1: *const root::int16NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS_IS0_IhEE"]
        pub fn mx_el_not_or164(arg1: *const root::int16NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_lt305(arg1: *const root::int16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_le305(arg1: *const root::int16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_ge305(arg1: *const root::int16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_gt305(arg1: *const root::int16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_eq308(arg1: *const root::int16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_ne308(arg1: *const root::int16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_and310(arg1: *const root::int16NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_or310(arg1: *const root::int16NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_and_not165(arg1: *const root::int16NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_or_not165(arg1: *const root::int16NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_not_and165(arg1: *const root::int16NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS_IS0_ItEE"]
        pub fn mx_el_not_or165(arg1: *const root::int16NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_lt306(arg1: *const root::int16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_le306(arg1: *const root::int16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_ge306(arg1: *const root::int16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_gt306(arg1: *const root::int16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_eq309(arg1: *const root::int16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_ne309(arg1: *const root::int16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_and311(arg1: *const root::int16NDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_or311(arg1: *const root::int16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_and_not166(arg1: *const root::int16NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_or_not166(arg1: *const root::int16NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_not_and166(arg1: *const root::int16NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS_IS0_IiEE"]
        pub fn mx_el_not_or166(arg1: *const root::int16NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_lt307(arg1: *const root::int16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_le307(arg1: *const root::int16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_ge307(arg1: *const root::int16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_gt307(arg1: *const root::int16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_eq310(arg1: *const root::int16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_ne310(arg1: *const root::int16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_and312(arg1: *const root::int16NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_or312(arg1: *const root::int16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_and_not167(arg1: *const root::int16NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_or_not167(arg1: *const root::int16NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_not_and167(arg1: *const root::int16NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS_IS0_IjEE"]
        pub fn mx_el_not_or167(arg1: *const root::int16NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_lt308(arg1: *const root::int16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_le308(arg1: *const root::int16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_ge308(arg1: *const root::int16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_gt308(arg1: *const root::int16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_eq311(arg1: *const root::int16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_ne311(arg1: *const root::int16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_and313(arg1: *const root::int16NDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_or313(arg1: *const root::int16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_and_not168(arg1: *const root::int16NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_or_not168(arg1: *const root::int16NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_not_and168(arg1: *const root::int16NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS_IS0_IxEE"]
        pub fn mx_el_not_or168(arg1: *const root::int16NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_lt309(arg1: *const root::int16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_le309(arg1: *const root::int16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_ge309(arg1: *const root::int16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_gt309(arg1: *const root::int16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_eq312(arg1: *const root::int16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_ne312(arg1: *const root::int16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_and314(arg1: *const root::int16NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_or314(arg1: *const root::int16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_and_not169(arg1: *const root::int16NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_or_not169(arg1: *const root::int16NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_not_and169(arg1: *const root::int16NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIsEERKS_IS0_IyEE"]
        pub fn mx_el_not_or169(arg1: *const root::int16NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_lt310(arg1: *const root::int32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_le310(arg1: *const root::int32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_ge310(arg1: *const root::int32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_gt310(arg1: *const root::int32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_eq313(arg1: *const root::int32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_ne313(arg1: *const root::int32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_and315(arg1: *const root::int32NDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_or315(arg1: *const root::int32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_and_not170(arg1: *const root::int32NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_or_not170(arg1: *const root::int32NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_not_and170(arg1: *const root::int32NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS_IS0_IaEE"]
        pub fn mx_el_not_or170(arg1: *const root::int32NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_lt311(arg1: *const root::int32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_le311(arg1: *const root::int32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_ge311(arg1: *const root::int32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_gt311(arg1: *const root::int32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_eq314(arg1: *const root::int32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_ne314(arg1: *const root::int32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_and316(arg1: *const root::int32NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_or316(arg1: *const root::int32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_and_not171(arg1: *const root::int32NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_or_not171(arg1: *const root::int32NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_not_and171(arg1: *const root::int32NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS_IS0_IhEE"]
        pub fn mx_el_not_or171(arg1: *const root::int32NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_lt312(arg1: *const root::int32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_le312(arg1: *const root::int32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_ge312(arg1: *const root::int32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_gt312(arg1: *const root::int32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_eq315(arg1: *const root::int32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_ne315(arg1: *const root::int32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_and317(arg1: *const root::int32NDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_or317(arg1: *const root::int32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_and_not172(arg1: *const root::int32NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_or_not172(arg1: *const root::int32NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_not_and172(arg1: *const root::int32NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS_IS0_IsEE"]
        pub fn mx_el_not_or172(arg1: *const root::int32NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_lt313(arg1: *const root::int32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_le313(arg1: *const root::int32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_ge313(arg1: *const root::int32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_gt313(arg1: *const root::int32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_eq316(arg1: *const root::int32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_ne316(arg1: *const root::int32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_and318(arg1: *const root::int32NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_or318(arg1: *const root::int32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_and_not173(arg1: *const root::int32NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_or_not173(arg1: *const root::int32NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_not_and173(arg1: *const root::int32NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS_IS0_ItEE"]
        pub fn mx_el_not_or173(arg1: *const root::int32NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_lt314(arg1: *const root::int32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_le314(arg1: *const root::int32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_ge314(arg1: *const root::int32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_gt314(arg1: *const root::int32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_eq317(arg1: *const root::int32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_ne317(arg1: *const root::int32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_and319(arg1: *const root::int32NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_or319(arg1: *const root::int32NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_and_not174(arg1: *const root::int32NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_or_not174(arg1: *const root::int32NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_not_and174(arg1: *const root::int32NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS_IS0_IjEE"]
        pub fn mx_el_not_or174(arg1: *const root::int32NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_lt315(arg1: *const root::int32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_le315(arg1: *const root::int32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_ge315(arg1: *const root::int32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_gt315(arg1: *const root::int32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_eq318(arg1: *const root::int32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_ne318(arg1: *const root::int32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_and320(arg1: *const root::int32NDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_or320(arg1: *const root::int32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_and_not175(arg1: *const root::int32NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_or_not175(arg1: *const root::int32NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_not_and175(arg1: *const root::int32NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS_IS0_IxEE"]
        pub fn mx_el_not_or175(arg1: *const root::int32NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_lt316(arg1: *const root::int32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_le316(arg1: *const root::int32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_ge316(arg1: *const root::int32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_gt316(arg1: *const root::int32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_eq319(arg1: *const root::int32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_ne319(arg1: *const root::int32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_and321(arg1: *const root::int32NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_or321(arg1: *const root::int32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_and_not176(arg1: *const root::int32NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_or_not176(arg1: *const root::int32NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_not_and176(arg1: *const root::int32NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIiEERKS_IS0_IyEE"]
        pub fn mx_el_not_or176(arg1: *const root::int32NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_lt317(arg1: *const root::int64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_le317(arg1: *const root::int64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_ge317(arg1: *const root::int64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_gt317(arg1: *const root::int64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_eq320(arg1: *const root::int64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_ne320(arg1: *const root::int64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_and322(arg1: *const root::int64NDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_or322(arg1: *const root::int64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_and_not177(arg1: *const root::int64NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_or_not177(arg1: *const root::int64NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_not_and177(arg1: *const root::int64NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS_IS0_IaEE"]
        pub fn mx_el_not_or177(arg1: *const root::int64NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_lt318(arg1: *const root::int64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_le318(arg1: *const root::int64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_ge318(arg1: *const root::int64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_gt318(arg1: *const root::int64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_eq321(arg1: *const root::int64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_ne321(arg1: *const root::int64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_and323(arg1: *const root::int64NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_or323(arg1: *const root::int64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_and_not178(arg1: *const root::int64NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_or_not178(arg1: *const root::int64NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_not_and178(arg1: *const root::int64NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS_IS0_IhEE"]
        pub fn mx_el_not_or178(arg1: *const root::int64NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_lt319(arg1: *const root::int64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_le319(arg1: *const root::int64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_ge319(arg1: *const root::int64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_gt319(arg1: *const root::int64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_eq322(arg1: *const root::int64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_ne322(arg1: *const root::int64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_and324(arg1: *const root::int64NDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_or324(arg1: *const root::int64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_and_not179(arg1: *const root::int64NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_or_not179(arg1: *const root::int64NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_not_and179(arg1: *const root::int64NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS_IS0_IsEE"]
        pub fn mx_el_not_or179(arg1: *const root::int64NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_lt320(arg1: *const root::int64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_le320(arg1: *const root::int64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_ge320(arg1: *const root::int64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_gt320(arg1: *const root::int64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_eq323(arg1: *const root::int64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_ne323(arg1: *const root::int64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_and325(arg1: *const root::int64NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_or325(arg1: *const root::int64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_and_not180(arg1: *const root::int64NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_or_not180(arg1: *const root::int64NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_not_and180(arg1: *const root::int64NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS_IS0_ItEE"]
        pub fn mx_el_not_or180(arg1: *const root::int64NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_lt321(arg1: *const root::int64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_le321(arg1: *const root::int64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_ge321(arg1: *const root::int64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_gt321(arg1: *const root::int64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_eq324(arg1: *const root::int64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_ne324(arg1: *const root::int64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_and326(arg1: *const root::int64NDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_or326(arg1: *const root::int64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_and_not181(arg1: *const root::int64NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_or_not181(arg1: *const root::int64NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_not_and181(arg1: *const root::int64NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS_IS0_IiEE"]
        pub fn mx_el_not_or181(arg1: *const root::int64NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_lt322(arg1: *const root::int64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_le322(arg1: *const root::int64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_ge322(arg1: *const root::int64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_gt322(arg1: *const root::int64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_eq325(arg1: *const root::int64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_ne325(arg1: *const root::int64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_and327(arg1: *const root::int64NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_or327(arg1: *const root::int64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_and_not182(arg1: *const root::int64NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_or_not182(arg1: *const root::int64NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_not_and182(arg1: *const root::int64NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS_IS0_IjEE"]
        pub fn mx_el_not_or182(arg1: *const root::int64NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_lt323(arg1: *const root::int64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_le323(arg1: *const root::int64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_ge323(arg1: *const root::int64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_gt323(arg1: *const root::int64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_eq326(arg1: *const root::int64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_ne326(arg1: *const root::int64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_and328(arg1: *const root::int64NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_or328(arg1: *const root::int64NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_and_not183(arg1: *const root::int64NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_or_not183(arg1: *const root::int64NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_not_and183(arg1: *const root::int64NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIxEERKS_IS0_IyEE"]
        pub fn mx_el_not_or183(arg1: *const root::int64NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_lt324(arg1: *const root::uint8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_le324(arg1: *const root::uint8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_ge324(arg1: *const root::uint8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_gt324(arg1: *const root::uint8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_eq327(arg1: *const root::uint8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_ne327(arg1: *const root::uint8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_and329(arg1: *const root::uint8NDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_or329(arg1: *const root::uint8NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_and_not184(arg1: *const root::uint8NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_or_not184(arg1: *const root::uint8NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_not_and184(arg1: *const root::uint8NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS_IS0_IaEE"]
        pub fn mx_el_not_or184(arg1: *const root::uint8NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_lt325(arg1: *const root::uint8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_le325(arg1: *const root::uint8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_ge325(arg1: *const root::uint8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_gt325(arg1: *const root::uint8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_eq328(arg1: *const root::uint8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_ne328(arg1: *const root::uint8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_and330(arg1: *const root::uint8NDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_or330(arg1: *const root::uint8NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_and_not185(arg1: *const root::uint8NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_or_not185(arg1: *const root::uint8NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_not_and185(arg1: *const root::uint8NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS_IS0_IsEE"]
        pub fn mx_el_not_or185(arg1: *const root::uint8NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_lt326(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_le326(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_ge326(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_gt326(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_eq329(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_ne329(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_and331(arg1: *const root::uint8NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_or331(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_and_not186(arg1: *const root::uint8NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_or_not186(arg1: *const root::uint8NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_not_and186(arg1: *const root::uint8NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS_IS0_ItEE"]
        pub fn mx_el_not_or186(arg1: *const root::uint8NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_lt327(arg1: *const root::uint8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_le327(arg1: *const root::uint8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_ge327(arg1: *const root::uint8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_gt327(arg1: *const root::uint8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_eq330(arg1: *const root::uint8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_ne330(arg1: *const root::uint8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_and332(arg1: *const root::uint8NDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_or332(arg1: *const root::uint8NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_and_not187(arg1: *const root::uint8NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_or_not187(arg1: *const root::uint8NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_not_and187(arg1: *const root::uint8NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS_IS0_IiEE"]
        pub fn mx_el_not_or187(arg1: *const root::uint8NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_lt328(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_le328(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_ge328(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_gt328(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_eq331(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_ne331(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_and333(arg1: *const root::uint8NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_or333(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_and_not188(arg1: *const root::uint8NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_or_not188(arg1: *const root::uint8NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_not_and188(arg1: *const root::uint8NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS_IS0_IjEE"]
        pub fn mx_el_not_or188(arg1: *const root::uint8NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_lt329(arg1: *const root::uint8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_le329(arg1: *const root::uint8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_ge329(arg1: *const root::uint8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_gt329(arg1: *const root::uint8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_eq332(arg1: *const root::uint8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_ne332(arg1: *const root::uint8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_and334(arg1: *const root::uint8NDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_or334(arg1: *const root::uint8NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_and_not189(arg1: *const root::uint8NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_or_not189(arg1: *const root::uint8NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_not_and189(arg1: *const root::uint8NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS_IS0_IxEE"]
        pub fn mx_el_not_or189(arg1: *const root::uint8NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_lt330(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_le330(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_ge330(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_gt330(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_eq333(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_ne333(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_and335(arg1: *const root::uint8NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_or335(arg1: *const root::uint8NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_and_not190(arg1: *const root::uint8NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_or_not190(arg1: *const root::uint8NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_not_and190(arg1: *const root::uint8NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIhEERKS_IS0_IyEE"]
        pub fn mx_el_not_or190(arg1: *const root::uint8NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_lt331(arg1: *const root::uint16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_le331(arg1: *const root::uint16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_ge331(arg1: *const root::uint16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_gt331(arg1: *const root::uint16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_eq334(arg1: *const root::uint16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_ne334(arg1: *const root::uint16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_and336(arg1: *const root::uint16NDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_or336(arg1: *const root::uint16NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_and_not191(arg1: *const root::uint16NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_or_not191(arg1: *const root::uint16NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_not_and191(arg1: *const root::uint16NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS_IS0_IaEE"]
        pub fn mx_el_not_or191(arg1: *const root::uint16NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_lt332(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_le332(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_ge332(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_gt332(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_eq335(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_ne335(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_and337(arg1: *const root::uint16NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_or337(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_and_not192(arg1: *const root::uint16NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_or_not192(arg1: *const root::uint16NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_not_and192(arg1: *const root::uint16NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS_IS0_IhEE"]
        pub fn mx_el_not_or192(arg1: *const root::uint16NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_lt333(arg1: *const root::uint16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_le333(arg1: *const root::uint16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_ge333(arg1: *const root::uint16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_gt333(arg1: *const root::uint16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_eq336(arg1: *const root::uint16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_ne336(arg1: *const root::uint16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_and338(arg1: *const root::uint16NDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_or338(arg1: *const root::uint16NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_and_not193(arg1: *const root::uint16NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_or_not193(arg1: *const root::uint16NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_not_and193(arg1: *const root::uint16NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS_IS0_IsEE"]
        pub fn mx_el_not_or193(arg1: *const root::uint16NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_lt334(arg1: *const root::uint16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_le334(arg1: *const root::uint16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_ge334(arg1: *const root::uint16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_gt334(arg1: *const root::uint16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_eq337(arg1: *const root::uint16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_ne337(arg1: *const root::uint16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_and339(arg1: *const root::uint16NDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_or339(arg1: *const root::uint16NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_and_not194(arg1: *const root::uint16NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_or_not194(arg1: *const root::uint16NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_not_and194(arg1: *const root::uint16NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS_IS0_IiEE"]
        pub fn mx_el_not_or194(arg1: *const root::uint16NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_lt335(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_le335(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_ge335(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_gt335(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_eq338(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_ne338(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_and340(arg1: *const root::uint16NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_or340(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_and_not195(arg1: *const root::uint16NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_or_not195(arg1: *const root::uint16NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_not_and195(arg1: *const root::uint16NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS_IS0_IjEE"]
        pub fn mx_el_not_or195(arg1: *const root::uint16NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_lt336(arg1: *const root::uint16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_le336(arg1: *const root::uint16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_ge336(arg1: *const root::uint16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_gt336(arg1: *const root::uint16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_eq339(arg1: *const root::uint16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_ne339(arg1: *const root::uint16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_and341(arg1: *const root::uint16NDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_or341(arg1: *const root::uint16NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_and_not196(arg1: *const root::uint16NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_or_not196(arg1: *const root::uint16NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_not_and196(arg1: *const root::uint16NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS_IS0_IxEE"]
        pub fn mx_el_not_or196(arg1: *const root::uint16NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_lt337(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_le337(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_ge337(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_gt337(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_eq340(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_ne340(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_and342(arg1: *const root::uint16NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_or342(arg1: *const root::uint16NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_and_not197(arg1: *const root::uint16NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_or_not197(arg1: *const root::uint16NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_not_and197(arg1: *const root::uint16NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intItEERKS_IS0_IyEE"]
        pub fn mx_el_not_or197(arg1: *const root::uint16NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_lt338(arg1: *const root::uint32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_le338(arg1: *const root::uint32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_ge338(arg1: *const root::uint32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_gt338(arg1: *const root::uint32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_eq341(arg1: *const root::uint32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_ne341(arg1: *const root::uint32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_and343(arg1: *const root::uint32NDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_or343(arg1: *const root::uint32NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_and_not198(arg1: *const root::uint32NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_or_not198(arg1: *const root::uint32NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_not_and198(arg1: *const root::uint32NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS_IS0_IaEE"]
        pub fn mx_el_not_or198(arg1: *const root::uint32NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_lt339(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_le339(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_ge339(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_gt339(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_eq342(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_ne342(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_and344(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_or344(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_and_not199(arg1: *const root::uint32NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_or_not199(arg1: *const root::uint32NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_not_and199(arg1: *const root::uint32NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS_IS0_IhEE"]
        pub fn mx_el_not_or199(arg1: *const root::uint32NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_lt340(arg1: *const root::uint32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_le340(arg1: *const root::uint32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_ge340(arg1: *const root::uint32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_gt340(arg1: *const root::uint32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_eq343(arg1: *const root::uint32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_ne343(arg1: *const root::uint32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_and345(arg1: *const root::uint32NDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_or345(arg1: *const root::uint32NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_and_not200(arg1: *const root::uint32NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_or_not200(arg1: *const root::uint32NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_not_and200(arg1: *const root::uint32NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS_IS0_IsEE"]
        pub fn mx_el_not_or200(arg1: *const root::uint32NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_lt341(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_le341(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_ge341(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_gt341(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_eq344(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_ne344(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_and346(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_or346(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_and_not201(arg1: *const root::uint32NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_or_not201(arg1: *const root::uint32NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_not_and201(arg1: *const root::uint32NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS_IS0_ItEE"]
        pub fn mx_el_not_or201(arg1: *const root::uint32NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_lt342(arg1: *const root::uint32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_le342(arg1: *const root::uint32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_ge342(arg1: *const root::uint32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_gt342(arg1: *const root::uint32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_eq345(arg1: *const root::uint32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_ne345(arg1: *const root::uint32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_and347(arg1: *const root::uint32NDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_or347(arg1: *const root::uint32NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_and_not202(arg1: *const root::uint32NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_or_not202(arg1: *const root::uint32NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_not_and202(arg1: *const root::uint32NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS_IS0_IiEE"]
        pub fn mx_el_not_or202(arg1: *const root::uint32NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_lt343(arg1: *const root::uint32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_le343(arg1: *const root::uint32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_ge343(arg1: *const root::uint32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_gt343(arg1: *const root::uint32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_eq346(arg1: *const root::uint32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_ne346(arg1: *const root::uint32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_and348(arg1: *const root::uint32NDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_or348(arg1: *const root::uint32NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_and_not203(arg1: *const root::uint32NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_or_not203(arg1: *const root::uint32NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_not_and203(arg1: *const root::uint32NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS_IS0_IxEE"]
        pub fn mx_el_not_or203(arg1: *const root::uint32NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_lt344(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_le344(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_ge344(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_gt344(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_eq347(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_ne347(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_and349(arg1: *const root::uint32NDArray,
                            arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_or349(arg1: *const root::uint32NDArray,
                           arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_and_not204(arg1: *const root::uint32NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_or_not204(arg1: *const root::uint32NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_not_and204(arg1: *const root::uint32NDArray,
                                arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIjEERKS_IS0_IyEE"]
        pub fn mx_el_not_or204(arg1: *const root::uint32NDArray,
                               arg2: *const root::uint64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_lt345(arg1: *const root::uint64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_le345(arg1: *const root::uint64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_ge345(arg1: *const root::uint64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_gt345(arg1: *const root::uint64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_eq348(arg1: *const root::uint64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_ne348(arg1: *const root::uint64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_and350(arg1: *const root::uint64NDArray,
                            arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_or350(arg1: *const root::uint64NDArray,
                           arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_and_not205(arg1: *const root::uint64NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_or_not205(arg1: *const root::uint64NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_not_and205(arg1: *const root::uint64NDArray,
                                arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS_IS0_IaEE"]
        pub fn mx_el_not_or205(arg1: *const root::uint64NDArray,
                               arg2: *const root::int8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_lt346(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_le346(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_ge346(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_gt346(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_eq349(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_ne349(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_and351(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_or351(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_and_not206(arg1: *const root::uint64NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_or_not206(arg1: *const root::uint64NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_not_and206(arg1: *const root::uint64NDArray,
                                arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS_IS0_IhEE"]
        pub fn mx_el_not_or206(arg1: *const root::uint64NDArray,
                               arg2: *const root::uint8NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_lt347(arg1: *const root::uint64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_le347(arg1: *const root::uint64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_ge347(arg1: *const root::uint64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_gt347(arg1: *const root::uint64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_eq350(arg1: *const root::uint64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_ne350(arg1: *const root::uint64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_and352(arg1: *const root::uint64NDArray,
                            arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_or352(arg1: *const root::uint64NDArray,
                           arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_and_not207(arg1: *const root::uint64NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_or_not207(arg1: *const root::uint64NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_not_and207(arg1: *const root::uint64NDArray,
                                arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS_IS0_IsEE"]
        pub fn mx_el_not_or207(arg1: *const root::uint64NDArray,
                               arg2: *const root::int16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_lt348(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_le348(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_ge348(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_gt348(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_eq351(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_ne351(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_and353(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_or353(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_and_not208(arg1: *const root::uint64NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_or_not208(arg1: *const root::uint64NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_not_and208(arg1: *const root::uint64NDArray,
                                arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS_IS0_ItEE"]
        pub fn mx_el_not_or208(arg1: *const root::uint64NDArray,
                               arg2: *const root::uint16NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_lt349(arg1: *const root::uint64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_le349(arg1: *const root::uint64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_ge349(arg1: *const root::uint64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_gt349(arg1: *const root::uint64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_eq352(arg1: *const root::uint64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_ne352(arg1: *const root::uint64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_and354(arg1: *const root::uint64NDArray,
                            arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_or354(arg1: *const root::uint64NDArray,
                           arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_and_not209(arg1: *const root::uint64NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_or_not209(arg1: *const root::uint64NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_not_and209(arg1: *const root::uint64NDArray,
                                arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS_IS0_IiEE"]
        pub fn mx_el_not_or209(arg1: *const root::uint64NDArray,
                               arg2: *const root::int32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_lt350(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_le350(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_ge350(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_gt350(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_eq353(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_ne353(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_and355(arg1: *const root::uint64NDArray,
                            arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_or355(arg1: *const root::uint64NDArray,
                           arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_and_not210(arg1: *const root::uint64NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_or_not210(arg1: *const root::uint64NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_not_and210(arg1: *const root::uint64NDArray,
                                arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS_IS0_IjEE"]
        pub fn mx_el_not_or210(arg1: *const root::uint64NDArray,
                               arg2: *const root::uint32NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_ltRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_lt351(arg1: *const root::uint64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_leRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_le351(arg1: *const root::uint64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_geRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_ge351(arg1: *const root::uint64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_gtRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_gt351(arg1: *const root::uint64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_eqRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_eq354(arg1: *const root::uint64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_neRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_ne354(arg1: *const root::uint64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z9mx_el_andRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_and356(arg1: *const root::uint64NDArray,
                            arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z8mx_el_orRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_or356(arg1: *const root::uint64NDArray,
                           arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_and_notRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_and_not211(arg1: *const root::uint64NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_or_notRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_or_not211(arg1: *const root::uint64NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z13mx_el_not_andRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_not_and211(arg1: *const root::uint64NDArray,
                                arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name =
              "_Z12mx_el_not_orRK10intNDArrayI10octave_intIyEERKS_IS0_IxEE"]
        pub fn mx_el_not_or211(arg1: *const root::uint64NDArray,
                               arg2: *const root::int64NDArray)
         -> root::boolNDArray;
    }
    pub type clock_t = u32;
    extern "C" {
        #[link_name = "_daylight"]
        pub static mut _daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_dstbias"]
        pub static mut _dstbias: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "_timezone"]
        pub static mut _timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "_tzname"]
        pub static mut _tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        pub fn _get_daylight(_Daylight: *mut ::std::os::raw::c_int)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _get_dstbias(_Daylight_savings_bias:
                                *mut ::std::os::raw::c_long) -> root::errno_t;
    }
    extern "C" {
        pub fn _get_timezone(_Timezone: *mut ::std::os::raw::c_long)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _get_tzname(_ReturnValue: *mut usize,
                           _Buffer: *mut ::std::os::raw::c_char,
                           _SizeInBytes: usize, _Index: ::std::os::raw::c_int)
         -> root::errno_t;
    }
    extern "C" {
        pub fn asctime(_Tm: *const root::tm) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn asctime_s(_Buf: *mut ::std::os::raw::c_char,
                         _SizeInWords: usize, _Tm: *const root::tm)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _ctime32(_Time: *const root::__time32_t)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _ctime32_s(_Buf: *mut ::std::os::raw::c_char,
                          _SizeInBytes: usize, _Time: *const root::__time32_t)
         -> root::errno_t;
    }
    extern "C" {
        pub fn clock() -> root::clock_t;
    }
    extern "C" {
        pub fn _difftime32(_Time1: root::__time32_t, _Time2: root::__time32_t)
         -> f64;
    }
    extern "C" {
        pub fn _gmtime32(_Time: *const root::__time32_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn _gmtime32_s(_Tm: *mut root::tm, _Time: *const root::__time32_t)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _localtime32(_Time: *const root::__time32_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn _localtime32_s(_Tm: *mut root::tm,
                              _Time: *const root::__time32_t)
         -> root::errno_t;
    }
    extern "C" {
        pub fn strftime(_Buf: *mut ::std::os::raw::c_char,
                        _SizeInBytes: usize,
                        _Format: *const ::std::os::raw::c_char,
                        _Tm: *const root::tm) -> usize;
    }
    extern "C" {
        pub fn _strftime_l(_Buf: *mut ::std::os::raw::c_char,
                           _Max_size: usize,
                           _Format: *const ::std::os::raw::c_char,
                           _Tm: *const root::tm, _Locale: root::_locale_t)
         -> usize;
    }
    extern "C" {
        pub fn _strdate(_Buffer: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strdate_s(_Buf: *mut ::std::os::raw::c_char,
                          _SizeInBytes: usize) -> root::errno_t;
    }
    extern "C" {
        pub fn _strtime(_Buffer: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _strtime_s(_Buf: *mut ::std::os::raw::c_char,
                          _SizeInBytes: usize) -> root::errno_t;
    }
    extern "C" {
        pub fn _time32(_Time: *mut root::__time32_t) -> root::__time32_t;
    }
    extern "C" {
        pub fn _mktime32(_Tm: *mut root::tm) -> root::__time32_t;
    }
    extern "C" {
        pub fn _mkgmtime32(_Tm: *mut root::tm) -> root::__time32_t;
    }
    extern "C" {
        pub fn tzset();
    }
    extern "C" {
        pub fn _tzset();
    }
    extern "C" {
        pub fn _difftime64(_Time1: root::__time64_t, _Time2: root::__time64_t)
         -> f64;
    }
    extern "C" {
        pub fn _ctime64(_Time: *const root::__time64_t)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn _ctime64_s(_Buf: *mut ::std::os::raw::c_char,
                          _SizeInBytes: usize, _Time: *const root::__time64_t)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _gmtime64(_Time: *const root::__time64_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn _gmtime64_s(_Tm: *mut root::tm, _Time: *const root::__time64_t)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _localtime64(_Time: *const root::__time64_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn _localtime64_s(_Tm: *mut root::tm,
                              _Time: *const root::__time64_t)
         -> root::errno_t;
    }
    extern "C" {
        pub fn _mktime64(_Tm: *mut root::tm) -> root::__time64_t;
    }
    extern "C" {
        pub fn _mkgmtime64(_Tm: *mut root::tm) -> root::__time64_t;
    }
    extern "C" {
        pub fn _time64(_Time: *mut root::__time64_t) -> root::__time64_t;
    }
    extern "C" {
        pub fn _getsystime(_Tm: *mut root::tm) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn _setsystime(_Tm: *mut root::tm,
                           _MilliSec: ::std::os::raw::c_uint)
         -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn difftime(_Time1: root::time_t, _Time2: root::time_t) -> f64;
    }
    extern "C" {
        pub fn ctime(_Time: *const root::time_t)
         -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gmtime(_Time: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime(_Time: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn mktime(_Tm: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn _mkgmtime(_Tm: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn time(_Time: *mut root::time_t) -> root::time_t;
    }
    extern "C" {
        #[link_name = "daylight"]
        pub static mut daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "timezone"]
        pub static mut timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "tzname"]
        pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct timeval {
        pub _bindgen_opaque_blob: [u32; 2usize],
    }
    impl Clone for timeval {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct timezone {
        pub _bindgen_opaque_blob: [u32; 2usize],
    }
    impl Clone for timezone {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        pub fn mingw_gettimeofday(p: *mut root::timeval,
                                  z: *mut root::timezone)
         -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __timeb32 {
        pub _bindgen_opaque_blob: [u32; 3usize],
    }
    impl Clone for __timeb32 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct timeb {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for timeb {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct __timeb64 {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for __timeb64 {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        pub fn _ftime64(_Time: *mut root::__timeb64);
    }
    extern "C" {
        pub fn _ftime(arg1: *mut root::__timeb64);
    }
    extern "C" {
        pub fn ftime(arg1: *mut root::timeb);
    }
    pub type clockid_t = u32;
    extern "C" {
        pub fn nanosleep(request: *const root::timespec,
                         remain: *mut root::timespec)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_nanosleep(clock_id: root::clockid_t,
                               flags: ::std::os::raw::c_int,
                               request: *const root::timespec,
                               remain: *mut root::timespec)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getres(clock_id: root::clockid_t,
                            res: *mut root::timespec)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_gettime(clock_id: root::clockid_t,
                             tp: *mut root::timespec)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_settime(clock_id: root::clockid_t,
                             tp: *const root::timespec)
         -> ::std::os::raw::c_int;
    }
    pub type octave_time = [u64; 2usize];
    pub type octave_base_tm = [u64; 8usize];
    pub type octave_localtime = [u64; 8usize];
    pub type octave_gmtime = [u64; 8usize];
    pub type octave_strptime = [u64; 9usize];
    pub type oct_mach_info = [u32; 2usize];
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct oct_data_conv {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum oct_data_conv_data_type {
        dt_int8 = 0,
        dt_uint8 = 1,
        dt_int16 = 2,
        dt_uint16 = 3,
        dt_int32 = 4,
        dt_uint32 = 5,
        dt_int64 = 6,
        dt_uint64 = 7,
        dt_single = 8,
        dt_double = 9,
        dt_char = 10,
        dt_schar = 11,
        dt_uchar = 12,
        dt_logical = 13,
        dt_short = 14,
        dt_ushort = 15,
        dt_int = 16,
        dt_uint = 17,
        dt_long = 18,
        dt_ulong = 19,
        dt_longlong = 20,
        dt_ulonglong = 21,
        dt_float = 22,
        dt_unknown = 23,
    }
    extern "C" {
        #[link_name = "_ZN13oct_data_conv14data_type_sizeENS_9data_typeE"]
        pub fn oct_data_conv_data_type_size(dt: root::oct_data_conv_data_type)
         -> usize;
    }
    extern "C" {
        #[link_name = "_ZN13oct_data_conv19string_to_data_typeERKSs"]
        pub fn oct_data_conv_string_to_data_type(s: *const root::std::string)
         -> root::oct_data_conv_data_type;
    }
    extern "C" {
        #[link_name =
              "_ZN13oct_data_conv19string_to_data_typeERKSsRiRNS_9data_typeES4_"]
        pub fn oct_data_conv_string_to_data_type1(s: *const root::std::string,
                                                  block_size:
                                                      *mut ::std::os::raw::c_int,
                                                  input_type:
                                                      *mut root::oct_data_conv_data_type,
                                                  output_type:
                                                      *mut root::oct_data_conv_data_type);
    }
    extern "C" {
        #[link_name =
              "_ZN13oct_data_conv19string_to_data_typeERKSsRiRNS_9data_typeE"]
        pub fn oct_data_conv_string_to_data_type2(s: *const root::std::string,
                                                  block_size:
                                                      *mut ::std::os::raw::c_int,
                                                  output_type:
                                                      *mut root::oct_data_conv_data_type);
    }
    extern "C" {
        #[link_name =
              "_ZN13oct_data_conv19data_type_as_stringENS_9data_typeE"]
        pub fn oct_data_conv_data_type_as_string(dt:
                                                     root::oct_data_conv_data_type)
         -> root::std::string;
    }
    impl Clone for oct_data_conv {
        fn clone(&self) -> Self { *self }
    }
    impl oct_data_conv {
        #[inline]
        pub unsafe fn data_type_size(dt: root::oct_data_conv_data_type)
         -> usize {
            oct_data_conv_data_type_size(dt)
        }
        #[inline]
        pub unsafe fn string_to_data_type(s: *const root::std::string)
         -> root::oct_data_conv_data_type {
            oct_data_conv_string_to_data_type(s)
        }
        #[inline]
        pub unsafe fn string_to_data_type1(s: *const root::std::string,
                                           block_size:
                                               *mut ::std::os::raw::c_int,
                                           input_type:
                                               *mut root::oct_data_conv_data_type,
                                           output_type:
                                               *mut root::oct_data_conv_data_type) {
            oct_data_conv_string_to_data_type1(s, block_size, input_type,
                                               output_type)
        }
        #[inline]
        pub unsafe fn string_to_data_type2(s: *const root::std::string,
                                           block_size:
                                               *mut ::std::os::raw::c_int,
                                           output_type:
                                               *mut root::oct_data_conv_data_type) {
            oct_data_conv_string_to_data_type2(s, block_size, output_type)
        }
        #[inline]
        pub unsafe fn data_type_as_string(dt: root::oct_data_conv_data_type)
         -> root::std::string {
            oct_data_conv_data_type_as_string(dt)
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum save_type {
        LS_U_CHAR = 0,
        LS_U_SHORT = 1,
        LS_U_INT = 2,
        LS_CHAR = 3,
        LS_SHORT = 4,
        LS_INT = 5,
        LS_FLOAT = 6,
        LS_DOUBLE = 7,
        LS_U_LONG = 8,
        LS_LONG = 9,
    }
    extern "C" {
        #[link_name =
              "_Z27do_double_format_conversionPviN6octave9mach_info12float_formatES2_"]
        pub fn do_double_format_conversion(data: *mut ::std::os::raw::c_void,
                                           len: root::octave_idx_type,
                                           from_fmt:
                                               root::octave::mach_info_float_format,
                                           to_fmt:
                                               root::octave::mach_info_float_format);
    }
    extern "C" {
        #[link_name =
              "_Z26do_float_format_conversionPviN6octave9mach_info12float_formatES2_"]
        pub fn do_float_format_conversion(data: *mut ::std::os::raw::c_void,
                                          len: root::octave_idx_type,
                                          from_fmt:
                                              root::octave::mach_info_float_format,
                                          to_fmt:
                                              root::octave::mach_info_float_format);
    }
    extern "C" {
        #[link_name =
              "_Z26do_float_format_conversionPvyiN6octave9mach_info12float_formatES2_"]
        pub fn do_float_format_conversion1(data: *mut ::std::os::raw::c_void,
                                           sz: usize,
                                           len: root::octave_idx_type,
                                           from_fmt:
                                               root::octave::mach_info_float_format,
                                           to_fmt:
                                               root::octave::mach_info_float_format);
    }
    extern "C" {
        #[link_name =
              "_Z12read_doublesRSiPd9save_typeibN6octave9mach_info12float_formatE"]
        pub fn read_doubles(is: *mut root::std::istream, data: *mut f64,
                            type_: root::save_type,
                            len: root::octave_idx_type, swap: bool,
                            fmt: root::octave::mach_info_float_format);
    }
    extern "C" {
        #[link_name = "_Z13write_doublesRSoPKd9save_typei"]
        pub fn write_doubles(os: *mut root::std::ostream, data: *const f64,
                             type_: root::save_type,
                             len: root::octave_idx_type);
    }
    extern "C" {
        #[link_name =
              "_Z11read_floatsRSiPf9save_typeibN6octave9mach_info12float_formatE"]
        pub fn read_floats(is: *mut root::std::istream, data: *mut f32,
                           type_: root::save_type, len: root::octave_idx_type,
                           swap: bool,
                           fmt: root::octave::mach_info_float_format);
    }
    extern "C" {
        #[link_name = "_Z12write_floatsRSoPKf9save_typei"]
        pub fn write_floats(os: *mut root::std::ostream, data: *const f32,
                            type_: root::save_type,
                            len: root::octave_idx_type);
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct Cell {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    pub type Cell_ctype_mapper = [u64; 2usize];
    extern "C" {
        #[link_name = "_ZNK4Cell10is_cellstrEv"]
        pub fn Cell_is_cellstr(this: *const root::Cell) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK4Cell13cellstr_valueEv"]
        pub fn Cell_cellstr_value(this: *const root::Cell) -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK4Cell5indexERK17octave_value_listb"]
        pub fn Cell_index(this: *const root::Cell,
                          idx: *const root::octave_value_list,
                          resize_ok: bool) -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZN4Cell15delete_elementsERK17octave_value_list"]
        pub fn Cell_delete_elements(this: *mut root::Cell,
                                    idx: *const root::octave_value_list);
    }
    extern "C" {
        #[link_name =
              "_ZN4Cell6assignERK17octave_value_listRKS_RK12octave_value"]
        pub fn Cell_assign(this: *mut root::Cell,
                           idx: *const root::octave_value_list,
                           rhs: *const root::Cell,
                           fill_val: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_ZNK4Cell3nnzEv"]
        pub fn Cell_nnz(this: *const root::Cell) -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK4Cell6columnEi"]
        pub fn Cell_column(this: *const root::Cell, i: root::octave_idx_type)
         -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZN4Cell6concatERKS_RK5ArrayIiE"]
        pub fn Cell_concat(this: *mut root::Cell, rb: *const root::Cell,
                           ra_idx: *const [u64; 5usize]) -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZN4Cell6insertERKS_ii"]
        pub fn Cell_insert(this: *mut root::Cell, a: *const root::Cell,
                           r: root::octave_idx_type, c: root::octave_idx_type)
         -> *mut root::Cell;
    }
    extern "C" {
        #[link_name = "_ZN4Cell6insertERKS_RK5ArrayIiE"]
        pub fn Cell_insert1(this: *mut root::Cell, a: *const root::Cell,
                            ra_idx: *const [u64; 5usize]) -> *mut root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK4Cell4diagEi"]
        pub fn Cell_diag(this: *const root::Cell, k: root::octave_idx_type)
         -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK4Cell4diagEii"]
        pub fn Cell_diag1(this: *const root::Cell, m: root::octave_idx_type,
                          n: root::octave_idx_type) -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZN4CellC1ERK17octave_value_list"]
        pub fn Cell_Cell(this: *mut root::Cell,
                         ovl: *const root::octave_value_list);
    }
    extern "C" {
        #[link_name = "_ZN4CellC1ERK13string_vectorb"]
        pub fn Cell_Cell1(this: *mut root::Cell,
                          sv: *const root::string_vector, trim: bool);
    }
    extern "C" {
        #[link_name = "_ZN4CellC1ERKSt4listISsSaISsEE"]
        pub fn Cell_Cell2(this: *mut root::Cell, lst: *const [u64; 2usize]);
    }
    extern "C" {
        #[link_name = "_ZN4CellC1ERK5ArrayISsE"]
        pub fn Cell_Cell3(this: *mut root::Cell, sa: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN4CellC1ERK10dim_vectorRK13string_vectorb"]
        pub fn Cell_Cell4(this: *mut root::Cell, dv: *const root::dim_vector,
                          sv: *const root::string_vector, trim: bool);
    }
    impl Clone for Cell {
        fn clone(&self) -> Self { *self }
    }
    impl Cell {
        #[inline]
        pub unsafe fn is_cellstr(&self) -> bool { Cell_is_cellstr(self) }
        #[inline]
        pub unsafe fn cellstr_value(&self) -> [u64; 5usize] {
            Cell_cellstr_value(self)
        }
        #[inline]
        pub unsafe fn index(&self, idx: *const root::octave_value_list,
                            resize_ok: bool) -> root::Cell {
            Cell_index(self, idx, resize_ok)
        }
        #[inline]
        pub unsafe fn delete_elements(&mut self,
                                      idx: *const root::octave_value_list) {
            Cell_delete_elements(self, idx)
        }
        #[inline]
        pub unsafe fn assign(&mut self, idx: *const root::octave_value_list,
                             rhs: *const root::Cell,
                             fill_val: *const root::octave_value) {
            Cell_assign(self, idx, rhs, fill_val)
        }
        #[inline]
        pub unsafe fn nnz(&self) -> root::octave_idx_type { Cell_nnz(self) }
        #[inline]
        pub unsafe fn column(&self, i: root::octave_idx_type) -> root::Cell {
            Cell_column(self, i)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::Cell,
                             ra_idx: *const [u64; 5usize]) -> root::Cell {
            Cell_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn insert(&mut self, a: *const root::Cell,
                             r: root::octave_idx_type,
                             c: root::octave_idx_type) -> *mut root::Cell {
            Cell_insert(self, a, r, c)
        }
        #[inline]
        pub unsafe fn insert1(&mut self, a: *const root::Cell,
                              ra_idx: *const [u64; 5usize])
         -> *mut root::Cell {
            Cell_insert1(self, a, ra_idx)
        }
        #[inline]
        pub unsafe fn diag(&self, k: root::octave_idx_type) -> root::Cell {
            Cell_diag(self, k)
        }
        #[inline]
        pub unsafe fn diag1(&self, m: root::octave_idx_type,
                            n: root::octave_idx_type) -> root::Cell {
            Cell_diag1(self, m, n)
        }
        #[inline]
        pub unsafe fn new(ovl: *const root::octave_value_list) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Cell_Cell(&mut __bindgen_tmp, ovl);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(sv: *const root::string_vector, trim: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Cell_Cell1(&mut __bindgen_tmp, sv, trim);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(lst: *const [u64; 2usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Cell_Cell2(&mut __bindgen_tmp, lst);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(sa: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Cell_Cell3(&mut __bindgen_tmp, sa);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(dv: *const root::dim_vector,
                           sv: *const root::string_vector, trim: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Cell_Cell4(&mut __bindgen_tmp, dv, sv, trim);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct mxArray {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_map {
        pub _bindgen_opaque_blob: [u64; 5usize],
    }
    pub type octave_map_element_type = [u64; 4usize];
    pub type octave_map_const_iterator = u64;
    pub type octave_map_iterator = u64;
    extern "C" {
        #[link_name = "_ZNK10octave_map8getfieldERKSs"]
        pub fn octave_map_getfield(this: *const root::octave_map,
                                   key: *const root::std::string)
         -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZN10octave_map8setfieldERKSsRK4Cell"]
        pub fn octave_map_setfield(this: *mut root::octave_map,
                                   key: *const root::std::string,
                                   val: *const root::Cell);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map7rmfieldERKSs"]
        pub fn octave_map_rmfield(this: *mut root::octave_map,
                                  key: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map11orderfieldsEv"]
        pub fn octave_map_orderfields(this: *const root::octave_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map11orderfieldsER5ArrayIiE"]
        pub fn octave_map_orderfields1(this: *const root::octave_map,
                                       perm: *mut [u64; 5usize])
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map11orderfieldsERKS_R5ArrayIiE"]
        pub fn octave_map_orderfields2(this: *const root::octave_map,
                                       other: *const root::octave_map,
                                       perm: *mut [u64; 5usize])
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map8contentsERKSs"]
        pub fn octave_map_contents(this: *const root::octave_map,
                                   k: *const root::std::string) -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZN10octave_map8contentsERKSs"]
        pub fn octave_map_contents1(this: *mut root::octave_map,
                                    k: *const root::std::string)
         -> *mut root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map9checkelemEi"]
        pub fn octave_map_checkelem(this: *const root::octave_map,
                                    n: root::octave_idx_type)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map9checkelemEii"]
        pub fn octave_map_checkelem1(this: *const root::octave_map,
                                     i: root::octave_idx_type,
                                     j: root::octave_idx_type)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map9checkelemERK5ArrayIiE"]
        pub fn octave_map_checkelem2(this: *const root::octave_map,
                                     ra_idx: *const [u64; 5usize])
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map7squeezeEv"]
        pub fn octave_map_squeeze(this: *const root::octave_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map7permuteERK5ArrayIiEb"]
        pub fn octave_map_permute(this: *const root::octave_map,
                                  vec: *const [u64; 5usize], inv: bool)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map9transposeEv"]
        pub fn octave_map_transpose(this: *const root::octave_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map7reshapeERK10dim_vector"]
        pub fn octave_map_reshape(this: *const root::octave_map,
                                  dv: *const root::dim_vector)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6resizeERK10dim_vectorb"]
        pub fn octave_map_resize(this: *mut root::octave_map,
                                 dv: *const root::dim_vector, fill: bool);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map3catEiiPK17octave_scalar_map"]
        pub fn octave_map_cat(dim: ::std::os::raw::c_int,
                              n: root::octave_idx_type,
                              map_list: *const root::octave_scalar_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZN10octave_map3catEiiPKS_"]
        pub fn octave_map_cat1(dim: ::std::os::raw::c_int,
                               n: root::octave_idx_type,
                               map_list: *const root::octave_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map5indexERK10idx_vectorb"]
        pub fn octave_map_index(this: *const root::octave_map,
                                i: *const root::idx_vector, resize_ok: bool)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map5indexERK10idx_vectorS2_b"]
        pub fn octave_map_index1(this: *const root::octave_map,
                                 i: *const root::idx_vector,
                                 j: *const root::idx_vector, resize_ok: bool)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map5indexERK5ArrayI10idx_vectorEb"]
        pub fn octave_map_index2(this: *const root::octave_map, ia: *const u8,
                                 resize_ok: bool) -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map5indexERK17octave_value_listb"]
        pub fn octave_map_index3(this: *const root::octave_map,
                                 arg1: *const root::octave_value_list,
                                 resize_ok: bool) -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map6columnEi"]
        pub fn octave_map_column(this: *const root::octave_map,
                                 k: root::octave_idx_type)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map4pageEi"]
        pub fn octave_map_page(this: *const root::octave_map,
                               k: root::octave_idx_type) -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6assignERK10idx_vectorRKS_"]
        pub fn octave_map_assign(this: *mut root::octave_map,
                                 i: *const root::idx_vector,
                                 rhs: *const root::octave_map);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6assignERK10idx_vectorS2_RKS_"]
        pub fn octave_map_assign1(this: *mut root::octave_map,
                                  i: *const root::idx_vector,
                                  j: *const root::idx_vector,
                                  rhs: *const root::octave_map);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6assignERK5ArrayI10idx_vectorERKS_"]
        pub fn octave_map_assign2(this: *mut root::octave_map, ia: *const u8,
                                  rhs: *const root::octave_map);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6assignERK17octave_value_listRKS_"]
        pub fn octave_map_assign3(this: *mut root::octave_map,
                                  arg1: *const root::octave_value_list,
                                  rhs: *const root::octave_map);
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map6assignERK17octave_value_listRKSsRK4Cell"]
        pub fn octave_map_assign4(this: *mut root::octave_map,
                                  idx: *const root::octave_value_list,
                                  k: *const root::std::string,
                                  rhs: *const root::Cell);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map15delete_elementsERK10idx_vector"]
        pub fn octave_map_delete_elements(this: *mut root::octave_map,
                                          i: *const root::idx_vector);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map15delete_elementsEiRK10idx_vector"]
        pub fn octave_map_delete_elements1(this: *mut root::octave_map,
                                           dim: ::std::os::raw::c_int,
                                           i: *const root::idx_vector);
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map15delete_elementsERK5ArrayI10idx_vectorE"]
        pub fn octave_map_delete_elements2(this: *mut root::octave_map,
                                           ia: *const u8);
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map15delete_elementsERK17octave_value_list"]
        pub fn octave_map_delete_elements3(this: *mut root::octave_map,
                                           arg1:
                                               *const root::octave_value_list);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6concatERKS_RK5ArrayIiE"]
        pub fn octave_map_concat(this: *mut root::octave_map,
                                 rb: *const root::octave_map,
                                 ra_idx: *const [u64; 5usize])
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map17fast_elem_extractEi"]
        pub fn octave_map_fast_elem_extract(this: *const root::octave_map,
                                            n: root::octave_idx_type)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map16fast_elem_insertEiRK17octave_scalar_map"]
        pub fn octave_map_fast_elem_insert(this: *mut root::octave_map,
                                           n: root::octave_idx_type,
                                           rhs:
                                               *const root::octave_scalar_map)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN10octave_mapC1ERK17octave_scalar_map"]
        pub fn octave_map_octave_map(this: *mut root::octave_map,
                                     m: *const root::octave_scalar_map);
    }
    impl Clone for octave_map {
        fn clone(&self) -> Self { *self }
    }
    impl octave_map {
        #[inline]
        pub unsafe fn getfield(&self, key: *const root::std::string)
         -> root::Cell {
            octave_map_getfield(self, key)
        }
        #[inline]
        pub unsafe fn setfield(&mut self, key: *const root::std::string,
                               val: *const root::Cell) {
            octave_map_setfield(self, key, val)
        }
        #[inline]
        pub unsafe fn rmfield(&mut self, key: *const root::std::string) {
            octave_map_rmfield(self, key)
        }
        #[inline]
        pub unsafe fn orderfields(&self) -> root::octave_map {
            octave_map_orderfields(self)
        }
        #[inline]
        pub unsafe fn orderfields1(&self, perm: *mut [u64; 5usize])
         -> root::octave_map {
            octave_map_orderfields1(self, perm)
        }
        #[inline]
        pub unsafe fn orderfields2(&self, other: *const root::octave_map,
                                   perm: *mut [u64; 5usize])
         -> root::octave_map {
            octave_map_orderfields2(self, other, perm)
        }
        #[inline]
        pub unsafe fn contents(&self, k: *const root::std::string)
         -> root::Cell {
            octave_map_contents(self, k)
        }
        #[inline]
        pub unsafe fn contents1(&mut self, k: *const root::std::string)
         -> *mut root::Cell {
            octave_map_contents1(self, k)
        }
        #[inline]
        pub unsafe fn checkelem(&self, n: root::octave_idx_type)
         -> root::octave_scalar_map {
            octave_map_checkelem(self, n)
        }
        #[inline]
        pub unsafe fn checkelem1(&self, i: root::octave_idx_type,
                                 j: root::octave_idx_type)
         -> root::octave_scalar_map {
            octave_map_checkelem1(self, i, j)
        }
        #[inline]
        pub unsafe fn checkelem2(&self, ra_idx: *const [u64; 5usize])
         -> root::octave_scalar_map {
            octave_map_checkelem2(self, ra_idx)
        }
        #[inline]
        pub unsafe fn squeeze(&self) -> root::octave_map {
            octave_map_squeeze(self)
        }
        #[inline]
        pub unsafe fn permute(&self, vec: *const [u64; 5usize], inv: bool)
         -> root::octave_map {
            octave_map_permute(self, vec, inv)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::octave_map {
            octave_map_transpose(self)
        }
        #[inline]
        pub unsafe fn reshape(&self, dv: *const root::dim_vector)
         -> root::octave_map {
            octave_map_reshape(self, dv)
        }
        #[inline]
        pub unsafe fn resize(&mut self, dv: *const root::dim_vector,
                             fill: bool) {
            octave_map_resize(self, dv, fill)
        }
        #[inline]
        pub unsafe fn cat(dim: ::std::os::raw::c_int,
                          n: root::octave_idx_type,
                          map_list: *const root::octave_scalar_map)
         -> root::octave_map {
            octave_map_cat(dim, n, map_list)
        }
        #[inline]
        pub unsafe fn cat1(dim: ::std::os::raw::c_int,
                           n: root::octave_idx_type,
                           map_list: *const root::octave_map)
         -> root::octave_map {
            octave_map_cat1(dim, n, map_list)
        }
        #[inline]
        pub unsafe fn index(&self, i: *const root::idx_vector,
                            resize_ok: bool) -> root::octave_map {
            octave_map_index(self, i, resize_ok)
        }
        #[inline]
        pub unsafe fn index1(&self, i: *const root::idx_vector,
                             j: *const root::idx_vector, resize_ok: bool)
         -> root::octave_map {
            octave_map_index1(self, i, j, resize_ok)
        }
        #[inline]
        pub unsafe fn index2(&self, ia: *const u8, resize_ok: bool)
         -> root::octave_map {
            octave_map_index2(self, ia, resize_ok)
        }
        #[inline]
        pub unsafe fn index3(&self, arg1: *const root::octave_value_list,
                             resize_ok: bool) -> root::octave_map {
            octave_map_index3(self, arg1, resize_ok)
        }
        #[inline]
        pub unsafe fn column(&self, k: root::octave_idx_type)
         -> root::octave_map {
            octave_map_column(self, k)
        }
        #[inline]
        pub unsafe fn page(&self, k: root::octave_idx_type)
         -> root::octave_map {
            octave_map_page(self, k)
        }
        #[inline]
        pub unsafe fn assign(&mut self, i: *const root::idx_vector,
                             rhs: *const root::octave_map) {
            octave_map_assign(self, i, rhs)
        }
        #[inline]
        pub unsafe fn assign1(&mut self, i: *const root::idx_vector,
                              j: *const root::idx_vector,
                              rhs: *const root::octave_map) {
            octave_map_assign1(self, i, j, rhs)
        }
        #[inline]
        pub unsafe fn assign2(&mut self, ia: *const u8,
                              rhs: *const root::octave_map) {
            octave_map_assign2(self, ia, rhs)
        }
        #[inline]
        pub unsafe fn assign3(&mut self, arg1: *const root::octave_value_list,
                              rhs: *const root::octave_map) {
            octave_map_assign3(self, arg1, rhs)
        }
        #[inline]
        pub unsafe fn assign4(&mut self, idx: *const root::octave_value_list,
                              k: *const root::std::string,
                              rhs: *const root::Cell) {
            octave_map_assign4(self, idx, k, rhs)
        }
        #[inline]
        pub unsafe fn delete_elements(&mut self, i: *const root::idx_vector) {
            octave_map_delete_elements(self, i)
        }
        #[inline]
        pub unsafe fn delete_elements1(&mut self, dim: ::std::os::raw::c_int,
                                       i: *const root::idx_vector) {
            octave_map_delete_elements1(self, dim, i)
        }
        #[inline]
        pub unsafe fn delete_elements2(&mut self, ia: *const u8) {
            octave_map_delete_elements2(self, ia)
        }
        #[inline]
        pub unsafe fn delete_elements3(&mut self,
                                       arg1: *const root::octave_value_list) {
            octave_map_delete_elements3(self, arg1)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::octave_map,
                             ra_idx: *const [u64; 5usize])
         -> root::octave_map {
            octave_map_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn fast_elem_extract(&self, n: root::octave_idx_type)
         -> root::octave_scalar_map {
            octave_map_fast_elem_extract(self, n)
        }
        #[inline]
        pub unsafe fn fast_elem_insert(&mut self, n: root::octave_idx_type,
                                       rhs: *const root::octave_scalar_map)
         -> bool {
            octave_map_fast_elem_insert(self, n, rhs)
        }
        #[inline]
        pub unsafe fn new(m: *const root::octave_scalar_map) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_map_octave_map(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_scalar_map {
        pub _bindgen_opaque_blob: [u64; 4usize],
    }
    pub type octave_scalar_map_const_iterator = u64;
    pub type octave_scalar_map_iterator = u64;
    extern "C" {
        #[link_name = "_ZNK17octave_scalar_map8getfieldERKSs"]
        pub fn octave_scalar_map_getfield(this:
                                              *const root::octave_scalar_map,
                                          key: *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN17octave_scalar_map8setfieldERKSsRK12octave_value"]
        pub fn octave_scalar_map_setfield(this: *mut root::octave_scalar_map,
                                          key: *const root::std::string,
                                          val: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_ZN17octave_scalar_map7rmfieldERKSs"]
        pub fn octave_scalar_map_rmfield(this: *mut root::octave_scalar_map,
                                         key: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_scalar_map11orderfieldsEv"]
        pub fn octave_scalar_map_orderfields(this:
                                                 *const root::octave_scalar_map)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_scalar_map11orderfieldsER5ArrayIiE"]
        pub fn octave_scalar_map_orderfields1(this:
                                                  *const root::octave_scalar_map,
                                              perm: *mut [u64; 5usize])
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_scalar_map11orderfieldsERKS_R5ArrayIiE"]
        pub fn octave_scalar_map_orderfields2(this:
                                                  *const root::octave_scalar_map,
                                              other:
                                                  *const root::octave_scalar_map,
                                              perm: *mut [u64; 5usize])
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_scalar_map8contentsERKSs"]
        pub fn octave_scalar_map_contents(this:
                                              *const root::octave_scalar_map,
                                          k: *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN17octave_scalar_map8contentsERKSs"]
        pub fn octave_scalar_map_contents1(this: *mut root::octave_scalar_map,
                                           k: *const root::std::string)
         -> *mut root::octave_value;
    }
    impl Clone for octave_scalar_map {
        fn clone(&self) -> Self { *self }
    }
    impl octave_scalar_map {
        #[inline]
        pub unsafe fn getfield(&self, key: *const root::std::string)
         -> root::octave_value {
            octave_scalar_map_getfield(self, key)
        }
        #[inline]
        pub unsafe fn setfield(&mut self, key: *const root::std::string,
                               val: *const root::octave_value) {
            octave_scalar_map_setfield(self, key, val)
        }
        #[inline]
        pub unsafe fn rmfield(&mut self, key: *const root::std::string) {
            octave_scalar_map_rmfield(self, key)
        }
        #[inline]
        pub unsafe fn orderfields(&self) -> root::octave_scalar_map {
            octave_scalar_map_orderfields(self)
        }
        #[inline]
        pub unsafe fn orderfields1(&self, perm: *mut [u64; 5usize])
         -> root::octave_scalar_map {
            octave_scalar_map_orderfields1(self, perm)
        }
        #[inline]
        pub unsafe fn orderfields2(&self,
                                   other: *const root::octave_scalar_map,
                                   perm: *mut [u64; 5usize])
         -> root::octave_scalar_map {
            octave_scalar_map_orderfields2(self, other, perm)
        }
        #[inline]
        pub unsafe fn contents(&self, k: *const root::std::string)
         -> root::octave_value {
            octave_scalar_map_contents(self, k)
        }
        #[inline]
        pub unsafe fn contents1(&mut self, k: *const root::std::string)
         -> *mut root::octave_value {
            octave_scalar_map_contents1(self, k)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_stream {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_function {
        pub _bindgen_opaque_blob: [u64; 7usize],
    }
    impl Clone for octave_function {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_user_function {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_fcn_handle {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_fcn_inline {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_value_list {
        pub _bindgen_opaque_blob: [u64; 10usize],
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list7prependERK12octave_value"]
        pub fn octave_value_list_prepend(this: *mut root::octave_value_list,
                                         val: *const root::octave_value)
         -> *mut root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list6appendERK12octave_value"]
        pub fn octave_value_list_append(this: *mut root::octave_value_list,
                                        val: *const root::octave_value)
         -> *mut root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list6appendERKS_"]
        pub fn octave_value_list_append1(this: *mut root::octave_value_list,
                                         lst: *const root::octave_value_list)
         -> *mut root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list7reverseEv"]
        pub fn octave_value_list_reverse(this: *mut root::octave_value_list)
         -> *mut root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list6spliceEiiRKS_"]
        pub fn octave_value_list_splice(this: *const root::octave_value_list,
                                        offset: root::octave_idx_type,
                                        len: root::octave_idx_type,
                                        lst: *const root::octave_value_list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list13all_strings_pEv"]
        pub fn octave_value_list_all_strings_p(this:
                                                   *const root::octave_value_list)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list11all_scalarsEv"]
        pub fn octave_value_list_all_scalars(this:
                                                 *const root::octave_value_list)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list8any_cellEv"]
        pub fn octave_value_list_any_cell(this:
                                              *const root::octave_value_list)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list15has_magic_colonEv"]
        pub fn octave_value_list_has_magic_colon(this:
                                                     *const root::octave_value_list)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list9make_argvERKSs"]
        pub fn octave_value_list_make_argv(this:
                                               *const root::octave_value_list,
                                           arg1: *const root::std::string)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list20make_storable_valuesEv"]
        pub fn octave_value_list_make_storable_values(this:
                                                          *mut root::octave_value_list);
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_listC1ERKSt4listIS_SaIS_EE"]
        pub fn octave_value_list_octave_value_list(this:
                                                       *mut root::octave_value_list,
                                                   arg1:
                                                       *const [u64; 2usize]);
    }
    impl Clone for octave_value_list {
        fn clone(&self) -> Self { *self }
    }
    impl octave_value_list {
        #[inline]
        pub unsafe fn prepend(&mut self, val: *const root::octave_value)
         -> *mut root::octave_value_list {
            octave_value_list_prepend(self, val)
        }
        #[inline]
        pub unsafe fn append(&mut self, val: *const root::octave_value)
         -> *mut root::octave_value_list {
            octave_value_list_append(self, val)
        }
        #[inline]
        pub unsafe fn append1(&mut self, lst: *const root::octave_value_list)
         -> *mut root::octave_value_list {
            octave_value_list_append1(self, lst)
        }
        #[inline]
        pub unsafe fn reverse(&mut self) -> *mut root::octave_value_list {
            octave_value_list_reverse(self)
        }
        #[inline]
        pub unsafe fn splice(&self, offset: root::octave_idx_type,
                             len: root::octave_idx_type,
                             lst: *const root::octave_value_list)
         -> root::octave_value_list {
            octave_value_list_splice(self, offset, len, lst)
        }
        #[inline]
        pub unsafe fn all_strings_p(&self) -> bool {
            octave_value_list_all_strings_p(self)
        }
        #[inline]
        pub unsafe fn all_scalars(&self) -> bool {
            octave_value_list_all_scalars(self)
        }
        #[inline]
        pub unsafe fn any_cell(&self) -> bool {
            octave_value_list_any_cell(self)
        }
        #[inline]
        pub unsafe fn has_magic_colon(&self) -> bool {
            octave_value_list_has_magic_colon(self)
        }
        #[inline]
        pub unsafe fn make_argv(&self, arg1: *const root::std::string)
         -> root::string_vector {
            octave_value_list_make_argv(self, arg1)
        }
        #[inline]
        pub unsafe fn make_storable_values(&mut self) {
            octave_value_list_make_storable_values(self)
        }
        #[inline]
        pub unsafe fn new(arg1: *const [u64; 2usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_list_octave_value_list(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_lvalue {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct action_container__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct action_container {
        pub _bindgen_opaque_blob: u64,
    }
    #[repr(C)]
    pub struct action_container_elem__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct action_container_elem {
        pub _bindgen_opaque_blob: u64,
    }
    impl Clone for action_container_elem {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct action_container_fcn_elem {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for action_container_fcn_elem {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct action_container_fcn_arg_elem {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct action_container_fcn_crefarg_elem {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct action_container_method_elem {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct action_container_method_arg_elem {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct action_container_method_crefarg_elem {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct action_container_restore_var_elem {
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct action_container_delete_ptr_elem {
    }
    impl Clone for action_container {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        #[link_name = "_Z19reset_error_handlerv"]
        pub fn reset_error_handler();
    }
    extern "C" {
        #[link_name = "_Z15warning_enabledRKSs"]
        pub fn warning_enabled(id: *const root::std::string)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_Z8vmessagePKcS0_Pc"]
        pub fn vmessage(name: *const ::std::os::raw::c_char,
                        fmt: *const ::std::os::raw::c_char,
                        args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z7messagePKcS0_z"]
        pub fn message(name: *const ::std::os::raw::c_char,
                       fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z6vusagePKcPc"]
        pub fn vusage(fmt: *const ::std::os::raw::c_char,
                      args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z5usagePKcz"]
        pub fn usage(fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z8vwarningPKcPc"]
        pub fn vwarning(fmt: *const ::std::os::raw::c_char,
                        args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z7warningPKcz"]
        pub fn warning(fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z6verrorPKcPc"]
        pub fn verror(fmt: *const ::std::os::raw::c_char,
                      args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z5errorPKcz"]
        pub fn error(fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z6verrorRN6octave19execution_exceptionEPKcPc"]
        pub fn verror1(arg1: *mut root::octave::execution_exception,
                       fmt: *const ::std::os::raw::c_char,
                       args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z5errorRN6octave19execution_exceptionEPKcz"]
        pub fn error1(arg1: *mut root::octave::execution_exception,
                      fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z15verror_with_cfnPKcPc"]
        pub fn verror_with_cfn(fmt: *const ::std::os::raw::c_char,
                               args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z14error_with_cfnPKcz"]
        pub fn error_with_cfn(fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z12vparse_errorPKcPc"]
        pub fn vparse_error(fmt: *const ::std::os::raw::c_char,
                            args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z11parse_errorPKcz"]
        pub fn parse_error(fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z16vmessage_with_idPKcS0_S0_Pc"]
        pub fn vmessage_with_id(id: *const ::std::os::raw::c_char,
                                name: *const ::std::os::raw::c_char,
                                fmt: *const ::std::os::raw::c_char,
                                args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z15message_with_idPKcS0_S0_z"]
        pub fn message_with_id(id: *const ::std::os::raw::c_char,
                               name: *const ::std::os::raw::c_char,
                               fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z14vusage_with_idPKcS0_Pc"]
        pub fn vusage_with_id(id: *const ::std::os::raw::c_char,
                              fmt: *const ::std::os::raw::c_char,
                              args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z13usage_with_idPKcS0_z"]
        pub fn usage_with_id(id: *const ::std::os::raw::c_char,
                             fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z16vwarning_with_idPKcS0_Pc"]
        pub fn vwarning_with_id(id: *const ::std::os::raw::c_char,
                                fmt: *const ::std::os::raw::c_char,
                                args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z15warning_with_idPKcS0_z"]
        pub fn warning_with_id(id: *const ::std::os::raw::c_char,
                               fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z14verror_with_idPKcS0_Pc"]
        pub fn verror_with_id(id: *const ::std::os::raw::c_char,
                              fmt: *const ::std::os::raw::c_char,
                              args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z13error_with_idPKcS0_z"]
        pub fn error_with_id(id: *const ::std::os::raw::c_char,
                             fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z18verror_with_id_cfnPKcS0_Pc"]
        pub fn verror_with_id_cfn(id: *const ::std::os::raw::c_char,
                                  fmt: *const ::std::os::raw::c_char,
                                  args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z17error_with_id_cfnPKcS0_z"]
        pub fn error_with_id_cfn(id: *const ::std::os::raw::c_char,
                                 fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z20vparse_error_with_idPKcS0_Pc"]
        pub fn vparse_error_with_id(id: *const ::std::os::raw::c_char,
                                    fmt: *const ::std::os::raw::c_char,
                                    args: root::va_list);
    }
    extern "C" {
        #[link_name = "_Z19parse_error_with_idPKcS0_z"]
        pub fn parse_error_with_id(id: *const ::std::os::raw::c_char,
                                   fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z5panicPKcz"]
        pub fn panic(fmt: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        #[link_name = "_Z19defun_usage_messageRKSs"]
        pub fn defun_usage_message(msg: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z17set_warning_stateRKSsS0_"]
        pub fn set_warning_state(id: *const root::std::string,
                                 state: *const root::std::string)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_Z17set_warning_stateRK17octave_value_list"]
        pub fn set_warning_state1(args: *const root::octave_value_list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_Z15disable_warningRKSs"]
        pub fn disable_warning(id: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z32initialize_default_warning_statev"]
        pub fn initialize_default_warning_state();
    }
    extern "C" {
        #[link_name = "Vdebug_on_error"]
        pub static mut Vdebug_on_error: bool;
    }
    extern "C" {
        #[link_name = "Vdebug_on_caught"]
        pub static mut Vdebug_on_caught: bool;
    }
    extern "C" {
        #[link_name = "Vdebug_on_warning"]
        pub static mut Vdebug_on_warning: bool;
    }
    extern "C" {
        #[link_name = "error_state"]
        pub static mut error_state: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "warning_state"]
        pub static mut warning_state: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "buffer_error_messages"]
        pub static mut buffer_error_messages: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "in_try_catch"]
        pub static mut in_try_catch: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "discard_error_messages"]
        pub static mut discard_error_messages: bool;
    }
    extern "C" {
        #[link_name = "discard_warning_messages"]
        pub static mut discard_warning_messages: bool;
    }
    extern "C" {
        #[link_name = "_Z18last_error_messagev"]
        pub fn last_error_message() -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z13last_error_idv"]
        pub fn last_error_id() -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z16last_error_stackv"]
        pub fn last_error_stack() -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_Z20last_warning_messagev"]
        pub fn last_warning_message() -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z15last_warning_idv"]
        pub fn last_warning_id() -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z15interpreter_tryRN6octave14unwind_protectE"]
        pub fn interpreter_try(arg1: *mut root::octave::unwind_protect);
    }
    extern "C" {
        #[link_name = "_Z16check_hdf5_typesb"]
        pub fn check_hdf5_types(warn: bool) -> bool;
    }
    pub type octave_hdf5_id = u64;
    pub type octave_hdf5_err = u32;
    extern "C" {
        #[link_name = "octave_H5E_DEFAULT"]
        pub static octave_H5E_DEFAULT: root::octave_hdf5_id;
    }
    extern "C" {
        #[link_name = "octave_H5P_DEFAULT"]
        pub static octave_H5P_DEFAULT: root::octave_hdf5_id;
    }
    extern "C" {
        #[link_name = "octave_H5S_ALL"]
        pub static octave_H5S_ALL: root::octave_hdf5_id;
    }
    #[repr(C)]
    pub struct octave_value__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_value {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_unary_op {
        op_not = 0,
        op_uplus = 1,
        op_uminus = 2,
        op_transpose = 3,
        op_hermitian = 4,
        op_incr = 5,
        op_decr = 6,
        num_unary_ops = 7,
        unknown_unary_op = 8,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_binary_op {
        op_add = 0,
        op_sub = 1,
        op_mul = 2,
        op_div = 3,
        op_pow = 4,
        op_ldiv = 5,
        op_lt = 6,
        op_le = 7,
        op_eq = 8,
        op_ge = 9,
        op_gt = 10,
        op_ne = 11,
        op_el_mul = 12,
        op_el_div = 13,
        op_el_pow = 14,
        op_el_ldiv = 15,
        op_el_and = 16,
        op_el_or = 17,
        op_struct_ref = 18,
        num_binary_ops = 19,
        unknown_binary_op = 20,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_compound_binary_op {
        op_trans_mul = 0,
        op_mul_trans = 1,
        op_herm_mul = 2,
        op_mul_herm = 3,
        op_trans_ldiv = 4,
        op_herm_ldiv = 5,
        op_el_not_and = 6,
        op_el_not_or = 7,
        op_el_and_not = 8,
        op_el_or_not = 9,
        num_compound_binary_ops = 10,
        unknown_compound_binary_op = 11,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_assign_op {
        op_asn_eq = 0,
        op_add_eq = 1,
        op_sub_eq = 2,
        op_mul_eq = 3,
        op_div_eq = 4,
        op_ldiv_eq = 5,
        op_pow_eq = 6,
        op_el_mul_eq = 7,
        op_el_div_eq = 8,
        op_el_ldiv_eq = 9,
        op_el_pow_eq = 10,
        op_el_and_eq = 11,
        op_el_or_eq = 12,
        num_assign_ops = 13,
        unknown_assign_op = 14,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_magic_colon { magic_colon_t = 0, }
    extern "C" {
        #[link_name =
              "_ZN12octave_value22assign_op_to_binary_opENS_9assign_opE"]
        pub fn octave_value_assign_op_to_binary_op(arg1:
                                                       root::octave_value_assign_op)
         -> root::octave_value_binary_op;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value22binary_op_to_assign_opENS_9binary_opE"]
        pub fn octave_value_binary_op_to_assign_op(arg1:
                                                       root::octave_value_binary_op)
         -> root::octave_value_assign_op;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value18unary_op_as_stringENS_8unary_opE"]
        pub fn octave_value_unary_op_as_string(arg1:
                                                   root::octave_value_unary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value17unary_op_fcn_nameENS_8unary_opE"]
        pub fn octave_value_unary_op_fcn_name(arg1:
                                                  root::octave_value_unary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value19binary_op_as_stringENS_9binary_opE"]
        pub fn octave_value_binary_op_as_string(arg1:
                                                    root::octave_value_binary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value18binary_op_fcn_nameENS_9binary_opE"]
        pub fn octave_value_binary_op_fcn_name(arg1:
                                                   root::octave_value_binary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value18binary_op_fcn_nameENS_18compound_binary_opE"]
        pub fn octave_value_binary_op_fcn_name1(arg1:
                                                    root::octave_value_compound_binary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value19assign_op_as_stringENS_9assign_opE"]
        pub fn octave_value_assign_op_as_string(arg1:
                                                    root::octave_value_assign_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value10empty_convERKSsRKS_"]
        pub fn octave_value_empty_conv(type_: *const root::std::string,
                                       rhs: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value5cloneEv"]
        pub fn octave_value_clone(this: *const root::octave_value)
         -> *mut root::octave_base_value;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value12maybe_mutateEv"]
        pub fn octave_value_maybe_mutate(this: *mut root::octave_value);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value14single_subsrefERKSsRK17octave_value_list"]
        pub fn octave_value_single_subsref(this: *mut root::octave_value,
                                           type_: *const root::std::string,
                                           idx:
                                               *const root::octave_value_list)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value7subsrefERKSsRKSt4listI17octave_value_listSaIS3_EEi"]
        pub fn octave_value_subsref(this: *mut root::octave_value,
                                    type_: *const root::std::string,
                                    idx: *const [u64; 2usize],
                                    nargout: ::std::os::raw::c_int)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value7subsrefERKSsRKSt4listI17octave_value_listSaIS3_EEiPKS2_I13octave_lvalueSaIS8_EE"]
        pub fn octave_value_subsref1(this: *mut root::octave_value,
                                     type_: *const root::std::string,
                                     idx: *const [u64; 2usize],
                                     nargout: ::std::os::raw::c_int,
                                     lvalue_list: *const u8)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value12next_subsrefERKSsRKSt4listI17octave_value_listSaIS3_EEy"]
        pub fn octave_value_next_subsref(this: *mut root::octave_value,
                                         type_: *const root::std::string,
                                         idx: *const [u64; 2usize],
                                         skip: usize) -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value12next_subsrefEiRKSsRKSt4listI17octave_value_listSaIS3_EEy"]
        pub fn octave_value_next_subsref1(this: *mut root::octave_value,
                                          nargout: ::std::os::raw::c_int,
                                          type_: *const root::std::string,
                                          idx: *const [u64; 2usize],
                                          skip: usize)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value12next_subsrefEiRKSsRKSt4listI17octave_value_listSaIS3_EEPKS2_I13octave_lvalueSaIS8_EEy"]
        pub fn octave_value_next_subsref2(this: *mut root::octave_value,
                                          nargout: ::std::os::raw::c_int,
                                          type_: *const root::std::string,
                                          idx: *const [u64; 2usize],
                                          lvalue_list: *const u8, skip: usize)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value12next_subsrefEbRKSsRKSt4listI17octave_value_listSaIS3_EEy"]
        pub fn octave_value_next_subsref3(this: *mut root::octave_value,
                                          auto_add: bool,
                                          type_: *const root::std::string,
                                          idx: *const [u64; 2usize],
                                          skip: usize) -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value17do_multi_index_opEiRK17octave_value_list"]
        pub fn octave_value_do_multi_index_op(this: *mut root::octave_value,
                                              nargout: ::std::os::raw::c_int,
                                              idx:
                                                  *const root::octave_value_list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value17do_multi_index_opEiRK17octave_value_listPKSt4listI13octave_lvalueSaIS4_EE"]
        pub fn octave_value_do_multi_index_op1(this: *mut root::octave_value,
                                               nargout: ::std::os::raw::c_int,
                                               idx:
                                                   *const root::octave_value_list,
                                               lvalue_list: *const u8)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value8subsasgnERKSsRKSt4listI17octave_value_listSaIS3_EERKS_"]
        pub fn octave_value_subsasgn(this: *mut root::octave_value,
                                     type_: *const root::std::string,
                                     idx: *const [u64; 2usize],
                                     rhs: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value14undef_subsasgnERKSsRKSt4listI17octave_value_listSaIS3_EERKS_"]
        pub fn octave_value_undef_subsasgn(this: *mut root::octave_value,
                                           type_: *const root::std::string,
                                           idx: *const [u64; 2usize],
                                           rhs: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value6assignENS_9assign_opERKSsRKSt4listI17octave_value_listSaIS4_EERKS_"]
        pub fn octave_value_assign(this: *mut root::octave_value,
                                   op: root::octave_value_assign_op,
                                   type_: *const root::std::string,
                                   idx: *const [u64; 2usize],
                                   rhs: *const root::octave_value)
         -> *mut root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value6assignENS_9assign_opERKS_"]
        pub fn octave_value_assign1(this: *mut root::octave_value,
                                    arg1: root::octave_value_assign_op,
                                    rhs: *const root::octave_value)
         -> *mut root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value6lengthEv"]
        pub fn octave_value_length(this: *const root::octave_value)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value8is_equalERKS_"]
        pub fn octave_value_is_equal(this: *const root::octave_value,
                                     arg1: *const root::octave_value) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14idx_type_valueEbb"]
        pub fn octave_value_idx_type_value(this: *const root::octave_value,
                                           req_int: bool, frc_str_conv: bool)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10cell_valueEv"]
        pub fn octave_value_cell_value(this: *const root::octave_value)
         -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value9map_valueEv"]
        pub fn octave_value_map_value(this: *const root::octave_value)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16scalar_map_valueEv"]
        pub fn octave_value_scalar_map_value(this: *const root::octave_value)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14function_valueEb"]
        pub fn octave_value_function_value(this: *const root::octave_value,
                                           silent: bool)
         -> *mut root::octave_function;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19user_function_valueEb"]
        pub fn octave_value_user_function_value(this:
                                                    *const root::octave_value,
                                                silent: bool)
         -> *mut root::octave_user_function;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17user_script_valueEb"]
        pub fn octave_value_user_script_value(this: *const root::octave_value,
                                              silent: bool)
         -> *mut root::octave_user_script;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value15user_code_valueEb"]
        pub fn octave_value_user_code_value(this: *const root::octave_value,
                                            silent: bool)
         -> *mut root::octave_user_code;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16fcn_handle_valueEb"]
        pub fn octave_value_fcn_handle_value(this: *const root::octave_value,
                                             silent: bool)
         -> *mut root::octave_fcn_handle;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16fcn_inline_valueEb"]
        pub fn octave_value_fcn_inline_value(this: *const root::octave_value,
                                             silent: bool)
         -> *mut root::octave_fcn_inline;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10list_valueEv"]
        pub fn octave_value_list_value(this: *const root::octave_value)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19column_vector_valueEbb"]
        pub fn octave_value_column_vector_value(this:
                                                    *const root::octave_value,
                                                frc_str_conv: bool,
                                                frc_vec_conv: bool)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value27complex_column_vector_valueEbb"]
        pub fn octave_value_complex_column_vector_value(this:
                                                            *const root::octave_value,
                                                        frc_str_conv: bool,
                                                        frc_vec_conv: bool)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16row_vector_valueEbb"]
        pub fn octave_value_row_vector_value(this: *const root::octave_value,
                                             frc_str_conv: bool,
                                             frc_vec_conv: bool)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value24complex_row_vector_valueEbb"]
        pub fn octave_value_complex_row_vector_value(this:
                                                         *const root::octave_value,
                                                     frc_str_conv: bool,
                                                     frc_vec_conv: bool)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value25float_column_vector_valueEbb"]
        pub fn octave_value_float_column_vector_value(this:
                                                          *const root::octave_value,
                                                      frc_str_conv: bool,
                                                      frc_vec_conv: bool)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value33float_complex_column_vector_valueEbb"]
        pub fn octave_value_float_complex_column_vector_value(this:
                                                                  *const root::octave_value,
                                                              frc_str_conv:
                                                                  bool,
                                                              frc_vec_conv:
                                                                  bool)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value22float_row_vector_valueEbb"]
        pub fn octave_value_float_row_vector_value(this:
                                                       *const root::octave_value,
                                                   frc_str_conv: bool,
                                                   frc_vec_conv: bool)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value30float_complex_row_vector_valueEbb"]
        pub fn octave_value_float_complex_row_vector_value(this:
                                                               *const root::octave_value,
                                                           frc_str_conv: bool,
                                                           frc_vec_conv: bool)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16int_vector_valueEbbb"]
        pub fn octave_value_int_vector_value(this: *const root::octave_value,
                                             req_int: bool,
                                             frc_str_conv: bool,
                                             frc_vec_conv: bool)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value28octave_idx_type_vector_valueEbbb"]
        pub fn octave_value_octave_idx_type_vector_value(this:
                                                             *const root::octave_value,
                                                         req_int: bool,
                                                         frc_str_conv: bool,
                                                         frc_vec_conv: bool)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12vector_valueEbb"]
        pub fn octave_value_vector_value(this: *const root::octave_value,
                                         frc_str_conv: bool,
                                         frc_vec_conv: bool) -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20complex_vector_valueEbb"]
        pub fn octave_value_complex_vector_value(this:
                                                     *const root::octave_value,
                                                 frc_str_conv: bool,
                                                 frc_vec_conv: bool)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18float_vector_valueEbb"]
        pub fn octave_value_float_vector_value(this:
                                                   *const root::octave_value,
                                               frc_str_conv: bool,
                                               frc_vec_conv: bool)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value26float_complex_vector_valueEbb"]
        pub fn octave_value_float_complex_vector_value(this:
                                                           *const root::octave_value,
                                                       frc_str_conv: bool,
                                                       frc_vec_conv: bool)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xshort_valueEPKcz"]
        pub fn octave_value_xshort_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_short;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xushort_valueEPKcz"]
        pub fn octave_value_xushort_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_ushort;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10xint_valueEPKcz"]
        pub fn octave_value_xint_value(this: *const root::octave_value,
                                       fmt:
                                           *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xuint_valueEPKcz"]
        pub fn octave_value_xuint_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_uint;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xnint_valueEPKcz"]
        pub fn octave_value_xnint_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xlong_valueEPKcz"]
        pub fn octave_value_xlong_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xulong_valueEPKcz"]
        pub fn octave_value_xulong_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xint64_valueEPKcz"]
        pub fn octave_value_xint64_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> i64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xuint64_valueEPKcz"]
        pub fn octave_value_xuint64_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> u64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value15xidx_type_valueEPKcz"]
        pub fn octave_value_xidx_type_value(this: *const root::octave_value,
                                            fmt:
                                                *const ::std::os::raw::c_char, ...)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xdouble_valueEPKcz"]
        pub fn octave_value_xdouble_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xfloat_valueEPKcz"]
        pub fn octave_value_xfloat_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xscalar_valueEPKcz"]
        pub fn octave_value_xscalar_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xfloat_scalar_valueEPKcz"]
        pub fn octave_value_xfloat_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xmatrix_valueEPKcz"]
        pub fn octave_value_xmatrix_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xfloat_matrix_valueEPKcz"]
        pub fn octave_value_xfloat_matrix_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xarray_valueEPKcz"]
        pub fn octave_value_xarray_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xfloat_array_valueEPKcz"]
        pub fn octave_value_xfloat_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14xcomplex_valueEPKcz"]
        pub fn octave_value_xcomplex_value(this: *const root::octave_value,
                                           fmt:
                                               *const ::std::os::raw::c_char, ...)
         -> root::Complex;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xfloat_complex_valueEPKcz"]
        pub fn octave_value_xfloat_complex_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::FloatComplex;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value21xcomplex_matrix_valueEPKcz"]
        pub fn octave_value_xcomplex_matrix_value(this:
                                                      *const root::octave_value,
                                                  fmt:
                                                      *const ::std::os::raw::c_char, ...)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value27xfloat_complex_matrix_valueEPKcz"]
        pub fn octave_value_xfloat_complex_matrix_value(this:
                                                            *const root::octave_value,
                                                        fmt:
                                                            *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xcomplex_array_valueEPKcz"]
        pub fn octave_value_xcomplex_array_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value26xfloat_complex_array_valueEPKcz"]
        pub fn octave_value_xfloat_complex_array_value(this:
                                                           *const root::octave_value,
                                                       fmt:
                                                           *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xbool_valueEPKcz"]
        pub fn octave_value_xbool_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xbool_matrix_valueEPKcz"]
        pub fn octave_value_xbool_matrix_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xbool_array_valueEPKcz"]
        pub fn octave_value_xbool_array_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xchar_matrix_valueEPKcz"]
        pub fn octave_value_xchar_matrix_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::charMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xchar_array_valueEPKcz"]
        pub fn octave_value_xchar_array_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xsparse_matrix_valueEPKcz"]
        pub fn octave_value_xsparse_matrix_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value28xsparse_complex_matrix_valueEPKcz"]
        pub fn octave_value_xsparse_complex_matrix_value(this:
                                                             *const root::octave_value,
                                                         fmt:
                                                             *const ::std::os::raw::c_char, ...)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value25xsparse_bool_matrix_valueEPKcz"]
        pub fn octave_value_xsparse_bool_matrix_value(this:
                                                          *const root::octave_value,
                                                      fmt:
                                                          *const ::std::os::raw::c_char, ...)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xdiag_matrix_valueEPKcz"]
        pub fn octave_value_xdiag_matrix_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value24xfloat_diag_matrix_valueEPKcz"]
        pub fn octave_value_xfloat_diag_matrix_value(this:
                                                         *const root::octave_value,
                                                     fmt:
                                                         *const ::std::os::raw::c_char, ...)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value26xcomplex_diag_matrix_valueEPKcz"]
        pub fn octave_value_xcomplex_diag_matrix_value(this:
                                                           *const root::octave_value,
                                                       fmt:
                                                           *const ::std::os::raw::c_char, ...)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value32xfloat_complex_diag_matrix_valueEPKcz"]
        pub fn octave_value_xfloat_complex_diag_matrix_value(this:
                                                                 *const root::octave_value,
                                                             fmt:
                                                                 *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xperm_matrix_valueEPKcz"]
        pub fn octave_value_xperm_matrix_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::PermMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xint8_scalar_valueEPKcz"]
        pub fn octave_value_xint8_scalar_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::octave_int8;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xint16_scalar_valueEPKcz"]
        pub fn octave_value_xint16_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::octave_int16;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xint32_scalar_valueEPKcz"]
        pub fn octave_value_xint32_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::octave_int32;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xint64_scalar_valueEPKcz"]
        pub fn octave_value_xint64_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::octave_int64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xuint8_scalar_valueEPKcz"]
        pub fn octave_value_xuint8_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::octave_uint8;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xuint16_scalar_valueEPKcz"]
        pub fn octave_value_xuint16_scalar_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::octave_uint16;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xuint32_scalar_valueEPKcz"]
        pub fn octave_value_xuint32_scalar_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::octave_uint32;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xuint64_scalar_valueEPKcz"]
        pub fn octave_value_xuint64_scalar_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::octave_uint64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xint8_array_valueEPKcz"]
        pub fn octave_value_xint8_array_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xint16_array_valueEPKcz"]
        pub fn octave_value_xint16_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xint32_array_valueEPKcz"]
        pub fn octave_value_xint32_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xint64_array_valueEPKcz"]
        pub fn octave_value_xint64_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xuint8_array_valueEPKcz"]
        pub fn octave_value_xuint8_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xuint16_array_valueEPKcz"]
        pub fn octave_value_xuint16_array_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xuint32_array_valueEPKcz"]
        pub fn octave_value_xuint32_array_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xuint64_array_valueEPKcz"]
        pub fn octave_value_xuint64_array_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xstring_valueEPKcz"]
        pub fn octave_value_xstring_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xstring_vector_valueEPKcz"]
        pub fn octave_value_xstring_vector_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xcell_valueEPKcz"]
        pub fn octave_value_xcell_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14xcellstr_valueEPKcz"]
        pub fn octave_value_xcellstr_value(this: *const root::octave_value,
                                           fmt:
                                               *const ::std::os::raw::c_char, ...)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xrange_valueEPKcz"]
        pub fn octave_value_xrange_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> root::Range;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10xmap_valueEPKcz"]
        pub fn octave_value_xmap_value(this: *const root::octave_value,
                                       fmt:
                                           *const ::std::os::raw::c_char, ...)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xscalar_map_valueEPKcz"]
        pub fn octave_value_xscalar_map_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xcolumn_vector_valueEPKcz"]
        pub fn octave_value_xcolumn_vector_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value28xcomplex_column_vector_valueEPKcz"]
        pub fn octave_value_xcomplex_column_vector_value(this:
                                                             *const root::octave_value,
                                                         fmt:
                                                             *const ::std::os::raw::c_char, ...)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xrow_vector_valueEPKcz"]
        pub fn octave_value_xrow_vector_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value25xcomplex_row_vector_valueEPKcz"]
        pub fn octave_value_xcomplex_row_vector_value(this:
                                                          *const root::octave_value,
                                                      fmt:
                                                          *const ::std::os::raw::c_char, ...)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value26xfloat_column_vector_valueEPKcz"]
        pub fn octave_value_xfloat_column_vector_value(this:
                                                           *const root::octave_value,
                                                       fmt:
                                                           *const ::std::os::raw::c_char, ...)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value34xfloat_complex_column_vector_valueEPKcz"]
        pub fn octave_value_xfloat_complex_column_vector_value(this:
                                                                   *const root::octave_value,
                                                               fmt:
                                                                   *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value23xfloat_row_vector_valueEPKcz"]
        pub fn octave_value_xfloat_row_vector_value(this:
                                                        *const root::octave_value,
                                                    fmt:
                                                        *const ::std::os::raw::c_char, ...)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value31xfloat_complex_row_vector_valueEPKcz"]
        pub fn octave_value_xfloat_complex_row_vector_value(this:
                                                                *const root::octave_value,
                                                            fmt:
                                                                *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xint_vector_valueEPKcz"]
        pub fn octave_value_xint_vector_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value29xoctave_idx_type_vector_valueEPKcz"]
        pub fn octave_value_xoctave_idx_type_vector_value(this:
                                                              *const root::octave_value,
                                                          fmt:
                                                              *const ::std::os::raw::c_char, ...)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xvector_valueEPKcz"]
        pub fn octave_value_xvector_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value21xcomplex_vector_valueEPKcz"]
        pub fn octave_value_xcomplex_vector_value(this:
                                                      *const root::octave_value,
                                                  fmt:
                                                      *const ::std::os::raw::c_char, ...)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xfloat_vector_valueEPKcz"]
        pub fn octave_value_xfloat_vector_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value27xfloat_complex_vector_valueEPKcz"]
        pub fn octave_value_xfloat_complex_vector_value(this:
                                                            *const root::octave_value,
                                                        fmt:
                                                            *const ::std::os::raw::c_char, ...)
         -> [u64; 5usize];
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value15xfunction_valueEPKcz"]
        pub fn octave_value_xfunction_value(this: *const root::octave_value,
                                            fmt:
                                                *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_function;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xuser_function_valueEPKcz"]
        pub fn octave_value_xuser_function_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_user_function;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xuser_script_valueEPKcz"]
        pub fn octave_value_xuser_script_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_user_script;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16xuser_code_valueEPKcz"]
        pub fn octave_value_xuser_code_value(this: *const root::octave_value,
                                             fmt:
                                                 *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_user_code;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xfcn_handle_valueEPKcz"]
        pub fn octave_value_xfcn_handle_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_fcn_handle;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xfcn_inline_valueEPKcz"]
        pub fn octave_value_xfcn_inline_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_fcn_inline;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xlist_valueEPKcz"]
        pub fn octave_value_xlist_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14storable_valueEv"]
        pub fn octave_value_storable_value(this: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value19make_storable_valueEv"]
        pub fn octave_value_make_storable_value(this:
                                                    *mut root::octave_value);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value21do_non_const_unary_opENS_8unary_opE"]
        pub fn octave_value_do_non_const_unary_op(this:
                                                      *mut root::octave_value,
                                                  op:
                                                      root::octave_value_unary_op)
         -> *mut root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value21do_non_const_unary_opENS_8unary_opERKSsRKSt4listI17octave_value_listSaIS4_EE"]
        pub fn octave_value_do_non_const_unary_op1(this:
                                                       *mut root::octave_value,
                                                   op:
                                                       root::octave_value_unary_op,
                                                   type_:
                                                       *const root::std::string,
                                                   idx: *const [u64; 2usize])
         -> *mut root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10print_infoERSoRKSs"]
        pub fn octave_value_print_info(this: *const root::octave_value,
                                       os: *mut root::std::ostream,
                                       prefix: *const root::std::string);
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value5writeER13octave_streamiN13oct_data_conv9data_typeEiN6octave9mach_info12float_formatE"]
        pub fn octave_value_write(this: *const root::octave_value,
                                  os: *mut root::octave_stream,
                                  block_size: ::std::os::raw::c_int,
                                  output_type: root::oct_data_conv_data_type,
                                  skip: ::std::os::raw::c_int,
                                  flt_fmt:
                                      root::octave::mach_info_float_format)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Es"]
        pub fn octave_value_octave_value(this: *mut root::octave_value,
                                         i: ::std::os::raw::c_short);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Et"]
        pub fn octave_value_octave_value1(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_ushort);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ei"]
        pub fn octave_value_octave_value2(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ej"]
        pub fn octave_value_octave_value3(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_uint);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1El"]
        pub fn octave_value_octave_value4(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_long);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Em"]
        pub fn octave_value_octave_value5(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_ulong);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ex"]
        pub fn octave_value_octave_value6(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_longlong);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ey"]
        pub fn octave_value_octave_value7(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_ulonglong);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1EN6octave3sys4timeE"]
        pub fn octave_value_octave_value8(this: *mut root::octave_value,
                                          t: root::octave::sys::time);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ed"]
        pub fn octave_value_octave_value9(this: *mut root::octave_value,
                                          d: f64);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ef"]
        pub fn octave_value_octave_value10(this: *mut root::octave_value,
                                           d: f32);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIS_Eb"]
        pub fn octave_value_octave_value11(this: *mut root::octave_value,
                                           a: *const [u64; 5usize],
                                           is_cs_list: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK4Cellb"]
        pub fn octave_value_octave_value12(this: *mut root::octave_value,
                                           c: *const root::Cell,
                                           is_cs_list: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK6MatrixRK10MatrixType"]
        pub fn octave_value_octave_value13(this: *mut root::octave_value,
                                           m: *const root::Matrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK11FloatMatrixRK10MatrixType"]
        pub fn octave_value_octave_value14(this: *mut root::octave_value,
                                           m: *const root::FloatMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK7NDArray"]
        pub fn octave_value_octave_value15(this: *mut root::octave_value,
                                           nda: *const root::NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK12FloatNDArray"]
        pub fn octave_value_octave_value16(this: *mut root::octave_value,
                                           nda: *const root::FloatNDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIdE"]
        pub fn octave_value_octave_value17(this: *mut root::octave_value,
                                           m: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIfE"]
        pub fn octave_value_octave_value18(this: *mut root::octave_value,
                                           m: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagMatrix"]
        pub fn octave_value_octave_value19(this: *mut root::octave_value,
                                           d: *const root::DiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagArray2IdE"]
        pub fn octave_value_octave_value20(this: *mut root::octave_value,
                                           d: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagArray2IfE"]
        pub fn octave_value_octave_value21(this: *mut root::octave_value,
                                           d: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagArray2ISt7complexIdEE"]
        pub fn octave_value_octave_value22(this: *mut root::octave_value,
                                           d: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagArray2ISt7complexIfEE"]
        pub fn octave_value_octave_value23(this: *mut root::octave_value,
                                           d: *const [u64; 6usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK15FloatDiagMatrix"]
        pub fn octave_value_octave_value24(this: *mut root::octave_value,
                                           d: *const root::FloatDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK9RowVector"]
        pub fn octave_value_octave_value25(this: *mut root::octave_value,
                                           v: *const root::RowVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK14FloatRowVector"]
        pub fn octave_value_octave_value26(this: *mut root::octave_value,
                                           v: *const root::FloatRowVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK12ColumnVector"]
        pub fn octave_value_octave_value27(this: *mut root::octave_value,
                                           v: *const root::ColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK17FloatColumnVector"]
        pub fn octave_value_octave_value28(this: *mut root::octave_value,
                                           v: *const root::FloatColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERKSt7complexIdE"]
        pub fn octave_value_octave_value29(this: *mut root::octave_value,
                                           C: *const root::Complex);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERKSt7complexIfE"]
        pub fn octave_value_octave_value30(this: *mut root::octave_value,
                                           C: *const root::FloatComplex);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK13ComplexMatrixRK10MatrixType"]
        pub fn octave_value_octave_value31(this: *mut root::octave_value,
                                           m: *const root::ComplexMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK18FloatComplexMatrixRK10MatrixType"]
        pub fn octave_value_octave_value32(this: *mut root::octave_value,
                                           m: *const root::FloatComplexMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK14ComplexNDArray"]
        pub fn octave_value_octave_value33(this: *mut root::octave_value,
                                           cnda: *const root::ComplexNDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK19FloatComplexNDArray"]
        pub fn octave_value_octave_value34(this: *mut root::octave_value,
                                           cnda:
                                               *const root::FloatComplexNDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayISt7complexIdEE"]
        pub fn octave_value_octave_value35(this: *mut root::octave_value,
                                           m: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayISt7complexIfEE"]
        pub fn octave_value_octave_value36(this: *mut root::octave_value,
                                           m: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK17ComplexDiagMatrix"]
        pub fn octave_value_octave_value37(this: *mut root::octave_value,
                                           d: *const root::ComplexDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK22FloatComplexDiagMatrix"]
        pub fn octave_value_octave_value38(this: *mut root::octave_value,
                                           d:
                                               *const root::FloatComplexDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK16ComplexRowVector"]
        pub fn octave_value_octave_value39(this: *mut root::octave_value,
                                           v: *const root::ComplexRowVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK21FloatComplexRowVector"]
        pub fn octave_value_octave_value40(this: *mut root::octave_value,
                                           v:
                                               *const root::FloatComplexRowVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK19ComplexColumnVector"]
        pub fn octave_value_octave_value41(this: *mut root::octave_value,
                                           v:
                                               *const root::ComplexColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK24FloatComplexColumnVector"]
        pub fn octave_value_octave_value42(this: *mut root::octave_value,
                                           v:
                                               *const root::FloatComplexColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10PermMatrix"]
        pub fn octave_value_octave_value43(this: *mut root::octave_value,
                                           p: *const root::PermMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Eb"]
        pub fn octave_value_octave_value44(this: *mut root::octave_value,
                                           b: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10boolMatrixRK10MatrixType"]
        pub fn octave_value_octave_value45(this: *mut root::octave_value,
                                           bm: *const root::boolMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK11boolNDArray"]
        pub fn octave_value_octave_value46(this: *mut root::octave_value,
                                           bnda: *const root::boolNDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIbE"]
        pub fn octave_value_octave_value47(this: *mut root::octave_value,
                                           bnda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ecc"]
        pub fn octave_value_octave_value48(this: *mut root::octave_value,
                                           c: ::std::os::raw::c_char,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1EPKcc"]
        pub fn octave_value_octave_value49(this: *mut root::octave_value,
                                           s: *const ::std::os::raw::c_char,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERKSsc"]
        pub fn octave_value_octave_value50(this: *mut root::octave_value,
                                           s: *const root::std::string,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK13string_vectorc"]
        pub fn octave_value_octave_value51(this: *mut root::octave_value,
                                           s: *const root::string_vector,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10charMatrixc"]
        pub fn octave_value_octave_value52(this: *mut root::octave_value,
                                           chm: *const root::charMatrix,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK11charNDArrayc"]
        pub fn octave_value_octave_value53(this: *mut root::octave_value,
                                           chnda: *const root::charNDArray,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIcEc"]
        pub fn octave_value_octave_value54(this: *mut root::octave_value,
                                           chnda: *const [u64; 5usize],
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10charMatrixbc"]
        pub fn octave_value_octave_value55(this: *mut root::octave_value,
                                           chm: *const root::charMatrix,
                                           is_string: bool,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK11charNDArraybc"]
        pub fn octave_value_octave_value56(this: *mut root::octave_value,
                                           chnda: *const root::charNDArray,
                                           is_string: bool,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIcEbc"]
        pub fn octave_value_octave_value57(this: *mut root::octave_value,
                                           chnda: *const [u64; 5usize],
                                           is_string: bool,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK12SparseMatrixRK10MatrixType"]
        pub fn octave_value_octave_value58(this: *mut root::octave_value,
                                           m: *const root::SparseMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK6SparseIdERK10MatrixType"]
        pub fn octave_value_octave_value59(this: *mut root::octave_value,
                                           m: *const [u64; 3usize],
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK19SparseComplexMatrixRK10MatrixType"]
        pub fn octave_value_octave_value60(this: *mut root::octave_value,
                                           m:
                                               *const root::SparseComplexMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK6SparseISt7complexIdEERK10MatrixType"]
        pub fn octave_value_octave_value61(this: *mut root::octave_value,
                                           m: *const [u64; 3usize],
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK16SparseBoolMatrixRK10MatrixType"]
        pub fn octave_value_octave_value62(this: *mut root::octave_value,
                                           bm: *const root::SparseBoolMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK6SparseIbERK10MatrixType"]
        pub fn octave_value_octave_value63(this: *mut root::octave_value,
                                           m: *const [u64; 3usize],
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIaE"]
        pub fn octave_value_octave_value64(this: *mut root::octave_value,
                                           i: *const root::octave_int8);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIsE"]
        pub fn octave_value_octave_value65(this: *mut root::octave_value,
                                           i: *const root::octave_int16);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIiE"]
        pub fn octave_value_octave_value66(this: *mut root::octave_value,
                                           i: *const root::octave_int32);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIxE"]
        pub fn octave_value_octave_value67(this: *mut root::octave_value,
                                           i: *const root::octave_int64);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIhE"]
        pub fn octave_value_octave_value68(this: *mut root::octave_value,
                                           i: *const root::octave_uint8);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intItE"]
        pub fn octave_value_octave_value69(this: *mut root::octave_value,
                                           i: *const root::octave_uint16);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIjE"]
        pub fn octave_value_octave_value70(this: *mut root::octave_value,
                                           i: *const root::octave_uint32);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIyE"]
        pub fn octave_value_octave_value71(this: *mut root::octave_value,
                                           i: *const root::octave_uint64);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIaEE"]
        pub fn octave_value_octave_value72(this: *mut root::octave_value,
                                           inda: *const root::int8NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIaEE"]
        pub fn octave_value_octave_value73(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIsEE"]
        pub fn octave_value_octave_value74(this: *mut root::octave_value,
                                           inda: *const root::int16NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIsEE"]
        pub fn octave_value_octave_value75(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIiEE"]
        pub fn octave_value_octave_value76(this: *mut root::octave_value,
                                           inda: *const root::int32NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIiEE"]
        pub fn octave_value_octave_value77(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIxEE"]
        pub fn octave_value_octave_value78(this: *mut root::octave_value,
                                           inda: *const root::int64NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIxEE"]
        pub fn octave_value_octave_value79(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIhEE"]
        pub fn octave_value_octave_value80(this: *mut root::octave_value,
                                           inda: *const root::uint8NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIhEE"]
        pub fn octave_value_octave_value81(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intItEE"]
        pub fn octave_value_octave_value82(this: *mut root::octave_value,
                                           inda: *const root::uint16NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intItEE"]
        pub fn octave_value_octave_value83(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIjEE"]
        pub fn octave_value_octave_value84(this: *mut root::octave_value,
                                           inda: *const root::uint32NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIjEE"]
        pub fn octave_value_octave_value85(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIyEE"]
        pub fn octave_value_octave_value86(this: *mut root::octave_value,
                                           inda: *const root::uint64NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIyEE"]
        pub fn octave_value_octave_value87(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIiEbb"]
        pub fn octave_value_octave_value88(this: *mut root::octave_value,
                                           inda: *const [u64; 5usize],
                                           zero_based: bool,
                                           cache_index: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayISsE"]
        pub fn octave_value_octave_value89(this: *mut root::octave_value,
                                           cellstr: *const [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10idx_vectorb"]
        pub fn octave_value_octave_value90(this: *mut root::octave_value,
                                           idx: *const root::idx_vector,
                                           lazy: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Eddd"]
        pub fn octave_value_octave_value91(this: *mut root::octave_value,
                                           base: f64, limit: f64, inc: f64);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5Rangeb"]
        pub fn octave_value_octave_value92(this: *mut root::octave_value,
                                           r: *const root::Range,
                                           force_range: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_map"]
        pub fn octave_value_octave_value93(this: *mut root::octave_value,
                                           m: *const root::octave_map);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK17octave_scalar_map"]
        pub fn octave_value_octave_value94(this: *mut root::octave_value,
                                           m: *const root::octave_scalar_map);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK10octave_mapRKSsRKSt4listISsSaISsEE"]
        pub fn octave_value_octave_value95(this: *mut root::octave_value,
                                           m: *const root::octave_map,
                                           id: *const root::std::string,
                                           plist: *const [u64; 2usize]);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK17octave_scalar_mapRKSsRKSt4listISsSaISsEE"]
        pub fn octave_value_octave_value96(this: *mut root::octave_value,
                                           m: *const root::octave_scalar_map,
                                           id: *const root::std::string,
                                           plist: *const [u64; 2usize]);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK17octave_value_listb"]
        pub fn octave_value_octave_value97(this: *mut root::octave_value,
                                           m: *const root::octave_value_list,
                                           arg1: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ENS_11magic_colonE"]
        pub fn octave_value_octave_value98(this: *mut root::octave_value,
                                           arg1:
                                               root::octave_value_magic_colon);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1EP17octave_base_valueb"]
        pub fn octave_value_octave_value99(this: *mut root::octave_value,
                                           new_rep:
                                               *mut root::octave_base_value,
                                           borrow: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1EP17octave_base_valuei"]
        pub fn octave_value_octave_value100(this: *mut root::octave_value,
                                            new_rep:
                                                *mut root::octave_base_value,
                                            xcount: ::std::os::raw::c_int);
    }
    impl Clone for octave_value {
        fn clone(&self) -> Self { *self }
    }
    impl octave_value {
        #[inline]
        pub unsafe fn assign_op_to_binary_op(arg1:
                                                 root::octave_value_assign_op)
         -> root::octave_value_binary_op {
            octave_value_assign_op_to_binary_op(arg1)
        }
        #[inline]
        pub unsafe fn binary_op_to_assign_op(arg1:
                                                 root::octave_value_binary_op)
         -> root::octave_value_assign_op {
            octave_value_binary_op_to_assign_op(arg1)
        }
        #[inline]
        pub unsafe fn unary_op_as_string(arg1: root::octave_value_unary_op)
         -> root::std::string {
            octave_value_unary_op_as_string(arg1)
        }
        #[inline]
        pub unsafe fn unary_op_fcn_name(arg1: root::octave_value_unary_op)
         -> root::std::string {
            octave_value_unary_op_fcn_name(arg1)
        }
        #[inline]
        pub unsafe fn binary_op_as_string(arg1: root::octave_value_binary_op)
         -> root::std::string {
            octave_value_binary_op_as_string(arg1)
        }
        #[inline]
        pub unsafe fn binary_op_fcn_name(arg1: root::octave_value_binary_op)
         -> root::std::string {
            octave_value_binary_op_fcn_name(arg1)
        }
        #[inline]
        pub unsafe fn binary_op_fcn_name1(arg1:
                                              root::octave_value_compound_binary_op)
         -> root::std::string {
            octave_value_binary_op_fcn_name1(arg1)
        }
        #[inline]
        pub unsafe fn assign_op_as_string(arg1: root::octave_value_assign_op)
         -> root::std::string {
            octave_value_assign_op_as_string(arg1)
        }
        #[inline]
        pub unsafe fn empty_conv(type_: *const root::std::string,
                                 rhs: *const root::octave_value)
         -> root::octave_value {
            octave_value_empty_conv(type_, rhs)
        }
        #[inline]
        pub unsafe fn clone(&self) -> *mut root::octave_base_value {
            octave_value_clone(self)
        }
        #[inline]
        pub unsafe fn maybe_mutate(&mut self) {
            octave_value_maybe_mutate(self)
        }
        #[inline]
        pub unsafe fn single_subsref(&mut self,
                                     type_: *const root::std::string,
                                     idx: *const root::octave_value_list)
         -> root::octave_value {
            octave_value_single_subsref(self, type_, idx)
        }
        #[inline]
        pub unsafe fn subsref(&mut self, type_: *const root::std::string,
                              idx: *const [u64; 2usize],
                              nargout: ::std::os::raw::c_int)
         -> root::octave_value_list {
            octave_value_subsref(self, type_, idx, nargout)
        }
        #[inline]
        pub unsafe fn subsref1(&mut self, type_: *const root::std::string,
                               idx: *const [u64; 2usize],
                               nargout: ::std::os::raw::c_int,
                               lvalue_list: *const u8)
         -> root::octave_value_list {
            octave_value_subsref1(self, type_, idx, nargout, lvalue_list)
        }
        #[inline]
        pub unsafe fn next_subsref(&mut self, type_: *const root::std::string,
                                   idx: *const [u64; 2usize], skip: usize)
         -> root::octave_value {
            octave_value_next_subsref(self, type_, idx, skip)
        }
        #[inline]
        pub unsafe fn next_subsref1(&mut self, nargout: ::std::os::raw::c_int,
                                    type_: *const root::std::string,
                                    idx: *const [u64; 2usize], skip: usize)
         -> root::octave_value_list {
            octave_value_next_subsref1(self, nargout, type_, idx, skip)
        }
        #[inline]
        pub unsafe fn next_subsref2(&mut self, nargout: ::std::os::raw::c_int,
                                    type_: *const root::std::string,
                                    idx: *const [u64; 2usize],
                                    lvalue_list: *const u8, skip: usize)
         -> root::octave_value_list {
            octave_value_next_subsref2(self, nargout, type_, idx, lvalue_list,
                                       skip)
        }
        #[inline]
        pub unsafe fn next_subsref3(&mut self, auto_add: bool,
                                    type_: *const root::std::string,
                                    idx: *const [u64; 2usize], skip: usize)
         -> root::octave_value {
            octave_value_next_subsref3(self, auto_add, type_, idx, skip)
        }
        #[inline]
        pub unsafe fn do_multi_index_op(&mut self,
                                        nargout: ::std::os::raw::c_int,
                                        idx: *const root::octave_value_list)
         -> root::octave_value_list {
            octave_value_do_multi_index_op(self, nargout, idx)
        }
        #[inline]
        pub unsafe fn do_multi_index_op1(&mut self,
                                         nargout: ::std::os::raw::c_int,
                                         idx: *const root::octave_value_list,
                                         lvalue_list: *const u8)
         -> root::octave_value_list {
            octave_value_do_multi_index_op1(self, nargout, idx, lvalue_list)
        }
        #[inline]
        pub unsafe fn subsasgn(&mut self, type_: *const root::std::string,
                               idx: *const [u64; 2usize],
                               rhs: *const root::octave_value)
         -> root::octave_value {
            octave_value_subsasgn(self, type_, idx, rhs)
        }
        #[inline]
        pub unsafe fn undef_subsasgn(&mut self,
                                     type_: *const root::std::string,
                                     idx: *const [u64; 2usize],
                                     rhs: *const root::octave_value)
         -> root::octave_value {
            octave_value_undef_subsasgn(self, type_, idx, rhs)
        }
        #[inline]
        pub unsafe fn assign(&mut self, op: root::octave_value_assign_op,
                             type_: *const root::std::string,
                             idx: *const [u64; 2usize],
                             rhs: *const root::octave_value)
         -> *mut root::octave_value {
            octave_value_assign(self, op, type_, idx, rhs)
        }
        #[inline]
        pub unsafe fn assign1(&mut self, arg1: root::octave_value_assign_op,
                              rhs: *const root::octave_value)
         -> *mut root::octave_value {
            octave_value_assign1(self, arg1, rhs)
        }
        #[inline]
        pub unsafe fn length(&self) -> root::octave_idx_type {
            octave_value_length(self)
        }
        #[inline]
        pub unsafe fn is_equal(&self, arg1: *const root::octave_value)
         -> bool {
            octave_value_is_equal(self, arg1)
        }
        #[inline]
        pub unsafe fn idx_type_value(&self, req_int: bool, frc_str_conv: bool)
         -> root::octave_idx_type {
            octave_value_idx_type_value(self, req_int, frc_str_conv)
        }
        #[inline]
        pub unsafe fn cell_value(&self) -> root::Cell {
            octave_value_cell_value(self)
        }
        #[inline]
        pub unsafe fn map_value(&self) -> root::octave_map {
            octave_value_map_value(self)
        }
        #[inline]
        pub unsafe fn scalar_map_value(&self) -> root::octave_scalar_map {
            octave_value_scalar_map_value(self)
        }
        #[inline]
        pub unsafe fn function_value(&self, silent: bool)
         -> *mut root::octave_function {
            octave_value_function_value(self, silent)
        }
        #[inline]
        pub unsafe fn user_function_value(&self, silent: bool)
         -> *mut root::octave_user_function {
            octave_value_user_function_value(self, silent)
        }
        #[inline]
        pub unsafe fn user_script_value(&self, silent: bool)
         -> *mut root::octave_user_script {
            octave_value_user_script_value(self, silent)
        }
        #[inline]
        pub unsafe fn user_code_value(&self, silent: bool)
         -> *mut root::octave_user_code {
            octave_value_user_code_value(self, silent)
        }
        #[inline]
        pub unsafe fn fcn_handle_value(&self, silent: bool)
         -> *mut root::octave_fcn_handle {
            octave_value_fcn_handle_value(self, silent)
        }
        #[inline]
        pub unsafe fn fcn_inline_value(&self, silent: bool)
         -> *mut root::octave_fcn_inline {
            octave_value_fcn_inline_value(self, silent)
        }
        #[inline]
        pub unsafe fn list_value(&self) -> root::octave_value_list {
            octave_value_list_value(self)
        }
        #[inline]
        pub unsafe fn column_vector_value(&self, frc_str_conv: bool,
                                          frc_vec_conv: bool)
         -> root::ColumnVector {
            octave_value_column_vector_value(self, frc_str_conv, frc_vec_conv)
        }
        #[inline]
        pub unsafe fn complex_column_vector_value(&self, frc_str_conv: bool,
                                                  frc_vec_conv: bool)
         -> root::ComplexColumnVector {
            octave_value_complex_column_vector_value(self, frc_str_conv,
                                                     frc_vec_conv)
        }
        #[inline]
        pub unsafe fn row_vector_value(&self, frc_str_conv: bool,
                                       frc_vec_conv: bool)
         -> root::RowVector {
            octave_value_row_vector_value(self, frc_str_conv, frc_vec_conv)
        }
        #[inline]
        pub unsafe fn complex_row_vector_value(&self, frc_str_conv: bool,
                                               frc_vec_conv: bool)
         -> root::ComplexRowVector {
            octave_value_complex_row_vector_value(self, frc_str_conv,
                                                  frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_column_vector_value(&self, frc_str_conv: bool,
                                                frc_vec_conv: bool)
         -> root::FloatColumnVector {
            octave_value_float_column_vector_value(self, frc_str_conv,
                                                   frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_complex_column_vector_value(&self,
                                                        frc_str_conv: bool,
                                                        frc_vec_conv: bool)
         -> root::FloatComplexColumnVector {
            octave_value_float_complex_column_vector_value(self, frc_str_conv,
                                                           frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_row_vector_value(&self, frc_str_conv: bool,
                                             frc_vec_conv: bool)
         -> root::FloatRowVector {
            octave_value_float_row_vector_value(self, frc_str_conv,
                                                frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_complex_row_vector_value(&self,
                                                     frc_str_conv: bool,
                                                     frc_vec_conv: bool)
         -> root::FloatComplexRowVector {
            octave_value_float_complex_row_vector_value(self, frc_str_conv,
                                                        frc_vec_conv)
        }
        #[inline]
        pub unsafe fn int_vector_value(&self, req_int: bool,
                                       frc_str_conv: bool, frc_vec_conv: bool)
         -> [u64; 5usize] {
            octave_value_int_vector_value(self, req_int, frc_str_conv,
                                          frc_vec_conv)
        }
        #[inline]
        pub unsafe fn octave_idx_type_vector_value(&self, req_int: bool,
                                                   frc_str_conv: bool,
                                                   frc_vec_conv: bool)
         -> [u64; 5usize] {
            octave_value_octave_idx_type_vector_value(self, req_int,
                                                      frc_str_conv,
                                                      frc_vec_conv)
        }
        #[inline]
        pub unsafe fn vector_value(&self, frc_str_conv: bool,
                                   frc_vec_conv: bool) -> [u64; 5usize] {
            octave_value_vector_value(self, frc_str_conv, frc_vec_conv)
        }
        #[inline]
        pub unsafe fn complex_vector_value(&self, frc_str_conv: bool,
                                           frc_vec_conv: bool)
         -> [u64; 5usize] {
            octave_value_complex_vector_value(self, frc_str_conv,
                                              frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_vector_value(&self, frc_str_conv: bool,
                                         frc_vec_conv: bool)
         -> [u64; 5usize] {
            octave_value_float_vector_value(self, frc_str_conv, frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_complex_vector_value(&self, frc_str_conv: bool,
                                                 frc_vec_conv: bool)
         -> [u64; 5usize] {
            octave_value_float_complex_vector_value(self, frc_str_conv,
                                                    frc_vec_conv)
        }
        #[inline]
        pub unsafe fn storable_value(&self) -> root::octave_value {
            octave_value_storable_value(self)
        }
        #[inline]
        pub unsafe fn make_storable_value(&mut self) {
            octave_value_make_storable_value(self)
        }
        #[inline]
        pub unsafe fn do_non_const_unary_op(&mut self,
                                            op: root::octave_value_unary_op)
         -> *mut root::octave_value {
            octave_value_do_non_const_unary_op(self, op)
        }
        #[inline]
        pub unsafe fn do_non_const_unary_op1(&mut self,
                                             op: root::octave_value_unary_op,
                                             type_: *const root::std::string,
                                             idx: *const [u64; 2usize])
         -> *mut root::octave_value {
            octave_value_do_non_const_unary_op1(self, op, type_, idx)
        }
        #[inline]
        pub unsafe fn print_info(&self, os: *mut root::std::ostream,
                                 prefix: *const root::std::string) {
            octave_value_print_info(self, os, prefix)
        }
        #[inline]
        pub unsafe fn write(&self, os: *mut root::octave_stream,
                            block_size: ::std::os::raw::c_int,
                            output_type: root::oct_data_conv_data_type,
                            skip: ::std::os::raw::c_int,
                            flt_fmt: root::octave::mach_info_float_format)
         -> ::std::os::raw::c_int {
            octave_value_write(self, os, block_size, output_type, skip,
                               flt_fmt)
        }
        #[inline]
        pub unsafe fn new(i: ::std::os::raw::c_short) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(i: ::std::os::raw::c_ushort) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value1(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(i: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value2(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(i: ::std::os::raw::c_uint) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value3(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(i: ::std::os::raw::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value4(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new5(i: ::std::os::raw::c_ulong) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value5(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new6(i: ::std::os::raw::c_longlong) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value6(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new7(i: ::std::os::raw::c_ulonglong) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value7(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new8(t: root::octave::sys::time) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value8(&mut __bindgen_tmp, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new9(d: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value9(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new10(d: f32) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value10(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new11(a: *const [u64; 5usize], is_cs_list: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value11(&mut __bindgen_tmp, a, is_cs_list);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new12(c: *const root::Cell, is_cs_list: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value12(&mut __bindgen_tmp, c, is_cs_list);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new13(m: *const root::Matrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value13(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new14(m: *const root::FloatMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value14(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new15(nda: *const root::NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value15(&mut __bindgen_tmp, nda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new16(nda: *const root::FloatNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value16(&mut __bindgen_tmp, nda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new17(m: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value17(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new18(m: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value18(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new19(d: *const root::DiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value19(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new20(d: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value20(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new21(d: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value21(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new22(d: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value22(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new23(d: *const [u64; 6usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value23(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new24(d: *const root::FloatDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value24(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new25(v: *const root::RowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value25(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new26(v: *const root::FloatRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value26(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new27(v: *const root::ColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value27(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new28(v: *const root::FloatColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value28(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new29(C: *const root::Complex) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value29(&mut __bindgen_tmp, C);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new30(C: *const root::FloatComplex) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value30(&mut __bindgen_tmp, C);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new31(m: *const root::ComplexMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value31(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new32(m: *const root::FloatComplexMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value32(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new33(cnda: *const root::ComplexNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value33(&mut __bindgen_tmp, cnda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new34(cnda: *const root::FloatComplexNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value34(&mut __bindgen_tmp, cnda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new35(m: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value35(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new36(m: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value36(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new37(d: *const root::ComplexDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value37(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new38(d: *const root::FloatComplexDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value38(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new39(v: *const root::ComplexRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value39(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new40(v: *const root::FloatComplexRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value40(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new41(v: *const root::ComplexColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value41(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new42(v: *const root::FloatComplexColumnVector)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value42(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new43(p: *const root::PermMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value43(&mut __bindgen_tmp, p);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new44(b: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value44(&mut __bindgen_tmp, b);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new45(bm: *const root::boolMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value45(&mut __bindgen_tmp, bm, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new46(bnda: *const root::boolNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value46(&mut __bindgen_tmp, bnda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new47(bnda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value47(&mut __bindgen_tmp, bnda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new48(c: ::std::os::raw::c_char,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value48(&mut __bindgen_tmp, c, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new49(s: *const ::std::os::raw::c_char,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value49(&mut __bindgen_tmp, s, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new50(s: *const root::std::string,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value50(&mut __bindgen_tmp, s, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new51(s: *const root::string_vector,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value51(&mut __bindgen_tmp, s, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new52(chm: *const root::charMatrix,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value52(&mut __bindgen_tmp, chm, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new53(chnda: *const root::charNDArray,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value53(&mut __bindgen_tmp, chnda, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new54(chnda: *const [u64; 5usize],
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value54(&mut __bindgen_tmp, chnda, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new55(chm: *const root::charMatrix, is_string: bool,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value55(&mut __bindgen_tmp, chm, is_string,
                                        type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new56(chnda: *const root::charNDArray, is_string: bool,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value56(&mut __bindgen_tmp, chnda, is_string,
                                        type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new57(chnda: *const [u64; 5usize], is_string: bool,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value57(&mut __bindgen_tmp, chnda, is_string,
                                        type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new58(m: *const root::SparseMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value58(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new59(m: *const [u64; 3usize],
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value59(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new60(m: *const root::SparseComplexMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value60(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new61(m: *const [u64; 3usize],
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value61(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new62(bm: *const root::SparseBoolMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value62(&mut __bindgen_tmp, bm, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new63(m: *const [u64; 3usize],
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value63(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new64(i: *const root::octave_int8) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value64(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new65(i: *const root::octave_int16) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value65(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new66(i: *const root::octave_int32) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value66(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new67(i: *const root::octave_int64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value67(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new68(i: *const root::octave_uint8) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value68(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new69(i: *const root::octave_uint16) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value69(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new70(i: *const root::octave_uint32) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value70(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new71(i: *const root::octave_uint64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value71(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new72(inda: *const root::int8NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value72(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new73(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value73(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new74(inda: *const root::int16NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value74(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new75(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value75(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new76(inda: *const root::int32NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value76(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new77(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value77(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new78(inda: *const root::int64NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value78(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new79(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value79(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new80(inda: *const root::uint8NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value80(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new81(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value81(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new82(inda: *const root::uint16NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value82(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new83(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value83(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new84(inda: *const root::uint32NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value84(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new85(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value85(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new86(inda: *const root::uint64NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value86(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new87(inda: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value87(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new88(inda: *const [u64; 5usize], zero_based: bool,
                            cache_index: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value88(&mut __bindgen_tmp, inda, zero_based,
                                        cache_index);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new89(cellstr: *const [u64; 5usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value89(&mut __bindgen_tmp, cellstr);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new90(idx: *const root::idx_vector, lazy: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value90(&mut __bindgen_tmp, idx, lazy);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new91(base: f64, limit: f64, inc: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value91(&mut __bindgen_tmp, base, limit, inc);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new92(r: *const root::Range, force_range: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value92(&mut __bindgen_tmp, r, force_range);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new93(m: *const root::octave_map) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value93(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new94(m: *const root::octave_scalar_map) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value94(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new95(m: *const root::octave_map,
                            id: *const root::std::string,
                            plist: *const [u64; 2usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value95(&mut __bindgen_tmp, m, id, plist);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new96(m: *const root::octave_scalar_map,
                            id: *const root::std::string,
                            plist: *const [u64; 2usize]) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value96(&mut __bindgen_tmp, m, id, plist);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new97(m: *const root::octave_value_list, arg1: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value97(&mut __bindgen_tmp, m, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new98(arg1: root::octave_value_magic_colon) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value98(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new99(new_rep: *mut root::octave_base_value,
                            borrow: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value99(&mut __bindgen_tmp, new_rep, borrow);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new100(new_rep: *mut root::octave_base_value,
                             xcount: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value100(&mut __bindgen_tmp, new_rep, xcount);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_user_script {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_user_code {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tree_walker {
        _unused: [u8; 0],
    }
    pub const builtin_type_t_btyp_num_types: root::builtin_type_t =
        builtin_type_t::btyp_unknown;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum builtin_type_t {
        btyp_double = 0,
        btyp_float = 1,
        btyp_complex = 2,
        btyp_float_complex = 3,
        btyp_int8 = 4,
        btyp_int16 = 5,
        btyp_int32 = 6,
        btyp_int64 = 7,
        btyp_uint8 = 8,
        btyp_uint16 = 9,
        btyp_uint32 = 10,
        btyp_uint64 = 11,
        btyp_bool = 12,
        btyp_char = 13,
        btyp_struct = 14,
        btyp_cell = 15,
        btyp_func_handle = 16,
        btyp_unknown = 17,
    }
    extern "C" {
        #[link_name = "btyp_class_name"]
        pub static mut btyp_class_name: [root::std::string; 17usize];
    }
    extern "C" {
        #[link_name = "_Z19get_builtin_classesv"]
        pub fn get_builtin_classes() -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_Z18btyp_mixed_numeric14builtin_type_tS_"]
        pub fn btyp_mixed_numeric(x: root::builtin_type_t,
                                  y: root::builtin_type_t)
         -> root::builtin_type_t;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct class_to_btyp {
        pub _address: u8,
    }
    #[repr(C)]
    pub struct octave_base_value__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_base_value {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    pub type octave_base_value_type_conv_fcn = u64;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_base_value_type_conv_info {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    impl Clone for octave_base_value_type_conv_info {
        fn clone(&self) -> Self { *self }
    }
    pub const octave_base_value_unary_mapper_t_num_unary_mappers:
              root::octave_base_value_unary_mapper_t =
        octave_base_value_unary_mapper_t::umap_unknown;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_base_value_unary_mapper_t {
        umap_abs = 0,
        umap_acos = 1,
        umap_acosh = 2,
        umap_angle = 3,
        umap_arg = 4,
        umap_asin = 5,
        umap_asinh = 6,
        umap_atan = 7,
        umap_atanh = 8,
        umap_cbrt = 9,
        umap_ceil = 10,
        umap_conj = 11,
        umap_cos = 12,
        umap_cosh = 13,
        umap_erf = 14,
        umap_erfinv = 15,
        umap_erfcinv = 16,
        umap_erfc = 17,
        umap_erfcx = 18,
        umap_erfi = 19,
        umap_dawson = 20,
        umap_exp = 21,
        umap_expm1 = 22,
        umap_isfinite = 23,
        umap_fix = 24,
        umap_floor = 25,
        umap_gamma = 26,
        umap_imag = 27,
        umap_isinf = 28,
        umap_isna = 29,
        umap_isnan = 30,
        umap_lgamma = 31,
        umap_log = 32,
        umap_log2 = 33,
        umap_log10 = 34,
        umap_log1p = 35,
        umap_real = 36,
        umap_round = 37,
        umap_roundb = 38,
        umap_signum = 39,
        umap_sin = 40,
        umap_sinh = 41,
        umap_sqrt = 42,
        umap_tan = 43,
        umap_tanh = 44,
        umap_xisalnum = 45,
        umap_xisalpha = 46,
        umap_xisascii = 47,
        umap_xiscntrl = 48,
        umap_xisdigit = 49,
        umap_xisgraph = 50,
        umap_xislower = 51,
        umap_xisprint = 52,
        umap_xispunct = 53,
        umap_xisspace = 54,
        umap_xisupper = 55,
        umap_xisxdigit = 56,
        umap_xsignbit = 57,
        umap_xtoascii = 58,
        umap_xtolower = 59,
        umap_xtoupper = 60,
        umap_unknown = 61,
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value23curr_print_indent_levelE"]
        pub static mut octave_base_value_curr_print_indent_level:
                   ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value17beginning_of_lineE"]
        pub static mut octave_base_value_beginning_of_line: bool;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value4t_idE"]
        pub static mut octave_base_value_t_id: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value6t_nameE"]
        pub static octave_base_value_t_name: root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value6c_nameE"]
        pub static octave_base_value_c_name: root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value14numeric_assignERKSsRKSt4listI17octave_value_listSaIS3_EERK12octave_value"]
        pub fn octave_base_value_numeric_assign(this:
                                                    *mut root::octave_base_value,
                                                type_:
                                                    *const root::std::string,
                                                idx: *const [u64; 2usize],
                                                rhs:
                                                    *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value6indentERSo"]
        pub fn octave_base_value_indent(this: *const root::octave_base_value,
                                        os: *mut root::std::ostream);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value7newlineERSo"]
        pub fn octave_base_value_newline(this: *const root::octave_base_value,
                                         os: *mut root::std::ostream);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value5resetEv"]
        pub fn octave_base_value_reset(this: *const root::octave_base_value);
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value13get_umap_nameENS_14unary_mapper_tE"]
        pub fn octave_base_value_get_umap_name(arg1:
                                                   root::octave_base_value_unary_mapper_t)
         -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9warn_loadEPKc"]
        pub fn octave_base_value_warn_load(this:
                                               *const root::octave_base_value,
                                           type_:
                                               *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9warn_saveEPKc"]
        pub fn octave_base_value_warn_save(this:
                                               *const root::octave_base_value,
                                           type_:
                                               *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value13register_typeEv"]
        pub fn octave_base_value_register_type();
    }
    impl Clone for octave_base_value {
        fn clone(&self) -> Self { *self }
    }
    impl octave_base_value {
        #[inline]
        pub unsafe fn numeric_assign(&mut self,
                                     type_: *const root::std::string,
                                     idx: *const [u64; 2usize],
                                     rhs: *const root::octave_value)
         -> root::octave_value {
            octave_base_value_numeric_assign(self, type_, idx, rhs)
        }
        #[inline]
        pub unsafe fn indent(&self, os: *mut root::std::ostream) {
            octave_base_value_indent(self, os)
        }
        #[inline]
        pub unsafe fn newline(&self, os: *mut root::std::ostream) {
            octave_base_value_newline(self, os)
        }
        #[inline]
        pub unsafe fn reset(&self) { octave_base_value_reset(self) }
        #[inline]
        pub unsafe fn get_umap_name(arg1:
                                        root::octave_base_value_unary_mapper_t)
         -> *const ::std::os::raw::c_char {
            octave_base_value_get_umap_name(arg1)
        }
        #[inline]
        pub unsafe fn warn_load(&self, type_: *const ::std::os::raw::c_char) {
            octave_base_value_warn_load(self, type_)
        }
        #[inline]
        pub unsafe fn warn_save(&self, type_: *const ::std::os::raw::c_char) {
            octave_base_value_warn_save(self, type_)
        }
        #[inline]
        pub unsafe fn register_type() { octave_base_value_register_type() }
    }
    extern "C" {
        #[link_name = "Vsparse_auto_mutate"]
        pub static mut Vsparse_auto_mutate: bool;
    }
    extern "C" {
        #[link_name =
              "_Z13make_idx_argsRKSsRKSt4listI17octave_value_listSaIS2_EES0_"]
        pub fn make_idx_args(type_: *const root::std::string,
                             idx: *const [u64; 2usize],
                             who: *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z19called_from_builtinv"]
        pub fn called_from_builtin() -> bool;
    }
    extern "C" {
        #[link_name = "_Z11do_colon_opRK12octave_valueS1_b"]
        pub fn do_colon_op(base: *const root::octave_value,
                           limit: *const root::octave_value,
                           is_for_cmd_expr: bool) -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z11do_colon_opRK12octave_valueS1_S1_b"]
        pub fn do_colon_op1(base: *const root::octave_value,
                            increment: *const root::octave_value,
                            limit: *const root::octave_value,
                            is_for_cmd_expr: bool) -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z11do_unary_opN12octave_value8unary_opERKS_"]
        pub fn do_unary_op(op: root::octave_value_unary_op,
                           a: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z12do_binary_opN12octave_value9binary_opERKS_S2_"]
        pub fn do_binary_op(op: root::octave_value_binary_op,
                            a: *const root::octave_value,
                            b: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_Z12do_binary_opN12octave_value18compound_binary_opERKS_S2_"]
        pub fn do_binary_op1(op: root::octave_value_compound_binary_op,
                             a: *const root::octave_value,
                             b: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z13install_typesv"]
        pub fn install_types();
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_fields {
        pub _bindgen_opaque_blob: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_fields_fields_rep {
        pub _bindgen_opaque_blob: [u64; 7usize],
    }
    impl Clone for octave_fields_fields_rep {
        fn clone(&self) -> Self { *self }
    }
    pub type octave_fields_const_iterator = u64;
    pub type octave_fields_iterator = u64;
    extern "C" {
        #[link_name = "_ZNK13octave_fields7isfieldERKSs"]
        pub fn octave_fields_isfield(this: *const root::octave_fields,
                                     name: *const root::std::string) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK13octave_fields8getfieldERKSs"]
        pub fn octave_fields_getfield(this: *const root::octave_fields,
                                      name: *const root::std::string)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZN13octave_fields8getfieldERKSs"]
        pub fn octave_fields_getfield1(this: *mut root::octave_fields,
                                       name: *const root::std::string)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZN13octave_fields7rmfieldERKSs"]
        pub fn octave_fields_rmfield(this: *mut root::octave_fields,
                                     name: *const root::std::string)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZN13octave_fields11orderfieldsER5ArrayIiE"]
        pub fn octave_fields_orderfields(this: *mut root::octave_fields,
                                         perm: *mut [u64; 5usize]);
    }
    extern "C" {
        #[link_name = "_ZNK13octave_fields17equal_up_to_orderERKS_Pi"]
        pub fn octave_fields_equal_up_to_order(this:
                                                   *const root::octave_fields,
                                               other:
                                                   *const root::octave_fields,
                                               perm:
                                                   *mut root::octave_idx_type)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK13octave_fields17equal_up_to_orderERKS_R5ArrayIiE"]
        pub fn octave_fields_equal_up_to_order1(this:
                                                    *const root::octave_fields,
                                                other:
                                                    *const root::octave_fields,
                                                perm: *mut [u64; 5usize])
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK13octave_fields10fieldnamesEv"]
        pub fn octave_fields_fieldnames(this: *const root::octave_fields)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZN13octave_fieldsC1ERK13string_vector"]
        pub fn octave_fields_octave_fields(this: *mut root::octave_fields,
                                           arg1: *const root::string_vector);
    }
    extern "C" {
        #[link_name = "_ZN13octave_fieldsC1EPKPKc"]
        pub fn octave_fields_octave_fields1(this: *mut root::octave_fields,
                                            arg1:
                                                *const *const ::std::os::raw::c_char);
    }
    impl Clone for octave_fields {
        fn clone(&self) -> Self { *self }
    }
    impl octave_fields {
        #[inline]
        pub unsafe fn isfield(&self, name: *const root::std::string) -> bool {
            octave_fields_isfield(self, name)
        }
        #[inline]
        pub unsafe fn getfield(&self, name: *const root::std::string)
         -> root::octave_idx_type {
            octave_fields_getfield(self, name)
        }
        #[inline]
        pub unsafe fn getfield1(&mut self, name: *const root::std::string)
         -> root::octave_idx_type {
            octave_fields_getfield1(self, name)
        }
        #[inline]
        pub unsafe fn rmfield(&mut self, name: *const root::std::string)
         -> root::octave_idx_type {
            octave_fields_rmfield(self, name)
        }
        #[inline]
        pub unsafe fn orderfields(&mut self, perm: *mut [u64; 5usize]) {
            octave_fields_orderfields(self, perm)
        }
        #[inline]
        pub unsafe fn equal_up_to_order(&self,
                                        other: *const root::octave_fields,
                                        perm: *mut root::octave_idx_type)
         -> bool {
            octave_fields_equal_up_to_order(self, other, perm)
        }
        #[inline]
        pub unsafe fn equal_up_to_order1(&self,
                                         other: *const root::octave_fields,
                                         perm: *mut [u64; 5usize]) -> bool {
            octave_fields_equal_up_to_order1(self, other, perm)
        }
        #[inline]
        pub unsafe fn fieldnames(&self) -> root::string_vector {
            octave_fields_fieldnames(self)
        }
        #[inline]
        pub unsafe fn new(arg1: *const root::string_vector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_fields_octave_fields(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const *const ::std::os::raw::c_char)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_fields_octave_fields1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct octave_value_typeinfo {
        pub _bindgen_opaque_blob: [u64; 71usize],
    }
    pub type octave_value_typeinfo_unary_class_op_fcn = u64;
    pub type octave_value_typeinfo_unary_op_fcn = u64;
    pub type octave_value_typeinfo_non_const_unary_op_fcn = u64;
    pub type octave_value_typeinfo_binary_class_op_fcn = u64;
    pub type octave_value_typeinfo_binary_op_fcn = u64;
    pub type octave_value_typeinfo_cat_op_fcn = u64;
    pub type octave_value_typeinfo_assign_op_fcn = u64;
    pub type octave_value_typeinfo_assignany_op_fcn = u64;
    extern "C" {
        #[link_name = "_ZN21octave_value_typeinfo11init_tab_szE"]
        pub static octave_value_typeinfo_init_tab_sz: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN21octave_value_typeinfo8instanceE"]
        pub static mut octave_value_typeinfo_instance:
                   *mut root::octave_value_typeinfo;
    }
    extern "C" {
        #[link_name = "_ZN21octave_value_typeinfo11instance_okEv"]
        pub fn octave_value_typeinfo_instance_ok() -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo13register_typeERKSsS1_RK12octave_value"]
        pub fn octave_value_typeinfo_register_type(arg1:
                                                       *const root::std::string,
                                                   arg2:
                                                       *const root::std::string,
                                                   arg3:
                                                       *const root::octave_value)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo23register_unary_class_opEN12octave_value8unary_opEPFS0_RKS0_E"]
        pub fn octave_value_typeinfo_register_unary_class_op(arg1:
                                                                 root::octave_value_unary_op,
                                                             arg2:
                                                                 root::octave_value_typeinfo_unary_class_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo17register_unary_opEN12octave_value8unary_opEiPFS0_RK17octave_base_valueE"]
        pub fn octave_value_typeinfo_register_unary_op(arg1:
                                                           root::octave_value_unary_op,
                                                       arg2:
                                                           ::std::os::raw::c_int,
                                                       arg3:
                                                           root::octave_value_typeinfo_unary_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo27register_non_const_unary_opEN12octave_value8unary_opEiPFvR17octave_base_valueE"]
        pub fn octave_value_typeinfo_register_non_const_unary_op(arg1:
                                                                     root::octave_value_unary_op,
                                                                 arg2:
                                                                     ::std::os::raw::c_int,
                                                                 arg3:
                                                                     root::octave_value_typeinfo_non_const_unary_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo24register_binary_class_opEN12octave_value9binary_opEPFS0_RKS0_S3_E"]
        pub fn octave_value_typeinfo_register_binary_class_op(arg1:
                                                                  root::octave_value_binary_op,
                                                              arg2:
                                                                  root::octave_value_typeinfo_binary_class_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo18register_binary_opEN12octave_value9binary_opEiiPFS0_RK17octave_base_valueS4_E"]
        pub fn octave_value_typeinfo_register_binary_op(arg1:
                                                            root::octave_value_binary_op,
                                                        arg2:
                                                            ::std::os::raw::c_int,
                                                        arg3:
                                                            ::std::os::raw::c_int,
                                                        arg4:
                                                            root::octave_value_typeinfo_binary_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo24register_binary_class_opEN12octave_value18compound_binary_opEPFS0_RKS0_S3_E"]
        pub fn octave_value_typeinfo_register_binary_class_op1(arg1:
                                                                   root::octave_value_compound_binary_op,
                                                               arg2:
                                                                   root::octave_value_typeinfo_binary_class_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo18register_binary_opEN12octave_value18compound_binary_opEiiPFS0_RK17octave_base_valueS4_E"]
        pub fn octave_value_typeinfo_register_binary_op1(arg1:
                                                             root::octave_value_compound_binary_op,
                                                         arg2:
                                                             ::std::os::raw::c_int,
                                                         arg3:
                                                             ::std::os::raw::c_int,
                                                         arg4:
                                                             root::octave_value_typeinfo_binary_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo15register_cat_opEiiPF12octave_valueR17octave_base_valueRKS1_RK5ArrayIiEE"]
        pub fn octave_value_typeinfo_register_cat_op(arg1:
                                                         ::std::os::raw::c_int,
                                                     arg2:
                                                         ::std::os::raw::c_int,
                                                     arg3:
                                                         root::octave_value_typeinfo_cat_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo18register_assign_opEN12octave_value9assign_opEiiPFS0_R17octave_base_valueRK17octave_value_listRKS2_E"]
        pub fn octave_value_typeinfo_register_assign_op(arg1:
                                                            root::octave_value_assign_op,
                                                        arg2:
                                                            ::std::os::raw::c_int,
                                                        arg3:
                                                            ::std::os::raw::c_int,
                                                        arg4:
                                                            root::octave_value_typeinfo_assign_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo21register_assignany_opEN12octave_value9assign_opEiPFS0_R17octave_base_valueRK17octave_value_listRKS0_E"]
        pub fn octave_value_typeinfo_register_assignany_op(arg1:
                                                               root::octave_value_assign_op,
                                                           arg2:
                                                               ::std::os::raw::c_int,
                                                           arg3:
                                                               root::octave_value_typeinfo_assignany_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo25register_pref_assign_convEiii"]
        pub fn octave_value_typeinfo_register_pref_assign_conv(arg1:
                                                                   ::std::os::raw::c_int,
                                                               arg2:
                                                                   ::std::os::raw::c_int,
                                                               arg3:
                                                                   ::std::os::raw::c_int)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo20register_widening_opEiiPFP17octave_base_valueRKS0_E"]
        pub fn octave_value_typeinfo_register_widening_op(arg1:
                                                              ::std::os::raw::c_int,
                                                          arg2:
                                                              ::std::os::raw::c_int,
                                                          arg3:
                                                              root::octave_base_value_type_conv_fcn)
         -> bool;
    }
    impl octave_value_typeinfo {
        #[inline]
        pub unsafe fn instance_ok() -> bool {
            octave_value_typeinfo_instance_ok()
        }
        #[inline]
        pub unsafe fn register_type(arg1: *const root::std::string,
                                    arg2: *const root::std::string,
                                    arg3: *const root::octave_value)
         -> ::std::os::raw::c_int {
            octave_value_typeinfo_register_type(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_unary_class_op(arg1:
                                                  root::octave_value_unary_op,
                                              arg2:
                                                  root::octave_value_typeinfo_unary_class_op_fcn)
         -> bool {
            octave_value_typeinfo_register_unary_class_op(arg1, arg2)
        }
        #[inline]
        pub unsafe fn register_unary_op(arg1: root::octave_value_unary_op,
                                        arg2: ::std::os::raw::c_int,
                                        arg3:
                                            root::octave_value_typeinfo_unary_op_fcn)
         -> bool {
            octave_value_typeinfo_register_unary_op(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_non_const_unary_op(arg1:
                                                      root::octave_value_unary_op,
                                                  arg2: ::std::os::raw::c_int,
                                                  arg3:
                                                      root::octave_value_typeinfo_non_const_unary_op_fcn)
         -> bool {
            octave_value_typeinfo_register_non_const_unary_op(arg1, arg2,
                                                              arg3)
        }
        #[inline]
        pub unsafe fn register_binary_class_op(arg1:
                                                   root::octave_value_binary_op,
                                               arg2:
                                                   root::octave_value_typeinfo_binary_class_op_fcn)
         -> bool {
            octave_value_typeinfo_register_binary_class_op(arg1, arg2)
        }
        #[inline]
        pub unsafe fn register_binary_op(arg1: root::octave_value_binary_op,
                                         arg2: ::std::os::raw::c_int,
                                         arg3: ::std::os::raw::c_int,
                                         arg4:
                                             root::octave_value_typeinfo_binary_op_fcn)
         -> bool {
            octave_value_typeinfo_register_binary_op(arg1, arg2, arg3, arg4)
        }
        #[inline]
        pub unsafe fn register_binary_class_op1(arg1:
                                                    root::octave_value_compound_binary_op,
                                                arg2:
                                                    root::octave_value_typeinfo_binary_class_op_fcn)
         -> bool {
            octave_value_typeinfo_register_binary_class_op1(arg1, arg2)
        }
        #[inline]
        pub unsafe fn register_binary_op1(arg1:
                                              root::octave_value_compound_binary_op,
                                          arg2: ::std::os::raw::c_int,
                                          arg3: ::std::os::raw::c_int,
                                          arg4:
                                              root::octave_value_typeinfo_binary_op_fcn)
         -> bool {
            octave_value_typeinfo_register_binary_op1(arg1, arg2, arg3, arg4)
        }
        #[inline]
        pub unsafe fn register_cat_op(arg1: ::std::os::raw::c_int,
                                      arg2: ::std::os::raw::c_int,
                                      arg3:
                                          root::octave_value_typeinfo_cat_op_fcn)
         -> bool {
            octave_value_typeinfo_register_cat_op(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_assign_op(arg1: root::octave_value_assign_op,
                                         arg2: ::std::os::raw::c_int,
                                         arg3: ::std::os::raw::c_int,
                                         arg4:
                                             root::octave_value_typeinfo_assign_op_fcn)
         -> bool {
            octave_value_typeinfo_register_assign_op(arg1, arg2, arg3, arg4)
        }
        #[inline]
        pub unsafe fn register_assignany_op(arg1:
                                                root::octave_value_assign_op,
                                            arg2: ::std::os::raw::c_int,
                                            arg3:
                                                root::octave_value_typeinfo_assignany_op_fcn)
         -> bool {
            octave_value_typeinfo_register_assignany_op(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_pref_assign_conv(arg1: ::std::os::raw::c_int,
                                                arg2: ::std::os::raw::c_int,
                                                arg3: ::std::os::raw::c_int)
         -> bool {
            octave_value_typeinfo_register_pref_assign_conv(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_widening_op(arg1: ::std::os::raw::c_int,
                                           arg2: ::std::os::raw::c_int,
                                           arg3:
                                               root::octave_base_value_type_conv_fcn)
         -> bool {
            octave_value_typeinfo_register_widening_op(arg1, arg2, arg3)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct glob_match {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum glob_match_opts { pathname = 1, noescape = 2, period = 4, }
    extern "C" {
        #[link_name = "_ZNK10glob_match5matchERKSs"]
        pub fn glob_match_match(this: *const root::glob_match,
                                str: *const root::std::string) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK10glob_match4globEv"]
        pub fn glob_match_glob(this: *const root::glob_match)
         -> root::string_vector;
    }
    impl Clone for glob_match {
        fn clone(&self) -> Self { *self }
    }
    impl glob_match {
        #[inline]
        pub unsafe fn match_(&self, str: *const root::std::string) -> bool {
            glob_match_match(self, str)
        }
        #[inline]
        pub unsafe fn glob(&self) -> root::string_vector {
            glob_match_glob(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tree_argument_list {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct workspace_element {
        pub _bindgen_opaque_blob: [u64; 6usize],
    }
    impl Clone for workspace_element {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct symbol_table {
        pub _bindgen_opaque_blob: [u64; 20usize],
    }
    pub type symbol_table_scope_id = u32;
    pub type symbol_table_context_id = u64;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct symbol_table_scope_id_cache {
        pub _bindgen_opaque_blob: [u64; 13usize],
    }
    pub type symbol_table_scope_id_cache_set_iterator = u64;
    pub type symbol_table_scope_id_cache_set_const_iterator = u64;
    extern "C" {
        #[link_name = "_ZN12symbol_table14scope_id_cache8instanceE"]
        pub static mut symbol_table_scope_id_cache_instance:
                   *mut root::symbol_table_scope_id_cache;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table14scope_id_cache15create_instanceEv"]
        pub fn symbol_table_scope_id_cache_create_instance();
    }
    impl Clone for symbol_table_scope_id_cache {
        fn clone(&self) -> Self { *self }
    }
    impl symbol_table_scope_id_cache {
        #[inline]
        pub unsafe fn create_instance() {
            symbol_table_scope_id_cache_create_instance()
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct symbol_table_fcn_info {
        pub _bindgen_opaque_blob: u64,
    }
    pub type symbol_table_fcn_info_dispatch_map_type = [u64; 6usize];
    pub type symbol_table_fcn_info_scope_val_const_iterator = u64;
    pub type symbol_table_fcn_info_scope_val_iterator = u64;
    pub type symbol_table_fcn_info_str_val_const_iterator = u64;
    pub type symbol_table_fcn_info_str_val_iterator = u64;
    pub type symbol_table_fcn_info_dispatch_map_const_iterator = u64;
    pub type symbol_table_fcn_info_dispatch_map_iterator = u64;
    #[repr(C)]
    pub struct symbol_table_fcn_info_fcn_info_rep {
        pub _bindgen_opaque_blob: [u64; 43usize],
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep21load_private_functionERKSs"]
        pub fn symbol_table_fcn_info_fcn_info_rep_load_private_function(this:
                                                                            *mut root::symbol_table_fcn_info_fcn_info_rep,
                                                                        dir_name:
                                                                            *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep22load_class_constructorEv"]
        pub fn symbol_table_fcn_info_fcn_info_rep_load_class_constructor(this:
                                                                             *mut root::symbol_table_fcn_info_fcn_info_rep)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep17load_class_methodERKSs"]
        pub fn symbol_table_fcn_info_fcn_info_rep_load_class_method(this:
                                                                        *mut root::symbol_table_fcn_info_fcn_info_rep,
                                                                    dispatch_type:
                                                                        *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep4findERK17octave_value_listb"]
        pub fn symbol_table_fcn_info_fcn_info_rep_find(this:
                                                           *mut root::symbol_table_fcn_info_fcn_info_rep,
                                                       args:
                                                           *const root::octave_value_list,
                                                       local_funcs: bool)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep12builtin_findEv"]
        pub fn symbol_table_fcn_info_fcn_info_rep_builtin_find(this:
                                                                   *mut root::symbol_table_fcn_info_fcn_info_rep)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep11find_methodERKSs"]
        pub fn symbol_table_fcn_info_fcn_info_rep_find_method(this:
                                                                  *mut root::symbol_table_fcn_info_fcn_info_rep,
                                                              dispatch_type:
                                                                  *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep13find_autoloadEv"]
        pub fn symbol_table_fcn_info_fcn_info_rep_find_autoload(this:
                                                                    *mut root::symbol_table_fcn_info_fcn_info_rep)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep12find_packageEv"]
        pub fn symbol_table_fcn_info_fcn_info_rep_find_package(this:
                                                                   *mut root::symbol_table_fcn_info_fcn_info_rep)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep18find_user_functionEv"]
        pub fn symbol_table_fcn_info_fcn_info_rep_find_user_function(this:
                                                                         *mut root::symbol_table_fcn_info_fcn_info_rep)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table8fcn_info12fcn_info_rep36mark_subfunction_in_scope_as_privateEiRKSs"]
        pub fn symbol_table_fcn_info_fcn_info_rep_mark_subfunction_in_scope_as_private(this:
                                                                                           *mut root::symbol_table_fcn_info_fcn_info_rep,
                                                                                       scope:
                                                                                           root::symbol_table_scope_id,
                                                                                       class_name:
                                                                                           *const root::std::string);
    }
    extern "C" {
        #[link_name =
              "_ZNK12symbol_table8fcn_info12fcn_info_rep14print_dispatchERSo"]
        pub fn symbol_table_fcn_info_fcn_info_rep_print_dispatch(this:
                                                                     *const root::symbol_table_fcn_info_fcn_info_rep,
                                                                 os:
                                                                     *mut root::std::ostream);
    }
    extern "C" {
        #[link_name =
              "_ZNK12symbol_table8fcn_info12fcn_info_rep17help_for_dispatchEv"]
        pub fn symbol_table_fcn_info_fcn_info_rep_help_for_dispatch(this:
                                                                        *const root::symbol_table_fcn_info_fcn_info_rep)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZNK12symbol_table8fcn_info12fcn_info_rep4dumpERSoRKSs"]
        pub fn symbol_table_fcn_info_fcn_info_rep_dump(this:
                                                           *const root::symbol_table_fcn_info_fcn_info_rep,
                                                       os:
                                                           *mut root::std::ostream,
                                                       prefix:
                                                           *const root::std::string);
    }
    impl symbol_table_fcn_info_fcn_info_rep {
        #[inline]
        pub unsafe fn load_private_function(&mut self,
                                            dir_name:
                                                *const root::std::string)
         -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_load_private_function(self,
                                                                     dir_name)
        }
        #[inline]
        pub unsafe fn load_class_constructor(&mut self)
         -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_load_class_constructor(self)
        }
        #[inline]
        pub unsafe fn load_class_method(&mut self,
                                        dispatch_type:
                                            *const root::std::string)
         -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_load_class_method(self,
                                                                 dispatch_type)
        }
        #[inline]
        pub unsafe fn find(&mut self, args: *const root::octave_value_list,
                           local_funcs: bool) -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_find(self, args, local_funcs)
        }
        #[inline]
        pub unsafe fn builtin_find(&mut self) -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_builtin_find(self)
        }
        #[inline]
        pub unsafe fn find_method(&mut self,
                                  dispatch_type: *const root::std::string)
         -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_find_method(self,
                                                           dispatch_type)
        }
        #[inline]
        pub unsafe fn find_autoload(&mut self) -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_find_autoload(self)
        }
        #[inline]
        pub unsafe fn find_package(&mut self) -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_find_package(self)
        }
        #[inline]
        pub unsafe fn find_user_function(&mut self) -> root::octave_value {
            symbol_table_fcn_info_fcn_info_rep_find_user_function(self)
        }
        #[inline]
        pub unsafe fn mark_subfunction_in_scope_as_private(&mut self,
                                                           scope:
                                                               root::symbol_table_scope_id,
                                                           class_name:
                                                               *const root::std::string) {
            symbol_table_fcn_info_fcn_info_rep_mark_subfunction_in_scope_as_private(self,
                                                                                    scope,
                                                                                    class_name)
        }
        #[inline]
        pub unsafe fn print_dispatch(&self, os: *mut root::std::ostream) {
            symbol_table_fcn_info_fcn_info_rep_print_dispatch(self, os)
        }
        #[inline]
        pub unsafe fn help_for_dispatch(&self) -> root::std::string {
            symbol_table_fcn_info_fcn_info_rep_help_for_dispatch(self)
        }
        #[inline]
        pub unsafe fn dump(&self, os: *mut root::std::ostream,
                           prefix: *const root::std::string) {
            symbol_table_fcn_info_fcn_info_rep_dump(self, os, prefix)
        }
    }
    impl Clone for symbol_table_fcn_info {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct symbol_table_symbol_record {
        pub _bindgen_opaque_blob: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct symbol_table_symbol_record_symbol_record_rep {
        pub _bindgen_opaque_blob: [u64; 17usize],
    }
    extern "C" {
        #[link_name =
              "_ZNK12symbol_table13symbol_record17symbol_record_rep14active_contextEv"]
        pub fn symbol_table_symbol_record_symbol_record_rep_active_context(this:
                                                                               *const root::symbol_table_symbol_record_symbol_record_rep)
         -> root::symbol_table_context_id;
    }
    extern "C" {
        #[link_name =
              "_ZNK12symbol_table13symbol_record17symbol_record_rep4dumpERSoRKSs"]
        pub fn symbol_table_symbol_record_symbol_record_rep_dump(this:
                                                                     *const root::symbol_table_symbol_record_symbol_record_rep,
                                                                 os:
                                                                     *mut root::std::ostream,
                                                                 prefix:
                                                                     *const root::std::string);
    }
    impl Clone for symbol_table_symbol_record_symbol_record_rep {
        fn clone(&self) -> Self { *self }
    }
    impl symbol_table_symbol_record_symbol_record_rep {
        #[inline]
        pub unsafe fn active_context(&self) -> root::symbol_table_context_id {
            symbol_table_symbol_record_symbol_record_rep_active_context(self)
        }
        #[inline]
        pub unsafe fn dump(&self, os: *mut root::std::ostream,
                           prefix: *const root::std::string) {
            symbol_table_symbol_record_symbol_record_rep_dump(self, os,
                                                              prefix)
        }
    }
    pub const symbol_table_symbol_record_local: ::std::os::raw::c_uint = 1;
    pub const symbol_table_symbol_record_automatic: ::std::os::raw::c_uint =
        2;
    pub const symbol_table_symbol_record_formal: ::std::os::raw::c_uint = 4;
    pub const symbol_table_symbol_record_hidden: ::std::os::raw::c_uint = 8;
    pub const symbol_table_symbol_record_inherited: ::std::os::raw::c_uint =
        16;
    pub const symbol_table_symbol_record_global: ::std::os::raw::c_uint = 32;
    pub const symbol_table_symbol_record_persistent: ::std::os::raw::c_uint =
        64;
    pub const symbol_table_symbol_record_added_static: ::std::os::raw::c_uint
              =
        128;
    extern "C" {
        #[link_name =
              "_ZNK12symbol_table13symbol_record4findERK17octave_value_list"]
        pub fn symbol_table_symbol_record_find(this:
                                                   *const root::symbol_table_symbol_record,
                                               args:
                                                   *const root::octave_value_list)
         -> root::octave_value;
    }
    impl Clone for symbol_table_symbol_record {
        fn clone(&self) -> Self { *self }
    }
    impl symbol_table_symbol_record {
        #[inline]
        pub unsafe fn find(&self, args: *const root::octave_value_list)
         -> root::octave_value {
            symbol_table_symbol_record_find(self, args)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct symbol_table_symbol_reference {
        pub _bindgen_opaque_blob: [u64; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct symbol_table_symbol_reference_comparator {
        pub _bindgen_opaque_blob: u8,
        pub _address: u8,
    }
    impl Clone for symbol_table_symbol_reference_comparator {
        fn clone(&self) -> Self { *self }
    }
    impl Clone for symbol_table_symbol_reference {
        fn clone(&self) -> Self { *self }
    }
    pub type symbol_table_table_const_iterator = u64;
    pub type symbol_table_table_iterator = u64;
    pub type symbol_table_global_table_const_iterator = u64;
    pub type symbol_table_global_table_iterator = u64;
    pub type symbol_table_persistent_table_const_iterator = u64;
    pub type symbol_table_persistent_table_iterator = u64;
    pub type symbol_table_all_instances_const_iterator = u64;
    pub type symbol_table_all_instances_iterator = u64;
    pub type symbol_table_fcn_table_const_iterator = u64;
    pub type symbol_table_fcn_table_iterator = u64;
    pub type symbol_table_class_precedence_table_const_iterator = u8;
    pub type symbol_table_class_precedence_table_iterator = u8;
    pub type symbol_table_const_parent_map_iterator = u64;
    pub type symbol_table_parent_map_iterator = u64;
    extern "C" {
        #[link_name = "_ZN12symbol_table18dummy_octave_valueE"]
        pub static mut symbol_table_dummy_octave_value: root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table19dummy_symbol_recordE"]
        pub static mut symbol_table_dummy_symbol_record:
                   root::symbol_table_symbol_record;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table12global_tableE"]
        pub static mut symbol_table_global_table: [u64; 6usize];
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table8instanceE"]
        pub static mut symbol_table_instance: *mut root::symbol_table;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table13all_instancesE"]
        pub static mut symbol_table_all_instances: [u64; 6usize];
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table9fcn_tableE"]
        pub static mut symbol_table_fcn_table: [u64; 6usize];
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table22class_precedence_tableE"]
        pub static mut symbol_table_class_precedence_table: [u64; 6usize];
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table10parent_mapE"]
        pub static mut symbol_table_parent_map: [u64; 6usize];
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table13xglobal_scopeE"]
        pub static symbol_table_xglobal_scope: root::symbol_table_scope_id;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table10xtop_scopeE"]
        pub static symbol_table_xtop_scope: root::symbol_table_scope_id;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table14xcurrent_scopeE"]
        pub static mut symbol_table_xcurrent_scope:
                   root::symbol_table_scope_id;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table16xcurrent_contextE"]
        pub static mut symbol_table_xcurrent_context:
                   root::symbol_table_context_id;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table16xdefault_contextE"]
        pub static symbol_table_xdefault_context:
                   root::symbol_table_context_id;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table4findERKSsRK17octave_value_listbb"]
        pub fn symbol_table_find(name: *const root::std::string,
                                 args: *const root::octave_value_list,
                                 skip_variables: bool, local_funcs: bool)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table12builtin_findERKSs"]
        pub fn symbol_table_builtin_find(name: *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table14find_submethodERKSsS1_"]
        pub fn symbol_table_find_submethod(name: *const root::std::string,
                                           dispatch_type:
                                               *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table13find_functionERKSsRK17octave_value_listb"]
        pub fn symbol_table_find_function(name: *const root::std::string,
                                          args:
                                              *const root::octave_value_list,
                                          local_funcs: bool)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table20install_nestfunctionERKSsRK12octave_valuei"]
        pub fn symbol_table_install_nestfunction(name:
                                                     *const root::std::string,
                                                 fcn:
                                                     *const root::octave_value,
                                                 parent_scope:
                                                     root::symbol_table_scope_id);
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table22set_class_relationshipERKSsS1_"]
        pub fn symbol_table_set_class_relationship(sup_class:
                                                       *const root::std::string,
                                                   inf_class:
                                                       *const root::std::string)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table13is_superiortoERKSsS1_"]
        pub fn symbol_table_is_superiorto(a: *const root::std::string,
                                          b: *const root::std::string)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table4dumpERSoi"]
        pub fn symbol_table_dump(os: *mut root::std::ostream,
                                 scope: root::symbol_table_scope_id);
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table11dump_globalERSo"]
        pub fn symbol_table_dump_global(os: *mut root::std::ostream);
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table14dump_functionsERSo"]
        pub fn symbol_table_dump_functions(os: *mut root::std::ostream);
    }
    extern "C" {
        #[link_name =
              "_ZN12symbol_table31stash_dir_name_for_subfunctionsEiRKSs"]
        pub fn symbol_table_stash_dir_name_for_subfunctions(scope:
                                                                root::symbol_table_scope_id,
                                                            dir_name:
                                                                *const root::std::string);
    }
    extern "C" {
        #[link_name = "_ZN12symbol_table7cleanupEv"]
        pub fn symbol_table_cleanup();
    }
    impl Clone for symbol_table {
        fn clone(&self) -> Self { *self }
    }
    impl symbol_table {
        #[inline]
        pub unsafe fn find(name: *const root::std::string,
                           args: *const root::octave_value_list,
                           skip_variables: bool, local_funcs: bool)
         -> root::octave_value {
            symbol_table_find(name, args, skip_variables, local_funcs)
        }
        #[inline]
        pub unsafe fn builtin_find(name: *const root::std::string)
         -> root::octave_value {
            symbol_table_builtin_find(name)
        }
        #[inline]
        pub unsafe fn find_submethod(name: *const root::std::string,
                                     dispatch_type: *const root::std::string)
         -> root::octave_value {
            symbol_table_find_submethod(name, dispatch_type)
        }
        #[inline]
        pub unsafe fn find_function(name: *const root::std::string,
                                    args: *const root::octave_value_list,
                                    local_funcs: bool) -> root::octave_value {
            symbol_table_find_function(name, args, local_funcs)
        }
        #[inline]
        pub unsafe fn install_nestfunction(name: *const root::std::string,
                                           fcn: *const root::octave_value,
                                           parent_scope:
                                               root::symbol_table_scope_id) {
            symbol_table_install_nestfunction(name, fcn, parent_scope)
        }
        #[inline]
        pub unsafe fn set_class_relationship(sup_class:
                                                 *const root::std::string,
                                             inf_class:
                                                 *const root::std::string)
         -> bool {
            symbol_table_set_class_relationship(sup_class, inf_class)
        }
        #[inline]
        pub unsafe fn is_superiorto(a: *const root::std::string,
                                    b: *const root::std::string) -> bool {
            symbol_table_is_superiorto(a, b)
        }
        #[inline]
        pub unsafe fn dump(os: *mut root::std::ostream,
                           scope: root::symbol_table_scope_id) {
            symbol_table_dump(os, scope)
        }
        #[inline]
        pub unsafe fn dump_global(os: *mut root::std::ostream) {
            symbol_table_dump_global(os)
        }
        #[inline]
        pub unsafe fn dump_functions(os: *mut root::std::ostream) {
            symbol_table_dump_functions(os)
        }
        #[inline]
        pub unsafe fn stash_dir_name_for_subfunctions(scope:
                                                          root::symbol_table_scope_id,
                                                      dir_name:
                                                          *const root::std::string) {
            symbol_table_stash_dir_name_for_subfunctions(scope, dir_name)
        }
        #[inline]
        pub unsafe fn cleanup() { symbol_table_cleanup() }
    }
    extern "C" {
        #[link_name = "_Z17out_of_date_checkR12octave_valueRKSsb"]
        pub fn out_of_date_check(function: *mut root::octave_value,
                                 dispatch_type: *const root::std::string,
                                 check_relative: bool) -> bool;
    }
    extern "C" {
        #[link_name = "_Z17get_dispatch_typeRK17octave_value_list"]
        pub fn get_dispatch_type(args: *const root::octave_value_list)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_Z17get_dispatch_typeRK17octave_value_listR14builtin_type_t"]
        pub fn get_dispatch_type1(args: *const root::octave_value_list,
                                  builtin_type: *mut root::builtin_type_t)
         -> root::std::string;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct jit_type {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_builtin {
        pub _bindgen_opaque_blob: [u64; 10usize],
    }
    pub type octave_builtin_fcn = u64;
    extern "C" {
        #[link_name = "_ZN14octave_builtin16curr_lvalue_listE"]
        pub static mut octave_builtin_curr_lvalue_list: *const u8;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin4t_idE"]
        pub static mut octave_builtin_t_id: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin6t_nameE"]
        pub static octave_builtin_t_name: root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin6c_nameE"]
        pub static octave_builtin_c_name: root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK14octave_builtin6to_jitEv"]
        pub fn octave_builtin_to_jit(this: *const root::octave_builtin)
         -> *mut root::jit_type;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin9stash_jitER8jit_type"]
        pub fn octave_builtin_stash_jit(this: *mut root::octave_builtin,
                                        type_: *mut root::jit_type);
    }
    extern "C" {
        #[link_name = "_ZNK14octave_builtin8functionEv"]
        pub fn octave_builtin_function(this: *const root::octave_builtin)
         -> root::octave_builtin_fcn;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin13register_typeEv"]
        pub fn octave_builtin_register_type();
    }
    impl Clone for octave_builtin {
        fn clone(&self) -> Self { *self }
    }
    impl octave_builtin {
        #[inline]
        pub unsafe fn to_jit(&self) -> *mut root::jit_type {
            octave_builtin_to_jit(self)
        }
        #[inline]
        pub unsafe fn stash_jit(&mut self, type_: *mut root::jit_type) {
            octave_builtin_stash_jit(self, type_)
        }
        #[inline]
        pub unsafe fn function(&self) -> root::octave_builtin_fcn {
            octave_builtin_function(self)
        }
        #[inline]
        pub unsafe fn register_type() { octave_builtin_register_type() }
    }
    pub type octave_shlib = u64;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_dld_function {
        pub _bindgen_opaque_blob: [u64; 14usize],
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_function4t_idE"]
        pub static mut octave_dld_function_t_id: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_function6t_nameE"]
        pub static octave_dld_function_t_name: root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_function6c_nameE"]
        pub static octave_dld_function_c_name: root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN19octave_dld_function6createEPF17octave_value_listRKS0_iERKN6octave15dynamic_libraryERKSsSA_"]
        pub fn octave_dld_function_create(ff: root::octave_builtin_fcn,
                                          shl:
                                              *const root::octave::dynamic_library,
                                          nm: *const root::std::string,
                                          ds: *const root::std::string)
         -> *mut root::octave_dld_function;
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_function13register_typeEv"]
        pub fn octave_dld_function_register_type();
    }
    extern "C" {
        #[link_name =
              "_ZN19octave_dld_functionC1EPF17octave_value_listRKS0_iERKN6octave15dynamic_libraryERKSsSA_"]
        pub fn octave_dld_function_octave_dld_function(this:
                                                           *mut root::octave_dld_function,
                                                       ff:
                                                           root::octave_builtin_fcn,
                                                       shl:
                                                           *const root::octave::dynamic_library,
                                                       nm:
                                                           *const root::std::string,
                                                       ds:
                                                           *const root::std::string);
    }
    impl Clone for octave_dld_function {
        fn clone(&self) -> Self { *self }
    }
    impl octave_dld_function {
        #[inline]
        pub unsafe fn create(ff: root::octave_builtin_fcn,
                             shl: *const root::octave::dynamic_library,
                             nm: *const root::std::string,
                             ds: *const root::std::string)
         -> *mut root::octave_dld_function {
            octave_dld_function_create(ff, shl, nm, ds)
        }
        #[inline]
        pub unsafe fn register_type() { octave_dld_function_register_type() }
        #[inline]
        pub unsafe fn new(ff: root::octave_builtin_fcn,
                          shl: *const root::octave::dynamic_library,
                          nm: *const root::std::string,
                          ds: *const root::std::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_dld_function_octave_dld_function(&mut __bindgen_tmp, ff,
                                                    shl, nm, ds);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "_Z20octave_www_statementb"]
        pub fn octave_www_statement(html: bool) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z24octave_contrib_statementb"]
        pub fn octave_contrib_statement(html: bool) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z21octave_bugs_statementb"]
        pub fn octave_bugs_statement(html: bool) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z33octave_name_version_and_copyrightv"]
        pub fn octave_name_version_and_copyright() -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_Z50octave_name_version_copyright_copying_and_warrantybRKSs"]
        pub fn octave_name_version_copyright_copying_and_warranty(html: bool,
                                                                  extra_info:
                                                                      *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_Z55octave_name_version_copyright_copying_warranty_and_bugsbRKSs"]
        pub fn octave_name_version_copyright_copying_warranty_and_bugs(html:
                                                                           bool,
                                                                       extra_info:
                                                                           *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z22octave_startup_messageb"]
        pub fn octave_startup_message(html: bool) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z11print_usagev"]
        pub fn print_usage();
    }
    extern "C" {
        #[link_name = "_Z11print_usageRKSs"]
        pub fn print_usage1(arg1: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z13check_versionRKSsS0_"]
        pub fn check_version(version: *const root::std::string,
                             fcn: *const root::std::string);
    }
    extern "C" {
        #[link_name =
              "_Z24install_builtin_functionPF17octave_value_listRKS_iERKSsS5_S5_b"]
        pub fn install_builtin_function(f: root::octave_builtin_fcn,
                                        name: *const root::std::string,
                                        file: *const root::std::string,
                                        doc: *const root::std::string,
                                        can_hide_function: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20install_dld_functionPF17octave_value_listRKS_iERKSsRKN6octave15dynamic_libraryES5_b"]
        pub fn install_dld_function(f: root::octave_builtin_fcn,
                                    name: *const root::std::string,
                                    shl: *const root::octave::dynamic_library,
                                    doc: *const root::std::string,
                                    relative: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20install_mex_functionPvbRKSsRKN6octave15dynamic_libraryEb"]
        pub fn install_mex_function(fptr: *mut ::std::os::raw::c_void,
                                    fmex: bool,
                                    name: *const root::std::string,
                                    shl: *const root::octave::dynamic_library,
                                    relative: bool);
    }
    extern "C" {
        #[link_name = "_Z13alias_builtinRKSsS0_"]
        pub fn alias_builtin(alias: *const root::std::string,
                             name: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z17get_current_shlibv"]
        pub fn get_current_shlib() -> root::octave::dynamic_library;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_auto_shlib {
        pub _bindgen_opaque_blob: u64,
    }
    impl Clone for octave_auto_shlib {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        #[link_name = "_Z14defun_isargoutii"]
        pub fn defun_isargout(arg1: ::std::os::raw::c_int,
                              arg2: ::std::os::raw::c_int) -> bool;
    }
    extern "C" {
        #[link_name = "_Z14defun_isargoutiiPb"]
        pub fn defun_isargout1(arg1: ::std::os::raw::c_int,
                               arg2: ::std::os::raw::c_int, arg3: *mut bool);
    }
    pub type octave_dld_fcn_installer = u64;
    pub type octave_dld_fcn_getter = u64;
    extern "C" {
        #[link_name = "_Z19err_2_or_3_dim_plotv"]
        pub fn err_2_or_3_dim_plot();
    }
    extern "C" {
        #[link_name = "_Z19err_data_conversionPKcS0_"]
        pub fn err_data_conversion(from: *const ::std::os::raw::c_char,
                                   to: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z20err_disabled_featureRKSsS0_S0_"]
        pub fn err_disabled_feature(fcn: *const root::std::string,
                                    feature: *const root::std::string,
                                    pkg: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z19err_indexed_cs_listv"]
        pub fn err_indexed_cs_list();
    }
    extern "C" {
        #[link_name = "_Z22err_invalid_conversionRKSsS0_"]
        pub fn err_invalid_conversion(from: *const root::std::string,
                                      to: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z29err_invalid_inquiry_subscriptv"]
        pub fn err_invalid_inquiry_subscript();
    }
    extern "C" {
        #[link_name = "_Z32err_nonbraced_cs_list_assignmentv"]
        pub fn err_nonbraced_cs_list_assignment();
    }
    extern "C" {
        #[link_name = "_Z17err_nonconformantv"]
        pub fn err_nonconformant();
    }
    extern "C" {
        #[link_name = "_Z17err_nonconformantiiii"]
        pub fn err_nonconformant1(r1: root::octave_idx_type,
                                  c1: root::octave_idx_type,
                                  r2: root::octave_idx_type,
                                  c2: root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_Z19err_not_implementedPKc"]
        pub fn err_not_implemented(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z17err_range_invalidv"]
        pub fn err_range_invalid();
    }
    extern "C" {
        #[link_name = "_Z26err_square_matrix_requiredPKcS0_"]
        pub fn err_square_matrix_required(fcn: *const ::std::os::raw::c_char,
                                          name:
                                              *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z18err_string_invalidv"]
        pub fn err_string_invalid();
    }
    extern "C" {
        #[link_name = "_Z25err_unrecognized_data_fmtPKc"]
        pub fn err_unrecognized_data_fmt(name: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z26err_unrecognized_float_fmtv"]
        pub fn err_unrecognized_float_fmt();
    }
    extern "C" {
        #[link_name = "_Z25err_user_returned_invalidPKc"]
        pub fn err_user_returned_invalid(name: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z22err_user_supplied_evalPKc"]
        pub fn err_user_supplied_eval(name: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name =
              "_Z22err_user_supplied_evalRN6octave19execution_exceptionEPKc"]
        pub fn err_user_supplied_eval1(e:
                                           *mut root::octave::execution_exception,
                                       name: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z18err_wrong_type_argPKcS0_"]
        pub fn err_wrong_type_arg(name: *const ::std::os::raw::c_char,
                                  s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name =
              "_Z18err_wrong_type_argRN6octave19execution_exceptionEPKcS3_"]
        pub fn err_wrong_type_arg1(e: *mut root::octave::execution_exception,
                                   name: *const ::std::os::raw::c_char,
                                   s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z18err_wrong_type_argPKcRKSs"]
        pub fn err_wrong_type_arg2(name: *const ::std::os::raw::c_char,
                                   s: *const root::std::string);
    }
    extern "C" {
        #[link_name =
              "_Z18err_wrong_type_argRN6octave19execution_exceptionEPKcRKSs"]
        pub fn err_wrong_type_arg3(e: *mut root::octave::execution_exception,
                                   name: *const ::std::os::raw::c_char,
                                   s: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z18err_wrong_type_argPKcRK12octave_value"]
        pub fn err_wrong_type_arg4(name: *const ::std::os::raw::c_char,
                                   tc: *const root::octave_value);
    }
    extern "C" {
        #[link_name =
              "_Z18err_wrong_type_argRN6octave19execution_exceptionEPKcRK12octave_value"]
        pub fn err_wrong_type_arg5(e: *mut root::octave::execution_exception,
                                   name: *const ::std::os::raw::c_char,
                                   tc: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z18err_wrong_type_argRKSsRK12octave_value"]
        pub fn err_wrong_type_arg6(name: *const root::std::string,
                                   tc: *const root::octave_value);
    }
    extern "C" {
        #[link_name =
              "_Z18err_wrong_type_argRN6octave19execution_exceptionERKSsRK12octave_value"]
        pub fn err_wrong_type_arg7(e: *mut root::octave::execution_exception,
                                   name: *const root::std::string,
                                   tc: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z18err_wrong_type_argPKc"]
        pub fn err_wrong_type_arg8(s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name =
              "_Z18err_wrong_type_argRN6octave19execution_exceptionEPKc"]
        pub fn err_wrong_type_arg9(e: *mut root::octave::execution_exception,
                                   s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z18err_wrong_type_argRKSs"]
        pub fn err_wrong_type_arg10(s: *const root::std::string);
    }
    extern "C" {
        #[link_name =
              "_Z18err_wrong_type_argRN6octave19execution_exceptionERKSs"]
        pub fn err_wrong_type_arg11(e: *mut root::octave::execution_exception,
                                    s: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z18err_wrong_type_argRK12octave_value"]
        pub fn err_wrong_type_arg12(tc: *const root::octave_value);
    }
    extern "C" {
        #[link_name =
              "_Z18err_wrong_type_argRN6octave19execution_exceptionERK12octave_value"]
        pub fn err_wrong_type_arg13(e: *mut root::octave::execution_exception,
                                    tc: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z32err_wrong_type_arg_for_binary_opRK12octave_value"]
        pub fn err_wrong_type_arg_for_binary_op(op:
                                                    *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z31err_wrong_type_arg_for_unary_opRK12octave_value"]
        pub fn err_wrong_type_arg_for_unary_op(op: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z21warn_array_as_logicalRK10dim_vector"]
        pub fn warn_array_as_logical(dv: *const root::dim_vector);
    }
    extern "C" {
        #[link_name = "_Z16warn_complex_cmpv"]
        pub fn warn_complex_cmp();
    }
    extern "C" {
        #[link_name = "_Z22warn_data_file_in_pathRKSsS0_"]
        pub fn warn_data_file_in_path(fcn: *const root::std::string,
                                      file: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z21warn_disabled_featureRKSsS0_S0_"]
        pub fn warn_disabled_feature(fcn: *const root::std::string,
                                     feature: *const root::std::string,
                                     pkg: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z19warn_divide_by_zerov"]
        pub fn warn_divide_by_zero();
    }
    extern "C" {
        #[link_name = "_Z14warn_empty_argPKc"]
        pub fn warn_empty_arg(name: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z24warn_implicit_conversionPKcS0_S0_"]
        pub fn warn_implicit_conversion(id: *const ::std::os::raw::c_char,
                                        from: *const ::std::os::raw::c_char,
                                        to: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z24warn_implicit_conversionRKSsS0_S0_"]
        pub fn warn_implicit_conversion1(id: *const root::std::string,
                                         from: *const root::std::string,
                                         to: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z28warn_invalid_value_specifiedPKc"]
        pub fn warn_invalid_value_specified(name:
                                                *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z23warn_logical_conversionv"]
        pub fn warn_logical_conversion();
    }
    extern "C" {
        #[link_name = "_Z19warn_wrong_type_argPKcRK12octave_value"]
        pub fn warn_wrong_type_arg(name: *const ::std::os::raw::c_char,
                                   tc: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z31gripe_nan_to_logical_conversionv"]
        pub fn gripe_nan_to_logical_conversion();
    }
    extern "C" {
        #[link_name = "_Z33gripe_nan_to_character_conversionv"]
        pub fn gripe_nan_to_character_conversion();
    }
    extern "C" {
        #[link_name = "_Z19gripe_nonconformantPKcii"]
        pub fn gripe_nonconformant(op: *const ::std::os::raw::c_char,
                                   op1_len: root::octave_idx_type,
                                   op2_len: root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_Z19gripe_nonconformantPKciiii"]
        pub fn gripe_nonconformant1(op: *const ::std::os::raw::c_char,
                                    op1_nr: root::octave_idx_type,
                                    op1_nc: root::octave_idx_type,
                                    op2_nr: root::octave_idx_type,
                                    op2_nc: root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_Z19gripe_nonconformantPKcRK10dim_vectorS3_"]
        pub fn gripe_nonconformant2(op: *const ::std::os::raw::c_char,
                                    op1_dims: *const root::dim_vector,
                                    op2_dims: *const root::dim_vector);
    }
    extern "C" {
        #[link_name = "_Z24gripe_index_out_of_rangeiiiiRK10dim_vector"]
        pub fn gripe_index_out_of_range(nd: ::std::os::raw::c_int,
                                        dim: ::std::os::raw::c_int,
                                        iext: root::octave_idx_type,
                                        ext: root::octave_idx_type,
                                        d: *const root::dim_vector);
    }
    extern "C" {
        #[link_name = "_Z24gripe_index_out_of_rangeiiii"]
        pub fn gripe_index_out_of_range1(nd: ::std::os::raw::c_int,
                                         dim: ::std::os::raw::c_int,
                                         iext: root::octave_idx_type,
                                         ext: root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_Z28gripe_del_index_out_of_rangebii"]
        pub fn gripe_del_index_out_of_range(is1d: bool,
                                            iext: root::octave_idx_type,
                                            ext: root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_Z19gripe_invalid_indexdiiRKSs"]
        pub fn gripe_invalid_index(arg1: f64, nd: root::octave_idx_type,
                                   dim: root::octave_idx_type,
                                   var: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z19gripe_invalid_indexiiiRKSs"]
        pub fn gripe_invalid_index1(n: root::octave_idx_type,
                                    nd: root::octave_idx_type,
                                    dim: root::octave_idx_type,
                                    var: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z19gripe_invalid_indexRKSsiiS0_"]
        pub fn gripe_invalid_index2(idx: *const root::std::string,
                                    nd: root::octave_idx_type,
                                    dim: root::octave_idx_type,
                                    var: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z20gripe_invalid_resizev"]
        pub fn gripe_invalid_resize();
    }
    extern "C" {
        #[link_name = "_Z21gripe_singular_matrixd"]
        pub fn gripe_singular_matrix(rcond: f64);
    }
    extern "C" {
        #[link_name = "_Z21gripe_2_or_3_dim_plotv"]
        pub fn gripe_2_or_3_dim_plot();
    }
    extern "C" {
        #[link_name = "_Z21gripe_data_conversionPKcS0_"]
        pub fn gripe_data_conversion(from: *const ::std::os::raw::c_char,
                                     to: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z23gripe_data_file_in_pathRKSsS0_"]
        pub fn gripe_data_file_in_path(fcn: *const root::std::string,
                                       file: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z22gripe_disabled_featureRKSsS0_S0_"]
        pub fn gripe_disabled_feature(fcn: *const root::std::string,
                                      feature: *const root::std::string,
                                      pkg: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z20gripe_divide_by_zerov"]
        pub fn gripe_divide_by_zero();
    }
    extern "C" {
        #[link_name = "_Z15gripe_empty_argPKcb"]
        pub fn gripe_empty_arg(name: *const ::std::os::raw::c_char,
                               is_error: bool);
    }
    extern "C" {
        #[link_name = "_Z25gripe_implicit_conversionPKcS0_S0_"]
        pub fn gripe_implicit_conversion(id: *const ::std::os::raw::c_char,
                                         from: *const ::std::os::raw::c_char,
                                         to: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z25gripe_implicit_conversionRKSsS0_S0_"]
        pub fn gripe_implicit_conversion1(id: *const root::std::string,
                                          from: *const root::std::string,
                                          to: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z21gripe_indexed_cs_listv"]
        pub fn gripe_indexed_cs_list();
    }
    extern "C" {
        #[link_name = "_Z24gripe_invalid_conversionRKSsS0_"]
        pub fn gripe_invalid_conversion(from: *const root::std::string,
                                        to: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z31gripe_invalid_inquiry_subscriptv"]
        pub fn gripe_invalid_inquiry_subscript();
    }
    extern "C" {
        #[link_name = "_Z29gripe_invalid_value_specifiedPKc"]
        pub fn gripe_invalid_value_specified(name:
                                                 *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z24gripe_logical_conversionv"]
        pub fn gripe_logical_conversion();
    }
    extern "C" {
        #[link_name = "_Z34gripe_nonbraced_cs_list_assignmentv"]
        pub fn gripe_nonbraced_cs_list_assignment();
    }
    extern "C" {
        #[link_name = "_Z19gripe_nonconformantv"]
        pub fn gripe_nonconformant3();
    }
    extern "C" {
        #[link_name = "_Z19gripe_nonconformantiiii"]
        pub fn gripe_nonconformant4(r1: root::octave_idx_type,
                                    c1: root::octave_idx_type,
                                    r2: root::octave_idx_type,
                                    c2: root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_Z21gripe_not_implementedPKc"]
        pub fn gripe_not_implemented(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z19gripe_not_supportedPKc"]
        pub fn gripe_not_supported(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z19gripe_range_invalidv"]
        pub fn gripe_range_invalid();
    }
    extern "C" {
        #[link_name = "_Z28gripe_square_matrix_requiredPKc"]
        pub fn gripe_square_matrix_required(name:
                                                *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z20gripe_string_invalidv"]
        pub fn gripe_string_invalid();
    }
    extern "C" {
        #[link_name = "_Z27gripe_unrecognized_data_fmtPKc"]
        pub fn gripe_unrecognized_data_fmt(warn_for:
                                               *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z28gripe_unrecognized_float_fmtv"]
        pub fn gripe_unrecognized_float_fmt();
    }
    extern "C" {
        #[link_name = "_Z27gripe_user_returned_invalidPKc"]
        pub fn gripe_user_returned_invalid(name:
                                               *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z24gripe_user_supplied_evalPKc"]
        pub fn gripe_user_supplied_eval(name: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name =
              "_Z24gripe_user_supplied_evalRN6octave19execution_exceptionEPKc"]
        pub fn gripe_user_supplied_eval1(e:
                                             *mut root::octave::execution_exception,
                                         name: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z22gripe_warn_complex_cmpv"]
        pub fn gripe_warn_complex_cmp();
    }
    extern "C" {
        #[link_name = "_Z20gripe_wrong_type_argPKcS0_b"]
        pub fn gripe_wrong_type_arg(name: *const ::std::os::raw::c_char,
                                    s: *const ::std::os::raw::c_char,
                                    is_error: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20gripe_wrong_type_argRN6octave19execution_exceptionEPKcS3_b"]
        pub fn gripe_wrong_type_arg1(e:
                                         *mut root::octave::execution_exception,
                                     name: *const ::std::os::raw::c_char,
                                     s: *const ::std::os::raw::c_char,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name = "_Z20gripe_wrong_type_argPKcRKSsb"]
        pub fn gripe_wrong_type_arg2(name: *const ::std::os::raw::c_char,
                                     s: *const root::std::string,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20gripe_wrong_type_argRN6octave19execution_exceptionEPKcRKSsb"]
        pub fn gripe_wrong_type_arg3(e:
                                         *mut root::octave::execution_exception,
                                     name: *const ::std::os::raw::c_char,
                                     s: *const root::std::string,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name = "_Z20gripe_wrong_type_argPKcRK12octave_valueb"]
        pub fn gripe_wrong_type_arg4(name: *const ::std::os::raw::c_char,
                                     tc: *const root::octave_value,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20gripe_wrong_type_argRN6octave19execution_exceptionEPKcRK12octave_valueb"]
        pub fn gripe_wrong_type_arg5(e:
                                         *mut root::octave::execution_exception,
                                     name: *const ::std::os::raw::c_char,
                                     tc: *const root::octave_value,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name = "_Z20gripe_wrong_type_argRKSsRK12octave_valueb"]
        pub fn gripe_wrong_type_arg6(name: *const root::std::string,
                                     tc: *const root::octave_value,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20gripe_wrong_type_argRN6octave19execution_exceptionERKSsRK12octave_valueb"]
        pub fn gripe_wrong_type_arg7(e:
                                         *mut root::octave::execution_exception,
                                     name: *const root::std::string,
                                     tc: *const root::octave_value,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name = "_Z20gripe_wrong_type_argPKcb"]
        pub fn gripe_wrong_type_arg8(s: *const ::std::os::raw::c_char,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20gripe_wrong_type_argRN6octave19execution_exceptionEPKcb"]
        pub fn gripe_wrong_type_arg9(e:
                                         *mut root::octave::execution_exception,
                                     s: *const ::std::os::raw::c_char,
                                     is_error: bool);
    }
    extern "C" {
        #[link_name = "_Z20gripe_wrong_type_argRKSsb"]
        pub fn gripe_wrong_type_arg10(s: *const root::std::string,
                                      is_error: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20gripe_wrong_type_argRN6octave19execution_exceptionERKSsb"]
        pub fn gripe_wrong_type_arg11(e:
                                          *mut root::octave::execution_exception,
                                      s: *const root::std::string,
                                      is_error: bool);
    }
    extern "C" {
        #[link_name = "_Z20gripe_wrong_type_argRK12octave_valueb"]
        pub fn gripe_wrong_type_arg12(tc: *const root::octave_value,
                                      is_error: bool);
    }
    extern "C" {
        #[link_name =
              "_Z20gripe_wrong_type_argRN6octave19execution_exceptionERK12octave_valueb"]
        pub fn gripe_wrong_type_arg13(e:
                                          *mut root::octave::execution_exception,
                                      tc: *const root::octave_value,
                                      is_error: bool);
    }
    extern "C" {
        #[link_name =
              "_Z34gripe_wrong_type_arg_for_binary_opRK12octave_value"]
        pub fn gripe_wrong_type_arg_for_binary_op(op:
                                                      *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z33gripe_wrong_type_arg_for_unary_opRK12octave_value"]
        pub fn gripe_wrong_type_arg_for_unary_op(op:
                                                     *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z14make_name_listv"]
        pub fn make_name_list() -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_Z8raw_helpRKSsRb"]
        pub fn raw_help(arg1: *const root::std::string, arg2: *mut bool)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "Vdoc_cache_file"]
        pub static mut Vdoc_cache_file: root::std::string;
    }
    extern "C" {
        #[link_name = "Vtexi_macros_file"]
        pub static mut Vtexi_macros_file: root::std::string;
    }
    extern "C" {
        #[link_name = "Vinfo_file"]
        pub static mut Vinfo_file: root::std::string;
    }
    extern "C" {
        #[link_name = "Vinfo_program"]
        pub static mut Vinfo_program: root::std::string;
    }
    extern "C" {
        #[link_name = "_Z8do_whichRKSs"]
        pub fn do_which(name: *const root::std::string) -> root::std::string;
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_pager_buf {
        pub _bindgen_opaque_blob: [u64; 11usize],
    }
    extern "C" {
        #[link_name =
              "_ZN16octave_pager_buf31flush_current_contents_to_diaryEv"]
        pub fn octave_pager_buf_flush_current_contents_to_diary(this:
                                                                    *mut root::octave_pager_buf);
    }
    extern "C" {
        #[link_name = "_ZN16octave_pager_buf14set_diary_skipEv"]
        pub fn octave_pager_buf_set_diary_skip(this:
                                                   *mut root::octave_pager_buf);
    }
    impl Clone for octave_pager_buf {
        fn clone(&self) -> Self { *self }
    }
    impl octave_pager_buf {
        #[inline]
        pub unsafe fn flush_current_contents_to_diary(&mut self) {
            octave_pager_buf_flush_current_contents_to_diary(self)
        }
        #[inline]
        pub unsafe fn set_diary_skip(&mut self) {
            octave_pager_buf_set_diary_skip(self)
        }
    }
    #[repr(C)]
    pub struct octave_pager_stream {
        pub _bindgen_opaque_blob: [u64; 35usize],
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_stream8instanceE"]
        pub static mut octave_pager_stream_instance:
                   *mut root::octave_pager_stream;
    }
    extern "C" {
        #[link_name =
              "_ZN19octave_pager_stream31flush_current_contents_to_diaryEv"]
        pub fn octave_pager_stream_flush_current_contents_to_diary();
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_stream14set_diary_skipEv"]
        pub fn octave_pager_stream_set_diary_skip();
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_stream6streamEv"]
        pub fn octave_pager_stream_stream() -> *mut root::std::ostream;
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_stream5resetEv"]
        pub fn octave_pager_stream_reset();
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_streamC1Ev"]
        pub fn octave_pager_stream_octave_pager_stream(this:
                                                           *mut root::octave_pager_stream);
    }
    impl octave_pager_stream {
        #[inline]
        pub unsafe fn flush_current_contents_to_diary() {
            octave_pager_stream_flush_current_contents_to_diary()
        }
        #[inline]
        pub unsafe fn set_diary_skip() {
            octave_pager_stream_set_diary_skip()
        }
        #[inline]
        pub unsafe fn stream() -> *mut root::std::ostream {
            octave_pager_stream_stream()
        }
        #[inline]
        pub unsafe fn reset() { octave_pager_stream_reset() }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_pager_stream_octave_pager_stream(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_diary_buf {
        pub _bindgen_opaque_blob: [u64; 10usize],
    }
    impl Clone for octave_diary_buf {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    pub struct octave_diary_stream {
        pub _bindgen_opaque_blob: [u64; 35usize],
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_stream8instanceE"]
        pub static mut octave_diary_stream_instance:
                   *mut root::octave_diary_stream;
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_stream6streamEv"]
        pub fn octave_diary_stream_stream() -> *mut root::std::ostream;
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_stream5resetEv"]
        pub fn octave_diary_stream_reset();
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_streamC1Ev"]
        pub fn octave_diary_stream_octave_diary_stream(this:
                                                           *mut root::octave_diary_stream);
    }
    impl octave_diary_stream {
        #[inline]
        pub unsafe fn stream() -> *mut root::std::ostream {
            octave_diary_stream_stream()
        }
        #[inline]
        pub unsafe fn reset() { octave_diary_stream_reset() }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_diary_stream_octave_diary_stream(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "_Z19flush_octave_stdoutv"]
        pub fn flush_octave_stdout();
    }
    extern "C" {
        #[link_name = "_Z16valid_identifierPKc"]
        pub fn valid_identifier(s: *const ::std::os::raw::c_char) -> bool;
    }
    extern "C" {
        #[link_name = "_Z16valid_identifierRKSs"]
        pub fn valid_identifier1(s: *const root::std::string) -> bool;
    }
    extern "C" {
        #[link_name = "_Z9same_fileRKSsS0_"]
        pub fn same_file(f: *const root::std::string,
                         g: *const root::std::string) -> bool;
    }
    extern "C" {
        #[link_name = "_Z12almost_matchRKSsS0_ii"]
        pub fn almost_match(std: *const root::std::string,
                            s: *const root::std::string,
                            min_match_len: ::std::os::raw::c_int,
                            case_sens: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_Z20keyword_almost_matchPKPKcPiRKSsii"]
        pub fn keyword_almost_match(std: *const *const ::std::os::raw::c_char,
                                    min_len: *mut ::std::os::raw::c_int,
                                    s: *const root::std::string,
                                    min_toks_to_match: ::std::os::raw::c_int,
                                    max_toks: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_Z9empty_argPKcii"]
        pub fn empty_arg(name: *const ::std::os::raw::c_char,
                         nr: root::octave_idx_type, nc: root::octave_idx_type)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_Z20search_path_for_fileRKSsRK13string_vector"]
        pub fn search_path_for_file(arg1: *const root::std::string,
                                    arg2: *const root::string_vector)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z25search_path_for_all_filesRKSsRK13string_vector"]
        pub fn search_path_for_all_files(arg1: *const root::std::string,
                                         arg2: *const root::string_vector)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_Z12file_in_pathRKSsS0_"]
        pub fn file_in_path(arg1: *const root::std::string,
                            arg2: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z27find_data_file_in_load_pathRKSsS0_b"]
        pub fn find_data_file_in_load_path(fcn: *const root::std::string,
                                           file: *const root::std::string,
                                           require_regular_file: bool)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z21contents_file_in_pathRKSs"]
        pub fn contents_file_in_path(arg1: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z16fcn_file_in_pathRKSs"]
        pub fn fcn_file_in_path(arg1: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z16oct_file_in_pathRKSs"]
        pub fn oct_file_in_path(arg1: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z16mex_file_in_pathRKSs"]
        pub fn mex_file_in_path(arg1: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z17do_string_escapesRKSs"]
        pub fn do_string_escapes(s: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z18undo_string_escapec"]
        pub fn undo_string_escape(c: ::std::os::raw::c_char)
         -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_Z19undo_string_escapesRKSs"]
        pub fn undo_string_escapes(s: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z16check_dimensionsR10dim_vectorPKc"]
        pub fn check_dimensions(dim: *mut root::dim_vector,
                                warnfor: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_Z14get_dimensionsRK12octave_valuePKcR10dim_vector"]
        pub fn get_dimensions(a: *const root::octave_value,
                              warn_for: *const ::std::os::raw::c_char,
                              dim: *mut root::dim_vector);
    }
    extern "C" {
        #[link_name = "_Z14get_dimensionsRK12octave_valueS1_PKcRiS4_"]
        pub fn get_dimensions1(a: *const root::octave_value,
                               b: *const root::octave_value,
                               warn_for: *const ::std::os::raw::c_char,
                               nr: *mut root::octave_idx_type,
                               nc: *mut root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_Z14get_dimensionsRK12octave_valuePKcRiS4_"]
        pub fn get_dimensions2(a: *const root::octave_value,
                               warn_for: *const ::std::os::raw::c_char,
                               nr: *mut root::octave_idx_type,
                               nc: *mut root::octave_idx_type);
    }
    extern "C" {
        #[link_name = "_Z13dims_to_numelRK10dim_vectorRK17octave_value_list"]
        pub fn dims_to_numel(dims: *const root::dim_vector,
                             idx: *const root::octave_value_list)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_Z15identity_matrixii"]
        pub fn identity_matrix(nr: root::octave_idx_type,
                               nc: root::octave_idx_type) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_Z21float_identity_matrixii"]
        pub fn float_identity_matrix(nr: root::octave_idx_type,
                                     nc: root::octave_idx_type)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_Z13octave_formatRSoPKcz"]
        pub fn octave_format(os: *mut root::std::ostream,
                             fmt: *const ::std::os::raw::c_char, ...)
         -> usize;
    }
    extern "C" {
        #[link_name = "_Z14octave_vformatRSoPKcPc"]
        pub fn octave_vformat(os: *mut root::std::ostream,
                              fmt: *const ::std::os::raw::c_char,
                              args: root::va_list) -> usize;
    }
    extern "C" {
        #[link_name = "_Z16octave_vasprintfPKcPc"]
        pub fn octave_vasprintf(fmt: *const ::std::os::raw::c_char,
                                args: root::va_list) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z15octave_asprintfPKcz"]
        pub fn octave_asprintf(fmt: *const ::std::os::raw::c_char, ...)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z12octave_sleepd"]
        pub fn octave_sleep(seconds: f64);
    }
    extern "C" {
        #[link_name =
              "_Z17do_simple_cellfunPF17octave_value_listRKS_iEPKcS1_i"]
        pub fn do_simple_cellfun(fun:
                                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *const root::octave_value_list,
                                                                                arg2:
                                                                                    ::std::os::raw::c_int)
                                                               ->
                                                                   root::octave_value_list>,
                                 fun_name: *const ::std::os::raw::c_char,
                                 args: *const root::octave_value_list,
                                 nargout: ::std::os::raw::c_int)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_Z17do_simple_cellfunPF17octave_value_listRKS_iEPKcS1_"]
        pub fn do_simple_cellfun1(fun:
                                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                     *const root::octave_value_list,
                                                                                 arg2:
                                                                                     ::std::os::raw::c_int)
                                                                ->
                                                                    root::octave_value_list>,
                                  fun_name: *const ::std::os::raw::c_char,
                                  args: *const root::octave_value_list)
         -> root::octave_value;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tree_identifier {
        _unused: [u8; 0],
    }
    extern "C" {
        #[link_name = "_Z19clear_mex_functionsv"]
        pub fn clear_mex_functions();
    }
    extern "C" {
        #[link_name = "_Z17is_valid_functionRK12octave_valueRKSsb"]
        pub fn is_valid_function(arg1: *const root::octave_value,
                                 arg2: *const root::std::string, warn: bool)
         -> *mut root::octave_function;
    }
    extern "C" {
        #[link_name = "_Z17is_valid_functionRKSsS0_b"]
        pub fn is_valid_function1(arg1: *const root::std::string,
                                  arg2: *const root::std::string, warn: bool)
         -> *mut root::octave_function;
    }
    extern "C" {
        #[link_name = "_Z16extract_functionRK12octave_valueRKSsS3_S3_S3_"]
        pub fn extract_function(arg: *const root::octave_value,
                                warn_for: *const root::std::string,
                                fname: *const root::std::string,
                                header: *const root::std::string,
                                trailer: *const root::std::string)
         -> *mut root::octave_function;
    }
    extern "C" {
        #[link_name = "_Z15get_struct_eltsRKSs"]
        pub fn get_struct_elts(text: *const root::std::string)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_Z27generate_struct_completionsRKSsRSsS1_"]
        pub fn generate_struct_completions(text: *const root::std::string,
                                           prefix: *mut root::std::string,
                                           hint: *mut root::std::string)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_Z17looks_like_structRKSsc"]
        pub fn looks_like_struct(text: *const root::std::string,
                                 prev_char: ::std::os::raw::c_char) -> bool;
    }
    extern "C" {
        #[link_name = "_Z12symbol_existRKSsS0_"]
        pub fn symbol_exist(name: *const root::std::string,
                            type_: *const root::std::string)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_Z18unique_symbol_nameRKSs"]
        pub fn unique_symbol_name(basename: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z22lookup_function_handleRKSs"]
        pub fn lookup_function_handle(nm: *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z16get_global_valueRKSsb"]
        pub fn get_global_value(nm: *const root::std::string, silent: bool)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z16set_global_valueRKSsRK12octave_value"]
        pub fn set_global_value(nm: *const root::std::string,
                                val: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z19get_top_level_valueRKSsb"]
        pub fn get_top_level_value(nm: *const root::std::string, silent: bool)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z19set_top_level_valueRKSsRK12octave_value"]
        pub fn set_top_level_value(nm: *const root::std::string,
                                   val: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z21set_internal_variableRbRK17octave_value_listiPKc"]
        pub fn set_internal_variable(var: *mut bool,
                                     args: *const root::octave_value_list,
                                     nargout: ::std::os::raw::c_int,
                                     nm: *const ::std::os::raw::c_char)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z21set_internal_variableRcRK17octave_value_listiPKc"]
        pub fn set_internal_variable1(var: *mut ::std::os::raw::c_char,
                                      args: *const root::octave_value_list,
                                      nargout: ::std::os::raw::c_int,
                                      nm: *const ::std::os::raw::c_char)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_Z21set_internal_variableRiRK17octave_value_listiPKcii"]
        pub fn set_internal_variable2(var: *mut ::std::os::raw::c_int,
                                      args: *const root::octave_value_list,
                                      nargout: ::std::os::raw::c_int,
                                      nm: *const ::std::os::raw::c_char,
                                      minval: ::std::os::raw::c_int,
                                      maxval: ::std::os::raw::c_int)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_Z21set_internal_variableRdRK17octave_value_listiPKcdd"]
        pub fn set_internal_variable3(var: *mut f64,
                                      args: *const root::octave_value_list,
                                      nargout: ::std::os::raw::c_int,
                                      nm: *const ::std::os::raw::c_char,
                                      minval: f64, maxval: f64)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_Z21set_internal_variableRSsRK17octave_value_listiPKcb"]
        pub fn set_internal_variable4(var: *mut root::std::string,
                                      args: *const root::octave_value_list,
                                      nargout: ::std::os::raw::c_int,
                                      nm: *const ::std::os::raw::c_char,
                                      empty_ok: bool) -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_Z21set_internal_variableRSsRK17octave_value_listiPKcPS4_"]
        pub fn set_internal_variable5(var: *mut root::std::string,
                                      args: *const root::octave_value_list,
                                      nargout: ::std::os::raw::c_int,
                                      nm: *const ::std::os::raw::c_char,
                                      choices:
                                          *mut *const ::std::os::raw::c_char)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_Z21set_internal_variableRiRK17octave_value_listiPKcPS4_"]
        pub fn set_internal_variable6(var: *mut ::std::os::raw::c_int,
                                      args: *const root::octave_value_list,
                                      nargout: ::std::os::raw::c_int,
                                      nm: *const ::std::os::raw::c_char,
                                      choices:
                                          *mut *const ::std::os::raw::c_char)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z23builtin_string_variableRKSs"]
        pub fn builtin_string_variable(arg1: *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z28builtin_real_scalar_variableRKSsRd"]
        pub fn builtin_real_scalar_variable(arg1: *const root::std::string,
                                            arg2: *mut f64)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_Z20builtin_any_variableRKSs"]
        pub fn builtin_any_variable(arg1: *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_Z8bind_ansRK12octave_valueb"]
        pub fn bind_ans(val: *const root::octave_value, print: bool);
    }
    extern "C" {
        #[link_name = "_Z22bind_internal_variableRKSsRK12octave_value"]
        pub fn bind_internal_variable(fname: *const root::std::string,
                                      val: *const root::octave_value);
    }
    extern "C" {
        #[link_name = "_Z5mlockv"]
        pub fn mlock();
    }
    extern "C" {
        #[link_name = "_Z7munlockRKSs"]
        pub fn munlock(arg1: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z9mislockedRKSs"]
        pub fn mislocked(arg1: *const root::std::string) -> bool;
    }
    extern "C" {
        #[link_name = "_Z14clear_functionRKSs"]
        pub fn clear_function(nm: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z14clear_variableRKSs"]
        pub fn clear_variable(nm: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z12clear_symbolRKSs"]
        pub fn clear_symbol(nm: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z27maybe_missing_function_hookRKSs"]
        pub fn maybe_missing_function_hook(name: *const root::std::string);
    }
    extern "C" {
        pub fn octave_value_list_create() -> root::octave_value_list;
    }
    pub type __builtin_va_list = u64;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_1 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_2 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_3 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_3 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_4 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_4 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_5 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_5 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_6 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_6 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_7 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_7 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_8 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_8 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_9 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_9 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_10 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_10 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_11 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_12 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_13 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_14 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_15 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_16 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_17 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_18 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_19 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_20 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_21 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_22 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_23 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_24 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_25 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_26 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_27 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_28 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_29 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_30 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_31 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_31 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_32 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_32 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_33 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_33 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_34 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_34 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_35 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_35 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_36 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_36 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_37 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_37 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_38 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_38 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_39 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_39 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_40 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_40 {
        fn clone(&self) -> Self { *self }
    }
    pub type size_type = u64;
    pub type iterator = [u64; 2usize];
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_41 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_41 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_42 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_42 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_43 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_43 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_44 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_44 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_45 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_45 {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct _bindgen_ty_46 {
        pub _address: u8,
    }
    impl Clone for _bindgen_ty_46 {
        fn clone(&self) -> Self { *self }
    }
    pub type char_type = u8;
    pub type int_type = u32;
    // pub type char_type = u16;
    // pub type int_type = u16;
}
