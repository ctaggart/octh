/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub type octave_idx_type = ::std::os::raw::c_int;
    pub type octave_jmp_buf = root::jmp_buf;
    extern "C" {
        pub fn octave_save_current_context(arg1: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn octave_restore_current_context(arg1:
                                                  *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn octave_jump_to_enclosing_context();
    }
    pub mod octave {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        pub struct execution_exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct execution_exception {
            pub vtable_: *const execution_exception__bindgen_vtable,
            pub m_stack_trace: root::std::string,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct exit_exception {
            pub m_exit_status: ::std::os::raw::c_int,
            pub m_safe_to_return: bool,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct interrupt_exception {
            pub _address: u8,
        }
        impl Clone for interrupt_exception {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct numeric_limits<T> {
            pub _address: u8,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub mod math {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "_ZN6octave4math5is_NAEd"]
                pub fn is_NA(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5is_NAEf"]
                pub fn is_NA1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5is_NAERKSt7complexIdE"]
                pub fn is_NA2(x: *const root::Complex) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5is_NAERKSt7complexIfE"]
                pub fn is_NA3(x: *const root::FloatComplex) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math12is_NaN_or_NAERKSt7complexIdE"]
                pub fn is_NaN_or_NA(x: *const root::Complex) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math12is_NaN_or_NAERKSt7complexIfE"]
                pub fn is_NaN_or_NA1(x: *const root::FloatComplex) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8copysignEdd"]
                pub fn copysign(x: f64, y: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8copysignEff"]
                pub fn copysign1(x: f32, y: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7signbitEd"]
                pub fn signbit(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7signbitEf"]
                pub fn signbit1(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math13negative_signEd"]
                pub fn negative_sign(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math13negative_signEf"]
                pub fn negative_sign1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4acosERKSt7complexIdE"]
                pub fn acos(x: *const root::Complex) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4acosERKSt7complexIfE"]
                pub fn acos1(x: *const root::FloatComplex)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4asinERKSt7complexIdE"]
                pub fn asin(x: *const root::Complex) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4asinERKSt7complexIfE"]
                pub fn asin1(x: *const root::FloatComplex)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4atanERKSt7complexIdE"]
                pub fn atan(x: *const root::Complex) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4atanERKSt7complexIfE"]
                pub fn atan1(x: *const root::FloatComplex)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2Ed"]
                pub fn log2(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2Ef"]
                pub fn log21(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2ERKSt7complexIdE"]
                pub fn log22(x: *const root::Complex) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2ERKSt7complexIfE"]
                pub fn log23(x: *const root::FloatComplex)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2EdRi"]
                pub fn log24(x: f64, exp: *mut ::std::os::raw::c_int) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2EfRi"]
                pub fn log25(x: f32, exp: *mut ::std::os::raw::c_int) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2ERKSt7complexIdERi"]
                pub fn log26(x: *const root::Complex,
                             exp: *mut ::std::os::raw::c_int)
                 -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4log2ERKSt7complexIfERi"]
                pub fn log27(x: *const root::FloatComplex,
                             exp: *mut ::std::os::raw::c_int)
                 -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4exp2Ed"]
                pub fn exp2(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4exp2Ef"]
                pub fn exp21(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5truncEd"]
                pub fn trunc(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5truncEf"]
                pub fn trunc1(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5floorEd"]
                pub fn floor(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5floorEf"]
                pub fn floor1(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5roundEd"]
                pub fn round(x: f64) -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5roundEf"]
                pub fn round1(x: f32) -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5frexpEdPi"]
                pub fn frexp(x: f64, expptr: *mut ::std::os::raw::c_int)
                 -> f64;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5frexpEfPi"]
                pub fn frexp1(x: f32, expptr: *mut ::std::os::raw::c_int)
                 -> f32;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5isnanEd"]
                pub fn isnan(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5isnanEf"]
                pub fn isnan1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math6finiteEd"]
                pub fn finite(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math6finiteEf"]
                pub fn finite1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5isinfEd"]
                pub fn isinf(x: f64) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math5isinfEf"]
                pub fn isinf1(x: f32) -> bool;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8nint_bigEd"]
                pub fn nint_big(x: f64) -> root::octave_idx_type;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8nint_bigEf"]
                pub fn nint_big1(x: f32) -> root::octave_idx_type;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4nintEd"]
                pub fn nint(x: f64) -> ::std::os::raw::c_int;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math4nintEf"]
                pub fn nint1(x: f32) -> ::std::os::raw::c_int;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_acosEd"]
                pub fn rc_acos(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_acosEf"]
                pub fn rc_acos1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_acoshEd"]
                pub fn rc_acosh(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_acoshEf"]
                pub fn rc_acosh1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_asinEd"]
                pub fn rc_asin(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_asinEf"]
                pub fn rc_asin1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_atanhEd"]
                pub fn rc_atanh(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_atanhEf"]
                pub fn rc_atanh1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math6rc_logEd"]
                pub fn rc_log(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math6rc_logEf"]
                pub fn rc_log1(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_log2Ed"]
                pub fn rc_log2(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_log2Ef"]
                pub fn rc_log21(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_log10Ed"]
                pub fn rc_log10(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math8rc_log10Ef"]
                pub fn rc_log101(arg1: f32) -> root::FloatComplex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_sqrtEd"]
                pub fn rc_sqrt(arg1: f64) -> root::Complex;
            }
            extern "C" {
                #[link_name = "_ZN6octave4math7rc_sqrtEf"]
                pub fn rc_sqrt1(arg1: f32) -> root::FloatComplex;
            }
            #[repr(C)]
            pub struct aepbalance__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct aepbalance<MT> {
                pub vtable_: *const aepbalance__bindgen_vtable,
                pub balanced_mat: MT,
                pub scale: root::octave::math::aepbalance_VT,
                pub ilo: root::octave_idx_type,
                pub ihi: root::octave_idx_type,
                pub job: ::std::os::raw::c_char,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<MT>>,
            }
            pub type aepbalance_VT = [u8; 0usize];
            #[repr(C)]
            #[derive(Debug)]
            pub struct gepbalance<T> {
                pub balanced_mat: T,
                pub balanced_mat2: T,
                pub balancing_mat: root::octave::math::gepbalance_RT,
                pub balancing_mat2: root::octave::math::gepbalance_RT,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type gepbalance_RT = [u8; 0usize];
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct chol<T> {
                pub chol_mat: T,
                pub xrcond: root::octave::math::chol_COND_T,
                pub is_upper: bool,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type chol_VT = [u8; 0usize];
            pub type chol_COND_T = [u8; 0usize];
            #[repr(C)]
            #[derive(Debug)]
            pub struct hess<T> {
                pub hess_mat: T,
                pub unitary_hess_mat: T,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct schur<T> {
                pub schur_mat: T,
                pub unitary_mat: T,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct svd<T> {
                pub m_type: root::octave::math::svd_Type,
                pub m_driver: root::octave::math::svd_Driver,
                pub left_sm: T,
                pub sigma: root::octave::math::svd_DM_T,
                pub right_sm: T,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type svd_DM_T = [u8; 0usize];
            pub const svd_Type_economy: root::octave::math::svd_Type =
                svd_Type::std;
            pub const svd_Type_sigma_only: root::octave::math::svd_Type =
                svd_Type::std;
            #[repr(i32)]
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum svd_Type { std = 0, }
            pub const svd_Driver_GESDD: root::octave::math::svd_Driver =
                svd_Driver::GESVD;
            #[repr(i32)]
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum svd_Driver { GESVD = 0, }
            pub type svd_P = [u8; 0usize];
            pub type svd_DM_P = [u8; 0usize];
            #[repr(C)]
            pub struct lu__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct lu<T> {
                pub vtable_: *const lu__bindgen_vtable,
                pub a_fact: T,
                pub l_fact: T,
                pub ipvt: root::Array,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type lu_VT = [u8; 0usize];
            pub type lu_ELT_T = [u8; 0usize];
            #[repr(C)]
            pub struct qr__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct qr<T> {
                pub vtable_: *const qr__bindgen_vtable,
                pub q: T,
                pub r: T,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type qr_ELT_T = [u8; 0usize];
            pub type qr_RV_T = [u8; 0usize];
            pub type qr_CV_T = [u8; 0usize];
            pub const qr_type_raw: root::octave::math::qr_type = qr_type::std;
            pub const qr_type_economy: root::octave::math::qr_type =
                qr_type::std;
            #[repr(i32)]
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum qr_type { std = 0, }
            extern "C" {
                #[link_name = "_ZN6octave4math18warn_qrupdate_onceEv"]
                pub fn warn_qrupdate_once();
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct index_exception {
            pub _base: root::octave::execution_exception,
            pub index: root::std::string,
            pub nd: root::octave_idx_type,
            pub dim: root::octave_idx_type,
            pub var: root::std::string,
        }
        extern "C" {
            #[link_name = "_ZNK6octave15index_exception10expressionB5cxx11Ev"]
            pub fn index_exception_expression(this:
                                                  *const root::octave::index_exception)
             -> root::std::string;
        }
        impl index_exception {
            #[inline]
            pub unsafe fn expression(&self) -> root::std::string {
                index_exception_expression(self)
            }
        }
        extern "C" {
            #[link_name = "_ZNK6octave15index_exception7detailsB5cxx11Ev"]
            pub fn index_exception_details(this: *mut ::std::os::raw::c_void)
             -> root::std::string;
        }
        extern "C" {
            #[link_name = "_ZNK6octave15index_exception6err_idEv"]
            pub fn index_exception_err_id(this: *mut ::std::os::raw::c_void)
             -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "_ZNK6octave15index_exception7messageB5cxx11Ev"]
            pub fn index_exception_message(this: *mut ::std::os::raw::c_void)
             -> root::std::string;
        }
        extern "C" {
            #[link_name = "_ZN6octave29err_nan_to_logical_conversionEv"]
            pub fn err_nan_to_logical_conversion();
        }
        extern "C" {
            #[link_name = "_ZN6octave31err_nan_to_character_conversionEv"]
            pub fn err_nan_to_character_conversion();
        }
        extern "C" {
            #[link_name = "_ZN6octave17err_nonconformantEPKcii"]
            pub fn err_nonconformant(op: *const ::std::os::raw::c_char,
                                     op1_len: root::octave_idx_type,
                                     op2_len: root::octave_idx_type);
        }
        extern "C" {
            #[link_name = "_ZN6octave17err_nonconformantEPKciiii"]
            pub fn err_nonconformant1(op: *const ::std::os::raw::c_char,
                                      op1_nr: root::octave_idx_type,
                                      op1_nc: root::octave_idx_type,
                                      op2_nr: root::octave_idx_type,
                                      op2_nc: root::octave_idx_type);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave17err_nonconformantEPKcRK10dim_vectorS4_"]
            pub fn err_nonconformant2(op: *const ::std::os::raw::c_char,
                                      op1_dims: *const root::dim_vector,
                                      op2_dims: *const root::dim_vector);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave22err_index_out_of_rangeEiiiiRK10dim_vector"]
            pub fn err_index_out_of_range(nd: ::std::os::raw::c_int,
                                          dim: ::std::os::raw::c_int,
                                          iext: root::octave_idx_type,
                                          ext: root::octave_idx_type,
                                          d: *const root::dim_vector);
        }
        extern "C" {
            #[link_name = "_ZN6octave22err_index_out_of_rangeEiiii"]
            pub fn err_index_out_of_range1(nd: ::std::os::raw::c_int,
                                           dim: ::std::os::raw::c_int,
                                           iext: root::octave_idx_type,
                                           ext: root::octave_idx_type);
        }
        extern "C" {
            #[link_name = "_ZN6octave26err_del_index_out_of_rangeEbii"]
            pub fn err_del_index_out_of_range(is1d: bool,
                                              iext: root::octave_idx_type,
                                              ext: root::octave_idx_type);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave17err_invalid_indexEdiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn err_invalid_index(n: f64, nd: root::octave_idx_type,
                                     dim: root::octave_idx_type,
                                     var: *const root::std::string);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave17err_invalid_indexEiiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn err_invalid_index1(n: root::octave_idx_type,
                                      nd: root::octave_idx_type,
                                      dim: root::octave_idx_type,
                                      var: *const root::std::string);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave17err_invalid_indexERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiiS7_"]
            pub fn err_invalid_index2(idx: *const root::std::string,
                                      nd: root::octave_idx_type,
                                      dim: root::octave_idx_type,
                                      var: *const root::std::string);
        }
        extern "C" {
            #[link_name = "_ZN6octave18err_invalid_resizeEv"]
            pub fn err_invalid_resize();
        }
        extern "C" {
            #[link_name = "_ZN6octave20warn_singular_matrixEd"]
            pub fn warn_singular_matrix(rcond: f64);
        }
        pub mod sys {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            pub struct base_tm__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct base_tm {
                pub vtable_: *const base_tm__bindgen_vtable,
                pub m_usec: ::std::os::raw::c_int,
                pub m_sec: ::std::os::raw::c_int,
                pub m_min: ::std::os::raw::c_int,
                pub m_hour: ::std::os::raw::c_int,
                pub m_mday: ::std::os::raw::c_int,
                pub m_mon: ::std::os::raw::c_int,
                pub m_year: ::std::os::raw::c_int,
                pub m_wday: ::std::os::raw::c_int,
                pub m_yday: ::std::os::raw::c_int,
                pub m_isdst: ::std::os::raw::c_int,
                pub m_gmtoff: ::std::os::raw::c_long,
                pub m_zone: root::std::string,
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4usecEi"]
                pub fn base_tm_usec(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm3secEi"]
                pub fn base_tm_sec(this: *mut root::octave::sys::base_tm,
                                   v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm3minEi"]
                pub fn base_tm_min(this: *mut root::octave::sys::base_tm,
                                   v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4hourEi"]
                pub fn base_tm_hour(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4mdayEi"]
                pub fn base_tm_mday(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm3monEi"]
                pub fn base_tm_mon(this: *mut root::octave::sys::base_tm,
                                   v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4yearEi"]
                pub fn base_tm_year(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4wdayEi"]
                pub fn base_tm_wday(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4ydayEi"]
                pub fn base_tm_yday(this: *mut root::octave::sys::base_tm,
                                    v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm5isdstEi"]
                pub fn base_tm_isdst(this: *mut root::octave::sys::base_tm,
                                     v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm6gmtoffEl"]
                pub fn base_tm_gmtoff(this: *mut root::octave::sys::base_tm,
                                      v: ::std::os::raw::c_long)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name =
                      "_ZN6octave3sys7base_tm4zoneERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
                pub fn base_tm_zone(this: *mut root::octave::sys::base_tm,
                                    s: *const root::std::string)
                 -> *mut root::octave::sys::base_tm;
            }
            extern "C" {
                #[link_name =
                      "_ZNK6octave3sys7base_tm8strftimeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
                pub fn base_tm_strftime(this:
                                            *const root::octave::sys::base_tm,
                                        fmt: *const root::std::string)
                 -> root::std::string;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys7base_tm4initEPv"]
                pub fn base_tm_init(this: *mut root::octave::sys::base_tm,
                                    p: *mut ::std::os::raw::c_void);
            }
            impl base_tm {
                #[inline]
                pub unsafe fn usec(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_usec(self, v)
                }
                #[inline]
                pub unsafe fn sec(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_sec(self, v)
                }
                #[inline]
                pub unsafe fn min(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_min(self, v)
                }
                #[inline]
                pub unsafe fn hour(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_hour(self, v)
                }
                #[inline]
                pub unsafe fn mday(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_mday(self, v)
                }
                #[inline]
                pub unsafe fn mon(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_mon(self, v)
                }
                #[inline]
                pub unsafe fn year(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_year(self, v)
                }
                #[inline]
                pub unsafe fn wday(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_wday(self, v)
                }
                #[inline]
                pub unsafe fn yday(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_yday(self, v)
                }
                #[inline]
                pub unsafe fn isdst(&mut self, v: ::std::os::raw::c_int)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_isdst(self, v)
                }
                #[inline]
                pub unsafe fn gmtoff(&mut self, v: ::std::os::raw::c_long)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_gmtoff(self, v)
                }
                #[inline]
                pub unsafe fn zone(&mut self, s: *const root::std::string)
                 -> *mut root::octave::sys::base_tm {
                    base_tm_zone(self, s)
                }
                #[inline]
                pub unsafe fn strftime(&self, fmt: *const root::std::string)
                 -> root::std::string {
                    base_tm_strftime(self, fmt)
                }
                #[inline]
                pub unsafe fn init(&mut self,
                                   p: *mut ::std::os::raw::c_void) {
                    base_tm_init(self, p)
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct time {
                pub ot_unix_time: root::time_t,
                pub ot_usec: ::std::os::raw::c_long,
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys4time5stampEv"]
                pub fn time_stamp(this: *mut root::octave::sys::time);
            }
            extern "C" {
                #[link_name = "_ZNK6octave3sys4time5ctimeB5cxx11Ev"]
                pub fn time_ctime(this: *const root::octave::sys::time)
                 -> root::std::string;
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys4timeC1Ed"]
                pub fn time_time(this: *mut root::octave::sys::time, d: f64);
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys4timeC1ERKNS0_7base_tmE"]
                pub fn time_time1(this: *mut root::octave::sys::time,
                                  tm: *const root::octave::sys::base_tm);
            }
            impl time {
                #[inline]
                pub unsafe fn stamp(&mut self) { time_stamp(self) }
                #[inline]
                pub unsafe fn ctime(&self) -> root::std::string {
                    time_ctime(self)
                }
                #[inline]
                pub unsafe fn new(d: f64) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    time_time(&mut __bindgen_tmp, d);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(tm: *const root::octave::sys::base_tm)
                 -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    time_time1(&mut __bindgen_tmp, tm);
                    __bindgen_tmp
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct localtime {
                pub _base: root::octave::sys::base_tm,
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct gmtime {
                pub _base: root::octave::sys::base_tm,
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct strptime {
                pub _base: root::octave::sys::base_tm,
                pub nchars: ::std::os::raw::c_int,
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct cpu_time {
                pub m_usr_sec: root::time_t,
                pub m_sys_sec: root::time_t,
                pub m_usr_usec: ::std::os::raw::c_long,
                pub m_sys_usec: ::std::os::raw::c_long,
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys8cpu_time5stampEv"]
                pub fn cpu_time_stamp(this: *mut root::octave::sys::cpu_time);
            }
            impl Clone for cpu_time {
                fn clone(&self) -> Self { *self }
            }
            impl cpu_time {
                #[inline]
                pub unsafe fn stamp(&mut self) { cpu_time_stamp(self) }
            }
            #[repr(C)]
            #[derive(Debug, Copy)]
            pub struct resource_usage {
                pub m_cpu: root::octave::sys::cpu_time,
                pub m_maxrss: ::std::os::raw::c_long,
                pub m_ixrss: ::std::os::raw::c_long,
                pub m_idrss: ::std::os::raw::c_long,
                pub m_isrss: ::std::os::raw::c_long,
                pub m_minflt: ::std::os::raw::c_long,
                pub m_majflt: ::std::os::raw::c_long,
                pub m_nswap: ::std::os::raw::c_long,
                pub m_inblock: ::std::os::raw::c_long,
                pub m_oublock: ::std::os::raw::c_long,
                pub m_msgsnd: ::std::os::raw::c_long,
                pub m_msgrcv: ::std::os::raw::c_long,
                pub m_nsignals: ::std::os::raw::c_long,
                pub m_nvcsw: ::std::os::raw::c_long,
                pub m_nivcsw: ::std::os::raw::c_long,
            }
            extern "C" {
                #[link_name = "_ZN6octave3sys14resource_usage5stampEv"]
                pub fn resource_usage_stamp(this:
                                                *mut root::octave::sys::resource_usage);
            }
            impl Clone for resource_usage {
                fn clone(&self) -> Self { *self }
            }
            impl resource_usage {
                #[inline]
                pub unsafe fn stamp(&mut self) { resource_usage_stamp(self) }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct mach_info {
            pub native_float_fmt: root::octave::mach_info_float_format,
            pub big_chief: bool,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum mach_info_float_format {
            flt_fmt_unknown = 0,
            flt_fmt_ieee_little_endian = 1,
            flt_fmt_ieee_big_endian = 2,
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info8instanceE"]
            pub static mut mach_info_instance: *mut root::octave::mach_info;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info11instance_okEv"]
            pub fn mach_info_instance_ok() -> bool;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info19native_float_formatEv"]
            pub fn mach_info_native_float_format()
             -> root::octave::mach_info_float_format;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info16words_big_endianEv"]
            pub fn mach_info_words_big_endian() -> bool;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_info19words_little_endianEv"]
            pub fn mach_info_words_little_endian() -> bool;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave9mach_info22string_to_float_formatERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn mach_info_string_to_float_format(arg1:
                                                        *const root::std::string)
             -> root::octave::mach_info_float_format;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave9mach_info22float_format_as_stringB5cxx11ENS0_12float_formatE"]
            pub fn mach_info_float_format_as_string(arg1:
                                                        root::octave::mach_info_float_format)
             -> root::std::string;
        }
        extern "C" {
            #[link_name = "_ZN6octave9mach_infoC1Ev"]
            pub fn mach_info_mach_info(this: *mut root::octave::mach_info);
        }
        impl Clone for mach_info {
            fn clone(&self) -> Self { *self }
        }
        impl mach_info {
            #[inline]
            pub unsafe fn instance_ok() -> bool { mach_info_instance_ok() }
            #[inline]
            pub unsafe fn native_float_format()
             -> root::octave::mach_info_float_format {
                mach_info_native_float_format()
            }
            #[inline]
            pub unsafe fn words_big_endian() -> bool {
                mach_info_words_big_endian()
            }
            #[inline]
            pub unsafe fn words_little_endian() -> bool {
                mach_info_words_little_endian()
            }
            #[inline]
            pub unsafe fn string_to_float_format(arg1:
                                                     *const root::std::string)
             -> root::octave::mach_info_float_format {
                mach_info_string_to_float_format(arg1)
            }
            #[inline]
            pub unsafe fn float_format_as_string(arg1:
                                                     root::octave::mach_info_float_format)
             -> root::std::string {
                mach_info_float_format_as_string(arg1)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                mach_info_mach_info(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        pub struct unwind_protect__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct unwind_protect {
            pub vtable_: *const unwind_protect__bindgen_vtable,
            pub lifo: root::std::stack,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct unwind_protect_safe {
            pub _base: root::octave::unwind_protect,
        }
        #[repr(C)]
        pub struct base_list__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct base_list<elt_type> {
            pub vtable_: *const base_list__bindgen_vtable,
            pub lst: root::std::list,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<elt_type>>,
        }
        pub type base_list_iterator = root::std::list;
        pub type base_list_const_iterator = root::std::list;
        pub type base_list_reverse_iterator = root::std::list;
        pub type base_list_const_reverse_iterator = root::std::list;
        #[repr(C)]
        #[derive(Debug)]
        pub struct regexp {
            pub pattern: root::std::string,
            pub options: root::octave::regexp_opts,
            pub data: *mut ::std::os::raw::c_void,
            pub m: root::std::string,
            pub named_pats: root::string_vector,
            pub nnames: ::std::os::raw::c_int,
            pub named_idx: root::Array,
            pub who: root::std::string,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct regexp_opts {
            pub x_case_insensitive: bool,
            pub x_dotexceptnewline: bool,
            pub x_emptymatch: bool,
            pub x_freespacing: bool,
            pub x_lineanchors: bool,
            pub x_once: bool,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct regexp_match_data {
            pub _base: root::octave::base_list<root::octave::regexp_match_element>,
            pub named_pats: root::string_vector,
        }
        #[repr(C)]
        #[derive(Debug, Copy)]
        pub struct regexp_match_element {
            pub x_match_string: root::std::string,
            pub x_named_tokens: root::string_vector,
            pub x_tokens: root::string_vector,
            pub x_token_extents: root::Matrix,
            pub x_start: f64,
            pub x_end: f64,
        }
        impl Clone for regexp_match_element {
            fn clone(&self) -> Self { *self }
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave6regexp5matchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn regexp_match(this: *mut root::octave::regexp,
                                buffer: *const root::std::string)
             -> root::octave::regexp_match_data;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave6regexp8is_matchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn regexp_is_match(this: *mut root::octave::regexp,
                                   buffer: *const root::std::string) -> bool;
        }
        extern "C" {
            #[link_name = "_ZN6octave6regexp8is_matchERK13string_vector"]
            pub fn regexp_is_match1(this: *mut root::octave::regexp,
                                    buffer: *const root::string_vector)
             -> root::Array;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave6regexp7replaceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
            pub fn regexp_replace(this: *mut root::octave::regexp,
                                  buffer: *const root::std::string,
                                  replacement: *const root::std::string)
             -> root::std::string;
        }
        impl regexp {
            #[inline]
            pub unsafe fn match_(&mut self, buffer: *const root::std::string)
             -> root::octave::regexp_match_data {
                regexp_match(self, buffer)
            }
            #[inline]
            pub unsafe fn is_match(&mut self,
                                   buffer: *const root::std::string) -> bool {
                regexp_is_match(self, buffer)
            }
            #[inline]
            pub unsafe fn is_match1(&mut self,
                                    buffer: *const root::string_vector)
             -> root::Array {
                regexp_is_match1(self, buffer)
            }
            #[inline]
            pub unsafe fn replace(&mut self, buffer: *const root::std::string,
                                  replacement: *const root::std::string)
             -> root::std::string {
                regexp_replace(self, buffer, replacement)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct dynamic_library {
            pub rep: *mut root::octave::dynamic_library_dynlib_rep,
        }
        pub type dynamic_library_name_mangler =
            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                           *const root::std::string)
                                      -> root::std::string>;
        pub type dynamic_library_close_hook =
            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                           *const root::std::string)>;
        #[repr(C)]
        pub struct dynamic_library_dynlib_rep__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct dynamic_library_dynlib_rep {
            pub vtable_: *const dynamic_library_dynlib_rep__bindgen_vtable,
            pub count: root::octave_refcount<::std::os::raw::c_int>,
            pub file: root::std::string,
            pub tm_loaded: root::octave::sys::time,
            pub fcn_names: root::std::map,
        }
        pub type dynamic_library_dynlib_rep_fcn_names_iterator = u8;
        pub type dynamic_library_dynlib_rep_fcn_names_const_iterator = u8;
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep9instancesB5cxx11E"]
            pub static mut dynamic_library_dynlib_rep_instances:
                       root::std::map;
        }
        extern "C" {
            #[link_name =
                  "_ZNK6octave15dynamic_library10dynlib_rep14is_out_of_dateEv"]
            pub fn dynamic_library_dynlib_rep_is_out_of_date(this:
                                                                 *const root::octave::dynamic_library_dynlib_rep)
             -> bool;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep12new_instanceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn dynamic_library_dynlib_rep_new_instance(f:
                                                               *const root::std::string)
             -> *mut root::octave::dynamic_library_dynlib_rep;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep12get_instanceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
            pub fn dynamic_library_dynlib_rep_get_instance(f:
                                                               *const root::std::string,
                                                           fake: bool)
             -> *mut root::octave::dynamic_library_dynlib_rep;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep12add_fcn_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn dynamic_library_dynlib_rep_add_fcn_name(this:
                                                               *mut root::octave::dynamic_library_dynlib_rep,
                                                           arg1:
                                                               *const root::std::string);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep15remove_fcn_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn dynamic_library_dynlib_rep_remove_fcn_name(this:
                                                                  *mut root::octave::dynamic_library_dynlib_rep,
                                                              arg1:
                                                                  *const root::std::string)
             -> bool;
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep13do_close_hookEPFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE"]
            pub fn dynamic_library_dynlib_rep_do_close_hook(this:
                                                                *mut root::octave::dynamic_library_dynlib_rep,
                                                            cl_hook:
                                                                root::octave::dynamic_library_close_hook);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_rep11fake_reloadEv"]
            pub fn dynamic_library_dynlib_rep_fake_reload(this:
                                                              *mut root::octave::dynamic_library_dynlib_rep);
        }
        extern "C" {
            #[link_name =
                  "_ZN6octave15dynamic_library10dynlib_repC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn dynamic_library_dynlib_rep_dynlib_rep(this:
                                                             *mut root::octave::dynamic_library_dynlib_rep,
                                                         f:
                                                             *const root::std::string);
        }
        impl dynamic_library_dynlib_rep {
            #[inline]
            pub unsafe fn is_out_of_date(&self) -> bool {
                dynamic_library_dynlib_rep_is_out_of_date(self)
            }
            #[inline]
            pub unsafe fn new_instance(f: *const root::std::string)
             -> *mut root::octave::dynamic_library_dynlib_rep {
                dynamic_library_dynlib_rep_new_instance(f)
            }
            #[inline]
            pub unsafe fn get_instance(f: *const root::std::string,
                                       fake: bool)
             -> *mut root::octave::dynamic_library_dynlib_rep {
                dynamic_library_dynlib_rep_get_instance(f, fake)
            }
            #[inline]
            pub unsafe fn add_fcn_name(&mut self,
                                       arg1: *const root::std::string) {
                dynamic_library_dynlib_rep_add_fcn_name(self, arg1)
            }
            #[inline]
            pub unsafe fn remove_fcn_name(&mut self,
                                          arg1: *const root::std::string)
             -> bool {
                dynamic_library_dynlib_rep_remove_fcn_name(self, arg1)
            }
            #[inline]
            pub unsafe fn do_close_hook(&mut self,
                                        cl_hook:
                                            root::octave::dynamic_library_close_hook) {
                dynamic_library_dynlib_rep_do_close_hook(self, cl_hook)
            }
            #[inline]
            pub unsafe fn fake_reload(&mut self) {
                dynamic_library_dynlib_rep_fake_reload(self)
            }
            #[inline]
            pub unsafe fn new(f: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                dynamic_library_dynlib_rep_dynlib_rep(&mut __bindgen_tmp, f);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "_ZN6octave15dynamic_library7nil_repE"]
            pub static mut dynamic_library_nil_rep:
                       root::octave::dynamic_library_dynlib_rep;
        }
    }
    pub type octave_execution_exception = root::octave::exit_exception;
    pub type octave_exit_exception = root::octave::exit_exception;
    pub type octave_interrupt_exception = root::octave::interrupt_exception;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_exception {
        octave_no_exception = 0,
        octave_exec_exception = 1,
        octave_alloc_exception = 3,
        octave_quit_exception = 4,
    }
    extern "C" {
        pub fn octave_handle_signal();
    }
    extern "C" {
        pub fn octave_throw_interrupt_exception();
    }
    extern "C" {
        pub fn octave_throw_execution_exception();
    }
    extern "C" {
        pub fn octave_throw_bad_alloc();
    }
    extern "C" {
        pub fn octave_rethrow_exception();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_refcount<T> {
        pub count: root::octave_refcount_count_type,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    pub type octave_refcount_count_type = T;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_int<T> {
        pub ival: T,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    pub type octave_int_val_type = T;
    pub type octave_int8 = root::octave_int<::std::os::raw::c_schar>;
    pub type octave_int16 = root::octave_int<::std::os::raw::c_short>;
    pub type octave_int32 = root::octave_int<::std::os::raw::c_int>;
    pub type octave_int64 = root::octave_int<::std::os::raw::c_long>;
    pub type octave_uint8 = root::octave_int<::std::os::raw::c_uchar>;
    pub type octave_uint16 = root::octave_int<::std::os::raw::c_ushort>;
    pub type octave_uint32 = root::octave_int<::std::os::raw::c_uint>;
    pub type octave_uint64 = root::octave_int<::std::os::raw::c_ulong>;
    extern "C" {
        pub fn octave_qsort(base: *mut ::std::os::raw::c_void, n: usize,
                            size: usize,
                            cmp:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *const ::std::os::raw::c_void,
                                                                           arg2:
                                                                               *const ::std::os::raw::c_void)
                                                          ->
                                                              ::std::os::raw::c_int>);
    }
    extern "C" {
        pub fn octave_strcasecmp(s1: *const ::std::os::raw::c_char,
                                 s2: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn octave_strncasecmp(s1: *const ::std::os::raw::c_char,
                                  s2: *const ::std::os::raw::c_char, n: usize)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name =
              "_Z13octave_putenvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_"]
        pub fn octave_putenv(arg1: *const root::std::string,
                             arg2: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_Z12octave_fgetsB5cxx11P8_IO_FILE"]
        pub fn octave_fgets(arg1: *mut root::FILE) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z12octave_fgetlB5cxx11P8_IO_FILE"]
        pub fn octave_fgetl(arg1: *mut root::FILE) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z12octave_fgetsB5cxx11P8_IO_FILERb"]
        pub fn octave_fgets1(arg1: *mut root::FILE, eof: *mut bool)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z12octave_fgetlB5cxx11P8_IO_FILERb"]
        pub fn octave_fgetl1(arg1: *mut root::FILE, eof: *mut bool)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z17octave_read_valueIdET_RSi"]
        pub fn octave_read_value(is: *mut root::std::istream) -> f64;
    }
    extern "C" {
        #[link_name = "_Z17octave_read_valueISt7complexIdEET_RSi"]
        pub fn octave_read_value1(is: *mut root::std::istream)
         -> root::Complex;
    }
    extern "C" {
        #[link_name = "_Z17octave_read_valueIfET_RSi"]
        pub fn octave_read_value2(is: *mut root::std::istream) -> f32;
    }
    extern "C" {
        #[link_name = "_Z17octave_read_valueISt7complexIfEET_RSi"]
        pub fn octave_read_value3(is: *mut root::std::istream)
         -> root::FloatComplex;
    }
    extern "C" {
        #[link_name = "_Z19octave_write_doubleRSod"]
        pub fn octave_write_double(os: *mut root::std::ostream, dval: f64);
    }
    extern "C" {
        #[link_name = "_Z20octave_write_complexRSoRKSt7complexIdE"]
        pub fn octave_write_complex(os: *mut root::std::ostream,
                                    cval: *const root::Complex);
    }
    extern "C" {
        #[link_name = "_Z18octave_write_floatRSof"]
        pub fn octave_write_float(os: *mut root::std::ostream, dval: f32);
    }
    extern "C" {
        #[link_name = "_Z26octave_write_float_complexRSoRKSt7complexIfE"]
        pub fn octave_write_float_complex(os: *mut root::std::ostream,
                                          cval: *const root::FloatComplex);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_sort<T> {
        pub compare: root::octave_sort_compare_fcn_type,
        pub ms: *mut root::octave_sort_MergeState,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    pub type octave_sort_compare_fcn_type =
        ::std::option::Option<unsafe extern "C" fn(arg1: root::ref_param,
                                                   arg2: root::ref_param)
                                  -> bool>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_sort_s_slice {
        pub base: root::octave_idx_type,
        pub len: root::octave_idx_type,
    }
    #[repr(C)]
    pub struct octave_sort_MergeState {
        pub min_gallop: root::octave_idx_type,
        pub a: *mut T,
        pub ia: *mut root::octave_idx_type,
        pub alloced: root::octave_idx_type,
        pub n: root::octave_idx_type,
        pub pending: [root::octave_sort_s_slice; 85usize],
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_local_buffer<T> {
        pub data: *mut T,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    #[repr(C)]
    pub struct octave_chunk_buffer__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_chunk_buffer {
        pub vtable_: *const octave_chunk_buffer__bindgen_vtable,
        pub cnk: *mut ::std::os::raw::c_char,
        pub dat: *mut ::std::os::raw::c_char,
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer10chunk_sizeE"]
        pub static octave_chunk_buffer_chunk_size: usize;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer3topE"]
        pub static mut octave_chunk_buffer_top: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer5chunkE"]
        pub static mut octave_chunk_buffer_chunk: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer4leftE"]
        pub static mut octave_chunk_buffer_left: usize;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer6activeE"]
        pub static mut octave_chunk_buffer_active: usize;
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_buffer5clearEv"]
        pub fn octave_chunk_buffer_clear();
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_bufferC1Em"]
        pub fn octave_chunk_buffer_octave_chunk_buffer(this:
                                                           *mut root::octave_chunk_buffer,
                                                       size: usize);
    }
    impl octave_chunk_buffer {
        #[inline]
        pub unsafe fn clear() { octave_chunk_buffer_clear() }
        #[inline]
        pub unsafe fn new(size: usize) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_chunk_buffer_octave_chunk_buffer(&mut __bindgen_tmp, size);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "_ZN19octave_chunk_bufferD0Ev"]
        pub fn octave_chunk_buffer_octave_chunk_buffer_destructor(this:
                                                                      *mut root::octave_chunk_buffer);
    }
    extern "C" {
        pub fn octave_ieee_init();
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_int_cmp_op_prom<T1, T2> {
        pub _address: u8,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T1>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<T2>>,
    }
    pub type octave_int_cmp_op_prom_type = u8;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_lt {
        pub _address: u8,
    }
    pub const octave_int_cmp_op_lt_ltval: bool = true;
    pub const octave_int_cmp_op_lt_gtval: bool = false;
    impl Clone for octave_int_cmp_op_lt {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_le {
        pub _address: u8,
    }
    pub const octave_int_cmp_op_le_ltval: bool = true;
    pub const octave_int_cmp_op_le_gtval: bool = false;
    impl Clone for octave_int_cmp_op_le {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_gt {
        pub _address: u8,
    }
    pub const octave_int_cmp_op_gt_ltval: bool = false;
    pub const octave_int_cmp_op_gt_gtval: bool = true;
    impl Clone for octave_int_cmp_op_gt {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_ge {
        pub _address: u8,
    }
    pub const octave_int_cmp_op_ge_ltval: bool = false;
    pub const octave_int_cmp_op_ge_gtval: bool = true;
    impl Clone for octave_int_cmp_op_ge {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_eq {
        pub _address: u8,
    }
    pub const octave_int_cmp_op_eq_ltval: bool = false;
    pub const octave_int_cmp_op_eq_gtval: bool = false;
    impl Clone for octave_int_cmp_op_eq {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_ne {
        pub _address: u8,
    }
    pub const octave_int_cmp_op_ne_ltval: bool = true;
    pub const octave_int_cmp_op_ne_gtval: bool = true;
    impl Clone for octave_int_cmp_op_ne {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_ct {
        pub _address: u8,
    }
    pub const octave_int_cmp_op_ct_ltval: bool = true;
    pub const octave_int_cmp_op_ct_gtval: bool = true;
    impl Clone for octave_int_cmp_op_ct {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_int_cmp_op_cf {
        pub _address: u8,
    }
    pub const octave_int_cmp_op_cf_ltval: bool = false;
    pub const octave_int_cmp_op_cf_gtval: bool = false;
    impl Clone for octave_int_cmp_op_cf {
        fn clone(&self) -> Self { *self }
    }
    impl Clone for octave_int_cmp_op {
        fn clone(&self) -> Self { *self }
    }
    pub type octave_int_cmp_op_uiop_utype = u8;
    pub type octave_int_cmp_op_uiop_stype = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_int_base<T> {
        pub _address: u8,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_int_arith<T> {
        pub _address: u8,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    pub type octave_time = root::octave::sys::time;
    pub type octave_base_tm = root::octave::sys::base_tm;
    pub type octave_localtime = root::octave::sys::localtime;
    pub type octave_gmtime = root::octave::sys::gmtime;
    pub type octave_strptime = root::octave::sys::strptime;
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_map {
        pub xkeys: root::octave_fields,
        pub xvals: root::std::vector,
        pub dimensions: root::dim_vector,
    }
    pub type octave_map_element_type = root::octave_scalar_map;
    pub type octave_map_const_iterator = root::octave_fields_const_iterator;
    pub type octave_map_iterator = root::octave_map_const_iterator;
    extern "C" {
        #[link_name =
              "_ZNK10octave_map8getfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_map_getfield(this: *const root::octave_map,
                                   key: *const root::std::string)
         -> root::Cell;
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map8setfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK4Cell"]
        pub fn octave_map_setfield(this: *mut root::octave_map,
                                   key: *const root::std::string,
                                   val: *const root::Cell);
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map7rmfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_map_rmfield(this: *mut root::octave_map,
                                  key: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map11orderfieldsEv"]
        pub fn octave_map_orderfields(this: *const root::octave_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map11orderfieldsER5ArrayIiE"]
        pub fn octave_map_orderfields1(this: *const root::octave_map,
                                       perm: *mut root::Array)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map11orderfieldsERKS_R5ArrayIiE"]
        pub fn octave_map_orderfields2(this: *const root::octave_map,
                                       other: *const root::octave_map,
                                       perm: *mut root::Array)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name =
              "_ZNK10octave_map8contentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_map_contents(this: *const root::octave_map,
                                   k: *const root::std::string) -> root::Cell;
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map8contentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_map_contents1(this: *mut root::octave_map,
                                    k: *const root::std::string)
         -> *mut root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map9checkelemEi"]
        pub fn octave_map_checkelem(this: *const root::octave_map,
                                    n: root::octave_idx_type)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map9checkelemEii"]
        pub fn octave_map_checkelem1(this: *const root::octave_map,
                                     i: root::octave_idx_type,
                                     j: root::octave_idx_type)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map9checkelemERK5ArrayIiE"]
        pub fn octave_map_checkelem2(this: *const root::octave_map,
                                     ra_idx: *const root::Array)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map7squeezeEv"]
        pub fn octave_map_squeeze(this: *const root::octave_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map7permuteERK5ArrayIiEb"]
        pub fn octave_map_permute(this: *const root::octave_map,
                                  vec: *const root::Array, inv: bool)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map9transposeEv"]
        pub fn octave_map_transpose(this: *const root::octave_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map7reshapeERK10dim_vector"]
        pub fn octave_map_reshape(this: *const root::octave_map,
                                  dv: *const root::dim_vector)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6resizeERK10dim_vectorb"]
        pub fn octave_map_resize(this: *mut root::octave_map,
                                 dv: *const root::dim_vector, fill: bool);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map3catEiiPK17octave_scalar_map"]
        pub fn octave_map_cat(dim: ::std::os::raw::c_int,
                              n: root::octave_idx_type,
                              map_list: *const root::octave_scalar_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZN10octave_map3catEiiPKS_"]
        pub fn octave_map_cat1(dim: ::std::os::raw::c_int,
                               n: root::octave_idx_type,
                               map_list: *const root::octave_map)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map5indexERK10idx_vectorb"]
        pub fn octave_map_index(this: *const root::octave_map,
                                i: *const root::idx_vector, resize_ok: bool)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map5indexERK10idx_vectorS2_b"]
        pub fn octave_map_index1(this: *const root::octave_map,
                                 i: *const root::idx_vector,
                                 j: *const root::idx_vector, resize_ok: bool)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map5indexERK5ArrayI10idx_vectorEb"]
        pub fn octave_map_index2(this: *const root::octave_map,
                                 ia: *const root::Array, resize_ok: bool)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map5indexERK17octave_value_listb"]
        pub fn octave_map_index3(this: *const root::octave_map,
                                 arg1: *const root::octave_value_list,
                                 resize_ok: bool) -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map6columnEi"]
        pub fn octave_map_column(this: *const root::octave_map,
                                 k: root::octave_idx_type)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map4pageEi"]
        pub fn octave_map_page(this: *const root::octave_map,
                               k: root::octave_idx_type) -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6assignERK10idx_vectorRKS_"]
        pub fn octave_map_assign(this: *mut root::octave_map,
                                 i: *const root::idx_vector,
                                 rhs: *const root::octave_map);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6assignERK10idx_vectorS2_RKS_"]
        pub fn octave_map_assign1(this: *mut root::octave_map,
                                  i: *const root::idx_vector,
                                  j: *const root::idx_vector,
                                  rhs: *const root::octave_map);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6assignERK5ArrayI10idx_vectorERKS_"]
        pub fn octave_map_assign2(this: *mut root::octave_map,
                                  ia: *const root::Array,
                                  rhs: *const root::octave_map);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6assignERK17octave_value_listRKS_"]
        pub fn octave_map_assign3(this: *mut root::octave_map,
                                  arg1: *const root::octave_value_list,
                                  rhs: *const root::octave_map);
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map6assignERK17octave_value_listRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK4Cell"]
        pub fn octave_map_assign4(this: *mut root::octave_map,
                                  idx: *const root::octave_value_list,
                                  k: *const root::std::string,
                                  rhs: *const root::Cell);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map15delete_elementsERK10idx_vector"]
        pub fn octave_map_delete_elements(this: *mut root::octave_map,
                                          i: *const root::idx_vector);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map15delete_elementsEiRK10idx_vector"]
        pub fn octave_map_delete_elements1(this: *mut root::octave_map,
                                           dim: ::std::os::raw::c_int,
                                           i: *const root::idx_vector);
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map15delete_elementsERK5ArrayI10idx_vectorE"]
        pub fn octave_map_delete_elements2(this: *mut root::octave_map,
                                           ia: *const root::Array);
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map15delete_elementsERK17octave_value_list"]
        pub fn octave_map_delete_elements3(this: *mut root::octave_map,
                                           arg1:
                                               *const root::octave_value_list);
    }
    extern "C" {
        #[link_name = "_ZN10octave_map6concatERKS_RK5ArrayIiE"]
        pub fn octave_map_concat(this: *mut root::octave_map,
                                 rb: *const root::octave_map,
                                 ra_idx: *const root::Array)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK10octave_map17fast_elem_extractEi"]
        pub fn octave_map_fast_elem_extract(this: *const root::octave_map,
                                            n: root::octave_idx_type)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name =
              "_ZN10octave_map16fast_elem_insertEiRK17octave_scalar_map"]
        pub fn octave_map_fast_elem_insert(this: *mut root::octave_map,
                                           n: root::octave_idx_type,
                                           rhs:
                                               *const root::octave_scalar_map)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN10octave_mapC1ERK17octave_scalar_map"]
        pub fn octave_map_octave_map(this: *mut root::octave_map,
                                     m: *const root::octave_scalar_map);
    }
    impl octave_map {
        #[inline]
        pub unsafe fn getfield(&self, key: *const root::std::string)
         -> root::Cell {
            octave_map_getfield(self, key)
        }
        #[inline]
        pub unsafe fn setfield(&mut self, key: *const root::std::string,
                               val: *const root::Cell) {
            octave_map_setfield(self, key, val)
        }
        #[inline]
        pub unsafe fn rmfield(&mut self, key: *const root::std::string) {
            octave_map_rmfield(self, key)
        }
        #[inline]
        pub unsafe fn orderfields(&self) -> root::octave_map {
            octave_map_orderfields(self)
        }
        #[inline]
        pub unsafe fn orderfields1(&self, perm: *mut root::Array)
         -> root::octave_map {
            octave_map_orderfields1(self, perm)
        }
        #[inline]
        pub unsafe fn orderfields2(&self, other: *const root::octave_map,
                                   perm: *mut root::Array)
         -> root::octave_map {
            octave_map_orderfields2(self, other, perm)
        }
        #[inline]
        pub unsafe fn contents(&self, k: *const root::std::string)
         -> root::Cell {
            octave_map_contents(self, k)
        }
        #[inline]
        pub unsafe fn contents1(&mut self, k: *const root::std::string)
         -> *mut root::Cell {
            octave_map_contents1(self, k)
        }
        #[inline]
        pub unsafe fn checkelem(&self, n: root::octave_idx_type)
         -> root::octave_scalar_map {
            octave_map_checkelem(self, n)
        }
        #[inline]
        pub unsafe fn checkelem1(&self, i: root::octave_idx_type,
                                 j: root::octave_idx_type)
         -> root::octave_scalar_map {
            octave_map_checkelem1(self, i, j)
        }
        #[inline]
        pub unsafe fn checkelem2(&self, ra_idx: *const root::Array)
         -> root::octave_scalar_map {
            octave_map_checkelem2(self, ra_idx)
        }
        #[inline]
        pub unsafe fn squeeze(&self) -> root::octave_map {
            octave_map_squeeze(self)
        }
        #[inline]
        pub unsafe fn permute(&self, vec: *const root::Array, inv: bool)
         -> root::octave_map {
            octave_map_permute(self, vec, inv)
        }
        #[inline]
        pub unsafe fn transpose(&self) -> root::octave_map {
            octave_map_transpose(self)
        }
        #[inline]
        pub unsafe fn reshape(&self, dv: *const root::dim_vector)
         -> root::octave_map {
            octave_map_reshape(self, dv)
        }
        #[inline]
        pub unsafe fn resize(&mut self, dv: *const root::dim_vector,
                             fill: bool) {
            octave_map_resize(self, dv, fill)
        }
        #[inline]
        pub unsafe fn cat(dim: ::std::os::raw::c_int,
                          n: root::octave_idx_type,
                          map_list: *const root::octave_scalar_map)
         -> root::octave_map {
            octave_map_cat(dim, n, map_list)
        }
        #[inline]
        pub unsafe fn cat1(dim: ::std::os::raw::c_int,
                           n: root::octave_idx_type,
                           map_list: *const root::octave_map)
         -> root::octave_map {
            octave_map_cat1(dim, n, map_list)
        }
        #[inline]
        pub unsafe fn index(&self, i: *const root::idx_vector,
                            resize_ok: bool) -> root::octave_map {
            octave_map_index(self, i, resize_ok)
        }
        #[inline]
        pub unsafe fn index1(&self, i: *const root::idx_vector,
                             j: *const root::idx_vector, resize_ok: bool)
         -> root::octave_map {
            octave_map_index1(self, i, j, resize_ok)
        }
        #[inline]
        pub unsafe fn index2(&self, ia: *const root::Array, resize_ok: bool)
         -> root::octave_map {
            octave_map_index2(self, ia, resize_ok)
        }
        #[inline]
        pub unsafe fn index3(&self, arg1: *const root::octave_value_list,
                             resize_ok: bool) -> root::octave_map {
            octave_map_index3(self, arg1, resize_ok)
        }
        #[inline]
        pub unsafe fn column(&self, k: root::octave_idx_type)
         -> root::octave_map {
            octave_map_column(self, k)
        }
        #[inline]
        pub unsafe fn page(&self, k: root::octave_idx_type)
         -> root::octave_map {
            octave_map_page(self, k)
        }
        #[inline]
        pub unsafe fn assign(&mut self, i: *const root::idx_vector,
                             rhs: *const root::octave_map) {
            octave_map_assign(self, i, rhs)
        }
        #[inline]
        pub unsafe fn assign1(&mut self, i: *const root::idx_vector,
                              j: *const root::idx_vector,
                              rhs: *const root::octave_map) {
            octave_map_assign1(self, i, j, rhs)
        }
        #[inline]
        pub unsafe fn assign2(&mut self, ia: *const root::Array,
                              rhs: *const root::octave_map) {
            octave_map_assign2(self, ia, rhs)
        }
        #[inline]
        pub unsafe fn assign3(&mut self, arg1: *const root::octave_value_list,
                              rhs: *const root::octave_map) {
            octave_map_assign3(self, arg1, rhs)
        }
        #[inline]
        pub unsafe fn assign4(&mut self, idx: *const root::octave_value_list,
                              k: *const root::std::string,
                              rhs: *const root::Cell) {
            octave_map_assign4(self, idx, k, rhs)
        }
        #[inline]
        pub unsafe fn delete_elements(&mut self, i: *const root::idx_vector) {
            octave_map_delete_elements(self, i)
        }
        #[inline]
        pub unsafe fn delete_elements1(&mut self, dim: ::std::os::raw::c_int,
                                       i: *const root::idx_vector) {
            octave_map_delete_elements1(self, dim, i)
        }
        #[inline]
        pub unsafe fn delete_elements2(&mut self, ia: *const root::Array) {
            octave_map_delete_elements2(self, ia)
        }
        #[inline]
        pub unsafe fn delete_elements3(&mut self,
                                       arg1: *const root::octave_value_list) {
            octave_map_delete_elements3(self, arg1)
        }
        #[inline]
        pub unsafe fn concat(&mut self, rb: *const root::octave_map,
                             ra_idx: *const root::Array) -> root::octave_map {
            octave_map_concat(self, rb, ra_idx)
        }
        #[inline]
        pub unsafe fn fast_elem_extract(&self, n: root::octave_idx_type)
         -> root::octave_scalar_map {
            octave_map_fast_elem_extract(self, n)
        }
        #[inline]
        pub unsafe fn fast_elem_insert(&mut self, n: root::octave_idx_type,
                                       rhs: *const root::octave_scalar_map)
         -> bool {
            octave_map_fast_elem_insert(self, n, rhs)
        }
        #[inline]
        pub unsafe fn new(m: *const root::octave_scalar_map) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_map_octave_map(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_scalar_map {
        pub xkeys: root::octave_fields,
        pub xvals: root::std::vector,
    }
    pub type octave_scalar_map_const_iterator =
        root::octave_fields_const_iterator;
    pub type octave_scalar_map_iterator =
        root::octave_scalar_map_const_iterator;
    extern "C" {
        #[link_name =
              "_ZNK17octave_scalar_map8getfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_scalar_map_getfield(this:
                                              *const root::octave_scalar_map,
                                          key: *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_scalar_map8setfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK12octave_value"]
        pub fn octave_scalar_map_setfield(this: *mut root::octave_scalar_map,
                                          key: *const root::std::string,
                                          val: *const root::octave_value);
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_scalar_map7rmfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_scalar_map_rmfield(this: *mut root::octave_scalar_map,
                                         key: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_scalar_map11orderfieldsEv"]
        pub fn octave_scalar_map_orderfields(this:
                                                 *const root::octave_scalar_map)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_scalar_map11orderfieldsER5ArrayIiE"]
        pub fn octave_scalar_map_orderfields1(this:
                                                  *const root::octave_scalar_map,
                                              perm: *mut root::Array)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_scalar_map11orderfieldsERKS_R5ArrayIiE"]
        pub fn octave_scalar_map_orderfields2(this:
                                                  *const root::octave_scalar_map,
                                              other:
                                                  *const root::octave_scalar_map,
                                              perm: *mut root::Array)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_scalar_map8contentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_scalar_map_contents(this:
                                              *const root::octave_scalar_map,
                                          k: *const root::std::string)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_scalar_map8contentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_scalar_map_contents1(this: *mut root::octave_scalar_map,
                                           k: *const root::std::string)
         -> *mut root::octave_value;
    }
    impl octave_scalar_map {
        #[inline]
        pub unsafe fn getfield(&self, key: *const root::std::string)
         -> root::octave_value {
            octave_scalar_map_getfield(self, key)
        }
        #[inline]
        pub unsafe fn setfield(&mut self, key: *const root::std::string,
                               val: *const root::octave_value) {
            octave_scalar_map_setfield(self, key, val)
        }
        #[inline]
        pub unsafe fn rmfield(&mut self, key: *const root::std::string) {
            octave_scalar_map_rmfield(self, key)
        }
        #[inline]
        pub unsafe fn orderfields(&self) -> root::octave_scalar_map {
            octave_scalar_map_orderfields(self)
        }
        #[inline]
        pub unsafe fn orderfields1(&self, perm: *mut root::Array)
         -> root::octave_scalar_map {
            octave_scalar_map_orderfields1(self, perm)
        }
        #[inline]
        pub unsafe fn orderfields2(&self,
                                   other: *const root::octave_scalar_map,
                                   perm: *mut root::Array)
         -> root::octave_scalar_map {
            octave_scalar_map_orderfields2(self, other, perm)
        }
        #[inline]
        pub unsafe fn contents(&self, k: *const root::std::string)
         -> root::octave_value {
            octave_scalar_map_contents(self, k)
        }
        #[inline]
        pub unsafe fn contents1(&mut self, k: *const root::std::string)
         -> *mut root::octave_value {
            octave_scalar_map_contents1(self, k)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_stream {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_function {
        pub _base: root::octave_base_value,
        pub relative: bool,
        pub locked: bool,
        pub private_function: bool,
        pub xdispatch_class: root::std::string,
        pub xpackage_name: root::std::string,
        pub my_name: root::std::string,
        pub my_dir_name: root::std::string,
        pub doc: root::std::string,
    }
    extern "C" {
        #[link_name = "_ZNK15octave_function5cloneEv"]
        pub fn octave_function_clone(this: *mut ::std::os::raw::c_void)
         -> *mut root::octave_base_value;
    }
    extern "C" {
        #[link_name = "_ZNK15octave_function11empty_cloneEv"]
        pub fn octave_function_empty_clone(this: *mut ::std::os::raw::c_void)
         -> *mut root::octave_base_value;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_user_function {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_fcn_handle {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_fcn_inline {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_value_list {
        pub data: root::Array,
        pub names: root::string_vector,
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list7prependERK12octave_value"]
        pub fn octave_value_list_prepend(this: *mut root::octave_value_list,
                                         val: *const root::octave_value)
         -> *mut root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list6appendERK12octave_value"]
        pub fn octave_value_list_append(this: *mut root::octave_value_list,
                                        val: *const root::octave_value)
         -> *mut root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list6appendERKS_"]
        pub fn octave_value_list_append1(this: *mut root::octave_value_list,
                                         lst: *const root::octave_value_list)
         -> *mut root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list7reverseEv"]
        pub fn octave_value_list_reverse(this: *mut root::octave_value_list)
         -> *mut root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list6spliceEiiRKS_"]
        pub fn octave_value_list_splice(this: *const root::octave_value_list,
                                        offset: root::octave_idx_type,
                                        len: root::octave_idx_type,
                                        lst: *const root::octave_value_list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list13all_strings_pEv"]
        pub fn octave_value_list_all_strings_p(this:
                                                   *const root::octave_value_list)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list11all_scalarsEv"]
        pub fn octave_value_list_all_scalars(this:
                                                 *const root::octave_value_list)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list8any_cellEv"]
        pub fn octave_value_list_any_cell(this:
                                              *const root::octave_value_list)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_value_list15has_magic_colonEv"]
        pub fn octave_value_list_has_magic_colon(this:
                                                     *const root::octave_value_list)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_value_list9make_argvERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_value_list_make_argv(this:
                                               *const root::octave_value_list,
                                           arg1: *const root::std::string)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZN17octave_value_list20make_storable_valuesEv"]
        pub fn octave_value_list_make_storable_values(this:
                                                          *mut root::octave_value_list);
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_value_listC1ERKNSt7__cxx114listIS_SaIS_EEE"]
        pub fn octave_value_list_octave_value_list(this:
                                                       *mut root::octave_value_list,
                                                   arg1:
                                                       *const root::std::list);
    }
    impl octave_value_list {
        #[inline]
        pub unsafe fn prepend(&mut self, val: *const root::octave_value)
         -> *mut root::octave_value_list {
            octave_value_list_prepend(self, val)
        }
        #[inline]
        pub unsafe fn append(&mut self, val: *const root::octave_value)
         -> *mut root::octave_value_list {
            octave_value_list_append(self, val)
        }
        #[inline]
        pub unsafe fn append1(&mut self, lst: *const root::octave_value_list)
         -> *mut root::octave_value_list {
            octave_value_list_append1(self, lst)
        }
        #[inline]
        pub unsafe fn reverse(&mut self) -> *mut root::octave_value_list {
            octave_value_list_reverse(self)
        }
        #[inline]
        pub unsafe fn splice(&self, offset: root::octave_idx_type,
                             len: root::octave_idx_type,
                             lst: *const root::octave_value_list)
         -> root::octave_value_list {
            octave_value_list_splice(self, offset, len, lst)
        }
        #[inline]
        pub unsafe fn all_strings_p(&self) -> bool {
            octave_value_list_all_strings_p(self)
        }
        #[inline]
        pub unsafe fn all_scalars(&self) -> bool {
            octave_value_list_all_scalars(self)
        }
        #[inline]
        pub unsafe fn any_cell(&self) -> bool {
            octave_value_list_any_cell(self)
        }
        #[inline]
        pub unsafe fn has_magic_colon(&self) -> bool {
            octave_value_list_has_magic_colon(self)
        }
        #[inline]
        pub unsafe fn make_argv(&self, arg1: *const root::std::string)
         -> root::string_vector {
            octave_value_list_make_argv(self, arg1)
        }
        #[inline]
        pub unsafe fn make_storable_values(&mut self) {
            octave_value_list_make_storable_values(self)
        }
        #[inline]
        pub unsafe fn new(arg1: *const root::std::list) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_list_octave_value_list(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_lvalue {
        _unused: [u8; 0],
    }
    pub type octave_hdf5_id = i64;
    pub type octave_hdf5_err = ::std::os::raw::c_int;
    #[repr(C)]
    pub struct octave_value__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_value {
        pub vtable_: *const octave_value__bindgen_vtable,
        pub rep: *mut root::octave_base_value,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_unary_op {
        op_not = 0,
        op_uplus = 1,
        op_uminus = 2,
        op_transpose = 3,
        op_hermitian = 4,
        op_incr = 5,
        op_decr = 6,
        num_unary_ops = 7,
        unknown_unary_op = 8,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_binary_op {
        op_add = 0,
        op_sub = 1,
        op_mul = 2,
        op_div = 3,
        op_pow = 4,
        op_ldiv = 5,
        op_lt = 6,
        op_le = 7,
        op_eq = 8,
        op_ge = 9,
        op_gt = 10,
        op_ne = 11,
        op_el_mul = 12,
        op_el_div = 13,
        op_el_pow = 14,
        op_el_ldiv = 15,
        op_el_and = 16,
        op_el_or = 17,
        op_struct_ref = 18,
        num_binary_ops = 19,
        unknown_binary_op = 20,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_compound_binary_op {
        op_trans_mul = 0,
        op_mul_trans = 1,
        op_herm_mul = 2,
        op_mul_herm = 3,
        op_trans_ldiv = 4,
        op_herm_ldiv = 5,
        op_el_not_and = 6,
        op_el_not_or = 7,
        op_el_and_not = 8,
        op_el_or_not = 9,
        num_compound_binary_ops = 10,
        unknown_compound_binary_op = 11,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_assign_op {
        op_asn_eq = 0,
        op_add_eq = 1,
        op_sub_eq = 2,
        op_mul_eq = 3,
        op_div_eq = 4,
        op_ldiv_eq = 5,
        op_pow_eq = 6,
        op_el_mul_eq = 7,
        op_el_div_eq = 8,
        op_el_ldiv_eq = 9,
        op_el_pow_eq = 10,
        op_el_and_eq = 11,
        op_el_or_eq = 12,
        num_assign_ops = 13,
        unknown_assign_op = 14,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_value_magic_colon { magic_colon_t = 0, }
    extern "C" {
        #[link_name =
              "_ZN12octave_value22assign_op_to_binary_opENS_9assign_opE"]
        pub fn octave_value_assign_op_to_binary_op(arg1:
                                                       root::octave_value_assign_op)
         -> root::octave_value_binary_op;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value22binary_op_to_assign_opENS_9binary_opE"]
        pub fn octave_value_binary_op_to_assign_op(arg1:
                                                       root::octave_value_binary_op)
         -> root::octave_value_assign_op;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value18unary_op_as_stringB5cxx11ENS_8unary_opE"]
        pub fn octave_value_unary_op_as_string(arg1:
                                                   root::octave_value_unary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value17unary_op_fcn_nameB5cxx11ENS_8unary_opE"]
        pub fn octave_value_unary_op_fcn_name(arg1:
                                                  root::octave_value_unary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value19binary_op_as_stringB5cxx11ENS_9binary_opE"]
        pub fn octave_value_binary_op_as_string(arg1:
                                                    root::octave_value_binary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value18binary_op_fcn_nameB5cxx11ENS_9binary_opE"]
        pub fn octave_value_binary_op_fcn_name(arg1:
                                                   root::octave_value_binary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value18binary_op_fcn_nameB5cxx11ENS_18compound_binary_opE"]
        pub fn octave_value_binary_op_fcn_name1(arg1:
                                                    root::octave_value_compound_binary_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value19assign_op_as_stringB5cxx11ENS_9assign_opE"]
        pub fn octave_value_assign_op_as_string(arg1:
                                                    root::octave_value_assign_op)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value10empty_convERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS_"]
        pub fn octave_value_empty_conv(type_: *const root::std::string,
                                       rhs: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value5cloneEv"]
        pub fn octave_value_clone(this: *const root::octave_value)
         -> *mut root::octave_base_value;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value12maybe_mutateEv"]
        pub fn octave_value_maybe_mutate(this: *mut root::octave_value);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value14single_subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK17octave_value_list"]
        pub fn octave_value_single_subsref(this: *mut root::octave_value,
                                           type_: *const root::std::string,
                                           idx:
                                               *const root::octave_value_list)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value7subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEi"]
        pub fn octave_value_subsref(this: *mut root::octave_value,
                                    type_: *const root::std::string,
                                    idx: *const root::std::list,
                                    nargout: ::std::os::raw::c_int)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value7subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEiPKNS8_I13octave_lvalueSaISE_EEE"]
        pub fn octave_value_subsref1(this: *mut root::octave_value,
                                     type_: *const root::std::string,
                                     idx: *const root::std::list,
                                     nargout: ::std::os::raw::c_int,
                                     lvalue_list: *const root::std::list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value12next_subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEm"]
        pub fn octave_value_next_subsref(this: *mut root::octave_value,
                                         type_: *const root::std::string,
                                         idx: *const root::std::list,
                                         skip: usize) -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value12next_subsrefEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEm"]
        pub fn octave_value_next_subsref1(this: *mut root::octave_value,
                                          nargout: ::std::os::raw::c_int,
                                          type_: *const root::std::string,
                                          idx: *const root::std::list,
                                          skip: usize)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value12next_subsrefEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEPKNS8_I13octave_lvalueSaISE_EEEm"]
        pub fn octave_value_next_subsref2(this: *mut root::octave_value,
                                          nargout: ::std::os::raw::c_int,
                                          type_: *const root::std::string,
                                          idx: *const root::std::list,
                                          lvalue_list: *const root::std::list,
                                          skip: usize)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value12next_subsrefEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEm"]
        pub fn octave_value_next_subsref3(this: *mut root::octave_value,
                                          auto_add: bool,
                                          type_: *const root::std::string,
                                          idx: *const root::std::list,
                                          skip: usize) -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value17do_multi_index_opEiRK17octave_value_list"]
        pub fn octave_value_do_multi_index_op(this: *mut root::octave_value,
                                              nargout: ::std::os::raw::c_int,
                                              idx:
                                                  *const root::octave_value_list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value17do_multi_index_opEiRK17octave_value_listPKNSt7__cxx114listI13octave_lvalueSaIS5_EEE"]
        pub fn octave_value_do_multi_index_op1(this: *mut root::octave_value,
                                               nargout: ::std::os::raw::c_int,
                                               idx:
                                                   *const root::octave_value_list,
                                               lvalue_list:
                                                   *const root::std::list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value8subsasgnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEERKS_"]
        pub fn octave_value_subsasgn(this: *mut root::octave_value,
                                     type_: *const root::std::string,
                                     idx: *const root::std::list,
                                     rhs: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value14undef_subsasgnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEERKS_"]
        pub fn octave_value_undef_subsasgn(this: *mut root::octave_value,
                                           type_: *const root::std::string,
                                           idx: *const root::std::list,
                                           rhs: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value6assignENS_9assign_opERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS1_4listI17octave_value_listSaISA_EEERKS_"]
        pub fn octave_value_assign(this: *mut root::octave_value,
                                   op: root::octave_value_assign_op,
                                   type_: *const root::std::string,
                                   idx: *const root::std::list,
                                   rhs: *const root::octave_value)
         -> *mut root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value6assignENS_9assign_opERKS_"]
        pub fn octave_value_assign1(this: *mut root::octave_value,
                                    arg1: root::octave_value_assign_op,
                                    rhs: *const root::octave_value)
         -> *mut root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value6lengthEv"]
        pub fn octave_value_length(this: *const root::octave_value)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value8is_equalERKS_"]
        pub fn octave_value_is_equal(this: *const root::octave_value,
                                     arg1: *const root::octave_value) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14idx_type_valueEbb"]
        pub fn octave_value_idx_type_value(this: *const root::octave_value,
                                           req_int: bool, frc_str_conv: bool)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10cell_valueEv"]
        pub fn octave_value_cell_value(this: *const root::octave_value)
         -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value9map_valueEv"]
        pub fn octave_value_map_value(this: *const root::octave_value)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16scalar_map_valueEv"]
        pub fn octave_value_scalar_map_value(this: *const root::octave_value)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14function_valueEb"]
        pub fn octave_value_function_value(this: *const root::octave_value,
                                           silent: bool)
         -> *mut root::octave_function;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19user_function_valueEb"]
        pub fn octave_value_user_function_value(this:
                                                    *const root::octave_value,
                                                silent: bool)
         -> *mut root::octave_user_function;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17user_script_valueEb"]
        pub fn octave_value_user_script_value(this: *const root::octave_value,
                                              silent: bool)
         -> *mut root::octave_user_script;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value15user_code_valueEb"]
        pub fn octave_value_user_code_value(this: *const root::octave_value,
                                            silent: bool)
         -> *mut root::octave_user_code;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16fcn_handle_valueEb"]
        pub fn octave_value_fcn_handle_value(this: *const root::octave_value,
                                             silent: bool)
         -> *mut root::octave_fcn_handle;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16fcn_inline_valueEb"]
        pub fn octave_value_fcn_inline_value(this: *const root::octave_value,
                                             silent: bool)
         -> *mut root::octave_fcn_inline;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10list_valueEv"]
        pub fn octave_value_list_value(this: *const root::octave_value)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19column_vector_valueEbb"]
        pub fn octave_value_column_vector_value(this:
                                                    *const root::octave_value,
                                                frc_str_conv: bool,
                                                frc_vec_conv: bool)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value27complex_column_vector_valueEbb"]
        pub fn octave_value_complex_column_vector_value(this:
                                                            *const root::octave_value,
                                                        frc_str_conv: bool,
                                                        frc_vec_conv: bool)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16row_vector_valueEbb"]
        pub fn octave_value_row_vector_value(this: *const root::octave_value,
                                             frc_str_conv: bool,
                                             frc_vec_conv: bool)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value24complex_row_vector_valueEbb"]
        pub fn octave_value_complex_row_vector_value(this:
                                                         *const root::octave_value,
                                                     frc_str_conv: bool,
                                                     frc_vec_conv: bool)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value25float_column_vector_valueEbb"]
        pub fn octave_value_float_column_vector_value(this:
                                                          *const root::octave_value,
                                                      frc_str_conv: bool,
                                                      frc_vec_conv: bool)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value33float_complex_column_vector_valueEbb"]
        pub fn octave_value_float_complex_column_vector_value(this:
                                                                  *const root::octave_value,
                                                              frc_str_conv:
                                                                  bool,
                                                              frc_vec_conv:
                                                                  bool)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value22float_row_vector_valueEbb"]
        pub fn octave_value_float_row_vector_value(this:
                                                       *const root::octave_value,
                                                   frc_str_conv: bool,
                                                   frc_vec_conv: bool)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value30float_complex_row_vector_valueEbb"]
        pub fn octave_value_float_complex_row_vector_value(this:
                                                               *const root::octave_value,
                                                           frc_str_conv: bool,
                                                           frc_vec_conv: bool)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16int_vector_valueEbbb"]
        pub fn octave_value_int_vector_value(this: *const root::octave_value,
                                             req_int: bool,
                                             frc_str_conv: bool,
                                             frc_vec_conv: bool)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value28octave_idx_type_vector_valueEbbb"]
        pub fn octave_value_octave_idx_type_vector_value(this:
                                                             *const root::octave_value,
                                                         req_int: bool,
                                                         frc_str_conv: bool,
                                                         frc_vec_conv: bool)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12vector_valueEbb"]
        pub fn octave_value_vector_value(this: *const root::octave_value,
                                         frc_str_conv: bool,
                                         frc_vec_conv: bool) -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20complex_vector_valueEbb"]
        pub fn octave_value_complex_vector_value(this:
                                                     *const root::octave_value,
                                                 frc_str_conv: bool,
                                                 frc_vec_conv: bool)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18float_vector_valueEbb"]
        pub fn octave_value_float_vector_value(this:
                                                   *const root::octave_value,
                                               frc_str_conv: bool,
                                               frc_vec_conv: bool)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value26float_complex_vector_valueEbb"]
        pub fn octave_value_float_complex_vector_value(this:
                                                           *const root::octave_value,
                                                       frc_str_conv: bool,
                                                       frc_vec_conv: bool)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xshort_valueEPKcz"]
        pub fn octave_value_xshort_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_short;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xushort_valueEPKcz"]
        pub fn octave_value_xushort_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_ushort;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10xint_valueEPKcz"]
        pub fn octave_value_xint_value(this: *const root::octave_value,
                                       fmt:
                                           *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xuint_valueEPKcz"]
        pub fn octave_value_xuint_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_uint;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xnint_valueEPKcz"]
        pub fn octave_value_xnint_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xlong_valueEPKcz"]
        pub fn octave_value_xlong_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xulong_valueEPKcz"]
        pub fn octave_value_xulong_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xint64_valueEPKcz"]
        pub fn octave_value_xint64_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> i64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xuint64_valueEPKcz"]
        pub fn octave_value_xuint64_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> u64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value15xidx_type_valueEPKcz"]
        pub fn octave_value_xidx_type_value(this: *const root::octave_value,
                                            fmt:
                                                *const ::std::os::raw::c_char, ...)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xdouble_valueEPKcz"]
        pub fn octave_value_xdouble_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xfloat_valueEPKcz"]
        pub fn octave_value_xfloat_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xscalar_valueEPKcz"]
        pub fn octave_value_xscalar_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xfloat_scalar_valueEPKcz"]
        pub fn octave_value_xfloat_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xmatrix_valueEPKcz"]
        pub fn octave_value_xmatrix_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xfloat_matrix_valueEPKcz"]
        pub fn octave_value_xfloat_matrix_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xarray_valueEPKcz"]
        pub fn octave_value_xarray_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xfloat_array_valueEPKcz"]
        pub fn octave_value_xfloat_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14xcomplex_valueEPKcz"]
        pub fn octave_value_xcomplex_value(this: *const root::octave_value,
                                           fmt:
                                               *const ::std::os::raw::c_char, ...)
         -> root::Complex;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xfloat_complex_valueEPKcz"]
        pub fn octave_value_xfloat_complex_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::FloatComplex;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value21xcomplex_matrix_valueEPKcz"]
        pub fn octave_value_xcomplex_matrix_value(this:
                                                      *const root::octave_value,
                                                  fmt:
                                                      *const ::std::os::raw::c_char, ...)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value27xfloat_complex_matrix_valueEPKcz"]
        pub fn octave_value_xfloat_complex_matrix_value(this:
                                                            *const root::octave_value,
                                                        fmt:
                                                            *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xcomplex_array_valueEPKcz"]
        pub fn octave_value_xcomplex_array_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value26xfloat_complex_array_valueEPKcz"]
        pub fn octave_value_xfloat_complex_array_value(this:
                                                           *const root::octave_value,
                                                       fmt:
                                                           *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xbool_valueEPKcz"]
        pub fn octave_value_xbool_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xbool_matrix_valueEPKcz"]
        pub fn octave_value_xbool_matrix_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xbool_array_valueEPKcz"]
        pub fn octave_value_xbool_array_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xchar_matrix_valueEPKcz"]
        pub fn octave_value_xchar_matrix_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::charMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xchar_array_valueEPKcz"]
        pub fn octave_value_xchar_array_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xsparse_matrix_valueEPKcz"]
        pub fn octave_value_xsparse_matrix_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value28xsparse_complex_matrix_valueEPKcz"]
        pub fn octave_value_xsparse_complex_matrix_value(this:
                                                             *const root::octave_value,
                                                         fmt:
                                                             *const ::std::os::raw::c_char, ...)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value25xsparse_bool_matrix_valueEPKcz"]
        pub fn octave_value_xsparse_bool_matrix_value(this:
                                                          *const root::octave_value,
                                                      fmt:
                                                          *const ::std::os::raw::c_char, ...)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xdiag_matrix_valueEPKcz"]
        pub fn octave_value_xdiag_matrix_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value24xfloat_diag_matrix_valueEPKcz"]
        pub fn octave_value_xfloat_diag_matrix_value(this:
                                                         *const root::octave_value,
                                                     fmt:
                                                         *const ::std::os::raw::c_char, ...)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value26xcomplex_diag_matrix_valueEPKcz"]
        pub fn octave_value_xcomplex_diag_matrix_value(this:
                                                           *const root::octave_value,
                                                       fmt:
                                                           *const ::std::os::raw::c_char, ...)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value32xfloat_complex_diag_matrix_valueEPKcz"]
        pub fn octave_value_xfloat_complex_diag_matrix_value(this:
                                                                 *const root::octave_value,
                                                             fmt:
                                                                 *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xperm_matrix_valueEPKcz"]
        pub fn octave_value_xperm_matrix_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::PermMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xint8_scalar_valueEPKcz"]
        pub fn octave_value_xint8_scalar_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::octave_int8;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xint16_scalar_valueEPKcz"]
        pub fn octave_value_xint16_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::octave_int16;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xint32_scalar_valueEPKcz"]
        pub fn octave_value_xint32_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::octave_int32;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xint64_scalar_valueEPKcz"]
        pub fn octave_value_xint64_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::octave_int64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xuint8_scalar_valueEPKcz"]
        pub fn octave_value_xuint8_scalar_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::octave_uint8;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xuint16_scalar_valueEPKcz"]
        pub fn octave_value_xuint16_scalar_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::octave_uint16;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xuint32_scalar_valueEPKcz"]
        pub fn octave_value_xuint32_scalar_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::octave_uint32;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xuint64_scalar_valueEPKcz"]
        pub fn octave_value_xuint64_scalar_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::octave_uint64;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xint8_array_valueEPKcz"]
        pub fn octave_value_xint8_array_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xint16_array_valueEPKcz"]
        pub fn octave_value_xint16_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xint32_array_valueEPKcz"]
        pub fn octave_value_xint32_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xint64_array_valueEPKcz"]
        pub fn octave_value_xint64_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xuint8_array_valueEPKcz"]
        pub fn octave_value_xuint8_array_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xuint16_array_valueEPKcz"]
        pub fn octave_value_xuint16_array_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xuint32_array_valueEPKcz"]
        pub fn octave_value_xuint32_array_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xuint64_array_valueEPKcz"]
        pub fn octave_value_xuint64_array_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xstring_valueB5cxx11EPKcz"]
        pub fn octave_value_xstring_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xstring_vector_valueEPKcz"]
        pub fn octave_value_xstring_vector_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xcell_valueEPKcz"]
        pub fn octave_value_xcell_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14xcellstr_valueB5cxx11EPKcz"]
        pub fn octave_value_xcellstr_value(this: *const root::octave_value,
                                           fmt:
                                               *const ::std::os::raw::c_char, ...)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value12xrange_valueEPKcz"]
        pub fn octave_value_xrange_value(this: *const root::octave_value,
                                         fmt:
                                             *const ::std::os::raw::c_char, ...)
         -> root::Range;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value10xmap_valueEPKcz"]
        pub fn octave_value_xmap_value(this: *const root::octave_value,
                                       fmt:
                                           *const ::std::os::raw::c_char, ...)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xscalar_map_valueEPKcz"]
        pub fn octave_value_xscalar_map_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xcolumn_vector_valueEPKcz"]
        pub fn octave_value_xcolumn_vector_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> root::ColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value28xcomplex_column_vector_valueEPKcz"]
        pub fn octave_value_xcomplex_column_vector_value(this:
                                                             *const root::octave_value,
                                                         fmt:
                                                             *const ::std::os::raw::c_char, ...)
         -> root::ComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xrow_vector_valueEPKcz"]
        pub fn octave_value_xrow_vector_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::RowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value25xcomplex_row_vector_valueEPKcz"]
        pub fn octave_value_xcomplex_row_vector_value(this:
                                                          *const root::octave_value,
                                                      fmt:
                                                          *const ::std::os::raw::c_char, ...)
         -> root::ComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value26xfloat_column_vector_valueEPKcz"]
        pub fn octave_value_xfloat_column_vector_value(this:
                                                           *const root::octave_value,
                                                       fmt:
                                                           *const ::std::os::raw::c_char, ...)
         -> root::FloatColumnVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value34xfloat_complex_column_vector_valueEPKcz"]
        pub fn octave_value_xfloat_complex_column_vector_value(this:
                                                                   *const root::octave_value,
                                                               fmt:
                                                                   *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexColumnVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value23xfloat_row_vector_valueEPKcz"]
        pub fn octave_value_xfloat_row_vector_value(this:
                                                        *const root::octave_value,
                                                    fmt:
                                                        *const ::std::os::raw::c_char, ...)
         -> root::FloatRowVector;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value31xfloat_complex_row_vector_valueEPKcz"]
        pub fn octave_value_xfloat_complex_row_vector_value(this:
                                                                *const root::octave_value,
                                                            fmt:
                                                                *const ::std::os::raw::c_char, ...)
         -> root::FloatComplexRowVector;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xint_vector_valueEPKcz"]
        pub fn octave_value_xint_vector_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> root::Array;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value29xoctave_idx_type_vector_valueEPKcz"]
        pub fn octave_value_xoctave_idx_type_vector_value(this:
                                                              *const root::octave_value,
                                                          fmt:
                                                              *const ::std::os::raw::c_char, ...)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value13xvector_valueEPKcz"]
        pub fn octave_value_xvector_value(this: *const root::octave_value,
                                          fmt:
                                              *const ::std::os::raw::c_char, ...)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value21xcomplex_vector_valueEPKcz"]
        pub fn octave_value_xcomplex_vector_value(this:
                                                      *const root::octave_value,
                                                  fmt:
                                                      *const ::std::os::raw::c_char, ...)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value19xfloat_vector_valueEPKcz"]
        pub fn octave_value_xfloat_vector_value(this:
                                                    *const root::octave_value,
                                                fmt:
                                                    *const ::std::os::raw::c_char, ...)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value27xfloat_complex_vector_valueEPKcz"]
        pub fn octave_value_xfloat_complex_vector_value(this:
                                                            *const root::octave_value,
                                                        fmt:
                                                            *const ::std::os::raw::c_char, ...)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value15xfunction_valueEPKcz"]
        pub fn octave_value_xfunction_value(this: *const root::octave_value,
                                            fmt:
                                                *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_function;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value20xuser_function_valueEPKcz"]
        pub fn octave_value_xuser_function_value(this:
                                                     *const root::octave_value,
                                                 fmt:
                                                     *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_user_function;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value18xuser_script_valueEPKcz"]
        pub fn octave_value_xuser_script_value(this:
                                                   *const root::octave_value,
                                               fmt:
                                                   *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_user_script;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value16xuser_code_valueEPKcz"]
        pub fn octave_value_xuser_code_value(this: *const root::octave_value,
                                             fmt:
                                                 *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_user_code;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xfcn_handle_valueEPKcz"]
        pub fn octave_value_xfcn_handle_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_fcn_handle;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value17xfcn_inline_valueEPKcz"]
        pub fn octave_value_xfcn_inline_value(this: *const root::octave_value,
                                              fmt:
                                                  *const ::std::os::raw::c_char, ...)
         -> *mut root::octave_fcn_inline;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value11xlist_valueEPKcz"]
        pub fn octave_value_xlist_value(this: *const root::octave_value,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK12octave_value14storable_valueEv"]
        pub fn octave_value_storable_value(this: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN12octave_value19make_storable_valueEv"]
        pub fn octave_value_make_storable_value(this:
                                                    *mut root::octave_value);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value21do_non_const_unary_opENS_8unary_opE"]
        pub fn octave_value_do_non_const_unary_op(this:
                                                      *mut root::octave_value,
                                                  op:
                                                      root::octave_value_unary_op)
         -> *mut root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_value21do_non_const_unary_opENS_8unary_opERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS1_4listI17octave_value_listSaISA_EEE"]
        pub fn octave_value_do_non_const_unary_op1(this:
                                                       *mut root::octave_value,
                                                   op:
                                                       root::octave_value_unary_op,
                                                   type_:
                                                       *const root::std::string,
                                                   idx:
                                                       *const root::std::list)
         -> *mut root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value10print_infoERSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_value_print_info(this: *const root::octave_value,
                                       os: *mut root::std::ostream,
                                       prefix: *const root::std::string);
    }
    extern "C" {
        #[link_name =
              "_ZNK12octave_value5writeER13octave_streamiN13oct_data_conv9data_typeEiN6octave9mach_info12float_formatE"]
        pub fn octave_value_write(this: *const root::octave_value,
                                  os: *mut root::octave_stream,
                                  block_size: ::std::os::raw::c_int,
                                  output_type: root::oct_data_conv_data_type,
                                  skip: ::std::os::raw::c_int,
                                  flt_fmt:
                                      root::octave::mach_info_float_format)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Es"]
        pub fn octave_value_octave_value(this: *mut root::octave_value,
                                         i: ::std::os::raw::c_short);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Et"]
        pub fn octave_value_octave_value1(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_ushort);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ei"]
        pub fn octave_value_octave_value2(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ej"]
        pub fn octave_value_octave_value3(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_uint);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1El"]
        pub fn octave_value_octave_value4(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_long);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Em"]
        pub fn octave_value_octave_value5(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_ulong);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ex"]
        pub fn octave_value_octave_value6(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_longlong);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ey"]
        pub fn octave_value_octave_value7(this: *mut root::octave_value,
                                          i: ::std::os::raw::c_ulonglong);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1EN6octave3sys4timeE"]
        pub fn octave_value_octave_value8(this: *mut root::octave_value,
                                          t: root::octave::sys::time);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ed"]
        pub fn octave_value_octave_value9(this: *mut root::octave_value,
                                          d: f64);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ef"]
        pub fn octave_value_octave_value10(this: *mut root::octave_value,
                                           d: f32);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIS_Eb"]
        pub fn octave_value_octave_value11(this: *mut root::octave_value,
                                           a: *const root::Array,
                                           is_cs_list: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK4Cellb"]
        pub fn octave_value_octave_value12(this: *mut root::octave_value,
                                           c: *const root::Cell,
                                           is_cs_list: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK6MatrixRK10MatrixType"]
        pub fn octave_value_octave_value13(this: *mut root::octave_value,
                                           m: *const root::Matrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK11FloatMatrixRK10MatrixType"]
        pub fn octave_value_octave_value14(this: *mut root::octave_value,
                                           m: *const root::FloatMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK7NDArray"]
        pub fn octave_value_octave_value15(this: *mut root::octave_value,
                                           nda: *const root::NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK12FloatNDArray"]
        pub fn octave_value_octave_value16(this: *mut root::octave_value,
                                           nda: *const root::FloatNDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIdE"]
        pub fn octave_value_octave_value17(this: *mut root::octave_value,
                                           m: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIfE"]
        pub fn octave_value_octave_value18(this: *mut root::octave_value,
                                           m: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagMatrix"]
        pub fn octave_value_octave_value19(this: *mut root::octave_value,
                                           d: *const root::DiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagArray2IdE"]
        pub fn octave_value_octave_value20(this: *mut root::octave_value,
                                           d: *const root::DiagArray2);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagArray2IfE"]
        pub fn octave_value_octave_value21(this: *mut root::octave_value,
                                           d: *const root::DiagArray2);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagArray2ISt7complexIdEE"]
        pub fn octave_value_octave_value22(this: *mut root::octave_value,
                                           d: *const root::DiagArray2);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10DiagArray2ISt7complexIfEE"]
        pub fn octave_value_octave_value23(this: *mut root::octave_value,
                                           d: *const root::DiagArray2);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK15FloatDiagMatrix"]
        pub fn octave_value_octave_value24(this: *mut root::octave_value,
                                           d: *const root::FloatDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK9RowVector"]
        pub fn octave_value_octave_value25(this: *mut root::octave_value,
                                           v: *const root::RowVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK14FloatRowVector"]
        pub fn octave_value_octave_value26(this: *mut root::octave_value,
                                           v: *const root::FloatRowVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK12ColumnVector"]
        pub fn octave_value_octave_value27(this: *mut root::octave_value,
                                           v: *const root::ColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK17FloatColumnVector"]
        pub fn octave_value_octave_value28(this: *mut root::octave_value,
                                           v: *const root::FloatColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERKSt7complexIdE"]
        pub fn octave_value_octave_value29(this: *mut root::octave_value,
                                           C: *const root::Complex);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERKSt7complexIfE"]
        pub fn octave_value_octave_value30(this: *mut root::octave_value,
                                           C: *const root::FloatComplex);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK13ComplexMatrixRK10MatrixType"]
        pub fn octave_value_octave_value31(this: *mut root::octave_value,
                                           m: *const root::ComplexMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK18FloatComplexMatrixRK10MatrixType"]
        pub fn octave_value_octave_value32(this: *mut root::octave_value,
                                           m: *const root::FloatComplexMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK14ComplexNDArray"]
        pub fn octave_value_octave_value33(this: *mut root::octave_value,
                                           cnda: *const root::ComplexNDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK19FloatComplexNDArray"]
        pub fn octave_value_octave_value34(this: *mut root::octave_value,
                                           cnda:
                                               *const root::FloatComplexNDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayISt7complexIdEE"]
        pub fn octave_value_octave_value35(this: *mut root::octave_value,
                                           m: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayISt7complexIfEE"]
        pub fn octave_value_octave_value36(this: *mut root::octave_value,
                                           m: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK17ComplexDiagMatrix"]
        pub fn octave_value_octave_value37(this: *mut root::octave_value,
                                           d: *const root::ComplexDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK22FloatComplexDiagMatrix"]
        pub fn octave_value_octave_value38(this: *mut root::octave_value,
                                           d:
                                               *const root::FloatComplexDiagMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK16ComplexRowVector"]
        pub fn octave_value_octave_value39(this: *mut root::octave_value,
                                           v: *const root::ComplexRowVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK21FloatComplexRowVector"]
        pub fn octave_value_octave_value40(this: *mut root::octave_value,
                                           v:
                                               *const root::FloatComplexRowVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK19ComplexColumnVector"]
        pub fn octave_value_octave_value41(this: *mut root::octave_value,
                                           v:
                                               *const root::ComplexColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK24FloatComplexColumnVector"]
        pub fn octave_value_octave_value42(this: *mut root::octave_value,
                                           v:
                                               *const root::FloatComplexColumnVector);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10PermMatrix"]
        pub fn octave_value_octave_value43(this: *mut root::octave_value,
                                           p: *const root::PermMatrix);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Eb"]
        pub fn octave_value_octave_value44(this: *mut root::octave_value,
                                           b: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10boolMatrixRK10MatrixType"]
        pub fn octave_value_octave_value45(this: *mut root::octave_value,
                                           bm: *const root::boolMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK11boolNDArray"]
        pub fn octave_value_octave_value46(this: *mut root::octave_value,
                                           bnda: *const root::boolNDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIbE"]
        pub fn octave_value_octave_value47(this: *mut root::octave_value,
                                           bnda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Ecc"]
        pub fn octave_value_octave_value48(this: *mut root::octave_value,
                                           c: ::std::os::raw::c_char,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1EPKcc"]
        pub fn octave_value_octave_value49(this: *mut root::octave_value,
                                           s: *const ::std::os::raw::c_char,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEc"]
        pub fn octave_value_octave_value50(this: *mut root::octave_value,
                                           s: *const root::std::string,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK13string_vectorc"]
        pub fn octave_value_octave_value51(this: *mut root::octave_value,
                                           s: *const root::string_vector,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10charMatrixc"]
        pub fn octave_value_octave_value52(this: *mut root::octave_value,
                                           chm: *const root::charMatrix,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK11charNDArrayc"]
        pub fn octave_value_octave_value53(this: *mut root::octave_value,
                                           chnda: *const root::charNDArray,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIcEc"]
        pub fn octave_value_octave_value54(this: *mut root::octave_value,
                                           chnda: *const root::Array,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10charMatrixbc"]
        pub fn octave_value_octave_value55(this: *mut root::octave_value,
                                           chm: *const root::charMatrix,
                                           is_string: bool,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK11charNDArraybc"]
        pub fn octave_value_octave_value56(this: *mut root::octave_value,
                                           chnda: *const root::charNDArray,
                                           is_string: bool,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIcEbc"]
        pub fn octave_value_octave_value57(this: *mut root::octave_value,
                                           chnda: *const root::Array,
                                           is_string: bool,
                                           type_: ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK12SparseMatrixRK10MatrixType"]
        pub fn octave_value_octave_value58(this: *mut root::octave_value,
                                           m: *const root::SparseMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK6SparseIdERK10MatrixType"]
        pub fn octave_value_octave_value59(this: *mut root::octave_value,
                                           m: *const root::Sparse,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK19SparseComplexMatrixRK10MatrixType"]
        pub fn octave_value_octave_value60(this: *mut root::octave_value,
                                           m:
                                               *const root::SparseComplexMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK6SparseISt7complexIdEERK10MatrixType"]
        pub fn octave_value_octave_value61(this: *mut root::octave_value,
                                           m: *const root::Sparse,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK16SparseBoolMatrixRK10MatrixType"]
        pub fn octave_value_octave_value62(this: *mut root::octave_value,
                                           bm: *const root::SparseBoolMatrix,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK6SparseIbERK10MatrixType"]
        pub fn octave_value_octave_value63(this: *mut root::octave_value,
                                           m: *const root::Sparse,
                                           t: *const root::MatrixType);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIaE"]
        pub fn octave_value_octave_value64(this: *mut root::octave_value,
                                           i: *const root::octave_int8);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIsE"]
        pub fn octave_value_octave_value65(this: *mut root::octave_value,
                                           i: *const root::octave_int16);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIiE"]
        pub fn octave_value_octave_value66(this: *mut root::octave_value,
                                           i: *const root::octave_int32);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIlE"]
        pub fn octave_value_octave_value67(this: *mut root::octave_value,
                                           i: *const root::octave_int64);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIhE"]
        pub fn octave_value_octave_value68(this: *mut root::octave_value,
                                           i: *const root::octave_uint8);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intItE"]
        pub fn octave_value_octave_value69(this: *mut root::octave_value,
                                           i: *const root::octave_uint16);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intIjE"]
        pub fn octave_value_octave_value70(this: *mut root::octave_value,
                                           i: *const root::octave_uint32);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_intImE"]
        pub fn octave_value_octave_value71(this: *mut root::octave_value,
                                           i: *const root::octave_uint64);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIaEE"]
        pub fn octave_value_octave_value72(this: *mut root::octave_value,
                                           inda: *const root::int8NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIaEE"]
        pub fn octave_value_octave_value73(this: *mut root::octave_value,
                                           inda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIsEE"]
        pub fn octave_value_octave_value74(this: *mut root::octave_value,
                                           inda: *const root::int16NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIsEE"]
        pub fn octave_value_octave_value75(this: *mut root::octave_value,
                                           inda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIiEE"]
        pub fn octave_value_octave_value76(this: *mut root::octave_value,
                                           inda: *const root::int32NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIiEE"]
        pub fn octave_value_octave_value77(this: *mut root::octave_value,
                                           inda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIlEE"]
        pub fn octave_value_octave_value78(this: *mut root::octave_value,
                                           inda: *const root::int64NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIlEE"]
        pub fn octave_value_octave_value79(this: *mut root::octave_value,
                                           inda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIhEE"]
        pub fn octave_value_octave_value80(this: *mut root::octave_value,
                                           inda: *const root::uint8NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIhEE"]
        pub fn octave_value_octave_value81(this: *mut root::octave_value,
                                           inda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intItEE"]
        pub fn octave_value_octave_value82(this: *mut root::octave_value,
                                           inda: *const root::uint16NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intItEE"]
        pub fn octave_value_octave_value83(this: *mut root::octave_value,
                                           inda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intIjEE"]
        pub fn octave_value_octave_value84(this: *mut root::octave_value,
                                           inda: *const root::uint32NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intIjEE"]
        pub fn octave_value_octave_value85(this: *mut root::octave_value,
                                           inda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10intNDArrayI10octave_intImEE"]
        pub fn octave_value_octave_value86(this: *mut root::octave_value,
                                           inda: *const root::uint64NDArray);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayI10octave_intImEE"]
        pub fn octave_value_octave_value87(this: *mut root::octave_value,
                                           inda: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5ArrayIiEbb"]
        pub fn octave_value_octave_value88(this: *mut root::octave_value,
                                           inda: *const root::Array,
                                           zero_based: bool,
                                           cache_index: bool);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK5ArrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE"]
        pub fn octave_value_octave_value89(this: *mut root::octave_value,
                                           cellstr: *const root::Array);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10idx_vectorb"]
        pub fn octave_value_octave_value90(this: *mut root::octave_value,
                                           idx: *const root::idx_vector,
                                           lazy: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1Eddd"]
        pub fn octave_value_octave_value91(this: *mut root::octave_value,
                                           base: f64, limit: f64, inc: f64);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK5Rangeb"]
        pub fn octave_value_octave_value92(this: *mut root::octave_value,
                                           r: *const root::Range,
                                           force_range: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK10octave_map"]
        pub fn octave_value_octave_value93(this: *mut root::octave_value,
                                           m: *const root::octave_map);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK17octave_scalar_map"]
        pub fn octave_value_octave_value94(this: *mut root::octave_value,
                                           m: *const root::octave_scalar_map);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK10octave_mapRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS3_4listIS8_SaIS8_EEE"]
        pub fn octave_value_octave_value95(this: *mut root::octave_value,
                                           m: *const root::octave_map,
                                           id: *const root::std::string,
                                           plist: *const root::std::list);
    }
    extern "C" {
        #[link_name =
              "_ZN12octave_valueC1ERK17octave_scalar_mapRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS3_4listIS8_SaIS8_EEE"]
        pub fn octave_value_octave_value96(this: *mut root::octave_value,
                                           m: *const root::octave_scalar_map,
                                           id: *const root::std::string,
                                           plist: *const root::std::list);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ERK17octave_value_listb"]
        pub fn octave_value_octave_value97(this: *mut root::octave_value,
                                           m: *const root::octave_value_list,
                                           arg1: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1ENS_11magic_colonE"]
        pub fn octave_value_octave_value98(this: *mut root::octave_value,
                                           arg1:
                                               root::octave_value_magic_colon);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1EP17octave_base_valueb"]
        pub fn octave_value_octave_value99(this: *mut root::octave_value,
                                           new_rep:
                                               *mut root::octave_base_value,
                                           borrow: bool);
    }
    extern "C" {
        #[link_name = "_ZN12octave_valueC1EP17octave_base_valuei"]
        pub fn octave_value_octave_value100(this: *mut root::octave_value,
                                            new_rep:
                                                *mut root::octave_base_value,
                                            xcount: ::std::os::raw::c_int);
    }
    impl octave_value {
        #[inline]
        pub unsafe fn assign_op_to_binary_op(arg1:
                                                 root::octave_value_assign_op)
         -> root::octave_value_binary_op {
            octave_value_assign_op_to_binary_op(arg1)
        }
        #[inline]
        pub unsafe fn binary_op_to_assign_op(arg1:
                                                 root::octave_value_binary_op)
         -> root::octave_value_assign_op {
            octave_value_binary_op_to_assign_op(arg1)
        }
        #[inline]
        pub unsafe fn unary_op_as_string(arg1: root::octave_value_unary_op)
         -> root::std::string {
            octave_value_unary_op_as_string(arg1)
        }
        #[inline]
        pub unsafe fn unary_op_fcn_name(arg1: root::octave_value_unary_op)
         -> root::std::string {
            octave_value_unary_op_fcn_name(arg1)
        }
        #[inline]
        pub unsafe fn binary_op_as_string(arg1: root::octave_value_binary_op)
         -> root::std::string {
            octave_value_binary_op_as_string(arg1)
        }
        #[inline]
        pub unsafe fn binary_op_fcn_name(arg1: root::octave_value_binary_op)
         -> root::std::string {
            octave_value_binary_op_fcn_name(arg1)
        }
        #[inline]
        pub unsafe fn binary_op_fcn_name1(arg1:
                                              root::octave_value_compound_binary_op)
         -> root::std::string {
            octave_value_binary_op_fcn_name1(arg1)
        }
        #[inline]
        pub unsafe fn assign_op_as_string(arg1: root::octave_value_assign_op)
         -> root::std::string {
            octave_value_assign_op_as_string(arg1)
        }
        #[inline]
        pub unsafe fn empty_conv(type_: *const root::std::string,
                                 rhs: *const root::octave_value)
         -> root::octave_value {
            octave_value_empty_conv(type_, rhs)
        }
        #[inline]
        pub unsafe fn clone(&self) -> *mut root::octave_base_value {
            octave_value_clone(self)
        }
        #[inline]
        pub unsafe fn maybe_mutate(&mut self) {
            octave_value_maybe_mutate(self)
        }
        #[inline]
        pub unsafe fn single_subsref(&mut self,
                                     type_: *const root::std::string,
                                     idx: *const root::octave_value_list)
         -> root::octave_value {
            octave_value_single_subsref(self, type_, idx)
        }
        #[inline]
        pub unsafe fn subsref(&mut self, type_: *const root::std::string,
                              idx: *const root::std::list,
                              nargout: ::std::os::raw::c_int)
         -> root::octave_value_list {
            octave_value_subsref(self, type_, idx, nargout)
        }
        #[inline]
        pub unsafe fn subsref1(&mut self, type_: *const root::std::string,
                               idx: *const root::std::list,
                               nargout: ::std::os::raw::c_int,
                               lvalue_list: *const root::std::list)
         -> root::octave_value_list {
            octave_value_subsref1(self, type_, idx, nargout, lvalue_list)
        }
        #[inline]
        pub unsafe fn next_subsref(&mut self, type_: *const root::std::string,
                                   idx: *const root::std::list, skip: usize)
         -> root::octave_value {
            octave_value_next_subsref(self, type_, idx, skip)
        }
        #[inline]
        pub unsafe fn next_subsref1(&mut self, nargout: ::std::os::raw::c_int,
                                    type_: *const root::std::string,
                                    idx: *const root::std::list, skip: usize)
         -> root::octave_value_list {
            octave_value_next_subsref1(self, nargout, type_, idx, skip)
        }
        #[inline]
        pub unsafe fn next_subsref2(&mut self, nargout: ::std::os::raw::c_int,
                                    type_: *const root::std::string,
                                    idx: *const root::std::list,
                                    lvalue_list: *const root::std::list,
                                    skip: usize) -> root::octave_value_list {
            octave_value_next_subsref2(self, nargout, type_, idx, lvalue_list,
                                       skip)
        }
        #[inline]
        pub unsafe fn next_subsref3(&mut self, auto_add: bool,
                                    type_: *const root::std::string,
                                    idx: *const root::std::list, skip: usize)
         -> root::octave_value {
            octave_value_next_subsref3(self, auto_add, type_, idx, skip)
        }
        #[inline]
        pub unsafe fn do_multi_index_op(&mut self,
                                        nargout: ::std::os::raw::c_int,
                                        idx: *const root::octave_value_list)
         -> root::octave_value_list {
            octave_value_do_multi_index_op(self, nargout, idx)
        }
        #[inline]
        pub unsafe fn do_multi_index_op1(&mut self,
                                         nargout: ::std::os::raw::c_int,
                                         idx: *const root::octave_value_list,
                                         lvalue_list: *const root::std::list)
         -> root::octave_value_list {
            octave_value_do_multi_index_op1(self, nargout, idx, lvalue_list)
        }
        #[inline]
        pub unsafe fn subsasgn(&mut self, type_: *const root::std::string,
                               idx: *const root::std::list,
                               rhs: *const root::octave_value)
         -> root::octave_value {
            octave_value_subsasgn(self, type_, idx, rhs)
        }
        #[inline]
        pub unsafe fn undef_subsasgn(&mut self,
                                     type_: *const root::std::string,
                                     idx: *const root::std::list,
                                     rhs: *const root::octave_value)
         -> root::octave_value {
            octave_value_undef_subsasgn(self, type_, idx, rhs)
        }
        #[inline]
        pub unsafe fn assign(&mut self, op: root::octave_value_assign_op,
                             type_: *const root::std::string,
                             idx: *const root::std::list,
                             rhs: *const root::octave_value)
         -> *mut root::octave_value {
            octave_value_assign(self, op, type_, idx, rhs)
        }
        #[inline]
        pub unsafe fn assign1(&mut self, arg1: root::octave_value_assign_op,
                              rhs: *const root::octave_value)
         -> *mut root::octave_value {
            octave_value_assign1(self, arg1, rhs)
        }
        #[inline]
        pub unsafe fn length(&self) -> root::octave_idx_type {
            octave_value_length(self)
        }
        #[inline]
        pub unsafe fn is_equal(&self, arg1: *const root::octave_value)
         -> bool {
            octave_value_is_equal(self, arg1)
        }
        #[inline]
        pub unsafe fn idx_type_value(&self, req_int: bool, frc_str_conv: bool)
         -> root::octave_idx_type {
            octave_value_idx_type_value(self, req_int, frc_str_conv)
        }
        #[inline]
        pub unsafe fn cell_value(&self) -> root::Cell {
            octave_value_cell_value(self)
        }
        #[inline]
        pub unsafe fn map_value(&self) -> root::octave_map {
            octave_value_map_value(self)
        }
        #[inline]
        pub unsafe fn scalar_map_value(&self) -> root::octave_scalar_map {
            octave_value_scalar_map_value(self)
        }
        #[inline]
        pub unsafe fn function_value(&self, silent: bool)
         -> *mut root::octave_function {
            octave_value_function_value(self, silent)
        }
        #[inline]
        pub unsafe fn user_function_value(&self, silent: bool)
         -> *mut root::octave_user_function {
            octave_value_user_function_value(self, silent)
        }
        #[inline]
        pub unsafe fn user_script_value(&self, silent: bool)
         -> *mut root::octave_user_script {
            octave_value_user_script_value(self, silent)
        }
        #[inline]
        pub unsafe fn user_code_value(&self, silent: bool)
         -> *mut root::octave_user_code {
            octave_value_user_code_value(self, silent)
        }
        #[inline]
        pub unsafe fn fcn_handle_value(&self, silent: bool)
         -> *mut root::octave_fcn_handle {
            octave_value_fcn_handle_value(self, silent)
        }
        #[inline]
        pub unsafe fn fcn_inline_value(&self, silent: bool)
         -> *mut root::octave_fcn_inline {
            octave_value_fcn_inline_value(self, silent)
        }
        #[inline]
        pub unsafe fn list_value(&self) -> root::octave_value_list {
            octave_value_list_value(self)
        }
        #[inline]
        pub unsafe fn column_vector_value(&self, frc_str_conv: bool,
                                          frc_vec_conv: bool)
         -> root::ColumnVector {
            octave_value_column_vector_value(self, frc_str_conv, frc_vec_conv)
        }
        #[inline]
        pub unsafe fn complex_column_vector_value(&self, frc_str_conv: bool,
                                                  frc_vec_conv: bool)
         -> root::ComplexColumnVector {
            octave_value_complex_column_vector_value(self, frc_str_conv,
                                                     frc_vec_conv)
        }
        #[inline]
        pub unsafe fn row_vector_value(&self, frc_str_conv: bool,
                                       frc_vec_conv: bool)
         -> root::RowVector {
            octave_value_row_vector_value(self, frc_str_conv, frc_vec_conv)
        }
        #[inline]
        pub unsafe fn complex_row_vector_value(&self, frc_str_conv: bool,
                                               frc_vec_conv: bool)
         -> root::ComplexRowVector {
            octave_value_complex_row_vector_value(self, frc_str_conv,
                                                  frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_column_vector_value(&self, frc_str_conv: bool,
                                                frc_vec_conv: bool)
         -> root::FloatColumnVector {
            octave_value_float_column_vector_value(self, frc_str_conv,
                                                   frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_complex_column_vector_value(&self,
                                                        frc_str_conv: bool,
                                                        frc_vec_conv: bool)
         -> root::FloatComplexColumnVector {
            octave_value_float_complex_column_vector_value(self, frc_str_conv,
                                                           frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_row_vector_value(&self, frc_str_conv: bool,
                                             frc_vec_conv: bool)
         -> root::FloatRowVector {
            octave_value_float_row_vector_value(self, frc_str_conv,
                                                frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_complex_row_vector_value(&self,
                                                     frc_str_conv: bool,
                                                     frc_vec_conv: bool)
         -> root::FloatComplexRowVector {
            octave_value_float_complex_row_vector_value(self, frc_str_conv,
                                                        frc_vec_conv)
        }
        #[inline]
        pub unsafe fn int_vector_value(&self, req_int: bool,
                                       frc_str_conv: bool, frc_vec_conv: bool)
         -> root::Array {
            octave_value_int_vector_value(self, req_int, frc_str_conv,
                                          frc_vec_conv)
        }
        #[inline]
        pub unsafe fn octave_idx_type_vector_value(&self, req_int: bool,
                                                   frc_str_conv: bool,
                                                   frc_vec_conv: bool)
         -> root::Array {
            octave_value_octave_idx_type_vector_value(self, req_int,
                                                      frc_str_conv,
                                                      frc_vec_conv)
        }
        #[inline]
        pub unsafe fn vector_value(&self, frc_str_conv: bool,
                                   frc_vec_conv: bool) -> root::Array {
            octave_value_vector_value(self, frc_str_conv, frc_vec_conv)
        }
        #[inline]
        pub unsafe fn complex_vector_value(&self, frc_str_conv: bool,
                                           frc_vec_conv: bool)
         -> root::Array {
            octave_value_complex_vector_value(self, frc_str_conv,
                                              frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_vector_value(&self, frc_str_conv: bool,
                                         frc_vec_conv: bool) -> root::Array {
            octave_value_float_vector_value(self, frc_str_conv, frc_vec_conv)
        }
        #[inline]
        pub unsafe fn float_complex_vector_value(&self, frc_str_conv: bool,
                                                 frc_vec_conv: bool)
         -> root::Array {
            octave_value_float_complex_vector_value(self, frc_str_conv,
                                                    frc_vec_conv)
        }
        #[inline]
        pub unsafe fn storable_value(&self) -> root::octave_value {
            octave_value_storable_value(self)
        }
        #[inline]
        pub unsafe fn make_storable_value(&mut self) {
            octave_value_make_storable_value(self)
        }
        #[inline]
        pub unsafe fn do_non_const_unary_op(&mut self,
                                            op: root::octave_value_unary_op)
         -> *mut root::octave_value {
            octave_value_do_non_const_unary_op(self, op)
        }
        #[inline]
        pub unsafe fn do_non_const_unary_op1(&mut self,
                                             op: root::octave_value_unary_op,
                                             type_: *const root::std::string,
                                             idx: *const root::std::list)
         -> *mut root::octave_value {
            octave_value_do_non_const_unary_op1(self, op, type_, idx)
        }
        #[inline]
        pub unsafe fn print_info(&self, os: *mut root::std::ostream,
                                 prefix: *const root::std::string) {
            octave_value_print_info(self, os, prefix)
        }
        #[inline]
        pub unsafe fn write(&self, os: *mut root::octave_stream,
                            block_size: ::std::os::raw::c_int,
                            output_type: root::oct_data_conv_data_type,
                            skip: ::std::os::raw::c_int,
                            flt_fmt: root::octave::mach_info_float_format)
         -> ::std::os::raw::c_int {
            octave_value_write(self, os, block_size, output_type, skip,
                               flt_fmt)
        }
        #[inline]
        pub unsafe fn new(i: ::std::os::raw::c_short) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(i: ::std::os::raw::c_ushort) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value1(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(i: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value2(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(i: ::std::os::raw::c_uint) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value3(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(i: ::std::os::raw::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value4(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new5(i: ::std::os::raw::c_ulong) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value5(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new6(i: ::std::os::raw::c_longlong) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value6(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new7(i: ::std::os::raw::c_ulonglong) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value7(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new8(t: root::octave::sys::time) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value8(&mut __bindgen_tmp, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new9(d: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value9(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new10(d: f32) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value10(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new11(a: *const root::Array, is_cs_list: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value11(&mut __bindgen_tmp, a, is_cs_list);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new12(c: *const root::Cell, is_cs_list: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value12(&mut __bindgen_tmp, c, is_cs_list);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new13(m: *const root::Matrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value13(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new14(m: *const root::FloatMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value14(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new15(nda: *const root::NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value15(&mut __bindgen_tmp, nda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new16(nda: *const root::FloatNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value16(&mut __bindgen_tmp, nda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new17(m: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value17(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new18(m: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value18(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new19(d: *const root::DiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value19(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new20(d: *const root::DiagArray2) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value20(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new21(d: *const root::DiagArray2) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value21(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new22(d: *const root::DiagArray2) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value22(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new23(d: *const root::DiagArray2) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value23(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new24(d: *const root::FloatDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value24(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new25(v: *const root::RowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value25(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new26(v: *const root::FloatRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value26(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new27(v: *const root::ColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value27(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new28(v: *const root::FloatColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value28(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new29(C: *const root::Complex) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value29(&mut __bindgen_tmp, C);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new30(C: *const root::FloatComplex) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value30(&mut __bindgen_tmp, C);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new31(m: *const root::ComplexMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value31(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new32(m: *const root::FloatComplexMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value32(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new33(cnda: *const root::ComplexNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value33(&mut __bindgen_tmp, cnda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new34(cnda: *const root::FloatComplexNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value34(&mut __bindgen_tmp, cnda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new35(m: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value35(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new36(m: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value36(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new37(d: *const root::ComplexDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value37(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new38(d: *const root::FloatComplexDiagMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value38(&mut __bindgen_tmp, d);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new39(v: *const root::ComplexRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value39(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new40(v: *const root::FloatComplexRowVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value40(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new41(v: *const root::ComplexColumnVector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value41(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new42(v: *const root::FloatComplexColumnVector)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value42(&mut __bindgen_tmp, v);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new43(p: *const root::PermMatrix) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value43(&mut __bindgen_tmp, p);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new44(b: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value44(&mut __bindgen_tmp, b);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new45(bm: *const root::boolMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value45(&mut __bindgen_tmp, bm, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new46(bnda: *const root::boolNDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value46(&mut __bindgen_tmp, bnda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new47(bnda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value47(&mut __bindgen_tmp, bnda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new48(c: ::std::os::raw::c_char,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value48(&mut __bindgen_tmp, c, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new49(s: *const ::std::os::raw::c_char,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value49(&mut __bindgen_tmp, s, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new50(s: *const root::std::string,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value50(&mut __bindgen_tmp, s, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new51(s: *const root::string_vector,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value51(&mut __bindgen_tmp, s, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new52(chm: *const root::charMatrix,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value52(&mut __bindgen_tmp, chm, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new53(chnda: *const root::charNDArray,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value53(&mut __bindgen_tmp, chnda, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new54(chnda: *const root::Array,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value54(&mut __bindgen_tmp, chnda, type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new55(chm: *const root::charMatrix, is_string: bool,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value55(&mut __bindgen_tmp, chm, is_string,
                                        type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new56(chnda: *const root::charNDArray, is_string: bool,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value56(&mut __bindgen_tmp, chnda, is_string,
                                        type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new57(chnda: *const root::Array, is_string: bool,
                            type_: ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value57(&mut __bindgen_tmp, chnda, is_string,
                                        type_);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new58(m: *const root::SparseMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value58(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new59(m: *const root::Sparse,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value59(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new60(m: *const root::SparseComplexMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value60(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new61(m: *const root::Sparse,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value61(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new62(bm: *const root::SparseBoolMatrix,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value62(&mut __bindgen_tmp, bm, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new63(m: *const root::Sparse,
                            t: *const root::MatrixType) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value63(&mut __bindgen_tmp, m, t);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new64(i: *const root::octave_int8) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value64(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new65(i: *const root::octave_int16) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value65(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new66(i: *const root::octave_int32) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value66(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new67(i: *const root::octave_int64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value67(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new68(i: *const root::octave_uint8) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value68(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new69(i: *const root::octave_uint16) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value69(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new70(i: *const root::octave_uint32) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value70(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new71(i: *const root::octave_uint64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value71(&mut __bindgen_tmp, i);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new72(inda: *const root::int8NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value72(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new73(inda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value73(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new74(inda: *const root::int16NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value74(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new75(inda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value75(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new76(inda: *const root::int32NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value76(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new77(inda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value77(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new78(inda: *const root::int64NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value78(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new79(inda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value79(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new80(inda: *const root::uint8NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value80(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new81(inda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value81(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new82(inda: *const root::uint16NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value82(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new83(inda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value83(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new84(inda: *const root::uint32NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value84(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new85(inda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value85(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new86(inda: *const root::uint64NDArray) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value86(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new87(inda: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value87(&mut __bindgen_tmp, inda);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new88(inda: *const root::Array, zero_based: bool,
                            cache_index: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value88(&mut __bindgen_tmp, inda, zero_based,
                                        cache_index);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new89(cellstr: *const root::Array) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value89(&mut __bindgen_tmp, cellstr);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new90(idx: *const root::idx_vector, lazy: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value90(&mut __bindgen_tmp, idx, lazy);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new91(base: f64, limit: f64, inc: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value91(&mut __bindgen_tmp, base, limit, inc);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new92(r: *const root::Range, force_range: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value92(&mut __bindgen_tmp, r, force_range);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new93(m: *const root::octave_map) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value93(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new94(m: *const root::octave_scalar_map) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value94(&mut __bindgen_tmp, m);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new95(m: *const root::octave_map,
                            id: *const root::std::string,
                            plist: *const root::std::list) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value95(&mut __bindgen_tmp, m, id, plist);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new96(m: *const root::octave_scalar_map,
                            id: *const root::std::string,
                            plist: *const root::std::list) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value96(&mut __bindgen_tmp, m, id, plist);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new97(m: *const root::octave_value_list, arg1: bool)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value97(&mut __bindgen_tmp, m, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new98(arg1: root::octave_value_magic_colon) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value98(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new99(new_rep: *mut root::octave_base_value,
                            borrow: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value99(&mut __bindgen_tmp, new_rep, borrow);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new100(new_rep: *mut root::octave_base_value,
                             xcount: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_value_octave_value100(&mut __bindgen_tmp, new_rep, xcount);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_user_script {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct octave_user_code {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct octave_base_value__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_base_value {
        pub vtable_: *const octave_base_value__bindgen_vtable,
        pub count: root::octave_refcount<::std::os::raw::c_int>,
    }
    pub type octave_base_value_type_conv_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *const root::octave_base_value)
                                  -> *mut root::octave_base_value>;
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_base_value_type_conv_info {
        pub _fcn: root::octave_base_value_type_conv_fcn,
        pub _type_id: ::std::os::raw::c_int,
    }
    impl Clone for octave_base_value_type_conv_info {
        fn clone(&self) -> Self { *self }
    }
    pub const octave_base_value_unary_mapper_t_num_unary_mappers:
              root::octave_base_value_unary_mapper_t =
        octave_base_value_unary_mapper_t::umap_unknown;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub enum octave_base_value_unary_mapper_t {
        umap_abs = 0,
        umap_acos = 1,
        umap_acosh = 2,
        umap_angle = 3,
        umap_arg = 4,
        umap_asin = 5,
        umap_asinh = 6,
        umap_atan = 7,
        umap_atanh = 8,
        umap_cbrt = 9,
        umap_ceil = 10,
        umap_conj = 11,
        umap_cos = 12,
        umap_cosh = 13,
        umap_erf = 14,
        umap_erfinv = 15,
        umap_erfcinv = 16,
        umap_erfc = 17,
        umap_erfcx = 18,
        umap_erfi = 19,
        umap_dawson = 20,
        umap_exp = 21,
        umap_expm1 = 22,
        umap_isfinite = 23,
        umap_fix = 24,
        umap_floor = 25,
        umap_gamma = 26,
        umap_imag = 27,
        umap_isinf = 28,
        umap_isna = 29,
        umap_isnan = 30,
        umap_lgamma = 31,
        umap_log = 32,
        umap_log2 = 33,
        umap_log10 = 34,
        umap_log1p = 35,
        umap_real = 36,
        umap_round = 37,
        umap_roundb = 38,
        umap_signum = 39,
        umap_sin = 40,
        umap_sinh = 41,
        umap_sqrt = 42,
        umap_tan = 43,
        umap_tanh = 44,
        umap_xisalnum = 45,
        umap_xisalpha = 46,
        umap_xisascii = 47,
        umap_xiscntrl = 48,
        umap_xisdigit = 49,
        umap_xisgraph = 50,
        umap_xislower = 51,
        umap_xisprint = 52,
        umap_xispunct = 53,
        umap_xisspace = 54,
        umap_xisupper = 55,
        umap_xisxdigit = 56,
        umap_xsignbit = 57,
        umap_xtoascii = 58,
        umap_xtolower = 59,
        umap_xtoupper = 60,
        umap_unknown = 61,
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value23curr_print_indent_levelE"]
        pub static mut octave_base_value_curr_print_indent_level:
                   ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value17beginning_of_lineE"]
        pub static mut octave_base_value_beginning_of_line: bool;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value4t_idE"]
        pub static mut octave_base_value_t_id: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value6t_nameB5cxx11E"]
        pub static octave_base_value_t_name: root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value6c_nameB5cxx11E"]
        pub static octave_base_value_c_name: root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value14numeric_assignERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEERK12octave_value"]
        pub fn octave_base_value_numeric_assign(this:
                                                    *mut root::octave_base_value,
                                                type_:
                                                    *const root::std::string,
                                                idx: *const root::std::list,
                                                rhs:
                                                    *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value6indentERSo"]
        pub fn octave_base_value_indent(this: *const root::octave_base_value,
                                        os: *mut root::std::ostream);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value7newlineERSo"]
        pub fn octave_base_value_newline(this: *const root::octave_base_value,
                                         os: *mut root::std::ostream);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value5resetEv"]
        pub fn octave_base_value_reset(this: *const root::octave_base_value);
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value13get_umap_nameENS_14unary_mapper_tE"]
        pub fn octave_base_value_get_umap_name(arg1:
                                                   root::octave_base_value_unary_mapper_t)
         -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9warn_loadEPKc"]
        pub fn octave_base_value_warn_load(this:
                                               *const root::octave_base_value,
                                           type_:
                                               *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9warn_saveEPKc"]
        pub fn octave_base_value_warn_save(this:
                                               *const root::octave_base_value,
                                           type_:
                                               *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value13register_typeEv"]
        pub fn octave_base_value_register_type();
    }
    impl octave_base_value {
        #[inline]
        pub unsafe fn numeric_assign(&mut self,
                                     type_: *const root::std::string,
                                     idx: *const root::std::list,
                                     rhs: *const root::octave_value)
         -> root::octave_value {
            octave_base_value_numeric_assign(self, type_, idx, rhs)
        }
        #[inline]
        pub unsafe fn indent(&self, os: *mut root::std::ostream) {
            octave_base_value_indent(self, os)
        }
        #[inline]
        pub unsafe fn newline(&self, os: *mut root::std::ostream) {
            octave_base_value_newline(self, os)
        }
        #[inline]
        pub unsafe fn reset(&self) { octave_base_value_reset(self) }
        #[inline]
        pub unsafe fn get_umap_name(arg1:
                                        root::octave_base_value_unary_mapper_t)
         -> *const ::std::os::raw::c_char {
            octave_base_value_get_umap_name(arg1)
        }
        #[inline]
        pub unsafe fn warn_load(&self, type_: *const ::std::os::raw::c_char) {
            octave_base_value_warn_load(self, type_)
        }
        #[inline]
        pub unsafe fn warn_save(&self, type_: *const ::std::os::raw::c_char) {
            octave_base_value_warn_save(self, type_)
        }
        #[inline]
        pub unsafe fn register_type() { octave_base_value_register_type() }
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11empty_cloneEv"]
        pub fn octave_base_value_empty_clone(this:
                                                 *mut ::std::os::raw::c_void)
         -> *mut root::octave_base_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value7squeezeEv"]
        pub fn octave_base_value_squeeze(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value10full_valueEv"]
        pub fn octave_base_value_full_value(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9as_doubleEv"]
        pub fn octave_base_value_as_double(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9as_singleEv"]
        pub fn octave_base_value_as_single(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value7as_int8Ev"]
        pub fn octave_base_value_as_int8(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value8as_int16Ev"]
        pub fn octave_base_value_as_int16(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value8as_int32Ev"]
        pub fn octave_base_value_as_int32(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value8as_int64Ev"]
        pub fn octave_base_value_as_int64(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value8as_uint8Ev"]
        pub fn octave_base_value_as_uint8(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9as_uint16Ev"]
        pub fn octave_base_value_as_uint16(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9as_uint32Ev"]
        pub fn octave_base_value_as_uint32(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9as_uint64Ev"]
        pub fn octave_base_value_as_uint64(this: *mut ::std::os::raw::c_void)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value4sizeEv"]
        pub fn octave_base_value_size(this: *mut ::std::os::raw::c_void)
         -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value5numelERK17octave_value_list"]
        pub fn octave_base_value_numel(this: *mut ::std::os::raw::c_void,
                                       arg1: *const root::octave_value_list)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value7subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEE"]
        pub fn octave_base_value_subsref(this: *mut ::std::os::raw::c_void,
                                         type_: *const root::std::string,
                                         idx: *const root::std::list)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value7subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEi"]
        pub fn octave_base_value_subsref1(this: *mut ::std::os::raw::c_void,
                                          type_: *const root::std::string,
                                          idx: *const root::std::list,
                                          nargout: ::std::os::raw::c_int)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value7subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEb"]
        pub fn octave_base_value_subsref2(this: *mut ::std::os::raw::c_void,
                                          type_: *const root::std::string,
                                          idx: *const root::std::list,
                                          auto_add: bool)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value7subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEiPKNS8_I13octave_lvalueSaISE_EEE"]
        pub fn octave_base_value_subsref3(this: *mut ::std::os::raw::c_void,
                                          type_: *const root::std::string,
                                          idx: *const root::std::list,
                                          nargout: ::std::os::raw::c_int,
                                          lvalue_list: *const root::std::list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value11do_index_opERK17octave_value_listb"]
        pub fn octave_base_value_do_index_op(this:
                                                 *mut ::std::os::raw::c_void,
                                             idx:
                                                 *const root::octave_value_list,
                                             resize_ok: bool)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value17do_multi_index_opEiRK17octave_value_list"]
        pub fn octave_base_value_do_multi_index_op(this:
                                                       *mut ::std::os::raw::c_void,
                                                   nargout:
                                                       ::std::os::raw::c_int,
                                                   idx:
                                                       *const root::octave_value_list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value17do_multi_index_opEiRK17octave_value_listPKNSt7__cxx114listI13octave_lvalueSaIS5_EEE"]
        pub fn octave_base_value_do_multi_index_op1(this:
                                                        *mut ::std::os::raw::c_void,
                                                    nargout:
                                                        ::std::os::raw::c_int,
                                                    idx:
                                                        *const root::octave_value_list,
                                                    lvalue_list:
                                                        *const root::std::list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value8subsasgnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEERK12octave_value"]
        pub fn octave_base_value_subsasgn(this: *mut ::std::os::raw::c_void,
                                          type_: *const root::std::string,
                                          idx: *const root::std::list,
                                          rhs: *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value14undef_subsasgnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEERK12octave_value"]
        pub fn octave_base_value_undef_subsasgn(this:
                                                    *mut ::std::os::raw::c_void,
                                                type_:
                                                    *const root::std::string,
                                                idx: *const root::std::list,
                                                rhs:
                                                    *const root::octave_value)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value12index_vectorEb"]
        pub fn octave_base_value_index_vector(this:
                                                  *mut ::std::os::raw::c_void,
                                              require_integers: bool)
         -> root::idx_vector;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value3nnzEv"]
        pub fn octave_base_value_nnz(this: *mut ::std::os::raw::c_void)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value5nzmaxEv"]
        pub fn octave_base_value_nzmax(this: *mut ::std::os::raw::c_void)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value7nfieldsEv"]
        pub fn octave_base_value_nfields(this: *mut ::std::os::raw::c_void)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value7reshapeERK10dim_vector"]
        pub fn octave_base_value_reshape(this: *mut ::std::os::raw::c_void,
                                         arg1: *const root::dim_vector)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value7permuteERK5ArrayIiEb"]
        pub fn octave_base_value_permute(this: *mut ::std::os::raw::c_void,
                                         vec: *const root::Array, arg1: bool)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value6resizeERK10dim_vectorb"]
        pub fn octave_base_value_resize(this: *mut ::std::os::raw::c_void,
                                        arg1: *const root::dim_vector,
                                        fill: bool) -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11matrix_typeEv"]
        pub fn octave_base_value_matrix_type(this:
                                                 *mut ::std::os::raw::c_void)
         -> root::MatrixType;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11matrix_typeERK10MatrixType"]
        pub fn octave_base_value_matrix_type1(this:
                                                  *mut ::std::os::raw::c_void,
                                              typ: *const root::MatrixType)
         -> root::MatrixType;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value3allEi"]
        pub fn octave_base_value_all(this: *mut ::std::os::raw::c_void,
                                     arg1: ::std::os::raw::c_int)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value3anyEi"]
        pub fn octave_base_value_any(this: *mut ::std::os::raw::c_void,
                                     arg1: ::std::os::raw::c_int)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11short_valueEbb"]
        pub fn octave_base_value_short_value(this:
                                                 *mut ::std::os::raw::c_void,
                                             arg1: bool, arg2: bool)
         -> ::std::os::raw::c_short;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value12ushort_valueEbb"]
        pub fn octave_base_value_ushort_value(this:
                                                  *mut ::std::os::raw::c_void,
                                              arg1: bool, arg2: bool)
         -> ::std::os::raw::c_ushort;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9int_valueEbb"]
        pub fn octave_base_value_int_value(this: *mut ::std::os::raw::c_void,
                                           arg1: bool, arg2: bool)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value10uint_valueEbb"]
        pub fn octave_base_value_uint_value(this: *mut ::std::os::raw::c_void,
                                            arg1: bool, arg2: bool)
         -> ::std::os::raw::c_uint;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value10nint_valueEb"]
        pub fn octave_base_value_nint_value(this: *mut ::std::os::raw::c_void,
                                            arg1: bool)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value10long_valueEbb"]
        pub fn octave_base_value_long_value(this: *mut ::std::os::raw::c_void,
                                            arg1: bool, arg2: bool)
         -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11ulong_valueEbb"]
        pub fn octave_base_value_ulong_value(this:
                                                 *mut ::std::os::raw::c_void,
                                             arg1: bool, arg2: bool)
         -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11int64_valueEbb"]
        pub fn octave_base_value_int64_value(this:
                                                 *mut ::std::os::raw::c_void,
                                             arg1: bool, arg2: bool) -> i64;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value12uint64_valueEbb"]
        pub fn octave_base_value_uint64_value(this:
                                                  *mut ::std::os::raw::c_void,
                                              arg1: bool, arg2: bool) -> u64;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value12double_valueEb"]
        pub fn octave_base_value_double_value(this:
                                                  *mut ::std::os::raw::c_void,
                                              arg1: bool) -> f64;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11float_valueEb"]
        pub fn octave_base_value_float_value(this:
                                                 *mut ::std::os::raw::c_void,
                                             arg1: bool) -> f32;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value10cell_valueEv"]
        pub fn octave_base_value_cell_value(this: *mut ::std::os::raw::c_void)
         -> root::Cell;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value12matrix_valueEb"]
        pub fn octave_base_value_matrix_value(this:
                                                  *mut ::std::os::raw::c_void,
                                              arg1: bool) -> root::Matrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18float_matrix_valueEb"]
        pub fn octave_base_value_float_matrix_value(this:
                                                        *mut ::std::os::raw::c_void,
                                                    arg1: bool)
         -> root::FloatMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11array_valueEb"]
        pub fn octave_base_value_array_value(this:
                                                 *mut ::std::os::raw::c_void,
                                             arg1: bool) -> root::NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17float_array_valueEb"]
        pub fn octave_base_value_float_array_value(this:
                                                       *mut ::std::os::raw::c_void,
                                                   arg1: bool)
         -> root::FloatNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value13complex_valueEb"]
        pub fn octave_base_value_complex_value(this:
                                                   *mut ::std::os::raw::c_void,
                                               arg1: bool) -> root::Complex;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value19float_complex_valueEb"]
        pub fn octave_base_value_float_complex_value(this:
                                                         *mut ::std::os::raw::c_void,
                                                     arg1: bool)
         -> root::FloatComplex;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value20complex_matrix_valueEb"]
        pub fn octave_base_value_complex_matrix_value(this:
                                                          *mut ::std::os::raw::c_void,
                                                      arg1: bool)
         -> root::ComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value26float_complex_matrix_valueEb"]
        pub fn octave_base_value_float_complex_matrix_value(this:
                                                                *mut ::std::os::raw::c_void,
                                                            arg1: bool)
         -> root::FloatComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value19complex_array_valueEb"]
        pub fn octave_base_value_complex_array_value(this:
                                                         *mut ::std::os::raw::c_void,
                                                     arg1: bool)
         -> root::ComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value25float_complex_array_valueEb"]
        pub fn octave_base_value_float_complex_array_value(this:
                                                               *mut ::std::os::raw::c_void,
                                                           arg1: bool)
         -> root::FloatComplexNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value10bool_valueEb"]
        pub fn octave_base_value_bool_value(this: *mut ::std::os::raw::c_void,
                                            arg1: bool) -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17bool_matrix_valueEb"]
        pub fn octave_base_value_bool_matrix_value(this:
                                                       *mut ::std::os::raw::c_void,
                                                   arg1: bool)
         -> root::boolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value16bool_array_valueEb"]
        pub fn octave_base_value_bool_array_value(this:
                                                      *mut ::std::os::raw::c_void,
                                                  arg1: bool)
         -> root::boolNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17char_matrix_valueEb"]
        pub fn octave_base_value_char_matrix_value(this:
                                                       *mut ::std::os::raw::c_void,
                                                   force: bool)
         -> root::charMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value16char_array_valueEb"]
        pub fn octave_base_value_char_array_value(this:
                                                      *mut ::std::os::raw::c_void,
                                                  arg1: bool)
         -> root::charNDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value19sparse_matrix_valueEb"]
        pub fn octave_base_value_sparse_matrix_value(this:
                                                         *mut ::std::os::raw::c_void,
                                                     arg1: bool)
         -> root::SparseMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_base_value27sparse_complex_matrix_valueEb"]
        pub fn octave_base_value_sparse_complex_matrix_value(this:
                                                                 *mut ::std::os::raw::c_void,
                                                             arg1: bool)
         -> root::SparseComplexMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value24sparse_bool_matrix_valueEb"]
        pub fn octave_base_value_sparse_bool_matrix_value(this:
                                                              *mut ::std::os::raw::c_void,
                                                          arg1: bool)
         -> root::SparseBoolMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17diag_matrix_valueEb"]
        pub fn octave_base_value_diag_matrix_value(this:
                                                       *mut ::std::os::raw::c_void,
                                                   arg1: bool)
         -> root::DiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value23float_diag_matrix_valueEb"]
        pub fn octave_base_value_float_diag_matrix_value(this:
                                                             *mut ::std::os::raw::c_void,
                                                         arg1: bool)
         -> root::FloatDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value25complex_diag_matrix_valueEb"]
        pub fn octave_base_value_complex_diag_matrix_value(this:
                                                               *mut ::std::os::raw::c_void,
                                                           arg1: bool)
         -> root::ComplexDiagMatrix;
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_base_value31float_complex_diag_matrix_valueEb"]
        pub fn octave_base_value_float_complex_diag_matrix_value(this:
                                                                     *mut ::std::os::raw::c_void,
                                                                 arg1: bool)
         -> root::FloatComplexDiagMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17perm_matrix_valueEv"]
        pub fn octave_base_value_perm_matrix_value(this:
                                                       *mut ::std::os::raw::c_void)
         -> root::PermMatrix;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17int8_scalar_valueEv"]
        pub fn octave_base_value_int8_scalar_value(this:
                                                       *mut ::std::os::raw::c_void)
         -> root::octave_int8;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18int16_scalar_valueEv"]
        pub fn octave_base_value_int16_scalar_value(this:
                                                        *mut ::std::os::raw::c_void)
         -> root::octave_int16;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18int32_scalar_valueEv"]
        pub fn octave_base_value_int32_scalar_value(this:
                                                        *mut ::std::os::raw::c_void)
         -> root::octave_int32;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18int64_scalar_valueEv"]
        pub fn octave_base_value_int64_scalar_value(this:
                                                        *mut ::std::os::raw::c_void)
         -> root::octave_int64;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18uint8_scalar_valueEv"]
        pub fn octave_base_value_uint8_scalar_value(this:
                                                        *mut ::std::os::raw::c_void)
         -> root::octave_uint8;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value19uint16_scalar_valueEv"]
        pub fn octave_base_value_uint16_scalar_value(this:
                                                         *mut ::std::os::raw::c_void)
         -> root::octave_uint16;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value19uint32_scalar_valueEv"]
        pub fn octave_base_value_uint32_scalar_value(this:
                                                         *mut ::std::os::raw::c_void)
         -> root::octave_uint32;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value19uint64_scalar_valueEv"]
        pub fn octave_base_value_uint64_scalar_value(this:
                                                         *mut ::std::os::raw::c_void)
         -> root::octave_uint64;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value16int8_array_valueEv"]
        pub fn octave_base_value_int8_array_value(this:
                                                      *mut ::std::os::raw::c_void)
         -> root::int8NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17int16_array_valueEv"]
        pub fn octave_base_value_int16_array_value(this:
                                                       *mut ::std::os::raw::c_void)
         -> root::int16NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17int32_array_valueEv"]
        pub fn octave_base_value_int32_array_value(this:
                                                       *mut ::std::os::raw::c_void)
         -> root::int32NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17int64_array_valueEv"]
        pub fn octave_base_value_int64_array_value(this:
                                                       *mut ::std::os::raw::c_void)
         -> root::int64NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17uint8_array_valueEv"]
        pub fn octave_base_value_uint8_array_value(this:
                                                       *mut ::std::os::raw::c_void)
         -> root::uint8NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18uint16_array_valueEv"]
        pub fn octave_base_value_uint16_array_value(this:
                                                        *mut ::std::os::raw::c_void)
         -> root::uint16NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18uint32_array_valueEv"]
        pub fn octave_base_value_uint32_array_value(this:
                                                        *mut ::std::os::raw::c_void)
         -> root::uint32NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18uint64_array_valueEv"]
        pub fn octave_base_value_uint64_array_value(this:
                                                        *mut ::std::os::raw::c_void)
         -> root::uint64NDArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value19string_vector_valueEb"]
        pub fn octave_base_value_string_vector_value(this:
                                                         *mut ::std::os::raw::c_void,
                                                     pad: bool)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value12string_valueB5cxx11Eb"]
        pub fn octave_base_value_string_value(this:
                                                  *mut ::std::os::raw::c_void,
                                              force: bool)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value13cellstr_valueB5cxx11Ev"]
        pub fn octave_base_value_cellstr_value(this:
                                                   *mut ::std::os::raw::c_void)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value11range_valueEv"]
        pub fn octave_base_value_range_value(this:
                                                 *mut ::std::os::raw::c_void)
         -> root::Range;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9map_valueEv"]
        pub fn octave_base_value_map_value(this: *mut ::std::os::raw::c_void)
         -> root::octave_map;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value16scalar_map_valueEv"]
        pub fn octave_base_value_scalar_map_value(this:
                                                      *mut ::std::os::raw::c_void)
         -> root::octave_scalar_map;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value8map_keysEv"]
        pub fn octave_base_value_map_keys(this: *mut ::std::os::raw::c_void)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value8nparentsEv"]
        pub fn octave_base_value_nparents(this: *mut ::std::os::raw::c_void)
         -> usize;
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_base_value22parent_class_name_listB5cxx11Ev"]
        pub fn octave_base_value_parent_class_name_list(this:
                                                            *mut ::std::os::raw::c_void)
         -> root::std::list;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value18parent_class_namesEv"]
        pub fn octave_base_value_parent_class_names(this:
                                                        *mut ::std::os::raw::c_void)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value14function_valueEb"]
        pub fn octave_base_value_function_value(this:
                                                    *mut ::std::os::raw::c_void,
                                                silent: bool)
         -> *mut root::octave_function;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value19user_function_valueEb"]
        pub fn octave_base_value_user_function_value(this:
                                                         *mut ::std::os::raw::c_void,
                                                     silent: bool)
         -> *mut root::octave_user_function;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value17user_script_valueEb"]
        pub fn octave_base_value_user_script_value(this:
                                                       *mut ::std::os::raw::c_void,
                                                   silent: bool)
         -> *mut root::octave_user_script;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value15user_code_valueEb"]
        pub fn octave_base_value_user_code_value(this:
                                                     *mut ::std::os::raw::c_void,
                                                 silent: bool)
         -> *mut root::octave_user_code;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value16fcn_handle_valueEb"]
        pub fn octave_base_value_fcn_handle_value(this:
                                                      *mut ::std::os::raw::c_void,
                                                  silent: bool)
         -> *mut root::octave_fcn_handle;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value16fcn_inline_valueEb"]
        pub fn octave_base_value_fcn_inline_value(this:
                                                      *mut ::std::os::raw::c_void,
                                                  silent: bool)
         -> *mut root::octave_fcn_inline;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value10list_valueEv"]
        pub fn octave_base_value_list_value(this: *mut ::std::os::raw::c_void)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value14convert_to_strEbbc"]
        pub fn octave_base_value_convert_to_str(this:
                                                    *mut ::std::os::raw::c_void,
                                                pad: bool, force: bool,
                                                type_: ::std::os::raw::c_char)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value23convert_to_str_internalEbbc"]
        pub fn octave_base_value_convert_to_str_internal(this:
                                                             *mut ::std::os::raw::c_void,
                                                         pad: bool,
                                                         force: bool,
                                                         type_:
                                                             ::std::os::raw::c_char)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value31convert_to_row_or_column_vectorEv"]
        pub fn octave_base_value_convert_to_row_or_column_vector(this:
                                                                     *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value13xstring_valueB5cxx11Ev"]
        pub fn octave_base_value_xstring_value(this:
                                                   *mut ::std::os::raw::c_void)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value5printERSob"]
        pub fn octave_base_value_print(this: *mut ::std::os::raw::c_void,
                                       os: *mut root::std::ostream,
                                       pr_as_read_syntax: bool);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9print_rawERSob"]
        pub fn octave_base_value_print_raw(this: *mut ::std::os::raw::c_void,
                                           os: *mut root::std::ostream,
                                           pr_as_read_syntax: bool);
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_base_value14print_name_tagERSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_base_value_print_name_tag(this:
                                                    *mut ::std::os::raw::c_void,
                                                os: *mut root::std::ostream,
                                                name:
                                                    *const root::std::string)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value15print_with_nameERSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
        pub fn octave_base_value_print_with_name(this:
                                                     *mut ::std::os::raw::c_void,
                                                 output_buf:
                                                     *mut root::std::ostream,
                                                 name:
                                                     *const root::std::string,
                                                 print_padding: bool);
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_base_value10print_infoERSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_base_value_print_info(this: *mut ::std::os::raw::c_void,
                                            os: *mut root::std::ostream,
                                            prefix: *const root::std::string);
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value10save_asciiERSo"]
        pub fn octave_base_value_save_ascii(this: *mut ::std::os::raw::c_void,
                                            os: *mut root::std::ostream)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value10load_asciiERSi"]
        pub fn octave_base_value_load_ascii(this: *mut ::std::os::raw::c_void,
                                            is: *mut root::std::istream)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value11save_binaryERSoRb"]
        pub fn octave_base_value_save_binary(this:
                                                 *mut ::std::os::raw::c_void,
                                             os: *mut root::std::ostream,
                                             save_as_floats: *mut bool)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value11load_binaryERSibN6octave9mach_info12float_formatE"]
        pub fn octave_base_value_load_binary(this:
                                                 *mut ::std::os::raw::c_void,
                                             is: *mut root::std::istream,
                                             swap: bool,
                                             fmt:
                                                 root::octave::mach_info_float_format)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value9save_hdf5ElPKcb"]
        pub fn octave_base_value_save_hdf5(this: *mut ::std::os::raw::c_void,
                                           loc_id: root::octave_hdf5_id,
                                           name:
                                               *const ::std::os::raw::c_char,
                                           save_as_floats: bool) -> bool;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value9load_hdf5ElPKc"]
        pub fn octave_base_value_load_hdf5(this: *mut ::std::os::raw::c_void,
                                           loc_id: root::octave_hdf5_id,
                                           name:
                                               *const ::std::os::raw::c_char)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_base_value5writeER13octave_streamiN13oct_data_conv9data_typeEiN6octave9mach_info12float_formatE"]
        pub fn octave_base_value_write(this: *mut ::std::os::raw::c_void,
                                       os: *mut root::octave_stream,
                                       block_size: ::std::os::raw::c_int,
                                       output_type:
                                           root::oct_data_conv_data_type,
                                       skip: ::std::os::raw::c_int,
                                       flt_fmt:
                                           root::octave::mach_info_float_format)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value10as_mxArrayEv"]
        pub fn octave_base_value_as_mxArray(this: *mut ::std::os::raw::c_void)
         -> *mut root::mxArray;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value4diagEi"]
        pub fn octave_base_value_diag(this: *mut ::std::os::raw::c_void,
                                      k: root::octave_idx_type)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value4diagEii"]
        pub fn octave_base_value_diag1(this: *mut ::std::os::raw::c_void,
                                       m: root::octave_idx_type,
                                       n: root::octave_idx_type)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value4sortEi8sortmode"]
        pub fn octave_base_value_sort(this: *mut ::std::os::raw::c_void,
                                      dim: root::octave_idx_type,
                                      mode: root::sortmode)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value4sortER5ArrayIiEi8sortmode"]
        pub fn octave_base_value_sort1(this: *mut ::std::os::raw::c_void,
                                       sidx: *mut root::Array,
                                       dim: root::octave_idx_type,
                                       mode: root::sortmode)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value9is_sortedE8sortmode"]
        pub fn octave_base_value_is_sorted(this: *mut ::std::os::raw::c_void,
                                           mode: root::sortmode)
         -> root::sortmode;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value13sort_rows_idxE8sortmode"]
        pub fn octave_base_value_sort_rows_idx(this:
                                                   *mut ::std::os::raw::c_void,
                                               mode: root::sortmode)
         -> root::Array;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value14is_sorted_rowsE8sortmode"]
        pub fn octave_base_value_is_sorted_rows(this:
                                                    *mut ::std::os::raw::c_void,
                                                mode: root::sortmode)
         -> root::sortmode;
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value4lockEv"]
        pub fn octave_base_value_lock(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "_ZN17octave_base_value6unlockEv"]
        pub fn octave_base_value_unlock(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value4dumpERSo"]
        pub fn octave_base_value_dump(this: *mut ::std::os::raw::c_void,
                                      os: *mut root::std::ostream);
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value3mapENS_14unary_mapper_tE"]
        pub fn octave_base_value_map(this: *mut ::std::os::raw::c_void,
                                     arg1:
                                         root::octave_base_value_unary_mapper_t)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name = "_ZNK17octave_base_value17fast_elem_extractEi"]
        pub fn octave_base_value_fast_elem_extract(this:
                                                       *mut ::std::os::raw::c_void,
                                                   n: root::octave_idx_type)
         -> root::octave_value;
    }
    extern "C" {
        #[link_name =
              "_ZN17octave_base_value16fast_elem_insertEiRK12octave_value"]
        pub fn octave_base_value_fast_elem_insert(this:
                                                      *mut ::std::os::raw::c_void,
                                                  n: root::octave_idx_type,
                                                  x:
                                                      *const root::octave_value)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZNK17octave_base_value21fast_elem_insert_selfEPv14builtin_type_t"]
        pub fn octave_base_value_fast_elem_insert_self(this:
                                                           *mut ::std::os::raw::c_void,
                                                       where_:
                                                           *mut ::std::os::raw::c_void,
                                                       btyp:
                                                           root::builtin_type_t)
         -> bool;
    }
    extern "C" {
        pub fn octave_value_list_create() -> root::octave_value_list;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_fields {
        pub rep: *mut root::octave_fields_fields_rep,
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_fields_fields_rep {
        pub _base: root::std::map,
        pub count: root::octave_refcount<::std::os::raw::c_int>,
    }
    impl Clone for octave_fields_fields_rep {
        fn clone(&self) -> Self { *self }
    }
    pub type octave_fields_const_iterator = u64;
    pub type octave_fields_iterator = root::octave_fields_const_iterator;
    extern "C" {
        #[link_name =
              "_ZNK13octave_fields7isfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_fields_isfield(this: *const root::octave_fields,
                                     name: *const root::std::string) -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZNK13octave_fields8getfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_fields_getfield(this: *const root::octave_fields,
                                      name: *const root::std::string)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name =
              "_ZN13octave_fields8getfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_fields_getfield1(this: *mut root::octave_fields,
                                       name: *const root::std::string)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name =
              "_ZN13octave_fields7rmfieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_fields_rmfield(this: *mut root::octave_fields,
                                     name: *const root::std::string)
         -> root::octave_idx_type;
    }
    extern "C" {
        #[link_name = "_ZN13octave_fields11orderfieldsER5ArrayIiE"]
        pub fn octave_fields_orderfields(this: *mut root::octave_fields,
                                         perm: *mut root::Array);
    }
    extern "C" {
        #[link_name = "_ZNK13octave_fields17equal_up_to_orderERKS_Pi"]
        pub fn octave_fields_equal_up_to_order(this:
                                                   *const root::octave_fields,
                                               other:
                                                   *const root::octave_fields,
                                               perm:
                                                   *mut root::octave_idx_type)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK13octave_fields17equal_up_to_orderERKS_R5ArrayIiE"]
        pub fn octave_fields_equal_up_to_order1(this:
                                                    *const root::octave_fields,
                                                other:
                                                    *const root::octave_fields,
                                                perm: *mut root::Array)
         -> bool;
    }
    extern "C" {
        #[link_name = "_ZNK13octave_fields10fieldnamesEv"]
        pub fn octave_fields_fieldnames(this: *const root::octave_fields)
         -> root::string_vector;
    }
    extern "C" {
        #[link_name = "_ZN13octave_fieldsC1ERK13string_vector"]
        pub fn octave_fields_octave_fields(this: *mut root::octave_fields,
                                           arg1: *const root::string_vector);
    }
    extern "C" {
        #[link_name = "_ZN13octave_fieldsC1EPKPKc"]
        pub fn octave_fields_octave_fields1(this: *mut root::octave_fields,
                                            arg1:
                                                *const *const ::std::os::raw::c_char);
    }
    impl octave_fields {
        #[inline]
        pub unsafe fn isfield(&self, name: *const root::std::string) -> bool {
            octave_fields_isfield(self, name)
        }
        #[inline]
        pub unsafe fn getfield(&self, name: *const root::std::string)
         -> root::octave_idx_type {
            octave_fields_getfield(self, name)
        }
        #[inline]
        pub unsafe fn getfield1(&mut self, name: *const root::std::string)
         -> root::octave_idx_type {
            octave_fields_getfield1(self, name)
        }
        #[inline]
        pub unsafe fn rmfield(&mut self, name: *const root::std::string)
         -> root::octave_idx_type {
            octave_fields_rmfield(self, name)
        }
        #[inline]
        pub unsafe fn orderfields(&mut self, perm: *mut root::Array) {
            octave_fields_orderfields(self, perm)
        }
        #[inline]
        pub unsafe fn equal_up_to_order(&self,
                                        other: *const root::octave_fields,
                                        perm: *mut root::octave_idx_type)
         -> bool {
            octave_fields_equal_up_to_order(self, other, perm)
        }
        #[inline]
        pub unsafe fn equal_up_to_order1(&self,
                                         other: *const root::octave_fields,
                                         perm: *mut root::Array) -> bool {
            octave_fields_equal_up_to_order1(self, other, perm)
        }
        #[inline]
        pub unsafe fn fieldnames(&self) -> root::string_vector {
            octave_fields_fieldnames(self)
        }
        #[inline]
        pub unsafe fn new(arg1: *const root::string_vector) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_fields_octave_fields(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const *const ::std::os::raw::c_char)
         -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_fields_octave_fields1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_value_typeinfo {
        pub num_types: ::std::os::raw::c_int,
        pub types: root::Array,
        pub vals: root::Array,
        pub unary_class_ops: root::Array,
        pub unary_ops: root::Array,
        pub non_const_unary_ops: root::Array,
        pub binary_class_ops: root::Array,
        pub binary_ops: root::Array,
        pub compound_binary_class_ops: root::Array,
        pub compound_binary_ops: root::Array,
        pub cat_ops: root::Array,
        pub assign_ops: root::Array,
        pub assignany_ops: root::Array,
        pub pref_assign_conv: root::Array,
        pub widening_ops: root::Array,
    }
    pub type octave_value_typeinfo_unary_class_op_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *const root::octave_value)
                                  -> root::octave_value>;
    pub type octave_value_typeinfo_unary_op_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *const root::octave_base_value)
                                  -> root::octave_value>;
    pub type octave_value_typeinfo_non_const_unary_op_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *mut root::octave_base_value)>;
    pub type octave_value_typeinfo_binary_class_op_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *const root::octave_value,
                                                   arg2:
                                                       *const root::octave_value)
                                  -> root::octave_value>;
    pub type octave_value_typeinfo_binary_op_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *const root::octave_base_value,
                                                   arg2:
                                                       *const root::octave_base_value)
                                  -> root::octave_value>;
    pub type octave_value_typeinfo_cat_op_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *mut root::octave_base_value,
                                                   arg2:
                                                       *const root::octave_base_value,
                                                   ra_idx: *const root::Array)
                                  -> root::octave_value>;
    pub type octave_value_typeinfo_assign_op_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *mut root::octave_base_value,
                                                   arg2:
                                                       *const root::octave_value_list,
                                                   arg3:
                                                       *const root::octave_base_value)
                                  -> root::octave_value>;
    pub type octave_value_typeinfo_assignany_op_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *mut root::octave_base_value,
                                                   arg2:
                                                       *const root::octave_value_list,
                                                   arg3:
                                                       *const root::octave_value)
                                  -> root::octave_value>;
    extern "C" {
        #[link_name = "_ZN21octave_value_typeinfo11init_tab_szE"]
        pub static octave_value_typeinfo_init_tab_sz: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN21octave_value_typeinfo8instanceE"]
        pub static mut octave_value_typeinfo_instance:
                   *mut root::octave_value_typeinfo;
    }
    extern "C" {
        #[link_name = "_ZN21octave_value_typeinfo11instance_okEv"]
        pub fn octave_value_typeinfo_instance_ok() -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo13register_typeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RK12octave_value"]
        pub fn octave_value_typeinfo_register_type(arg1:
                                                       *const root::std::string,
                                                   arg2:
                                                       *const root::std::string,
                                                   arg3:
                                                       *const root::octave_value)
         -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo23register_unary_class_opEN12octave_value8unary_opEPFS0_RKS0_E"]
        pub fn octave_value_typeinfo_register_unary_class_op(arg1:
                                                                 root::octave_value_unary_op,
                                                             arg2:
                                                                 root::octave_value_typeinfo_unary_class_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo17register_unary_opEN12octave_value8unary_opEiPFS0_RK17octave_base_valueE"]
        pub fn octave_value_typeinfo_register_unary_op(arg1:
                                                           root::octave_value_unary_op,
                                                       arg2:
                                                           ::std::os::raw::c_int,
                                                       arg3:
                                                           root::octave_value_typeinfo_unary_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo27register_non_const_unary_opEN12octave_value8unary_opEiPFvR17octave_base_valueE"]
        pub fn octave_value_typeinfo_register_non_const_unary_op(arg1:
                                                                     root::octave_value_unary_op,
                                                                 arg2:
                                                                     ::std::os::raw::c_int,
                                                                 arg3:
                                                                     root::octave_value_typeinfo_non_const_unary_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo24register_binary_class_opEN12octave_value9binary_opEPFS0_RKS0_S3_E"]
        pub fn octave_value_typeinfo_register_binary_class_op(arg1:
                                                                  root::octave_value_binary_op,
                                                              arg2:
                                                                  root::octave_value_typeinfo_binary_class_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo18register_binary_opEN12octave_value9binary_opEiiPFS0_RK17octave_base_valueS4_E"]
        pub fn octave_value_typeinfo_register_binary_op(arg1:
                                                            root::octave_value_binary_op,
                                                        arg2:
                                                            ::std::os::raw::c_int,
                                                        arg3:
                                                            ::std::os::raw::c_int,
                                                        arg4:
                                                            root::octave_value_typeinfo_binary_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo24register_binary_class_opEN12octave_value18compound_binary_opEPFS0_RKS0_S3_E"]
        pub fn octave_value_typeinfo_register_binary_class_op1(arg1:
                                                                   root::octave_value_compound_binary_op,
                                                               arg2:
                                                                   root::octave_value_typeinfo_binary_class_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo18register_binary_opEN12octave_value18compound_binary_opEiiPFS0_RK17octave_base_valueS4_E"]
        pub fn octave_value_typeinfo_register_binary_op1(arg1:
                                                             root::octave_value_compound_binary_op,
                                                         arg2:
                                                             ::std::os::raw::c_int,
                                                         arg3:
                                                             ::std::os::raw::c_int,
                                                         arg4:
                                                             root::octave_value_typeinfo_binary_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo15register_cat_opEiiPF12octave_valueR17octave_base_valueRKS1_RK5ArrayIiEE"]
        pub fn octave_value_typeinfo_register_cat_op(arg1:
                                                         ::std::os::raw::c_int,
                                                     arg2:
                                                         ::std::os::raw::c_int,
                                                     arg3:
                                                         root::octave_value_typeinfo_cat_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo18register_assign_opEN12octave_value9assign_opEiiPFS0_R17octave_base_valueRK17octave_value_listRKS2_E"]
        pub fn octave_value_typeinfo_register_assign_op(arg1:
                                                            root::octave_value_assign_op,
                                                        arg2:
                                                            ::std::os::raw::c_int,
                                                        arg3:
                                                            ::std::os::raw::c_int,
                                                        arg4:
                                                            root::octave_value_typeinfo_assign_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo21register_assignany_opEN12octave_value9assign_opEiPFS0_R17octave_base_valueRK17octave_value_listRKS0_E"]
        pub fn octave_value_typeinfo_register_assignany_op(arg1:
                                                               root::octave_value_assign_op,
                                                           arg2:
                                                               ::std::os::raw::c_int,
                                                           arg3:
                                                               root::octave_value_typeinfo_assignany_op_fcn)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo25register_pref_assign_convEiii"]
        pub fn octave_value_typeinfo_register_pref_assign_conv(arg1:
                                                                   ::std::os::raw::c_int,
                                                               arg2:
                                                                   ::std::os::raw::c_int,
                                                               arg3:
                                                                   ::std::os::raw::c_int)
         -> bool;
    }
    extern "C" {
        #[link_name =
              "_ZN21octave_value_typeinfo20register_widening_opEiiPFP17octave_base_valueRKS0_E"]
        pub fn octave_value_typeinfo_register_widening_op(arg1:
                                                              ::std::os::raw::c_int,
                                                          arg2:
                                                              ::std::os::raw::c_int,
                                                          arg3:
                                                              root::octave_base_value_type_conv_fcn)
         -> bool;
    }
    impl octave_value_typeinfo {
        #[inline]
        pub unsafe fn instance_ok() -> bool {
            octave_value_typeinfo_instance_ok()
        }
        #[inline]
        pub unsafe fn register_type(arg1: *const root::std::string,
                                    arg2: *const root::std::string,
                                    arg3: *const root::octave_value)
         -> ::std::os::raw::c_int {
            octave_value_typeinfo_register_type(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_unary_class_op(arg1:
                                                  root::octave_value_unary_op,
                                              arg2:
                                                  root::octave_value_typeinfo_unary_class_op_fcn)
         -> bool {
            octave_value_typeinfo_register_unary_class_op(arg1, arg2)
        }
        #[inline]
        pub unsafe fn register_unary_op(arg1: root::octave_value_unary_op,
                                        arg2: ::std::os::raw::c_int,
                                        arg3:
                                            root::octave_value_typeinfo_unary_op_fcn)
         -> bool {
            octave_value_typeinfo_register_unary_op(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_non_const_unary_op(arg1:
                                                      root::octave_value_unary_op,
                                                  arg2: ::std::os::raw::c_int,
                                                  arg3:
                                                      root::octave_value_typeinfo_non_const_unary_op_fcn)
         -> bool {
            octave_value_typeinfo_register_non_const_unary_op(arg1, arg2,
                                                              arg3)
        }
        #[inline]
        pub unsafe fn register_binary_class_op(arg1:
                                                   root::octave_value_binary_op,
                                               arg2:
                                                   root::octave_value_typeinfo_binary_class_op_fcn)
         -> bool {
            octave_value_typeinfo_register_binary_class_op(arg1, arg2)
        }
        #[inline]
        pub unsafe fn register_binary_op(arg1: root::octave_value_binary_op,
                                         arg2: ::std::os::raw::c_int,
                                         arg3: ::std::os::raw::c_int,
                                         arg4:
                                             root::octave_value_typeinfo_binary_op_fcn)
         -> bool {
            octave_value_typeinfo_register_binary_op(arg1, arg2, arg3, arg4)
        }
        #[inline]
        pub unsafe fn register_binary_class_op1(arg1:
                                                    root::octave_value_compound_binary_op,
                                                arg2:
                                                    root::octave_value_typeinfo_binary_class_op_fcn)
         -> bool {
            octave_value_typeinfo_register_binary_class_op1(arg1, arg2)
        }
        #[inline]
        pub unsafe fn register_binary_op1(arg1:
                                              root::octave_value_compound_binary_op,
                                          arg2: ::std::os::raw::c_int,
                                          arg3: ::std::os::raw::c_int,
                                          arg4:
                                              root::octave_value_typeinfo_binary_op_fcn)
         -> bool {
            octave_value_typeinfo_register_binary_op1(arg1, arg2, arg3, arg4)
        }
        #[inline]
        pub unsafe fn register_cat_op(arg1: ::std::os::raw::c_int,
                                      arg2: ::std::os::raw::c_int,
                                      arg3:
                                          root::octave_value_typeinfo_cat_op_fcn)
         -> bool {
            octave_value_typeinfo_register_cat_op(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_assign_op(arg1: root::octave_value_assign_op,
                                         arg2: ::std::os::raw::c_int,
                                         arg3: ::std::os::raw::c_int,
                                         arg4:
                                             root::octave_value_typeinfo_assign_op_fcn)
         -> bool {
            octave_value_typeinfo_register_assign_op(arg1, arg2, arg3, arg4)
        }
        #[inline]
        pub unsafe fn register_assignany_op(arg1:
                                                root::octave_value_assign_op,
                                            arg2: ::std::os::raw::c_int,
                                            arg3:
                                                root::octave_value_typeinfo_assignany_op_fcn)
         -> bool {
            octave_value_typeinfo_register_assignany_op(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_pref_assign_conv(arg1: ::std::os::raw::c_int,
                                                arg2: ::std::os::raw::c_int,
                                                arg3: ::std::os::raw::c_int)
         -> bool {
            octave_value_typeinfo_register_pref_assign_conv(arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn register_widening_op(arg1: ::std::os::raw::c_int,
                                           arg2: ::std::os::raw::c_int,
                                           arg3:
                                               root::octave_base_value_type_conv_fcn)
         -> bool {
            octave_value_typeinfo_register_widening_op(arg1, arg2, arg3)
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_builtin {
        pub _base: root::octave_function,
        pub f: root::octave_builtin_fcn,
        pub file: root::std::string,
        pub jtype: *mut root::jit_type,
    }
    pub type octave_builtin_fcn =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *const root::octave_value_list,
                                                   arg2:
                                                       ::std::os::raw::c_int)
                                  -> root::octave_value_list>;
    extern "C" {
        #[link_name = "_ZN14octave_builtin16curr_lvalue_listB5cxx11E"]
        pub static mut octave_builtin_curr_lvalue_list:
                   *const root::std::list;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin4t_idE"]
        pub static mut octave_builtin_t_id: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin6t_nameB5cxx11E"]
        pub static octave_builtin_t_name: root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin6c_nameB5cxx11E"]
        pub static octave_builtin_c_name: root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK14octave_builtin6to_jitEv"]
        pub fn octave_builtin_to_jit(this: *const root::octave_builtin)
         -> *mut root::jit_type;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin9stash_jitER8jit_type"]
        pub fn octave_builtin_stash_jit(this: *mut root::octave_builtin,
                                        type_: *mut root::jit_type);
    }
    extern "C" {
        #[link_name = "_ZNK14octave_builtin8functionEv"]
        pub fn octave_builtin_function(this: *const root::octave_builtin)
         -> root::octave_builtin_fcn;
    }
    extern "C" {
        #[link_name = "_ZN14octave_builtin13register_typeEv"]
        pub fn octave_builtin_register_type();
    }
    impl octave_builtin {
        #[inline]
        pub unsafe fn to_jit(&self) -> *mut root::jit_type {
            octave_builtin_to_jit(self)
        }
        #[inline]
        pub unsafe fn stash_jit(&mut self, type_: *mut root::jit_type) {
            octave_builtin_stash_jit(self, type_)
        }
        #[inline]
        pub unsafe fn function(&self) -> root::octave_builtin_fcn {
            octave_builtin_function(self)
        }
        #[inline]
        pub unsafe fn register_type() { octave_builtin_register_type() }
    }
    extern "C" {
        #[link_name =
              "_ZN14octave_builtin7subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEi"]
        pub fn octave_builtin_subsref(this: *mut ::std::os::raw::c_void,
                                      type_: *const root::std::string,
                                      idx: *const root::std::list,
                                      nargout: ::std::os::raw::c_int)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN14octave_builtin7subsrefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listI17octave_value_listSaIS9_EEEiPKNS8_I13octave_lvalueSaISE_EEE"]
        pub fn octave_builtin_subsref1(this: *mut ::std::os::raw::c_void,
                                       type_: *const root::std::string,
                                       idx: *const root::std::list,
                                       nargout: ::std::os::raw::c_int,
                                       lvalue_list: *const root::std::list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN14octave_builtin17do_multi_index_opEiRK17octave_value_list"]
        pub fn octave_builtin_do_multi_index_op(this:
                                                    *mut ::std::os::raw::c_void,
                                                nargout:
                                                    ::std::os::raw::c_int,
                                                args:
                                                    *const root::octave_value_list)
         -> root::octave_value_list;
    }
    extern "C" {
        #[link_name =
              "_ZN14octave_builtin17do_multi_index_opEiRK17octave_value_listPKNSt7__cxx114listI13octave_lvalueSaIS5_EEE"]
        pub fn octave_builtin_do_multi_index_op1(this:
                                                     *mut ::std::os::raw::c_void,
                                                 nargout:
                                                     ::std::os::raw::c_int,
                                                 args:
                                                     *const root::octave_value_list,
                                                 lvalue_list:
                                                     *const root::std::list)
         -> root::octave_value_list;
    }
    pub type octave_shlib = root::octave::dynamic_library;
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_dld_function {
        pub _base: root::octave_builtin,
        pub sh_lib: root::octave::dynamic_library,
        pub t_checked: root::octave::sys::time,
        pub system_fcn_file: bool,
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_function4t_idE"]
        pub static mut octave_dld_function_t_id: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_function6t_nameB5cxx11E"]
        pub static octave_dld_function_t_name: root::std::string;
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_function6c_nameB5cxx11E"]
        pub static octave_dld_function_c_name: root::std::string;
    }
    extern "C" {
        #[link_name =
              "_ZN19octave_dld_function6createEPF17octave_value_listRKS0_iERKN6octave15dynamic_libraryERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESG_"]
        pub fn octave_dld_function_create(ff: root::octave_builtin_fcn,
                                          shl:
                                              *const root::octave::dynamic_library,
                                          nm: *const root::std::string,
                                          ds: *const root::std::string)
         -> *mut root::octave_dld_function;
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_function13register_typeEv"]
        pub fn octave_dld_function_register_type();
    }
    extern "C" {
        #[link_name =
              "_ZN19octave_dld_functionC1EPF17octave_value_listRKS0_iERKN6octave15dynamic_libraryERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESG_"]
        pub fn octave_dld_function_octave_dld_function(this:
                                                           *mut root::octave_dld_function,
                                                       ff:
                                                           root::octave_builtin_fcn,
                                                       shl:
                                                           *const root::octave::dynamic_library,
                                                       nm:
                                                           *const root::std::string,
                                                       ds:
                                                           *const root::std::string);
    }
    impl octave_dld_function {
        #[inline]
        pub unsafe fn create(ff: root::octave_builtin_fcn,
                             shl: *const root::octave::dynamic_library,
                             nm: *const root::std::string,
                             ds: *const root::std::string)
         -> *mut root::octave_dld_function {
            octave_dld_function_create(ff, shl, nm, ds)
        }
        #[inline]
        pub unsafe fn register_type() { octave_dld_function_register_type() }
        #[inline]
        pub unsafe fn new(ff: root::octave_builtin_fcn,
                          shl: *const root::octave::dynamic_library,
                          nm: *const root::std::string,
                          ds: *const root::std::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_dld_function_octave_dld_function(&mut __bindgen_tmp, ff,
                                                    shl, nm, ds);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "_ZN19octave_dld_functionD0Ev"]
        pub fn octave_dld_function_octave_dld_function_destructor(this:
                                                                      *mut root::octave_dld_function);
    }
    extern "C" {
        #[link_name = "_ZNK19octave_dld_function13fcn_file_nameB5cxx11Ev"]
        pub fn octave_dld_function_fcn_file_name(this:
                                                     *mut ::std::os::raw::c_void)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_ZNK19octave_dld_function11time_parsedEv"]
        pub fn octave_dld_function_time_parsed(this:
                                                   *mut ::std::os::raw::c_void)
         -> root::octave::sys::time;
    }
    extern "C" {
        #[link_name = "_Z20octave_www_statementB5cxx11b"]
        pub fn octave_www_statement(html: bool) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z24octave_contrib_statementB5cxx11b"]
        pub fn octave_contrib_statement(html: bool) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z21octave_bugs_statementB5cxx11b"]
        pub fn octave_bugs_statement(html: bool) -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z33octave_name_version_and_copyrightB5cxx11v"]
        pub fn octave_name_version_and_copyright() -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_Z50octave_name_version_copyright_copying_and_warrantybRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_name_version_copyright_copying_and_warranty(html: bool,
                                                                  extra_info:
                                                                      *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name =
              "_Z55octave_name_version_copyright_copying_warranty_and_bugsbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn octave_name_version_copyright_copying_warranty_and_bugs(html:
                                                                           bool,
                                                                       extra_info:
                                                                           *const root::std::string)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z22octave_startup_messageB5cxx11b"]
        pub fn octave_startup_message(html: bool) -> root::std::string;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_auto_shlib {
        pub _base: root::octave::dynamic_library,
    }
    pub type octave_dld_fcn_installer =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *const root::octave::dynamic_library,
                                                   relative: bool) -> bool>;
    pub type octave_dld_fcn_getter =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *const root::octave::dynamic_library,
                                                   relative: bool)
                                  -> *mut root::octave_function>;
    #[repr(C)]
    pub struct octave_pager_buf__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_pager_buf {
        pub vtable_: *const octave_pager_buf__bindgen_vtable,
        pub _base: root::std::stringbuf,
        pub diary_skip: usize,
    }
    extern "C" {
        #[link_name =
              "_ZN16octave_pager_buf31flush_current_contents_to_diaryEv"]
        pub fn octave_pager_buf_flush_current_contents_to_diary(this:
                                                                    *mut root::octave_pager_buf);
    }
    extern "C" {
        #[link_name = "_ZN16octave_pager_buf14set_diary_skipEv"]
        pub fn octave_pager_buf_set_diary_skip(this:
                                                   *mut root::octave_pager_buf);
    }
    impl Clone for octave_pager_buf {
        fn clone(&self) -> Self { *self }
    }
    impl octave_pager_buf {
        #[inline]
        pub unsafe fn flush_current_contents_to_diary(&mut self) {
            octave_pager_buf_flush_current_contents_to_diary(self)
        }
        #[inline]
        pub unsafe fn set_diary_skip(&mut self) {
            octave_pager_buf_set_diary_skip(self)
        }
    }
    extern "C" {
        #[link_name = "_ZN16octave_pager_buf4syncEv"]
        pub fn octave_pager_buf_sync(this: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    pub struct octave_pager_stream__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_pager_stream {
        pub vtable_: *const octave_pager_stream__bindgen_vtable,
        pub _base: root::std::ostream,
        pub pb: *mut root::octave_pager_buf,
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_stream8instanceE"]
        pub static mut octave_pager_stream_instance:
                   *mut root::octave_pager_stream;
    }
    extern "C" {
        #[link_name =
              "_ZN19octave_pager_stream31flush_current_contents_to_diaryEv"]
        pub fn octave_pager_stream_flush_current_contents_to_diary();
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_stream14set_diary_skipEv"]
        pub fn octave_pager_stream_set_diary_skip();
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_stream6streamEv"]
        pub fn octave_pager_stream_stream() -> *mut root::std::ostream;
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_stream5resetEv"]
        pub fn octave_pager_stream_reset();
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_streamC1Ev"]
        pub fn octave_pager_stream_octave_pager_stream(this:
                                                           *mut root::octave_pager_stream);
    }
    impl octave_pager_stream {
        #[inline]
        pub unsafe fn flush_current_contents_to_diary() {
            octave_pager_stream_flush_current_contents_to_diary()
        }
        #[inline]
        pub unsafe fn set_diary_skip() {
            octave_pager_stream_set_diary_skip()
        }
        #[inline]
        pub unsafe fn stream() -> *mut root::std::ostream {
            octave_pager_stream_stream()
        }
        #[inline]
        pub unsafe fn reset() { octave_pager_stream_reset() }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_pager_stream_octave_pager_stream(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "_ZN19octave_pager_streamD0Ev"]
        pub fn octave_pager_stream_octave_pager_stream_destructor(this:
                                                                      *mut root::octave_pager_stream);
    }
    #[repr(C)]
    pub struct octave_diary_buf__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct octave_diary_buf {
        pub vtable_: *const octave_diary_buf__bindgen_vtable,
        pub _base: root::std::stringbuf,
    }
    impl Clone for octave_diary_buf {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        #[link_name = "_ZN16octave_diary_buf4syncEv"]
        pub fn octave_diary_buf_sync(this: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    pub struct octave_diary_stream__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug)]
    pub struct octave_diary_stream {
        pub vtable_: *const octave_diary_stream__bindgen_vtable,
        pub _base: root::std::ostream,
        pub db: *mut root::octave_diary_buf,
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_stream8instanceE"]
        pub static mut octave_diary_stream_instance:
                   *mut root::octave_diary_stream;
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_stream6streamEv"]
        pub fn octave_diary_stream_stream() -> *mut root::std::ostream;
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_stream5resetEv"]
        pub fn octave_diary_stream_reset();
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_streamC1Ev"]
        pub fn octave_diary_stream_octave_diary_stream(this:
                                                           *mut root::octave_diary_stream);
    }
    impl octave_diary_stream {
        #[inline]
        pub unsafe fn stream() -> *mut root::std::ostream {
            octave_diary_stream_stream()
        }
        #[inline]
        pub unsafe fn reset() { octave_diary_stream_reset() }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            octave_diary_stream_octave_diary_stream(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "_ZN19octave_diary_streamD0Ev"]
        pub fn octave_diary_stream_octave_diary_stream_destructor(this:
                                                                      *mut root::octave_diary_stream);
    }
    extern "C" {
        #[link_name = "_Z13octave_formatRSoPKcz"]
        pub fn octave_format(os: *mut root::std::ostream,
                             fmt: *const ::std::os::raw::c_char, ...)
         -> usize;
    }
    extern "C" {
        #[link_name = "_Z14octave_vformatRSoPKcP13__va_list_tag"]
        pub fn octave_vformat(os: *mut root::std::ostream,
                              fmt: *const ::std::os::raw::c_char,
                              args: *mut root::__va_list_tag) -> usize;
    }
    extern "C" {
        #[link_name = "_Z16octave_vasprintfB5cxx11PKcP13__va_list_tag"]
        pub fn octave_vasprintf(fmt: *const ::std::os::raw::c_char,
                                args: *mut root::__va_list_tag)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z15octave_asprintfB5cxx11PKcz"]
        pub fn octave_asprintf(fmt: *const ::std::os::raw::c_char, ...)
         -> root::std::string;
    }
    extern "C" {
        #[link_name = "_Z12octave_sleepd"]
        pub fn octave_sleep(seconds: f64);
    }
}
