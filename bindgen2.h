# 1 "bindgen.h"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 355 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "bindgen.h" 2


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 1
# 26 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/octave-config.h" 1
# 64 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/octave-config.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdint" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdint" 3





# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 1 3
# 186 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
namespace std
{
  typedef long long unsigned int size_t;
  typedef long long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 430 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/os_defines.h" 1 3
# 431 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 2 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/cpu_defines.h" 1 3
# 434 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 2 3
# 39 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdint" 2 3


# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stdint.h" 1 3
# 63 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stdint.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\stdint.h" 1 3








# 1 "C:\\Octave\\Octave-4.2.1\\include\\stdint.h" 1 3
# 28 "C:\\Octave\\Octave-4.2.1\\include\\stdint.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 1 3
# 12 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include/_mingw_mac.h" 1 3
# 13 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\include/_mingw_secapi.h" 1 3
# 44 "C:\\Octave\\Octave-4.2.1\\include/_mingw_secapi.h" 3
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
# 14 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 2 3
# 275 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\vadefs.h" 1 3
# 26 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\vadefs.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\vadefs.h" 1 3








# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 1 3
# 565 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include/sdks/_mingw_directx.h" 1 3
# 566 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\include/sdks/_mingw_ddk.h" 1 3
# 567 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 2 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\vadefs.h" 2 3




#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "C:\\Octave\\Octave-4.2.1\\include\\vadefs.h" 3
}



#pragma pack(pop)
# 27 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\vadefs.h" 2 3
# 276 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 2 3
# 534 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 3
extern "C" {
# 548 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 3
const char *__mingw_get_crt_info (void);


}
# 11 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 2 3




#pragma pack(push,_CRT_PACKING)
# 35 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
__extension__ typedef unsigned long long size_t;
# 45 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
__extension__ typedef long long ssize_t;






typedef size_t rsize_t;
# 62 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
__extension__ typedef long long intptr_t;
# 75 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
__extension__ typedef unsigned long long uintptr_t;
# 88 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
__extension__ typedef long long ptrdiff_t;
# 106 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;
# 138 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
typedef __time64_t time_t;
# 422 "C:\\Octave\\Octave-4.2.1\\include\\crtdefs.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;







#pragma pack(pop)
# 29 "C:\\Octave\\Octave-4.2.1\\include\\stdint.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stddef.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\include\\stdint.h" 2 3


typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned uint32_t;
__extension__ typedef long long int64_t;
__extension__ typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned uint_least32_t;
__extension__ typedef long long int_least64_t;
__extension__ typedef unsigned long long uint_least64_t;





typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
__extension__ typedef long long int_fast64_t;
__extension__ typedef unsigned long long uint_fast64_t;


__extension__ typedef long long intmax_t;
__extension__ typedef unsigned long long uintmax_t;
# 10 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\stdint.h" 2 3
# 64 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stdint.h" 2 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 65 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/octave-config.h" 2
# 94 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/octave-config.h"
template <typename T>
static inline void
octave_unused_parameter (const T&)
{ }
# 114 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/octave-config.h"
typedef int octave_idx_type;
# 27 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Matrix.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Matrix.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MatrixType.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MatrixType.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/quit.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/quit.h"
# 1 "C:\\Octave\\Octave-4.2.1\\include\\setjmp.h" 1 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\setjmp.h" 3
#pragma pack(push,_CRT_PACKING)
# 26 "C:\\Octave\\Octave-4.2.1\\include\\setjmp.h" 3
extern "C" {
# 112 "C:\\Octave\\Octave-4.2.1\\include\\setjmp.h" 3
  typedef __attribute__ ((__aligned__ (16))) struct _SETJMP_FLOAT128 {
    __extension__ unsigned long long Part[2];
  } SETJMP_FLOAT128;


  typedef SETJMP_FLOAT128 _JBTYPE;

  typedef struct _JUMP_BUFFER {
    __extension__ unsigned long long Frame;
    __extension__ unsigned long long Rbx;
    __extension__ unsigned long long Rsp;
    __extension__ unsigned long long Rbp;
    __extension__ unsigned long long Rsi;
    __extension__ unsigned long long Rdi;
    __extension__ unsigned long long R12;
    __extension__ unsigned long long R13;
    __extension__ unsigned long long R14;
    __extension__ unsigned long long R15;
    __extension__ unsigned long long Rip;
    __extension__ unsigned long long Spare;
    SETJMP_FLOAT128 Xmm6;
    SETJMP_FLOAT128 Xmm7;
    SETJMP_FLOAT128 Xmm8;
    SETJMP_FLOAT128 Xmm9;
    SETJMP_FLOAT128 Xmm10;
    SETJMP_FLOAT128 Xmm11;
    SETJMP_FLOAT128 Xmm12;
    SETJMP_FLOAT128 Xmm13;
    SETJMP_FLOAT128 Xmm14;
    SETJMP_FLOAT128 Xmm15;
  } _JUMP_BUFFER;
# 168 "C:\\Octave\\Octave-4.2.1\\include\\setjmp.h" 3
  typedef _JBTYPE jmp_buf[16];



void * __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) mingw_getsp (void);
# 185 "C:\\Octave\\Octave-4.2.1\\include\\setjmp.h" 3
  int __attribute__((__cdecl__)) __attribute__ ((__nothrow__,__returns_twice__)) _setjmp(jmp_buf _Buf, void *_Ctx);
  int __attribute__((__cdecl__)) __attribute__ ((__nothrow__,__returns_twice__)) _setjmp3(jmp_buf _Buf, void *_Ctx);
# 213 "C:\\Octave\\Octave-4.2.1\\include\\setjmp.h" 3
  __attribute__((noreturn)) __attribute__ ((__nothrow__)) void __attribute__((__cdecl__)) ms_longjmp(jmp_buf _Buf,int _Value) ;
  __attribute__((noreturn)) __attribute__ ((__nothrow__)) void __attribute__((__cdecl__)) longjmp(jmp_buf _Buf,int _Value);


}


#pragma pack(pop)
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/quit.h" 2



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\csignal" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\csignal" 3


# 1 "C:\\Octave\\Octave-4.2.1\\include\\signal.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\signal.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\pthread_signal.h" 1 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\signal.h" 2 3


extern "C" {




  typedef int sig_atomic_t;
# 48 "C:\\Octave\\Octave-4.2.1\\include\\signal.h" 3
  typedef void (*__p_sig_fn_t)(int);
# 57 "C:\\Octave\\Octave-4.2.1\\include\\signal.h" 3
  extern void **__attribute__((__cdecl__)) __pxcptinfoptrs(void);


  __p_sig_fn_t __attribute__((__cdecl__)) signal(int _SigNum,__p_sig_fn_t _Func);
  int __attribute__((__cdecl__)) raise(int _SigNum);


}
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\csignal" 2 3







namespace std
{
  using ::sig_atomic_t;
  using ::signal;
  using ::raise;
}
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/quit.h" 2
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stringfwd.h" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stringfwd.h" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/memoryfwd.h" 1 3
# 47 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/memoryfwd.h" 3



namespace std
{
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stringfwd.h" 2 3

namespace std
{
# 52 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stringfwd.h" 3
  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;


  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;


  typedef basic_string<wchar_t> wstring;





  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/char_traits.h" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/char_traits.h" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 1 3
# 60 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/functexcept.h" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/functexcept.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/exception_defines.h" 1 3
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/functexcept.h" 2 3

namespace std
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/cpp_type_traits.h" 1 3
# 36 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/cpp_type_traits.h" 3
# 68 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/cpp_type_traits.h" 3
namespace __gnu_cxx
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



}
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/type_traits.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/type_traits.h" 3




namespace __gnu_cxx
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/numeric_traits.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/numeric_traits.h" 3




namespace __gnu_cxx
{
# 54 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_pair.h" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_pair.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/concept_check.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/concept_check.h" 3
# 35 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 2 3

namespace std
{







  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) noexcept
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
namespace std
{
  typedef unsigned short uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std
{
# 68 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const { return value; }






    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;



  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public integral_constant<bool, !_Pp::value>
    { };






  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };
# 256 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 284 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &&>
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args...)>
    : public true_type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args......)>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };




  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };
# 652 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>::type
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>::type
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>::type
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>::type
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 864 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>::type
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>::type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };
# 1300 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>::type
    { };


  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { };


  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };
# 1499 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };
# 1556 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };
# 1628 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      typedef conditional<__b2, unsigned int, unsigned long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<wchar_t> : __make_signed<unsigned short>
    { };



  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };
# 1725 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {

      typedef signed char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);
      typedef conditional<__b2, signed int, signed long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, signed short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;
# 1783 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };
# 1820 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };
# 1859 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 1879 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };




  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;






  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __success_type<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __success_type<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __success_type<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      )> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __success_type<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      )> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type, _Arg>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type, _Arg, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __success_type<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
     _Functor, _ArgTypes...
      >::type
    { };
# 2284 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\type_traits" 3
}
# 58 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 2 3

namespace std
{
# 74 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 118 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 133 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



}
# 149 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 3
namespace std
{
# 164 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)

    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)

    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])

    noexcept(noexcept(swap(*__a, *__b)))

    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_pair.h" 2 3





namespace std
{
# 76 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_pair.h" 3
  struct piecewise_construct_t { };


  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;
# 95 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      constexpr pair()
      : first(), second() { }


      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }







      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<class _U1, class = typename
        enable_if<is_convertible<_U1, _T1>::value>::type>
 constexpr pair(_U1&& __x, const _T2& __y)
 : first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
        enable_if<is_convertible<_U2, _T2>::value>::type>
 constexpr pair(const _T1& __x, _U2&& __y)
 : first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(const pair& __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(pair&& __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
               is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<class _U1, class _U2>
 pair&
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<class _U1, class _U2>
 pair&
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(noexcept(swap(first, __p.first))
        && noexcept(swap(second, __p.second)))
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };


  template<class _T1, class _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<class _T1, class _T2>
    inline void
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 273 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_pair.h" 3
  template<class _T1, class _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 293 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_pair.h" 3
}
# 65 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_types.h" 1 3
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_types.h" 3







namespace std
{
# 89 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 142 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_types.h" 3
template<typename _Tp> class __has_iterator_category_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::iterator_category>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_iterator_category : public __has_iterator_category_helper <typename remove_cv<_Tp>::type>::type { };

  template<typename _Iterator,
    bool = __has_iterator_category<_Iterator>::value>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator, true>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 174 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_funcs.h" 1 3
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_funcs.h" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\debug/debug.h" 1 3
# 46 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 66 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_funcs.h" 2 3

namespace std
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 112 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


                                     ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 171 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {
      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 1 3
# 66 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ptr_traits.h" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ptr_traits.h" 3
namespace std
{


template<typename _Tp> class __has_element_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::element_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_element_type : public __has_element_type_helper <typename remove_cv<_Tp>::type>::type { };
template<typename _Tp> class __has_difference_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::difference_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_difference_type : public __has_difference_type_helper <typename remove_cv<_Tp>::type>::type { };

  template<typename _Tp, bool = __has_element_type<_Tp>::value>
    struct __ptrtr_elt_type;

  template<typename _Tp>
    struct __ptrtr_elt_type<_Tp, true>
    {
      typedef typename _Tp::element_type __type;
    };

  template<template<typename, typename...> class _SomePtr, typename _Tp,
            typename... _Args>
    struct __ptrtr_elt_type<_SomePtr<_Tp, _Args...>, false>
    {
      typedef _Tp __type;
    };

  template<typename _Tp, bool = __has_difference_type<_Tp>::value>
    struct __ptrtr_diff_type
    {
      typedef typename _Tp::difference_type __type;
    };

  template<typename _Tp>
    struct __ptrtr_diff_type<_Tp, false>
    {
      typedef ptrdiff_t __type;
    };

  template<typename _Ptr, typename _Up>
    class __ptrtr_rebind_helper
    {
      template<typename _Ptr2, typename _Up2>
 static constexpr true_type
 _S_chk(typename _Ptr2::template rebind<_Up2>*);

      template<typename, typename>
 static constexpr false_type
 _S_chk(...);

    public:
      using __type = decltype(_S_chk<_Ptr, _Up>(nullptr));
    };

  template<typename _Tp, typename _Up,
           bool = __ptrtr_rebind_helper<_Tp, _Up>::__type::value>
    struct __ptrtr_rebind;

  template<typename _Tp, typename _Up>
    struct __ptrtr_rebind<_Tp, _Up, true>
    {
      typedef typename _Tp::template rebind<_Up> __type;
    };

  template<template<typename, typename...> class _SomePtr, typename _Up,
            typename _Tp, typename... _Args>
    struct __ptrtr_rebind<_SomePtr<_Tp, _Args...>, _Up, false>
    {
      typedef _SomePtr<_Up, _Args...> __type;
    };

  template<typename _Tp, typename = typename remove_cv<_Tp>::type>
    struct __ptrtr_not_void
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __ptrtr_not_void<_Tp, void>
    {
      struct __type { };
    };

  template<typename _Ptr>
    class __ptrtr_pointer_to
    {
      typedef typename __ptrtr_elt_type<_Ptr>::__type __orig_type;
      typedef typename __ptrtr_not_void<__orig_type>::__type __element_type;

    public:
      static _Ptr pointer_to(__element_type& __e)
      { return _Ptr::pointer_to(__e); }
    };





  template<typename _Ptr>
    struct pointer_traits : __ptrtr_pointer_to<_Ptr>
    {

      typedef _Ptr pointer;

      typedef typename __ptrtr_elt_type<_Ptr>::__type element_type;

      typedef typename __ptrtr_diff_type<_Ptr>::__type difference_type;

      template<typename _Up>
        using rebind = typename __ptrtr_rebind<_Ptr, _Up>::__type;
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(typename __ptrtr_not_void<element_type>::__type& __r) noexcept
      { return std::addressof(__r); }
    };


}
# 67 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 2 3

namespace std
{
# 96 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 160 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 290 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>


    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())





    { return __y.base() - __x.base(); }
# 402 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 436 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 478 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 493 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 526 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 568 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 587 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 638 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 682 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx
{
# 706 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 806 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}



namespace std
{
# 946 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;
      typedef value_type&& reference;

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return std::move(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline auto
    operator-(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }




}
# 68 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/predefined_ops.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
    };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {
    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
    };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
    };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
    };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      _Iter_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator1, typename _Iterator2>
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      _Iter_comp_val(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(__comp); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(__comp._M_comp); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      _Val_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(__comp._M_comp); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_equals_iter(_Iterator1 __it1)
 : _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == _M_ref; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      _Iter_pred(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(__pred); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(__comp), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    { return _Iter_comp_to_val<_Compare, _Value>(__comp, __val); }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(__comp), _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, _M_ref)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    { return _Iter_comp_to_iter<_Compare, _Iterator>(__comp._M_comp, __it); }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      _Iter_negate(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(__pred._M_pred); }

}
}
# 72 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 2 3

namespace std
{
# 118 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
# 148 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 215 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 238 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 259 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 456 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 489 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 632 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 668 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 734 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 794 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 994 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




                                                                  ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1051 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1083 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1211 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
# 1225 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1247 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {



                                                       ;
                                                       ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1290 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1323 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 1424 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algobase.h" 3
}
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/char_traits.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/postypes.h" 1 3
# 39 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/postypes.h" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 3




# 1 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw_print_push.h" 1 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 2 3





#pragma pack(push,_CRT_PACKING)


extern "C" {
# 32 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;





  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
# 71 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  typedef unsigned long _fsize_t;




  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };
# 169 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  extern unsigned short ** __imp__pctype;
# 183 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  extern unsigned short ** __imp__wctype;
# 198 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  extern unsigned short ** __imp__pwctype;
# 222 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);
  int __attribute__((__cdecl__)) isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsym_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);


  int __attribute__((__cdecl__)) iswblank(wint_t _C);







  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetcwd(wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetdcwd(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  wchar_t *__attribute__((__cdecl__)) _wgetdcwd_nolock(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wmkdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrmdir(const wchar_t *_Path);





  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _waccess(const wchar_t *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchmod(const wchar_t *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wunlink(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrename(const wchar_t *_OldFilename,const wchar_t *_NewFilename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wmktemp(wchar_t *_TemplateName) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t __attribute__((__cdecl__)) _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int __attribute__((__cdecl__)) _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;




  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wsetlocale(int _Category,const wchar_t *_Locale);




  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);




  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);
# 369 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  typedef unsigned short _ino_t;

  typedef unsigned short ino_t;





  typedef unsigned int _dev_t;

  typedef unsigned int dev_t;




# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw_off_t.h" 1 3




  typedef long _off_t;

  typedef long off32_t;





  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 26 "C:\\Octave\\Octave-4.2.1\\include\\_mingw_off_t.h" 3
typedef off32_t off_t;
# 384 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw_stat64.h" 1 3
# 19 "C:\\Octave\\Octave-4.2.1\\include\\_mingw_stat64.h" 3
  struct _stat32 {
    _dev_t st_dev;
   _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };


  struct stat {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  };


  struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };

  struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };

  struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };
# 385 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 2 3




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat32(const wchar_t *_Name,struct _stat32 *_Stat);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat);
  int __attribute__((__cdecl__)) _wstat64i32(const wchar_t *_Name,struct _stat64i32 *_Stat);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat64(const wchar_t *_Name,struct _stat64 *_Stat);
# 403 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *_cgetws(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwch(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwche(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _putwch(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwch(wint_t _WCh);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cputws(const wchar_t *_String);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  wint_t __attribute__((__cdecl__)) _putwch_nolock(wchar_t _WCh);
  wint_t __attribute__((__cdecl__)) _getwch_nolock(void);
  wint_t __attribute__((__cdecl__)) _getwche_nolock(void);
  wint_t __attribute__((__cdecl__)) _ungetwch_nolock(wint_t _WCh);





                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswscanf (const wchar_t * __restrict__ _Str,const wchar_t * __restrict__ Format,va_list argp);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wscanf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwscanf(const wchar_t * __restrict__ Format, va_list argp);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwscanf (FILE * __restrict__ fp, const wchar_t * __restrict__ Format,va_list argp);


                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wprintf(const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);
# 474 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int swscanf(const wchar_t *__source, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vswscanf( __source, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (1)))
int wscanf(const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vwscanf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int fwscanf(FILE *__stream, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwscanf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int vswscanf (const wchar_t *__source, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vswscanf( __source, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (1)))
int vwscanf(const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vwscanf( __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int vfwscanf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwscanf( __stream, __format, __local_argv );
}




static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int fwprintf (FILE *__stream, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (1)))
int wprintf (const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vwprintf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int vfwprintf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwprintf( __stream, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (1)))
int vwprintf (const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vwprintf( __format, __local_argv );
}


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int snwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsnwprintf( __stream, __n, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vsnwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsnwprintf( __stream, __n, __format, __local_argv );
}
# 633 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t __attribute__((__cdecl__)) fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwchar(void);
  wint_t __attribute__((__cdecl__)) fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) getwc(FILE *_File);
  wint_t __attribute__((__cdecl__)) getwchar(void);
  wint_t __attribute__((__cdecl__)) putwc(wchar_t _Ch,FILE *_File);
  wint_t __attribute__((__cdecl__)) putwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) ungetwc(wint_t _Ch,FILE *_File);
  wchar_t *__attribute__((__cdecl__)) fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putws(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_l(wchar_t * __restrict__ ,size_t _SizeInWords,const wchar_t * __restrict__ _Format,_locale_t _Locale,... ) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;
# 686 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __swprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_l(wchar_t * __restrict__ _Dest,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __vswprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,va_list _Args) ;



# 1 "C:\\Octave\\Octave-4.2.1\\include\\swprintf.inl" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\swprintf.inl" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\vadefs.h" 1 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\swprintf.inl" 2 3
# 21 "C:\\Octave\\Octave-4.2.1\\include\\swprintf.inl" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vswprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return vsnwprintf( __stream, __count, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int swprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __count, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



extern "C++" {

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int vswprintf (wchar_t *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{

  return __mingw_vswprintf( __stream, __format, __local_argv );



}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int swprintf (wchar_t *__stream, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

}
# 719 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 2 3
# 728 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_l(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_l(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wpopen(const wchar_t *_Command,const wchar_t *_Mode);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 773 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);


  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstod(_Str,_EndPtr);
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstof(_Str,_EndPtr);
  }






  long double __attribute__((__cdecl__)) wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);

  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;




  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
                wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *__attribute__((__cdecl__)) wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *__attribute__((__cdecl__)) wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
                wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;

  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;





  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wasctime(const struct tm *_Tm);
  wchar_t *__attribute__((__cdecl__)) _wctime32(const __time32_t *_Time) ;
  size_t __attribute__((__cdecl__)) wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrdate(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrtime(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wctime64(const __time64_t *_Time) ;



  wchar_t *__attribute__((__cdecl__)) _wctime(const time_t *_Time) ;
# 936 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
  typedef int mbstate_t;
  typedef wchar_t _Wint_t;

  wint_t __attribute__((__cdecl__)) btowc(int);
  size_t __attribute__((__cdecl__)) mbrlen(const char * __restrict__ _Ch,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t __attribute__((__cdecl__)) mbrtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t __attribute__((__cdecl__)) mbsrtowcs(wchar_t * __restrict__ _Dest,const char ** __restrict__ _PSrc,size_t _Count,mbstate_t * __restrict__ _State) ;
  size_t __attribute__((__cdecl__)) wcrtomb(char * __restrict__ _Dest,wchar_t _Source,mbstate_t * __restrict__ _State) ;
  size_t __attribute__((__cdecl__)) wcsrtombs(char * __restrict__ _Dest,const wchar_t ** __restrict__ _PSource,size_t _Count,mbstate_t * __restrict__ _State) ;
  int __attribute__((__cdecl__)) wctob(wint_t _WCh);


  wchar_t *__attribute__((__cdecl__)) wmemset(wchar_t *s, wchar_t c, size_t n);
                wchar_t *__attribute__((__cdecl__)) wmemchr(const wchar_t *s, wchar_t c, size_t n);
  int __attribute__((__cdecl__)) wmemcmp(const wchar_t *s1, const wchar_t *s2,size_t n);
  wchar_t *__attribute__((__cdecl__)) wmemcpy(wchar_t * __restrict__ s1,const wchar_t * __restrict__ s2,size_t n) ;
  wchar_t * __attribute__((__cdecl__)) wmempcpy (wchar_t *_Dst, const wchar_t *_Src, size_t _Size);
  wchar_t *__attribute__((__cdecl__)) wmemmove(wchar_t *s1, const wchar_t *s2, size_t n) ;
  int __attribute__((__cdecl__)) fwide(FILE *stream,int mode);
  int __attribute__((__cdecl__)) mbsinit(const mbstate_t *ps);
  __extension__ long long __attribute__((__cdecl__)) wcstoll(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);
  __extension__ unsigned long long __attribute__((__cdecl__)) wcstoull(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);


  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount) ;
# 1011 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
int __attribute__((__cdecl__)) __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);
# 1025 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
int __attribute__((__cdecl__)) __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);
# 1034 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 3
void __attribute__((__cdecl__)) __mingw_str_free(void *ptr);




}


#pragma pack(pop)


# 1 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/wchar_s.h" 1 3








# 1 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/wchar_s.h" 2 3
# 1045 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw_print_pop.h" 1 3
# 1047 "C:\\Octave\\Octave-4.2.1\\include\\wchar.h" 2 3
# 45 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 2 3
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 3
namespace std
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/postypes.h" 2 3
# 68 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/postypes.h" 3
namespace std
{
# 90 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/postypes.h" 3
  typedef long long streamoff;







  typedef ptrdiff_t streamsize;
# 111 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/char_traits.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/char_traits.h" 2 3

namespace __gnu_cxx
{
# 57 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 82 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std
{
# 226 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((wint_t)(0xFFFF)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}






namespace std
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/allocator.h" 1 3
# 46 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/allocator.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++allocator.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++allocator.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/new_allocator.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/new_allocator.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\new" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\new" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\exception" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\exception" 3

#pragma GCC visibility push(default)



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/atomic_lockfree_defines.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/atomic_lockfree_defines.h" 3
# 39 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\exception" 2 3

extern "C++" {

namespace std
{
# 60 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\exception" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char* what() const noexcept;
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char* what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 127 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 152 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/exception_ptr.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/exception_ptr.h" 3
#pragma GCC visibility push(default)








extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 111 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 138 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
      try
 {

   throw __ex;

 }
      catch(...)
 {
   return current_exception();
 }
    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 163 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\exception" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/nested_exception.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) = default;

    nested_exception& operator=(const nested_exception&) = default;

    virtual ~nested_exception() noexcept;

    void
    rethrow_nested() const __attribute__ ((__noreturn__))
    { rethrow_exception(_M_ptr); }

    exception_ptr
    nested_ptr() const
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Ex>
    struct __get_nested_helper
    {
      static const nested_exception*
      _S_get(const _Ex& __ex)
      { return dynamic_cast<const nested_exception*>(&__ex); }
    };

  template<typename _Ex>
    struct __get_nested_helper<_Ex*>
    {
      static const nested_exception*
      _S_get(const _Ex* __ex)
      { return dynamic_cast<const nested_exception*>(__ex); }
    };

  template<typename _Ex>
    inline const nested_exception*
    __get_nested_exception(const _Ex& __ex)
    { return __get_nested_helper<_Ex>::_S_get(__ex); }

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, const nested_exception* = 0)
    __attribute__ ((__noreturn__));

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, ...) __attribute__ ((__noreturn__));




  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, const nested_exception*)
    { throw __ex; }

  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, ...)
    { throw _Nested_exception<_Ex>(static_cast<_Ex&&>(__ex)); }

  template<typename _Ex>
    void
    throw_with_nested(_Ex __ex) __attribute__ ((__noreturn__));



  template<typename _Ex>
    inline void
    throw_with_nested(_Ex __ex)
    {
      if (__get_nested_exception(__ex))
        throw __ex;
      __throw_with_nested(static_cast<_Ex&&>(__ex), &__ex);
    }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      if (const nested_exception* __nested = __get_nested_exception(__ex))
        __nested->rethrow_nested();
    }


  inline void
  rethrow_if_nested(const nested_exception& __ex)
  { __ex.rethrow_nested(); }


}

}



#pragma GCC visibility pop
# 164 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\exception" 2 3
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };
# 99 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\new" 3
  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 128 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}

#pragma GCC visibility pop
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/new_allocator.h" 2 3






namespace __gnu_cxx
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void
        destroy(_Up* __p) { __p->~_Up(); }
# 135 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++allocator.h" 2 3


namespace std
{
# 47 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/allocator.h" 2 3





namespace std
{
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

    };
# 91 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {
 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }
      }
    };



}
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/localefwd.h" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/localefwd.h" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++locale.h" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++locale.h" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\clocale" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\clocale" 3


# 1 "C:\\Octave\\Octave-4.2.1\\include\\locale.h" 1 3
# 12 "C:\\Octave\\Octave-4.2.1\\include\\locale.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 1 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw_print_push.h" 1 3
# 12 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 2 3

#pragma pack(push,_CRT_PACKING)


extern "C" {
# 84 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
# 103 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
  __extension__ typedef long long fpos_t;
# 139 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vscanf(const char * __restrict__ Format, va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);

extern
  __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
                               va_list _ArgList);
extern
  __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
extern
  __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_asprintf(char ** __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_vasprintf(char ** __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
# 222 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
extern "C++" {


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int sscanf(const char *__source, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsscanf( __source, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
int scanf(const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vscanf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int fscanf(FILE *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfscanf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vsscanf (const char *__source, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsscanf( __source, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
int vscanf(const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vscanf( __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vfscanf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfscanf( __stream, __format, __local_argv );
}




static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int fprintf (FILE *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
int printf (const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vprintf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int sprintf (char *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vfprintf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
int vprintf (const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vprintf( __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vsprintf (char *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsprintf( __stream, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
int snprintf (char *__stream, size_t __n, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsnprintf( __stream, __n, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
int vsnprintf (char *__stream, size_t __n, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsnprintf( __stream, __n, __format, __local_argv );
}
# 362 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
}
# 420 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void __attribute__((__cdecl__)) clearerr(FILE *_File);
  int __attribute__((__cdecl__)) fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fdopen(int _FileHandle,const char *_Mode);

  int __attribute__((__cdecl__)) feof(FILE *_File);
  int __attribute__((__cdecl__)) ferror(FILE *_File);
  int __attribute__((__cdecl__)) fflush(FILE *_File);
  int __attribute__((__cdecl__)) fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fgetchar(void);
  int __attribute__((__cdecl__)) fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  int __attribute__((__cdecl__)) fgetpos64(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char *__attribute__((__cdecl__)) fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flushall(void);
  FILE *__attribute__((__cdecl__)) fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int __attribute__((__cdecl__)) fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fputchar(int _Ch);
  int __attribute__((__cdecl__)) fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t __attribute__((__cdecl__)) fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE *__attribute__((__cdecl__)) freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int __attribute__((__cdecl__)) fsetpos(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fsetpos64(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fseek(FILE *_File,long _Offset,int _Origin);



  int fseeko64(FILE* stream, _off64_t offset, int whence);
  int fseeko(FILE* stream, _off_t offset, int whence);
# 472 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
  long __attribute__((__cdecl__)) ftell(FILE *_File);

  _off_t ftello(FILE * stream);
  _off64_t ftello64(FILE * stream);
# 484 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
  __extension__ int __attribute__((__cdecl__)) _fseeki64(FILE *_File,long long _Offset,int _Origin);
  __extension__ long long __attribute__((__cdecl__)) _ftelli64(FILE *_File);
  size_t __attribute__((__cdecl__)) fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) getc(FILE *_File);
  int __attribute__((__cdecl__)) getchar(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getmaxstdio(void);
  char *__attribute__((__cdecl__)) gets(char *_Buffer) ;
  int __attribute__((__cdecl__)) _getw(FILE *_File);


  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _popen(const char *_Command,const char *_Mode);




  int __attribute__((__cdecl__)) putc(int _Ch,FILE *_File);
  int __attribute__((__cdecl__)) putchar(int _Ch);
  int __attribute__((__cdecl__)) puts(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putw(int _Word,FILE *_File);


  int __attribute__((__cdecl__)) remove(const char *_Filename);
  int __attribute__((__cdecl__)) rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _unlink(const char *_Filename);

  int __attribute__((__cdecl__)) unlink(const char *_Filename) ;


  void __attribute__((__cdecl__)) rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _rmtmp(void);
  void __attribute__((__cdecl__)) setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _get_output_format(void);
  int __attribute__((__cdecl__)) setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf(const char * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;
  FILE *__attribute__((__cdecl__)) tmpfile(void) ;
  char *__attribute__((__cdecl__)) tmpnam(char *_Buffer);
  int __attribute__((__cdecl__)) ungetc(int _Ch,FILE *_File);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;
# 567 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _get_printf_count_output(void);
# 884 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _unlock_file(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fclose_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fflush_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fread_nolock(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _ftell_nolock(FILE *_File);
  __extension__ __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseeki64_nolock(FILE *_File,long long _Offset,int _Origin);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _ftelli64_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fwrite_nolock(const void * __restrict__ _DstBuf,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ungetc_nolock(int _Ch,FILE *_File);





  char *__attribute__((__cdecl__)) tempnam(const char *_Directory,const char *_FilePrefix) ;
  int __attribute__((__cdecl__)) fcloseall(void) ;
  FILE *__attribute__((__cdecl__)) fdopen(int _FileHandle,const char *_Format) ;
  int __attribute__((__cdecl__)) fgetchar(void) ;
  int __attribute__((__cdecl__)) fileno(FILE *_File) ;
  int __attribute__((__cdecl__)) flushall(void) ;
  int __attribute__((__cdecl__)) fputchar(int _Ch) ;
  int __attribute__((__cdecl__)) getw(FILE *_File) ;
  int __attribute__((__cdecl__)) putw(int _Ch,FILE *_File) ;
  int __attribute__((__cdecl__)) rmtmp(void) ;
# 979 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnv(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnve(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvp(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvpe(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);



}


#pragma pack(pop)


# 1 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/stdio_s.h" 1 3








# 1 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/stdio_s.h" 2 3
# 992 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw_print_pop.h" 1 3
# 994 "C:\\Octave\\Octave-4.2.1\\include\\stdio.h" 2 3
# 13 "C:\\Octave\\Octave-4.2.1\\include\\locale.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 45 "C:\\Octave\\Octave-4.2.1\\include\\locale.h" 3
  struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
  };
# 79 "C:\\Octave\\Octave-4.2.1\\include\\locale.h" 3
  int __attribute__((__cdecl__)) _configthreadlocale(int _Flag);
  char *__attribute__((__cdecl__)) setlocale(int _Category,const char *_Locale);
  __attribute__ ((__dllimport__)) struct lconv *__attribute__((__cdecl__)) localeconv(void);
  _locale_t __attribute__((__cdecl__)) _get_current_locale(void);
  _locale_t __attribute__((__cdecl__)) _create_locale(int _Category,const char *_Locale);
  void __attribute__((__cdecl__)) _free_locale(_locale_t _Locale);
  _locale_t __attribute__((__cdecl__)) __get_current_locale(void);
  _locale_t __attribute__((__cdecl__)) __create_locale(int _Category,const char *_Locale);
  void __attribute__((__cdecl__)) __free_locale(_locale_t _Locale);







}


#pragma pack(pop)
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/c++locale.h" 2 3



namespace std
{


  typedef int* __c_locale;





  inline int
  __convert_from_v(const __c_locale&, char* __out,
     const int __size __attribute__((__unused__)),
     const char* __fmt, ...)
  {
    char* __old = std::setlocale(4, 0);
    char* __sav = 0;
    if (__builtin_strcmp(__old, "C"))
      {
 const size_t __len = __builtin_strlen(__old) + 1;
 __sav = new char[__len];
 __builtin_memcpy(__sav, __old, __len);
 std::setlocale(4, "C");
      }

    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __mingw_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);

    if (__sav)
      {
 std::setlocale(4, __sav);
 delete [] __sav;
      }
    return __ret;
  }


}
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/localefwd.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\iosfwd" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\iosfwd" 3





namespace std
{
# 74 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/localefwd.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cctype" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cctype" 3


# 1 "C:\\Octave\\Octave-4.2.1\\include\\ctype.h" 1 3
# 12 "C:\\Octave\\Octave-4.2.1\\include\\ctype.h" 3
extern "C" {
# 72 "C:\\Octave\\Octave-4.2.1\\include\\ctype.h" 3
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __attribute__((__cdecl__)) __updatetlocinfo(void);
  pthreadmbcinfo __attribute__((__cdecl__)) __updatetmbcinfo(void);
# 100 "C:\\Octave\\Octave-4.2.1\\include\\ctype.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalpha(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) islower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isxdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isspace(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ispunct(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalnum(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isprint(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isgraph(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) iscntrl(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __isascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __toascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsym(int _C);


int __attribute__((__cdecl__)) isblank(int _C);
# 194 "C:\\Octave\\Octave-4.2.1\\include\\ctype.h" 3
  extern int * __imp___mb_cur_max;
# 276 "C:\\Octave\\Octave-4.2.1\\include\\ctype.h" 3
}
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cctype" 2 3
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/localefwd.h" 2 3

namespace std
{
# 55 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 44 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ostream_insert.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ostream_insert.h" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/cxxabi_forced.h" 1 3
# 35 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ostream_insert.h" 2 3

namespace std
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 1 3
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
namespace std
{
# 104 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 166 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 339 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 500 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };
# 587 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };
# 703 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 774 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 894 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/binders.h" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/binders.h" 3
namespace std
{
# 103 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 1085 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_function.h" 2 3
# 49 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/range_access.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/range_access.h" 3



namespace std
{







  template<class _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<class _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<class _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<class _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }


}
# 52 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/atomicity.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/atomicity.h" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr.h" 1 3
# 30 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 1 3
# 69 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\errno.h" 1 3
# 12 "C:\\Octave\\Octave-4.2.1\\include\\errno.h" 3
extern "C" {




__attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);


errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);
# 199 "C:\\Octave\\Octave-4.2.1\\include\\errno.h" 3
}
# 70 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\include\\_mingw.h" 1 3
# 72 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 2 3
# 339 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern "C" {


typedef unsigned long __gthread_key_t;

typedef struct {
  int done;
  long started;
} __gthread_once_t;

typedef struct {
  long counter;
  void *sema;
} __gthread_mutex_t;

typedef struct {
  long counter;
  long depth;
  unsigned long owner;
  void *sema;
} __gthread_recursive_mutex_t;
# 373 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern int _CRT_MT;
extern int __mingwthr_key_dtor (unsigned long, void (*) (void *));
# 400 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{

  return _CRT_MT;



}







extern int __gthr_win32_once (__gthread_once_t *, void (*) (void));
extern int __gthr_win32_key_create (__gthread_key_t *, void (*) (void*));
extern int __gthr_win32_key_delete (__gthread_key_t);
extern void * __gthr_win32_getspecific (__gthread_key_t);
extern int __gthr_win32_setspecific (__gthread_key_t, const void *);
extern void __gthr_win32_mutex_init_function (__gthread_mutex_t *);
extern int __gthr_win32_mutex_lock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_trylock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_unlock (__gthread_mutex_t *);
extern void
  __gthr_win32_recursive_mutex_init_function (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_lock (__gthread_recursive_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_trylock (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_unlock (__gthread_recursive_mutex_t *);
extern void __gthr_win32_mutex_destroy (__gthread_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_destroy (__gthread_recursive_mutex_t *);

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthr_win32_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthr_win32_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthr_win32_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthr_win32_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthr_win32_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_init_function (__mutex);
}

static inline void
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_destroy (__mutex);
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_unlock (__mutex);
  else
    return 0;
}

static inline void
__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
{
   __gthr_win32_recursive_mutex_init_function (__mutex);
}

static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_unlock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthr_win32_recursive_mutex_destroy (__mutex);
}
# 781 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
}
# 149 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/atomicity.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/atomic_word.h" 1 3
# 32 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/atomicity.h" 2 3

namespace __gnu_cxx
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 2 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\initializer_list" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 2 3


namespace std
{
# 111 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 148 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 173 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep() noexcept
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const noexcept
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const noexcept
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked() noexcept
        { this->_M_refcount = -1; }

        void
 _M_set_sharable() noexcept
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n) noexcept
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a) noexcept
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

                                                                  ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
                                                              ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a) noexcept
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const noexcept
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p) noexcept
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const noexcept
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const noexcept
      { return iterator(_M_data()); }

      iterator
      _M_iend() const noexcept
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)"),

       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n) noexcept
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n) noexcept
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c) noexcept
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep() noexcept
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 487 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 511 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string(basic_string&& __str)

      noexcept

      : _M_dataplus(__str._M_dataplus)
      {

 __str._M_data(_S_empty_rep()._M_refdata());



      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
# 538 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string() noexcept
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 571 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 587 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      {

 this->swap(__str);
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }







      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_rep()->_M_length; }



      size_type
      length() const noexcept
      { return _M_rep()->_M_length; }


      size_type
      max_size() const noexcept
      { return _Rep::_S_max_size; }
# 747 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 760 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {
 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }
      }






      size_type
      capacity() const noexcept
      { return _M_rep()->_M_capacity; }
# 804 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);





      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 834 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
                                       ;
 return _M_data()[__pos];
      }
# 851 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


                                       ;

                                                                   ;
 _M_leak();
 return _M_data()[__pos];
      }
# 873 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }
# 895 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 _M_leak();
 return _M_data()[__n];
      }






      reference
      front()
      { return operator[](0); }





      const_reference
      front() const noexcept
      { return operator[](0); }





      reference
      back()
      { return operator[](this->size() - 1); }





      const_reference
      back() const noexcept
      { return operator[](this->size() - 1); }
# 947 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }







      basic_string&
      append(const basic_string& __str);
# 1004 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 1036 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1058 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1095 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      {
 this->swap(__str);
 return *this;
      }
# 1116 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1132 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1144 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1160 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1172 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1201 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1217 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1229 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                                 ;
 this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
      }
# 1249 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1271 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1294 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1312 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1335 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1353 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1378 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1394 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1414 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);







      void
      pop_back()
      { erase(size()-1, 1); }
# 1445 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1467 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1492 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1512 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1536 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1554 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1573 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1594 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1615 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1638 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1709 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string& replace(iterator __i1, iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }


    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1796 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1807 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1817 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }







      const _CharT*
      data() const noexcept
      { return _M_data(); }




      allocator_type
      get_allocator() const noexcept
      { return _M_dataplus; }
# 1850 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1863 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 1878 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1895 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 1908 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1925 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1938 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1955 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 1969 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1986 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1999 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2018 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2033 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2050 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2063 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2082 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2096 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2113 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2127 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2144 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
 noexcept;
# 2159 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2176 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2190 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2207 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
 noexcept;
# 2223 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2242 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2274 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2300 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2318 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2342 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2369 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2381 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 2502 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2548 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2585 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2622 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2659 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2696 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2733 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2751 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2769 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2792 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2809 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}




# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/string_conversions.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/string_conversions.h" 3








# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 72 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\limits.h" 1 3
# 37 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\limits.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include-fixed\\limits.h" 1 3
# 38 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\limits.h" 2 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 2 3





#pragma pack(push,_CRT_PACKING)


extern "C" {
# 40 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
# 50 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
 typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



 typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;




  typedef struct {
    long double x;
  } _LONGDOUBLE;



#pragma pack(4)
 typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 131 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
 typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);
# 147 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);

  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);




  extern __attribute__ ((__dllimport__)) char *_sys_errlist[1];
  extern __attribute__ ((__dllimport__)) int _sys_nerr;
# 171 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern int * __imp___argc;







  extern char *** __imp___argv;







  extern wchar_t *** __imp___wargv;
# 199 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern char *** __imp__environ;
# 208 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern wchar_t *** __imp__wenviron;
# 217 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern char ** __imp__pgmptr;
# 226 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern wchar_t ** __imp__wpgmptr;



  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);




  extern int * __imp__fmode;



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);





  extern unsigned int * __imp__osplatform;
# 256 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern unsigned int * __imp__osver;
# 265 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern unsigned int * __imp__winver;
# 274 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern unsigned int * __imp__winmajor;
# 283 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  extern unsigned int * __imp__winminor;




  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);




  extern "C++" {
    template <typename _CountofType,size_t _SizeOfArray> char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

  }





  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));



  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));
# 320 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  void __attribute__((__cdecl__)) __attribute__((noreturn)) abort(void);




  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);


  __extension__ long long __attribute__((__cdecl__)) _abs64(long long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long long __attribute__((__cdecl__)) _abs64(long long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));


  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);

  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);


  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mkstemp(char *template_name);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 395 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  return __mingw_strtod( _Str, _EndPtr);
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  return __mingw_strtof( _Str, _EndPtr);
}






  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);






  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);


  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;



  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);






  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);



  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);
# 524 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
# 554 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long,int);
unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long,int);





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);
# 572 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);






  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);


  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);
# 601 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 625 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;



  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);




  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);
# 680 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 3
}


#pragma pack(pop)


# 1 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/stdlib_s.h" 1 3








# 1 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/stdlib_s.h" 2 3
# 686 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\malloc.h" 1 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\malloc.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 46 "C:\\Octave\\Octave-4.2.1\\include\\malloc.h" 3
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 103 "C:\\Octave\\Octave-4.2.1\\include\\malloc.h" 3
void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);






  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
# 144 "C:\\Octave\\Octave-4.2.1\\include\\malloc.h" 3
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }
# 163 "C:\\Octave\\Octave-4.2.1\\include\\malloc.h" 3
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }
# 206 "C:\\Octave\\Octave-4.2.1\\include\\malloc.h" 3
}


#pragma pack(pop)
# 687 "C:\\Octave\\Octave-4.2.1\\include\\stdlib.h" 2 3
# 73 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 2 3
# 114 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
namespace std
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 183 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
}
# 196 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
namespace __gnu_cxx
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 228 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/string_conversions.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwchar" 3
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/string_conversions.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdio" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdio" 3
# 96 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;


  using ::gets;

  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdio" 3
namespace __gnu_cxx
{
# 175 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/string_conversions.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cerrno" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cerrno" 3
# 45 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/string_conversions.h" 2 3

namespace __gnu_cxx
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;
      (*_errno()) = 0;
      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*_errno()) == 34
        || (std::__are_same<_Ret, int>::__value
     && (__tmp < __numeric_traits<int>::__min
         || __tmp > __numeric_traits<int>::__max)))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 2849 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 2 3

namespace std
{



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }


  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }




}






# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/functional_hash.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/functional_hash.h" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/hash_bytes.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 36 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/functional_hash.h" 2 3

namespace std
{
# 49 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash;


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 80 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };



  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 3069 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 2 3

namespace std
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };
# 3176 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.h" 3
}
# 53 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.tcc" 1 3
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 try
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 try
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(initializer_list<_CharT> __l, const _Alloc& __a)
    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 577 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\string" 2 3
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/quit.h" 2
extern "C" {
# 47 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/quit.h"
typedef jmp_buf octave_jmp_buf;





           extern octave_jmp_buf current_context;

           extern void octave_save_current_context (void *);

           extern void octave_restore_current_context (void *);

__attribute__ ((__noreturn__)) extern void octave_jump_to_enclosing_context (void);



namespace octave
{
  class
  execution_exception
  {
  public:

    execution_exception (void) : m_stack_trace () { }

    execution_exception (const execution_exception& x)
      : m_stack_trace (x.m_stack_trace) { }

    execution_exception& operator = (const execution_exception& x)
    {
      if (&x != this)
        m_stack_trace = x.m_stack_trace;

      return *this;
    }

    ~execution_exception (void) { }

    virtual void set_stack_trace (const std::string& st)
    {
      m_stack_trace = st;
    }

    virtual void set_stack_trace (void)
    {
      m_stack_trace = "";
    }

    virtual std::string info (void) const
    {
      return m_stack_trace;
    }

  private:

    std::string m_stack_trace;
  };

  class
  exit_exception
  {
  public:

    exit_exception (int exit_status = 0, bool safe_to_return = false)
      : m_exit_status (exit_status), m_safe_to_return (safe_to_return)
    { }

    exit_exception (const exit_exception& ex)
      : m_exit_status (ex.m_exit_status), m_safe_to_return (ex.m_safe_to_return)
    { }

    exit_exception& operator = (exit_exception& ex)
    {
      if (this != &ex)
        {
          m_exit_status = ex.m_exit_status;
          m_safe_to_return = ex.m_safe_to_return;
        }

      return *this;
    }

    ~exit_exception (void) { }

    int exit_status (void) const { return m_exit_status; }

    bool safe_to_return (void) const { return m_safe_to_return; }

  private:

    int m_exit_status;

    bool m_safe_to_return;
  };

  class
  interrupt_exception
  {
  };
}

__attribute__ ((__deprecated__))
typedef octave::exit_exception octave_execution_exception;

__attribute__ ((__deprecated__))
typedef octave::exit_exception octave_exit_exception;

__attribute__ ((__deprecated__))
typedef octave::interrupt_exception octave_interrupt_exception;



enum octave_exception
{
  octave_no_exception = 0,
  octave_exec_exception = 1,
  octave_alloc_exception = 3,
  octave_quit_exception = 4
};

           extern sig_atomic_t octave_interrupt_immediately;






           extern sig_atomic_t octave_interrupt_state;

           extern sig_atomic_t octave_exception_state;

           extern sig_atomic_t octave_exit_exception_status;

           extern sig_atomic_t octave_exit_exception_safe_to_return;

           extern volatile sig_atomic_t octave_signal_caught;

           extern void octave_handle_signal (void);

__attribute__ ((__noreturn__)) extern void octave_throw_interrupt_exception (void);

__attribute__ ((__noreturn__)) extern void octave_throw_execution_exception (void);

__attribute__ ((__noreturn__)) extern void octave_throw_bad_alloc (void);

           extern void octave_rethrow_exception (void);



extern void
clean_up_and_exit (int exit_status, bool safe_to_return = false);

inline void octave_quit (void)
{
  if (octave_signal_caught)
    {
      octave_signal_caught = 0;
      octave_handle_signal ();
    }
};
# 310 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/quit.h"
}




extern void (*octave_signal_hook) (void);
extern void (*octave_interrupt_hook) (void);
extern void (*octave_bad_alloc_hook) (void);
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-error.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-error.h"
extern "C" {


__attribute__ ((__noreturn__)) extern void
liboctave_fatal (const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void liboctave_fatal_with_id (const char *id, const char *fmt, ...);

extern void
liboctave_warning (const char *fmt, ...);

extern void
liboctave_warning_with_id (const char *id, const char *fmt, ...);

typedef void (*liboctave_error_handler) (const char *, ...);

typedef void (*liboctave_error_with_id_handler) (const char *, const char *,
                                                 ...);

typedef void (*liboctave_warning_handler) (const char *, ...);

typedef void (*liboctave_warning_with_id_handler) (const char *, const char *,
                                                   ...);



__attribute__ ((__noreturn__)) extern liboctave_error_handler
  current_liboctave_error_handler;

__attribute__ ((__noreturn__)) extern liboctave_error_with_id_handler
  current_liboctave_error_with_id_handler;

           extern liboctave_warning_handler current_liboctave_warning_handler;

           extern liboctave_warning_with_id_handler
  current_liboctave_warning_with_id_handler;

           extern void
set_liboctave_error_handler (__attribute__ ((__noreturn__)) liboctave_error_handler f);

           extern void
set_liboctave_error_with_id_handler (__attribute__ ((__noreturn__)) liboctave_error_with_id_handler f);

           extern void
set_liboctave_warning_handler (liboctave_warning_handler f);

           extern void
set_liboctave_warning_with_id_handler (liboctave_warning_with_id_handler f);


}
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 1 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 3

# 1 "C:\\Octave\\Octave-4.2.1\\include\\assert.h" 1 3
# 21 "C:\\Octave\\Octave-4.2.1\\include\\assert.h" 3
extern "C" {
# 45 "C:\\Octave\\Octave-4.2.1\\include\\assert.h" 3
extern void __attribute__((__cdecl__))
_wassert(const wchar_t *_Message,const wchar_t *_File,unsigned _Line);
extern void __attribute__((__cdecl__))
_assert (const char *_Message, const char *_File, unsigned _Line);


}
# 44 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 2 3
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse.h" 2
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstddef" 1 3
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstddef" 3


# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stddef.h" 1 3
# 51 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stddef.h" 3
typedef long long int ptrdiff_t;
# 62 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stddef.h" 3
typedef long long unsigned int size_t;
# 118 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stddef.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include/__stddef_max_align_t.h" 1 3
# 35 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 119 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stddef.h" 2 3
# 46 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse.h" 2


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\algorithm" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\algorithm" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\utility" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\utility" 3
# 69 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\utility" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_relops.h" 1 3
# 67 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_relops.h" 3
namespace std
{
  namespace rel_ops
  {
# 85 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }


  }

}
# 70 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\utility" 2 3







namespace std
{


  template<class _Tp>
    class tuple_size;

  template<std::size_t _Int, class _Tp>
    class tuple_element;


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };

  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };

  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }
# 205 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\utility" 3
  template<size_t... _Indexes>
    struct _Index_tuple
    {
      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
    };


  template<size_t _Num>
    struct _Build_index_tuple
    {
      typedef typename _Build_index_tuple<_Num - 1>::__type::__next __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };
# 268 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\utility" 3
}
# 61 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\algorithm" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 60 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/algorithmfwd.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/algorithmfwd.h" 3








namespace std
{
# 194 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 535 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&)

    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)

    ;

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])

    noexcept(noexcept(swap(*__a, *__b)))

    ;

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 61 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 1 3
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
namespace std
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
   __gnu_cxx::__ops::__iter_less_iter()) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
 __gnu_cxx::__ops::__iter_comp_iter(__comp)) == __n;
    }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 148 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                  ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value),
         __gnu_cxx::__ops::__iter_less_val());
    }
# 182 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                               ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 261 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                         ;
                                                     ;
                                              ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_less_iter());
 }
    }
# 295 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                         ;
                                                           ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 349 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 374 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 408 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                              ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 434 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                           ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 460 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last),
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 487 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {



                                                     ;

      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last),
          __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 509 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 522 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    { return std::is_heap_until(__first, __last, __comp) == __last; }



}
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tempbuf.h" 1 3
# 60 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tempbuf.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_construct.h" 1 3
# 61 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_construct.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/alloc_traits.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/alloc_traits.h" 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 1 3
# 39 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
namespace std
{


  template<typename _Alloc, typename _Tp>
    class __alloctr_rebind_helper
    {
      template<typename _Alloc2, typename _Tp2>
 static constexpr true_type
 _S_chk(typename _Alloc2::template rebind<_Tp2>::other*);

      template<typename, typename>
 static constexpr false_type
 _S_chk(...);

    public:
      using __type = decltype(_S_chk<_Alloc, _Tp>(nullptr));
    };

  template<typename _Alloc, typename _Tp,
    bool = __alloctr_rebind_helper<_Alloc, _Tp>::__type::value>
    struct __alloctr_rebind;

  template<typename _Alloc, typename _Tp>
    struct __alloctr_rebind<_Alloc, _Tp, true>
    {
      typedef typename _Alloc::template rebind<_Tp>::other __type;
    };

  template<template<typename, typename...> class _Alloc, typename _Tp,
    typename _Up, typename... _Args>
    struct __alloctr_rebind<_Alloc<_Up, _Args...>, _Tp, false>
    {
      typedef _Alloc<_Tp, _Args...> __type;
    };





  template<typename _Alloc>
    struct allocator_traits
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;
# 95 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
private: template<typename _Tp> static typename _Tp::pointer _S_pointer_helper(_Tp*); static value_type* _S_pointer_helper(...); typedef decltype(_S_pointer_helper((_Alloc*)0)) __pointer; public:






      typedef __pointer pointer;

private: template<typename _Tp> static typename _Tp::const_pointer _S_const_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<const value_type> _S_const_pointer_helper(...); typedef decltype(_S_const_pointer_helper((_Alloc*)0)) __const_pointer; public:
# 113 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      typedef __const_pointer const_pointer;

private: template<typename _Tp> static typename _Tp::void_pointer _S_void_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<void> _S_void_pointer_helper(...); typedef decltype(_S_void_pointer_helper((_Alloc*)0)) __void_pointer; public:
# 124 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      typedef __void_pointer void_pointer;

private: template<typename _Tp> static typename _Tp::const_void_pointer _S_const_void_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<const void> _S_const_void_pointer_helper(...); typedef decltype(_S_const_void_pointer_helper((_Alloc*)0)) __const_void_pointer; public:
# 135 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      typedef __const_void_pointer const_void_pointer;

private: template<typename _Tp> static typename _Tp::difference_type _S_difference_type_helper(_Tp*); static typename pointer_traits<pointer>::difference_type _S_difference_type_helper(...); typedef decltype(_S_difference_type_helper((_Alloc*)0)) __difference_type; public:
# 146 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      typedef __difference_type difference_type;

private: template<typename _Tp> static typename _Tp::size_type _S_size_type_helper(_Tp*); static typename make_unsigned<difference_type>::type _S_size_type_helper(...); typedef decltype(_S_size_type_helper((_Alloc*)0)) __size_type; public:
# 157 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      typedef __size_type size_type;

private: template<typename _Tp> static typename _Tp::propagate_on_container_copy_assignment _S_propagate_on_container_copy_assignment_helper(_Tp*); static false_type _S_propagate_on_container_copy_assignment_helper(...); typedef decltype(_S_propagate_on_container_copy_assignment_helper((_Alloc*)0)) __propagate_on_container_copy_assignment; public:
# 168 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      typedef __propagate_on_container_copy_assignment
 propagate_on_container_copy_assignment;

private: template<typename _Tp> static typename _Tp::propagate_on_container_move_assignment _S_propagate_on_container_move_assignment_helper(_Tp*); static false_type _S_propagate_on_container_move_assignment_helper(...); typedef decltype(_S_propagate_on_container_move_assignment_helper((_Alloc*)0)) __propagate_on_container_move_assignment; public:
# 180 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      typedef __propagate_on_container_move_assignment
 propagate_on_container_move_assignment;

private: template<typename _Tp> static typename _Tp::propagate_on_container_swap _S_propagate_on_container_swap_helper(_Tp*); static false_type _S_propagate_on_container_swap_helper(...); typedef decltype(_S_propagate_on_container_swap_helper((_Alloc*)0)) __propagate_on_container_swap; public:
# 192 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      typedef __propagate_on_container_swap propagate_on_container_swap;



      template<typename _Tp>
 using rebind_alloc = typename __alloctr_rebind<_Alloc, _Tp>::__type;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 struct __allocate_helper
 {
   template<typename _Alloc3,
     typename = decltype(std::declval<_Alloc3*>()->allocate(
    std::declval<size_type>(),
    std::declval<const_void_pointer>()))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Alloc2>
 using __has_allocate = typename __allocate_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_allocate<_Alloc2>>>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint)
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2, typename _UnusedHint,
        typename = _Require<__not_<__has_allocate<_Alloc2>>>>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, _UnusedHint)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Tp>
 struct __destroy_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->destroy(
    std::declval<_Tp*>()))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp>
 using __has_destroy = typename __destroy_helper<_Tp>::type;

      template<typename _Tp>
 static _Require<__has_destroy<_Tp>>
 _S_destroy(_Alloc& __a, _Tp* __p)
 { __a.destroy(__p); }

      template<typename _Tp>
 static _Require<__not_<__has_destroy<_Tp>>>
 _S_destroy(_Alloc&, _Tp* __p)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 struct __maxsize_helper
 {
   template<typename _Alloc3,
     typename = decltype(std::declval<_Alloc3*>()->max_size())>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc2>(0));
 };

      template<typename _Alloc2>
 using __has_max_size = typename __maxsize_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_max_size<_Alloc2>>>
 static size_type
 _S_max_size(_Alloc2& __a, int)
 { return __a.max_size(); }

      template<typename _Alloc2,
        typename = _Require<__not_<__has_max_size<_Alloc2>>>>
 static size_type
 _S_max_size(_Alloc2&, ...)
 { return __gnu_cxx::__numeric_traits<size_type>::__max; }

      template<typename _Alloc2>
 struct __select_helper
 {
   template<typename _Alloc3, typename
     = decltype(std::declval<_Alloc3*>()
  ->select_on_container_copy_construction())>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc2>(0));
 };

      template<typename _Alloc2>
 using __has_soccc = typename __select_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_soccc<_Alloc2>>>
 static _Alloc2
 _S_select(_Alloc2& __a, int)
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2,
        typename = _Require<__not_<__has_soccc<_Alloc2>>>>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 355 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 370 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint); }
# 382 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 396 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 409 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p); }
# 421 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 432 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 486 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 500 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 512 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 524 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 536 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


}
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/alloc_traits.h" 2 3




namespace __gnu_cxx
{



  template<typename _Alloc>
    struct __allocator_always_compares_equal : std::false_type { };

  template<typename _Tp>
    struct __allocator_always_compares_equal<std::allocator<_Tp>>
    : std::true_type { };

  template<typename, typename> struct array_allocator;

  template<typename _Tp, typename _Array>
    struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
    : std::true_type { };

  template<typename> struct bitmap_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct malloc_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct mt_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<mt_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct new_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<new_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct pool_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<pool_allocator<_Tp>>
    : std::true_type { };






template<typename _Alloc>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::addressof(*__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return __allocator_always_compares_equal<_Alloc>::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    static constexpr bool _S_nothrow_swap()
    {
      using std::swap;
      return !_S_propagate_on_swap()
        || noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
    }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 210 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/alloc_traits.h" 3
  };


}
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_construct.h" 2 3

namespace std
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 90 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_construct.h" 3
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 61 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tempbuf.h" 2 3

namespace std
{
# 83 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 229 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }


}
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 2 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\random" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\random" 3





# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3




# 1 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 1 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3




struct _exception;

#pragma pack(push,_CRT_PACKING)
# 77 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
extern "C++" {
template <typename type1, typename type2> struct __mingw_types_compatible_p {
  static const bool result = false;
};

template <typename type1> struct __mingw_types_compatible_p<type1, type1> {
 static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<const type1, type1> {
  static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<type1, const type1> {
  static const bool result = true;
};
}
# 111 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
extern "C" {







  typedef union __mingw_dbl_type_t {
    double x;
    unsigned long long val;
    __extension__ struct {
      unsigned int low, high;
    } lh;
  } __mingw_dbl_type_t;

  typedef union __mingw_flt_type_t {
    float x;
    unsigned int val;
  } __mingw_flt_type_t;

  typedef union __mingw_ldbl_type_t
  {
    long double x;
    __extension__ struct {
      unsigned int low, high;
      int sign_exponent : 16;
      int res1 : 16;
      int res0 : 32;
    } lh;
  } __mingw_ldbl_type_t;

  typedef union __mingw_fp_types_t
  {
    long double *ld;
    double *d;
    float *f;
    __mingw_ldbl_type_t *ldt;
    __mingw_dbl_type_t *dt;
    __mingw_flt_type_t *ft;
  } __mingw_fp_types_t;




  extern double * __imp__HUGE;
# 168 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));



  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);


  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) fabs (double _X);
# 239 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);

  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);
# 368 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
typedef float float_t;
typedef double double_t;
# 403 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);
# 529 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);
# 624 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);
# 684 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);

  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);

  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);

  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);

  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);

  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);


  extern float __attribute__((__cdecl__)) sinhf(float _X);



  extern long double __attribute__((__cdecl__)) sinhl(long double);

  extern float __attribute__((__cdecl__)) coshf(float _X);



  extern long double __attribute__((__cdecl__)) coshl(long double);

  extern float __attribute__((__cdecl__)) tanhf(float _X);



  extern long double __attribute__((__cdecl__)) tanhl(long double);



  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);


  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);


  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);



  extern float __attribute__((__cdecl__)) expf(float _X);



  extern long double __attribute__((__cdecl__)) expl(long double);


  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);



  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);




  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);


  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);



  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);


  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);


  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);


  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);


  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);
# 883 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);


  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);



  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);



  extern long double __attribute__((__cdecl__)) powl (long double, long double);


  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);


  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);


  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);


  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);

  extern int signgam;


  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);


  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);


  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);


  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

__extension__ long long __attribute__((__cdecl__)) llrint (double);
__extension__ long long __attribute__((__cdecl__)) llrintf (float);
__extension__ long long __attribute__((__cdecl__)) llrintl (long double);
# 1050 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);


  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  __extension__ long long __attribute__((__cdecl__)) llround (double);
  __extension__ long long __attribute__((__cdecl__)) llroundf (float);
  __extension__ long long __attribute__((__cdecl__)) llroundl (long double);



  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);


  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);
# 1107 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 1118 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);



  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 1201 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);
# 1596 "C:\\Octave\\Octave-4.2.1\\include\\math.h" 3
}




#pragma pack(pop)
# 45 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 2 3
# 75 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
namespace std
{



  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 431 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 555 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
namespace std
{





  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 0x0400 : 0x4000; }


  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }


  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }


  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }


  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }



  constexpr bool
  signbit(float __x)
  { return __builtin_signbitf(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbitl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }


  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }


  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }


  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }


  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }


  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }


  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 947 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
}
# 1062 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
namespace std
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }


  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }


  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }


  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }


  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }


  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }


  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }


  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }


  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }


  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }


  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }


  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }


  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }


  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }


  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }


  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }


  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }


  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }


  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }


  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }


  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }



  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }


  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }


  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }


  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }


  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }


  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }


  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }


  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }


  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }


  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }


  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }


  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }


  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }


  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }


  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }


  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }


}
# 39 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\random" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\random" 2 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\limits" 1 3
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\limits" 3
# 147 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\limits" 3
namespace std
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 277 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 303 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };






  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -127 - 1; }

      static constexpr signed char
      max() noexcept { return 127; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -32767 - 1; }

      static constexpr short
      max() noexcept { return 32767; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -2147483647 - 1; }

      static constexpr int
      max() noexcept { return 2147483647; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -2147483647L - 1; }

      static constexpr long
      max() noexcept { return 2147483647L; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 2147483647L * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() noexcept { return 9223372036854775807LL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1552 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435e-38F; }

      static constexpr float
      max() noexcept { return 3.40282347e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209290e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return 2.2250738585072014e-308; }

      static constexpr double
      max() noexcept { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() noexcept { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443401e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460253e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\random" 2 3






# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\vector" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\vector" 3




# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_uninitialized.h" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_uninitialized.h" 3
namespace std
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 105 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;




      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 171 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 231 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 367 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline void
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { std::__uninitialized_default_n(__first, __n); }


  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }
# 672 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }



}
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\vector" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 1 3
# 66 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
namespace std
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)),
   _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }


 void _M_swap_data(_Vector_impl& __x) noexcept
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_swap_data(__x._M_impl); }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      ~_Vector_base() noexcept
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : 0;
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 213 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _Base() { }





      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 276 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_default_initialize(__n); }
# 289 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 318 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 335 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      vector(vector&& __x) noexcept
      : _Base(std::move(__x)) { }


      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }


      vector(vector&& __rv, const allocator_type& __m)
      noexcept(_Alloc_traits::_S_always_equal())
      : _Base(std::move(__rv), __m)
      {
 if (__rv.get_allocator() != __m)
   {
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }
# 373 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 399 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        { _M_initialize_dispatch(__first, __last, __false_type()); }
# 423 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      ~vector() noexcept
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 435 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 447 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
        constexpr bool __move_storage =
          _Alloc_traits::_S_propagate_on_move_assign()
          || _Alloc_traits::_S_always_equal();
        _M_move_assign(std::move(__x),
                       integral_constant<bool, __move_storage>());
 return *this;
      }
# 469 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 487 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 504 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        void
        assign(_InputIterator __first, _InputIterator __last)
        { _M_assign_dispatch(__first, __last, __false_type()); }
# 532 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      using _Base::get_allocator;







      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 672 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 692 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 724 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const noexcept
      { return begin() == end(); }
# 763 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 778 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      reference
      operator[](size_type __n) noexcept
      { return *(this->_M_impl._M_start + __n); }
# 793 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
      }

    public:
# 821 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 839 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      { return *begin(); }





      const_reference
      front() const noexcept
      { return *begin(); }





      reference
      back() noexcept
      { return *(end() - 1); }





      const_reference
      back() const noexcept
      { return *(end() - 1); }
# 886 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      _Tp*



      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }


      const _Tp*



      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 912 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
                              __x);
     ++this->_M_impl._M_finish;
   }
 else

   _M_emplace_back_aux(__x);



      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);
# 948 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      pop_back() noexcept
      {
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }
# 968 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      template<typename... _Args>
        iterator
        emplace(const_iterator __position, _Args&&... __args);
# 983 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1013 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1030 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      { return this->insert(__position, __l.begin(), __l.end()); }
# 1050 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1092 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        iterator
        insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
        {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1144 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1171 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1193 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      void
      swap(vector& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      {
 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
                           __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1245 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }



      void
      _M_default_initialize(size_type __n)
      {
 std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
      _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1323 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1363 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();







      template<typename... _Args>
        void
        _M_insert_aux(iterator __position, _Args&&... __args);

      template<typename... _Args>
        void
        _M_emplace_back_aux(_Args&&... __args);



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:



      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__tmp._M_impl);
 this->_M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



      void
      _M_move_assign(vector&& __x, std::false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), std::true_type());
 else
   {


     this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
    std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
      }



      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const
 { return __ptr; }

      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__addressof(*__ptr); }






    };
# 1509 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1526 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\vector" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_bvector.h" 1 3
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_bvector.h" 3
namespace std
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }


 _Bvector_impl(_Bit_alloc_type&& __a)
 : _Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(),
   _M_end_of_storage(0)
 { }

      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Bit_allocator()))
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(_S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


}




namespace std
{
# 525 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;


    template<typename> friend struct hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }


    explicit
    vector(size_type __n, const allocator_type& __a = allocator_type())
    : vector(__n, false, __a)
    { }

    vector(size_type __n, const bool& __value,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }
# 591 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_bvector.h" 3
    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x) noexcept
    : _Base(std::move(__x)) { }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }



    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      { _M_initialize_dispatch(__first, __last, __false_type()); }
# 629 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_bvector.h" 3
    ~vector() noexcept { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x)
    {


      this->clear();
      this->swap(__x);
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      void
      assign(_InputIterator __first, _InputIterator __last)
      { _M_assign_dispatch(__first, __last, __false_type()); }
# 690 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_bvector.h" 3
    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin() noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const noexcept
    { return this->_M_impl._M_start; }

    iterator
    end() noexcept
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const noexcept
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin() noexcept
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const noexcept
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend() noexcept
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const noexcept
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const noexcept
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const noexcept
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const noexcept
    { return const_reverse_iterator(begin()); }


    size_type
    size() const noexcept
    { return size_type(end() - begin()); }

    size_type
    max_size() const noexcept
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const noexcept
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const noexcept
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
 __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


     __n, this->size());
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() noexcept { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator

    insert(const_iterator __position, const bool& __x = bool())



    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      iterator
      insert(const_iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 difference_type __offset = __position - cbegin();
 _M_insert_dispatch(__position._M_const_cast(),
      __first, __last, __false_type());
 return begin() + __offset;
      }
# 908 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_bvector.h" 3
    iterator
    insert(const_iterator __position, size_type __n, const bool& __x)
    {
      difference_type __offset = __position - cbegin();
      _M_fill_insert(__position._M_const_cast(), __n, __x);
      return begin() + __offset;
    }







    iterator
    insert(const_iterator __p, initializer_list<bool> __l)
    { return this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator

    erase(const_iterator __position)



    { return _M_erase(__position._M_const_cast()); }

    iterator

    erase(const_iterator __first, const_iterator __last)



    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { _M_shrink_to_fit(); }


    void
    flip() noexcept
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear() noexcept
    { _M_erase_at_end(begin()); }


    template<typename... _Args>
      void
      emplace_back(_Args&&... __args)
      { push_back(bool(__args...)); }

    template<typename... _Args>
      iterator
      emplace(const_iterator __pos, _Args&&... __args)
      { return insert(__pos, bool(__args...)); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);


    bool
    _M_shrink_to_fit();






    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }

    iterator
    _M_erase(iterator __pos);

    iterator
    _M_erase(iterator __first, iterator __last);
  };


}





namespace std
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 66 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\vector" 2 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/vector.tcc" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/vector.tcc" 3
namespace std
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_emplace_back_aux(std::forward<_Args>(__args)...);
      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {

   const auto __pos = begin() + (__position - cbegin());
   if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     {
       _Tp __x_copy = __x;
       _M_insert_aux(__pos, std::move(__x_copy));
     }
   else
     _M_insert_aux(__pos, __x);



 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename vector<_Tp, _Alloc>::iterator
      vector<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 const size_type __n = __position - begin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
     && __position == end())
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(begin() + (__position - cbegin()),
   std::forward<_Args>(__args)...);
 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)






    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
              std::move(*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;



   std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);





   *__position = _Tp(std::forward<_Args>(__args)...);

 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       _Alloc_traits::construct(this->_M_impl,
                         __new_start + __elems_before,

           std::forward<_Args>(__args)...);



       __new_finish = 0;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (this->_M_impl._M_start, __position.base(),
   __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__position.base(), this->_M_impl._M_finish,
   __new_finish, _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  _Alloc_traits::destroy(this->_M_impl,
                         __new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_emplace_back_aux(_Args&&... __args)
      {
 const size_type __len =
   _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
 pointer __new_start(this->_M_allocate(__len));
 pointer __new_finish(__new_start);
 try
   {
     _Alloc_traits::construct(this->_M_impl, __new_start + size(),
         std::forward<_Args>(__args)...);
     __new_finish = 0;

     __new_finish
       = std::__uninitialized_move_if_noexcept_a
       (this->_M_impl._M_start, this->_M_impl._M_finish,
        __new_start, _M_get_Tp_allocator());

     ++__new_finish;
   }
 catch(...)
   {
     if (!__new_finish)
       _Alloc_traits::destroy(this->_M_impl, __new_start + size());
     else
       std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
     _M_deallocate(__new_start, __len);
     throw;
   }
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 _M_deallocate(this->_M_impl._M_start,
        this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start);
 this->_M_impl._M_start = __new_start;
 this->_M_impl._M_finish = __new_finish;
 this->_M_impl._M_end_of_storage = __new_start + __len;
      }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       std::__uninitialized_default_n_a(this->_M_impl._M_finish,
            __n, _M_get_Tp_allocator());
       this->_M_impl._M_finish += __n;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __old_size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {
    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, this->_M_impl._M_finish,
       __new_start, _M_get_Tp_allocator());
    std::__uninitialized_default_n_a(__new_finish, __n,
         _M_get_Tp_allocator());
    __new_finish += __n;
  }
       catch(...)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
      iterator(__q, 0));
      this->_M_deallocate();
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   _M_reallocate(size());
   return true;
 }
      catch(...)
 { return false; }
    }



}



namespace std
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\vector" 2 3
# 35 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 2 3

namespace std
{
# 55 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __g);






  namespace __detail
  {


    template<typename _UIntType, size_t __w,
      bool = __w < static_cast<size_t>
     (std::numeric_limits<_UIntType>::digits)>
      struct _Shift
      { static const _UIntType __value = 0; };

    template<typename _UIntType, size_t __w>
      struct _Shift<_UIntType, __w, true>
      { static const _UIntType __value = _UIntType(1) << __w; };

    template<int __s,
      int __which = ((__s <= 8 * sizeof (int))
       + (__s <= 8 * sizeof (long))
       + (__s <= 8 * sizeof (long long))

       + (__s <= 128))>
      struct _Select_uint_least_t
      {
 static_assert(__which < 0,
        "sorry, would be too much trouble for a slow result");
      };

    template<int __s>
      struct _Select_uint_least_t<__s, 4>
      { typedef unsigned int type; };

    template<int __s>
      struct _Select_uint_least_t<__s, 3>
      { typedef unsigned long type; };

    template<int __s>
      struct _Select_uint_least_t<__s, 2>
      { typedef unsigned long long type; };


    template<int __s>
      struct _Select_uint_least_t<__s, 1>
      { typedef unsigned __int128 type; };



    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c,
      bool __big_enough = (!(__m & (__m - 1))
      || (_Tp(-1) - __c) / __a >= __m - 1),
             bool __schrage_ok = __m % __a < __m / __a>
      struct _Mod
      {
 typedef typename _Select_uint_least_t<std::__lg(__a)
           + std::__lg(__m) + 2>::type _Tp2;
 static _Tp
 __calc(_Tp __x)
 { return static_cast<_Tp>((_Tp2(__a) * __x + __c) % __m); }
      };


    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      struct _Mod<_Tp, __m, __a, __c, false, true>
      {
 static _Tp
 __calc(_Tp __x);
      };




    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
 static _Tp
 __calc(_Tp __x)
 {
   _Tp __res = __a * __x + __c;
   if (__m)
     __res %= __m;
   return __res;
 }
      };

    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }


    template<typename _Tp>
      inline bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      };





    template<typename _Engine, typename _DInputType>
      struct _Adaptor
      {
 static_assert(std::is_floating_point<_DInputType>::value,
        "template argument not a floating point type");

      public:
 _Adaptor(_Engine& __g)
 : _M_g(__g) { }

 _DInputType
 min() const
 { return _DInputType(0); }

 _DInputType
 max() const
 { return _DInputType(1); }






 _DInputType
 operator()()
 {
   return std::generate_canonical<_DInputType,
                             std::numeric_limits<_DInputType>::digits,
                             _Engine>(_M_g);
 }

      private:
 _Engine& _M_g;
      };


  }
# 242 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    class linear_congruential_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(__m == 0u || (__a < __m && __c < __m),
      "template argument substituting __m out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr result_type multiplier = __a;

      static constexpr result_type increment = __c;

      static constexpr result_type modulus = __m;
      static constexpr result_type default_seed = 1u;
# 269 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      explicit
      linear_congruential_engine(result_type __s = default_seed)
      { seed(__s); }







      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>
        ::type>
        explicit
        linear_congruential_engine(_Sseq& __q)
        { seed(__q); }







      void
      seed(result_type __s = default_seed);
# 302 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _Sseq>
        typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);







      static constexpr result_type
      min()
      { return __c == 0u ? 1u : 0u; }




      static constexpr result_type
      max()
      { return __m - 1u; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()()
      {
 _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 return _M_x;
      }
# 354 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      friend bool
      operator==(const linear_congruential_engine& __lhs,
   const linear_congruential_engine& __rhs)
      { return __lhs._M_x == __rhs._M_x; }
# 367 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::linear_congruential_engine<_UIntType1,
     __a1, __c1, __m1>& __lcr);
# 387 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::linear_congruential_engine<_UIntType1, __a1,
     __c1, __m1>& __lcr);

    private:
      _UIntType _M_x;
    };
# 409 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    inline bool
    operator!=(const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __lhs,
        const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __rhs)
    { return !(__lhs == __rhs); }
# 446 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    class mersenne_twister_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(1u <= __m && __m <= __n,
      "template argument substituting __m out of bounds");
      static_assert(__r <= __w, "template argument substituting "
      "__r out of bound");
      static_assert(__u <= __w, "template argument substituting "
      "__u out of bound");
      static_assert(__s <= __w, "template argument substituting "
      "__s out of bound");
      static_assert(__t <= __w, "template argument substituting "
      "__t out of bound");
      static_assert(__l <= __w, "template argument substituting "
      "__l out of bound");
      static_assert(__w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bound");
      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __a out of bound");
      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __b out of bound");
      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __c out of bound");
      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __d out of bound");
      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __f out of bound");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t state_size = __n;
      static constexpr size_t shift_size = __m;
      static constexpr size_t mask_bits = __r;
      static constexpr result_type xor_mask = __a;
      static constexpr size_t tempering_u = __u;
      static constexpr result_type tempering_d = __d;
      static constexpr size_t tempering_s = __s;
      static constexpr result_type tempering_b = __b;
      static constexpr size_t tempering_t = __t;
      static constexpr result_type tempering_c = __c;
      static constexpr size_t tempering_l = __l;
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;


      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>
        ::type>
        explicit
        mersenne_twister_engine(_Sseq& __q)
        { seed(__q); }

      void
      seed(result_type __sd = default_seed);

      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);




      static constexpr result_type
      min()
      { return 0; };




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z);

      result_type
      operator()();
# 560 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      friend bool
      operator==(const mersenne_twister_engine& __lhs,
   const mersenne_twister_engine& __rhs)
      { return (std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x)
  && __lhs._M_p == __rhs._M_p); }
# 578 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::mersenne_twister_engine<_UIntType1, __w1, __n1,
     __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>& __x);
# 604 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,
     __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>& __x);

    private:
      void _M_gen_rand();

      _UIntType _M_x[state_size];
      size_t _M_p;
    };
# 637 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    inline bool
    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,
        const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)
    { return !(__lhs == __rhs); }
# 669 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    class subtract_with_carry_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __s && __s < __r,
      "template argument substituting __s out of bounds");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t short_lag = __s;
      static constexpr size_t long_lag = __r;
      static constexpr result_type default_seed = 19780503u;





      explicit
      subtract_with_carry_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>
        ::type>
        explicit
        subtract_with_carry_engine(_Sseq& __q)
        { seed(__q); }
# 722 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      void
      seed(result_type __sd = default_seed);





      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);





      static constexpr result_type
      min()
      { return 0; }





      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 777 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      friend bool
      operator==(const subtract_with_carry_engine& __lhs,
   const subtract_with_carry_engine& __rhs)
      { return (std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x)
  && __lhs._M_carry == __rhs._M_carry
  && __lhs._M_p == __rhs._M_p); }
# 796 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);
# 815 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);

    private:
      _UIntType _M_x[long_lag];
      _UIntType _M_carry;
      size_t _M_p;
    };
# 840 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    inline bool
    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __lhs,
        const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __rhs)
    { return !(__lhs == __rhs); }
# 855 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    class discard_block_engine
    {
      static_assert(1 <= __r && __r <= __p,
      "template argument substituting __r out of bounds");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;


      static constexpr size_t block_size = __p;
      static constexpr size_t used_block = __r;






      discard_block_engine()
      : _M_b(), _M_n(0) { }







      explicit
      discard_block_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng), _M_n(0) { }







      explicit
      discard_block_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng)), _M_n(0) { }







      explicit
      discard_block_engine(result_type __s)
      : _M_b(__s), _M_n(0) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, discard_block_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        discard_block_engine(_Sseq& __q)
 : _M_b(__q), _M_n(0)
        { }





      void
      seed()
      {
 _M_b.seed();
 _M_n = 0;
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_n = 0;
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_n = 0;
 }





      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1005 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      friend bool
      operator==(const discard_block_engine& __lhs,
   const discard_block_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }
# 1021 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>& __x);
# 1039 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>& __x);

    private:
      _RandomNumberEngine _M_b;
      size_t _M_n;
    };
# 1062 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    inline bool
    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __lhs,
        const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __rhs)
    { return !(__lhs == __rhs); }






  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    class independent_bits_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;






      independent_bits_engine()
      : _M_b() { }







      explicit
      independent_bits_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng) { }







      explicit
      independent_bits_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng)) { }







      explicit
      independent_bits_engine(result_type __s)
      : _M_b(__s) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
               ::type>
        explicit
        independent_bits_engine(_Sseq& __q)
        : _M_b(__q)
        { }





      void
      seed()
      { _M_b.seed(); }





      void
      seed(result_type __s)
      { _M_b.seed(__s); }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        { _M_b.seed(__q); }





      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return 0U; }




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1215 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      friend bool
      operator==(const independent_bits_engine& __lhs,
   const independent_bits_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1232 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::independent_bits_engine<_RandomNumberEngine,
     __w, _UIntType>& __x)
 {
   __is >> __x._M_b;
   return __is;
 }

    private:
      _RandomNumberEngine _M_b;
    };
# 1258 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    inline bool
    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __lhs,
        const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __rhs)
    { return !(__lhs == __rhs); }
# 1276 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::independent_bits_engine<_RandomNumberEngine,
        __w, _UIntType>& __x)
    {
      __os << __x.base();
      return __os;
    }







  template<typename _RandomNumberEngine, size_t __k>
    class shuffle_order_engine
    {
      static_assert(1u <= __k, "template argument substituting "
      "__k out of bound");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;

      static constexpr size_t table_size = __k;






      shuffle_order_engine()
      : _M_b()
      { _M_initialize(); }







      explicit
      shuffle_order_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng)
      { _M_initialize(); }







      explicit
      shuffle_order_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng))
      { _M_initialize(); }







      explicit
      shuffle_order_engine(result_type __s)
      : _M_b(__s)
      { _M_initialize(); }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        shuffle_order_engine(_Sseq& __q)
        : _M_b(__q)
        { _M_initialize(); }





      void
      seed()
      {
 _M_b.seed();
 _M_initialize();
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_initialize();
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_initialize();
 }




      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1444 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      friend bool
      operator==(const shuffle_order_engine& __lhs,
   const shuffle_order_engine& __rhs)
      { return (__lhs._M_b == __rhs._M_b
  && std::equal(__lhs._M_v, __lhs._M_v + __k, __rhs._M_v)
  && __lhs._M_y == __rhs._M_y); }
# 1462 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::shuffle_order_engine<_RandomNumberEngine1,
     __k1>& __x);
# 1480 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::shuffle_order_engine<_RandomNumberEngine1, __k1>& __x);

    private:
      void _M_initialize()
      {
 for (size_t __i = 0; __i < __k; ++__i)
   _M_v[__i] = _M_b();
 _M_y = _M_b();
      }

      _RandomNumberEngine _M_b;
      result_type _M_v[__k];
      result_type _M_y;
    };
# 1510 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __k>
    inline bool
    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __lhs,
        const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __rhs)
    { return !(__lhs == __rhs); }





  typedef linear_congruential_engine<uint_fast32_t, 16807UL, 0UL, 2147483647UL>
  minstd_rand0;




  typedef linear_congruential_engine<uint_fast32_t, 48271UL, 0UL, 2147483647UL>
  minstd_rand;
# 1539 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;




  typedef mersenne_twister_engine<
    uint_fast64_t,
    64, 312, 156, 31,
    0xb5026f5aa96619e9ULL, 29,
    0x5555555555555555ULL, 17,
    0x71d67fffeda60000ULL, 37,
    0xfff7eee000000000ULL, 43,
    6364136223846793005ULL> mt19937_64;

  typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
    ranlux24_base;

  typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
    ranlux48_base;

  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;

  typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;

  typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

  typedef minstd_rand0 default_random_engine;





  class random_device
  {
  public:

    typedef unsigned int result_type;
# 1598 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
    explicit
    random_device(const std::string& __token = "mt19937")
    { _M_init_pretr1(__token); }

  public:



    static constexpr result_type
    min()
    { return std::numeric_limits<result_type>::min(); }

    static constexpr result_type
    max()
    { return std::numeric_limits<result_type>::max(); }

    double
    entropy() const noexcept
    { return 0.0; }

    result_type
    operator()()
    {



      return this->_M_getval_pretr1();

    }


    random_device(const random_device&) = delete;
    void operator=(const random_device&) = delete;

  private:

    void _M_init(const std::string& __token);
    void _M_init_pretr1(const std::string& __token);
    void _M_fini();

    result_type _M_getval();
    result_type _M_getval_pretr1();

    union
    {
      void* _M_file;
      mt19937 _M_mt;
    };
  };
# 1667 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1841 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_int_distribution<_IntType>&);
# 1855 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_int_distribution<_IntType>&);
# 1868 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class uniform_real_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef uniform_real_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

    public:






      explicit
      uniform_real_distribution(_RealType __a = _RealType(0),
    _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      uniform_real_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return (__aurng() * (__p.b() - __p.a())) + __p.a();
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_real_distribution& __d1,
   const uniform_real_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 2050 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_real_distribution<_RealType>&);
# 2064 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_real_distribution<_RealType>&);
# 2086 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class normal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef normal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __mean = _RealType(0),
     _RealType __stddev = _RealType(1))
 : _M_mean(__mean), _M_stddev(__stddev)
 {
                                                  ;
 }

 _RealType
 mean() const
 { return _M_mean; }

 _RealType
 stddev() const
 { return _M_stddev; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_mean == __p2._M_mean
    && __p1._M_stddev == __p2._M_stddev); }

      private:
 _RealType _M_mean;
 _RealType _M_stddev;
      };

    public:




      explicit
      normal_distribution(result_type __mean = result_type(0),
     result_type __stddev = result_type(1))
      : _M_param(__mean, __stddev), _M_saved_available(false)
      { }

      explicit
      normal_distribution(const param_type& __p)
      : _M_param(__p), _M_saved_available(false)
      { }




      void
      reset()
      { _M_saved_available = false; }




      _RealType
      mean() const
      { return _M_param.mean(); }




      _RealType
      stddev() const
      { return _M_param.stddev(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      template<typename _RealType1>
 friend bool
        operator==(const std::normal_distribution<_RealType1>& __d1,
     const std::normal_distribution<_RealType1>& __d2);
# 2247 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::normal_distribution<_RealType1>& __x);
# 2262 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::normal_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
      result_type _M_saved;
      bool _M_saved_available;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2299 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class lognormal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef lognormal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(0),
     _RealType __s = _RealType(1))
 : _M_m(__m), _M_s(__s)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 s() const
 { return _M_s; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }

      private:
 _RealType _M_m;
 _RealType _M_s;
      };

      explicit
      lognormal_distribution(_RealType __m = _RealType(0),
        _RealType __s = _RealType(1))
      : _M_param(__m, __s), _M_nd()
      { }

      explicit
      lognormal_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      s() const
      { return _M_param.s(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const lognormal_distribution& __d1,
   const lognormal_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd); }
# 2451 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::lognormal_distribution<_RealType1>& __x);
# 2466 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::lognormal_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::lognormal_distribution<_RealType>& __d1,
        const std::lognormal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2503 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class gamma_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef gamma_distribution<_RealType> distribution_type;
 friend class gamma_distribution<_RealType>;

 explicit
 param_type(_RealType __alpha_val = _RealType(1),
     _RealType __beta_val = _RealType(1))
 : _M_alpha(__alpha_val), _M_beta(__beta_val)
 {
                                                 ;
   _M_initialize();
 }

 _RealType
 alpha() const
 { return _M_alpha; }

 _RealType
 beta() const
 { return _M_beta; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_alpha == __p2._M_alpha
    && __p1._M_beta == __p2._M_beta); }

      private:
 void
 _M_initialize();

 _RealType _M_alpha;
 _RealType _M_beta;

 _RealType _M_malpha, _M_a2;
      };

    public:




      explicit
      gamma_distribution(_RealType __alpha_val = _RealType(1),
    _RealType __beta_val = _RealType(1))
      : _M_param(__alpha_val, __beta_val), _M_nd()
      { }

      explicit
      gamma_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      alpha() const
      { return _M_param.alpha(); }




      _RealType
      beta() const
      { return _M_param.beta(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const gamma_distribution& __d1,
   const gamma_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd); }
# 2672 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::gamma_distribution<_RealType1>& __x);
# 2686 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::gamma_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




   template<typename _RealType>
     inline bool
     operator!=(const std::gamma_distribution<_RealType>& __d1,
  const std::gamma_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2720 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class chi_squared_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef chi_squared_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      chi_squared_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_gd(__n / 2)
      { }

      explicit
      chi_squared_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.n() / 2)
      { }




      void
      reset()
      { _M_gd.reset(); }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return 2 * _M_gd(__urng); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return 2 * _M_gd(__urng, param_type(__p.n() / 2));
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
        { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { typename std::gamma_distribution<result_type>::param_type
     __p2(__p.n() / 2);
   this->__generate_impl(__f, __t, __urng, __p2); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
        { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { typename std::gamma_distribution<result_type>::param_type
     __p2(__p.n() / 2);
   this->__generate_impl(__f, __t, __urng, __p2); }






      friend bool
      operator==(const chi_squared_distribution& __d1,
   const chi_squared_distribution& __d2)
      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }
# 2874 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::chi_squared_distribution<_RealType1>& __x);
# 2889 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::chi_squared_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const typename
   std::gamma_distribution<result_type>::param_type& __p);

      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::chi_squared_distribution<_RealType>& __d1,
        const std::chi_squared_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2930 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class cauchy_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef cauchy_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      cauchy_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      cauchy_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }

      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const cauchy_distribution& __d1,
   const cauchy_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3100 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::cauchy_distribution<_RealType>& __x);
# 3115 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::cauchy_distribution<_RealType>& __x);
# 3131 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class fisher_f_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef fisher_f_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(1),
     _RealType __n = _RealType(1))
 : _M_m(__m), _M_n(__n)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_m;
 _RealType _M_n;
      };

      explicit
      fisher_f_distribution(_RealType __m = _RealType(1),
       _RealType __n = _RealType(1))
      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)
      { }

      explicit
      fisher_f_distribution(const param_type& __p)
      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)
      { }




      void
      reset()
      {
 _M_gd_x.reset();
 _M_gd_y.reset();
      }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())
    / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const fisher_f_distribution& __d1,
   const fisher_f_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_gd_x == __d2._M_gd_x
  && __d1._M_gd_y == __d2._M_gd_y); }
# 3298 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::fisher_f_distribution<_RealType1>& __x);
# 3313 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::fisher_f_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::fisher_f_distribution<_RealType>& __d1,
        const std::fisher_f_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3355 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class student_t_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef student_t_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      student_t_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)
      { }

      explicit
      student_t_distribution(const param_type& __p)
      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)
      { }




      void
      reset()
      {
 _M_nd.reset();
 _M_gd.reset();
      }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng)
        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;

   const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));
   return _M_nd(__urng) * std::sqrt(__p.n() / __g);
        }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const student_t_distribution& __d1,
   const student_t_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }
# 3511 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::student_t_distribution<_RealType1>& __x);
# 3526 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::student_t_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::student_t_distribution<_RealType>& __d1,
        const std::student_t_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3574 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  class bernoulli_distribution
  {
  public:

    typedef bool result_type;

    struct param_type
    {
      typedef bernoulli_distribution distribution_type;

      explicit
      param_type(double __p = 0.5)
      : _M_p(__p)
      {
                                                      ;
      }

      double
      p() const
      { return _M_p; }

      friend bool
      operator==(const param_type& __p1, const param_type& __p2)
      { return __p1._M_p == __p2._M_p; }

    private:
      double _M_p;
    };

  public:






    explicit
    bernoulli_distribution(double __p = 0.5)
    : _M_param(__p)
    { }

    explicit
    bernoulli_distribution(const param_type& __p)
    : _M_param(__p)
    { }






    void
    reset() { }




    double
    p() const
    { return _M_param.p(); }




    param_type
    param() const
    { return _M_param; }





    void
    param(const param_type& __param)
    { _M_param = __param; }




    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }




    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }




    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng)
      { return this->operator()(__urng, _M_param); }

    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
 if ((__aurng() - __aurng.min())
      < __p.p() * (__aurng.max() - __aurng.min()))
   return true;
 return false;
      }

    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng)
      { this->__generate(__f, __t, __urng, _M_param); }

    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng, const param_type& __p)
      { this->__generate_impl(__f, __t, __urng, __p); }

    template<typename _UniformRandomNumberGenerator>
      void
      __generate(result_type* __f, result_type* __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      { this->__generate_impl(__f, __t, __urng, __p); }





    friend bool
    operator==(const bernoulli_distribution& __d1,
        const bernoulli_distribution& __d2)
    { return __d1._M_param == __d2._M_param; }

  private:
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p);

    param_type _M_param;
  };





  inline bool
  operator!=(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return !(__d1 == __d2); }
# 3745 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::bernoulli_distribution& __x);
# 3759 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::bernoulli_distribution& __x)
    {
      double __p;
      __is >> __p;
      __x.param(bernoulli_distribution::param_type(__p));
      return __is;
    }
# 3778 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType = int>
    class binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef binomial_distribution<_IntType> distribution_type;
 friend class binomial_distribution<_IntType>;

 explicit
 param_type(_IntType __t = _IntType(1), double __p = 0.5)
 : _M_t(__t), _M_p(__p)
 {


                     ;
   _M_initialize();
 }

 _IntType
 t() const
 { return _M_t; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize();

 _IntType _M_t;
 double _M_p;

 double _M_q;

 double _M_d1, _M_d2, _M_s1, _M_s2, _M_c,
        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;

 bool _M_easy;
      };


      explicit
      binomial_distribution(_IntType __t = _IntType(1),
       double __p = 0.5)
      : _M_param(__t, __p), _M_nd()
      { }

      explicit
      binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _IntType
      t() const
      { return _M_param.t(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return _M_param.t(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






 friend bool
        operator==(const binomial_distribution& __d1,
     const binomial_distribution& __d2)

 { return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd; }
# 3951 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::binomial_distribution<_IntType1>& __x);
# 3967 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::binomial_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      template<typename _UniformRandomNumberGenerator>
 result_type
 _M_waiting(_UniformRandomNumberGenerator& __urng,
     _IntType __t, double __q);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::binomial_distribution<_IntType>& __d1,
        const std::binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4009 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType = int>
    class geometric_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef geometric_distribution<_IntType> distribution_type;
 friend class geometric_distribution<_IntType>;

 explicit
 param_type(double __p = 0.5)
 : _M_p(__p)
 {
                                                      ;
   _M_initialize();
 }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize()
 { _M_log_1_p = std::log(1.0 - _M_p); }

 double _M_p;

 double _M_log_1_p;
      };


      explicit
      geometric_distribution(double __p = 0.5)
      : _M_param(__p)
      { }

      explicit
      geometric_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const geometric_distribution& __d1,
   const geometric_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4180 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::geometric_distribution<_IntType>& __x);
# 4195 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::geometric_distribution<_IntType>& __x);
# 4209 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType = int>
    class negative_binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef negative_binomial_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __k = 1, double __p = 0.5)
 : _M_k(__k), _M_p(__p)
 {
                                                                     ;
 }

 _IntType
 k() const
 { return _M_k; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }

      private:
 _IntType _M_k;
 double _M_p;
      };

      explicit
      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)
      : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)
      { }

      explicit
      negative_binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.k(), (1.0 - __p.p()) / __p.p())
      { }




      void
      reset()
      { _M_gd.reset(); }




      _IntType
      k() const
      { return _M_param.k(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng);

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const negative_binomial_distribution& __d1,
   const negative_binomial_distribution& __d2)
      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }
# 4368 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::negative_binomial_distribution<_IntType1>& __x);
# 4383 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::negative_binomial_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::gamma_distribution<double> _M_gd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,
        const std::negative_binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4431 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType = int>
    class poisson_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef poisson_distribution<_IntType> distribution_type;
 friend class poisson_distribution<_IntType>;

 explicit
 param_type(double __mean = 1.0)
 : _M_mean(__mean)
 {
                                       ;
   _M_initialize();
 }

 double
 mean() const
 { return _M_mean; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_mean == __p2._M_mean; }

      private:

 void
 _M_initialize();

 double _M_mean;

 double _M_lm_thr;

 double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;

      };


      explicit
      poisson_distribution(double __mean = 1.0)
      : _M_param(__mean), _M_nd()
      { }

      explicit
      poisson_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      double
      mean() const
      { return _M_param.mean(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const poisson_distribution& __d1,
   const poisson_distribution& __d2)

      { return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd; }
# 4588 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::poisson_distribution<_IntType1>& __x);
# 4603 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::poisson_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::poisson_distribution<_IntType>& __d1,
        const std::poisson_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4647 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class exponential_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef exponential_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __lambda = _RealType(1))
 : _M_lambda(__lambda)
 {
                                                  ;
 }

 _RealType
 lambda() const
 { return _M_lambda; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_lambda == __p2._M_lambda; }

      private:
 _RealType _M_lambda;
      };

    public:




      explicit
      exponential_distribution(const result_type& __lambda = result_type(1))
      : _M_param(__lambda)
      { }

      explicit
      exponential_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      _RealType
      lambda() const
      { return _M_param.lambda(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return -std::log(result_type(1) - __aurng()) / __p.lambda();
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const exponential_distribution& __d1,
   const exponential_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4819 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::exponential_distribution<_RealType>& __x);
# 4834 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::exponential_distribution<_RealType>& __x);
# 4849 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class weibull_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef weibull_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(1),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      weibull_distribution(_RealType __a = _RealType(1),
      _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      weibull_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const weibull_distribution& __d1,
   const weibull_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5022 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::weibull_distribution<_RealType>& __x);
# 5037 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::weibull_distribution<_RealType>& __x);
# 5052 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class extreme_value_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef extreme_value_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      extreme_value_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      extreme_value_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const extreme_value_distribution& __d1,
   const extreme_value_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5225 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::extreme_value_distribution<_RealType>& __x);
# 5240 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::extreme_value_distribution<_RealType>& __x);
# 5252 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _IntType = int>
    class discrete_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef discrete_distribution<_IntType> distribution_type;
 friend class discrete_distribution<_IntType>;

 param_type()
 : _M_prob(), _M_cp()
 { }

 template<typename _InputIterator>
   param_type(_InputIterator __wbegin,
       _InputIterator __wend)
   : _M_prob(__wbegin, __wend), _M_cp()
   { _M_initialize(); }

 param_type(initializer_list<double> __wil)
 : _M_prob(__wil.begin(), __wil.end()), _M_cp()
 { _M_initialize(); }

 template<typename _Func>
   param_type(size_t __nw, double __xmin, double __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<double>
 probabilities() const
 { return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_prob == __p2._M_prob; }

      private:
 void
 _M_initialize();

 std::vector<double> _M_prob;
 std::vector<double> _M_cp;
      };

      discrete_distribution()
      : _M_param()
      { }

      template<typename _InputIterator>
 discrete_distribution(_InputIterator __wbegin,
         _InputIterator __wend)
 : _M_param(__wbegin, __wend)
 { }

      discrete_distribution(initializer_list<double> __wl)
      : _M_param(__wl)
      { }

      template<typename _Func>
 discrete_distribution(size_t __nw, double __xmin, double __xmax,
         _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      discrete_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<double>
      probabilities() const
      {
 return _M_param._M_prob.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_prob;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      {
 return _M_param._M_prob.empty()
   ? result_type(0) : result_type(_M_param._M_prob.size() - 1);
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const discrete_distribution& __d1,
   const discrete_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5433 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::discrete_distribution<_IntType1>& __x);
# 5449 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::discrete_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 5482 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_constant_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_constant_distribution<_RealType> distribution_type;
 friend class piecewise_constant_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bi, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
      };

      explicit
      piecewise_constant_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_constant_distribution(_InputIteratorB __bfirst,
     _InputIteratorB __bend,
     _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_constant_distribution(initializer_list<_RealType> __bl,
     _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_constant_distribution(size_t __nw,
     _RealType __xmin, _RealType __xmax,
     _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_constant_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }




      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const piecewise_constant_distribution& __d1,
   const piecewise_constant_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5700 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::piecewise_constant_distribution<_RealType1>& __x);
# 5716 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::piecewise_constant_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5749 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_linear_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_linear_distribution<_RealType> distribution_type;
 friend class piecewise_linear_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp(), _M_m()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bl, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_int == __p2._M_int
    && __p1._M_den == __p2._M_den); }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
 std::vector<double> _M_m;
      };

      explicit
      piecewise_linear_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_linear_distribution(_InputIteratorB __bfirst,
          _InputIteratorB __bend,
          _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_linear_distribution(initializer_list<_RealType> __bl,
          _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_linear_distribution(size_t __nw,
          _RealType __xmin, _RealType __xmax,
          _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_linear_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }





      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(2, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const piecewise_linear_distribution& __d1,
   const piecewise_linear_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5970 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::piecewise_linear_distribution<_RealType1>& __x);
# 5986 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::piecewise_linear_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 6027 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.h" 3
  class seed_seq
  {

  public:

    typedef uint_least32_t result_type;


    seed_seq()
    : _M_v()
    { }

    template<typename _IntType>
      seed_seq(std::initializer_list<_IntType> il);

    template<typename _InputIterator>
      seed_seq(_InputIterator __begin, _InputIterator __end);


    template<typename _RandomAccessIterator>
      void
      generate(_RandomAccessIterator __begin, _RandomAccessIterator __end);


    size_t size() const
    { return _M_v.size(); }

    template<typename OutputIterator>
      void
      param(OutputIterator __dest) const
      { std::copy(_M_v.begin(), _M_v.end(), __dest); }

  private:

    std::vector<result_type> _M_v;
  };






}
# 50 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\random" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/opt_random.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/opt_random.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 1 3
# 27 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\ia32intrin.h" 1 3
# 32 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\ia32intrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__readeflags(void)
{
  return __builtin_ia32_readeflags_u64();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__))
__writeeflags(unsigned long long __f)
{
  __builtin_ia32_writeeflags_u64(__f);
}
# 58 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\ia32intrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__rdpmc(int __A) {
  return __builtin_ia32_rdpmc(__A);
}


static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__rdtsc(void) {
  return __builtin_ia32_rdtsc();
}


static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__rdtscp(unsigned int *__A) {
  return __builtin_ia32_rdtscp(__A);
}
# 28 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3

# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 1 3
# 28 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 1 3
# 27 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
typedef long long __m64 __attribute__((__vector_size__(8)));

typedef long long __v1di __attribute__((__vector_size__(8)));
typedef int __v2si __attribute__((__vector_size__(8)));
typedef short __v4hi __attribute__((__vector_size__(8)));
typedef char __v8qi __attribute__((__vector_size__(8)));
# 44 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_empty(void)
{
    __builtin_ia32_emms();
}
# 61 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cvtsi32_si64(int __i)
{
    return (__m64)__builtin_ia32_vec_init_v2si(__i, 0);
}
# 78 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cvtsi64_si32(__m64 __m)
{
    return __builtin_ia32_vec_ext_v2si((__v2si)__m, 0);
}
# 94 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cvtsi64_m64(long long __i)
{
    return (__m64)__i;
}
# 110 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cvtm64_si64(__m64 __m)
{
    return (long long)__m;
}
# 140 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_packs_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_packsswb((__v4hi)__m1, (__v4hi)__m2);
}
# 170 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_packs_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_packssdw((__v2si)__m1, (__v2si)__m2);
}
# 200 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_packs_pu16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_packuswb((__v4hi)__m1, (__v4hi)__m2);
}
# 227 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpackhi_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpckhbw((__v8qi)__m1, (__v8qi)__m2);
}
# 250 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpackhi_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpckhwd((__v4hi)__m1, (__v4hi)__m2);
}
# 271 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpackhi_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpckhdq((__v2si)__m1, (__v2si)__m2);
}
# 298 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpacklo_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpcklbw((__v8qi)__m1, (__v8qi)__m2);
}
# 321 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpacklo_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpcklwd((__v4hi)__m1, (__v4hi)__m2);
}
# 342 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpacklo_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpckldq((__v2si)__m1, (__v2si)__m2);
}
# 363 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_add_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddb((__v8qi)__m1, (__v8qi)__m2);
}
# 384 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_add_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddw((__v4hi)__m1, (__v4hi)__m2);
}
# 405 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_add_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddd((__v2si)__m1, (__v2si)__m2);
}
# 427 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_adds_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddsb((__v8qi)__m1, (__v8qi)__m2);
}
# 450 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_adds_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddsw((__v4hi)__m1, (__v4hi)__m2);
}
# 472 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_adds_pu8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddusb((__v8qi)__m1, (__v8qi)__m2);
}
# 494 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_adds_pu16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddusw((__v4hi)__m1, (__v4hi)__m2);
}
# 515 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sub_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubb((__v8qi)__m1, (__v8qi)__m2);
}
# 536 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sub_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubw((__v4hi)__m1, (__v4hi)__m2);
}
# 557 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sub_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubd((__v2si)__m1, (__v2si)__m2);
}
# 580 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_subs_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubsb((__v8qi)__m1, (__v8qi)__m2);
}
# 603 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_subs_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubsw((__v4hi)__m1, (__v4hi)__m2);
}
# 626 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_subs_pu8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubusb((__v8qi)__m1, (__v8qi)__m2);
}
# 649 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_subs_pu16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubusw((__v4hi)__m1, (__v4hi)__m2);
}
# 674 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_madd_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pmaddwd((__v4hi)__m1, (__v4hi)__m2);
}
# 695 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_mulhi_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pmulhw((__v4hi)__m1, (__v4hi)__m2);
}
# 716 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_mullo_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pmullw((__v4hi)__m1, (__v4hi)__m2);
}
# 738 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sll_pi16(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psllw((__v4hi)__m, __count);
}
# 759 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_slli_pi16(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psllwi((__v4hi)__m, __count);
}
# 781 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sll_pi32(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_pslld((__v2si)__m, __count);
}
# 802 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_slli_pi32(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_pslldi((__v2si)__m, __count);
}
# 822 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sll_si64(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psllq((__v1di)__m, __count);
}
# 842 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_slli_si64(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psllqi((__v1di)__m, __count);
}
# 865 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sra_pi16(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psraw((__v4hi)__m, __count);
}
# 887 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srai_pi16(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psrawi((__v4hi)__m, __count);
}
# 910 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sra_pi32(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psrad((__v2si)__m, __count);
}
# 932 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srai_pi32(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psradi((__v2si)__m, __count);
}
# 954 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srl_pi16(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psrlw((__v4hi)__m, __count);
}
# 975 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srli_pi16(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psrlwi((__v4hi)__m, __count);
}
# 997 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srl_pi32(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psrld((__v2si)__m, __count);
}
# 1018 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srli_pi32(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psrldi((__v2si)__m, __count);
}
# 1037 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srl_si64(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psrlq((__v1di)__m, __count);
}
# 1056 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srli_si64(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psrlqi((__v1di)__m, __count);
}
# 1074 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_and_si64(__m64 __m1, __m64 __m2)
{
    return __builtin_ia32_pand((__v1di)__m1, (__v1di)__m2);
}
# 1095 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_andnot_si64(__m64 __m1, __m64 __m2)
{
    return __builtin_ia32_pandn((__v1di)__m1, (__v1di)__m2);
}
# 1113 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_or_si64(__m64 __m1, __m64 __m2)
{
    return __builtin_ia32_por((__v1di)__m1, (__v1di)__m2);
}
# 1131 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_xor_si64(__m64 __m1, __m64 __m2)
{
    return __builtin_ia32_pxor((__v1di)__m1, (__v1di)__m2);
}
# 1152 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpeq_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpeqb((__v8qi)__m1, (__v8qi)__m2);
}
# 1173 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpeq_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpeqw((__v4hi)__m1, (__v4hi)__m2);
}
# 1194 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpeq_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpeqd((__v2si)__m1, (__v2si)__m2);
}
# 1215 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpgt_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpgtb((__v8qi)__m1, (__v8qi)__m2);
}
# 1236 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpgt_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpgtw((__v4hi)__m1, (__v4hi)__m2);
}
# 1257 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpgt_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpgtd((__v2si)__m1, (__v2si)__m2);
}
# 1270 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_setzero_si64(void)
{
    return (__m64){ 0LL };
}
# 1291 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set_pi32(int __i1, int __i0)
{
    return (__m64)__builtin_ia32_vec_init_v2si(__i0, __i1);
}
# 1314 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set_pi16(short __s3, short __s2, short __s1, short __s0)
{
    return (__m64)__builtin_ia32_vec_init_v4hi(__s0, __s1, __s2, __s3);
}
# 1345 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set_pi8(char __b7, char __b6, char __b5, char __b4, char __b3, char __b2,
            char __b1, char __b0)
{
    return (__m64)__builtin_ia32_vec_init_v8qi(__b0, __b1, __b2, __b3,
                                               __b4, __b5, __b6, __b7);
}
# 1365 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set1_pi32(int __i)
{
    return _mm_set_pi32(__i, __i);
}
# 1383 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set1_pi16(short __w)
{
    return _mm_set_pi16(__w, __w, __w, __w);
}
# 1401 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set1_pi8(char __b)
{
    return _mm_set_pi8(__b, __b, __b, __b, __b, __b, __b, __b);
}
# 1422 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_setr_pi32(int __i0, int __i1)
{
    return _mm_set_pi32(__i1, __i0);
}
# 1445 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_setr_pi16(short __w0, short __w1, short __w2, short __w3)
{
    return _mm_set_pi16(__w3, __w2, __w1, __w0);
}
# 1476 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_setr_pi8(char __b0, char __b1, char __b2, char __b3, char __b4, char __b5,
             char __b6, char __b7)
{
    return _mm_set_pi8(__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0);
}
# 29 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 1 3
# 29 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
typedef int __v4si __attribute__((__vector_size__(16)));
typedef float __v4sf __attribute__((__vector_size__(16)));
typedef float __m128 __attribute__((__vector_size__(16)));


typedef unsigned int __v4su __attribute__((__vector_size__(16)));





# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mm_malloc.h" 1 3
# 40 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 2 3
# 60 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_add_ss(__m128 __a, __m128 __b)
{
  __a[0] += __b[0];
  return __a;
}
# 80 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_add_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4sf)__a + (__v4sf)__b);
}
# 102 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sub_ss(__m128 __a, __m128 __b)
{
  __a[0] -= __b[0];
  return __a;
}
# 123 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sub_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4sf)__a - (__v4sf)__b);
}
# 145 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_mul_ss(__m128 __a, __m128 __b)
{
  __a[0] *= __b[0];
  return __a;
}
# 165 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_mul_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4sf)__a * (__v4sf)__b);
}
# 187 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_div_ss(__m128 __a, __m128 __b)
{
  __a[0] /= __b[0];
  return __a;
}
# 206 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_div_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4sf)__a / (__v4sf)__b);
}
# 224 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sqrt_ss(__m128 __a)
{
  __m128 __c = __builtin_ia32_sqrtss((__v4sf)__a);
  return (__m128) { __c[0], __a[1], __a[2], __a[3] };
}
# 242 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sqrt_ps(__m128 __a)
{
  return __builtin_ia32_sqrtps((__v4sf)__a);
}
# 260 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_rcp_ss(__m128 __a)
{
  __m128 __c = __builtin_ia32_rcpss((__v4sf)__a);
  return (__m128) { __c[0], __a[1], __a[2], __a[3] };
}
# 278 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_rcp_ps(__m128 __a)
{
  return __builtin_ia32_rcpps((__v4sf)__a);
}
# 297 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_rsqrt_ss(__m128 __a)
{
  __m128 __c = __builtin_ia32_rsqrtss((__v4sf)__a);
  return (__m128) { __c[0], __a[1], __a[2], __a[3] };
}
# 315 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_rsqrt_ps(__m128 __a)
{
  return __builtin_ia32_rsqrtps((__v4sf)__a);
}
# 338 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_min_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_minss((__v4sf)__a, (__v4sf)__b);
}
# 357 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_min_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_minps((__v4sf)__a, (__v4sf)__b);
}
# 380 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_max_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_maxss((__v4sf)__a, (__v4sf)__b);
}
# 399 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_max_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_maxps((__v4sf)__a, (__v4sf)__b);
}
# 417 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_and_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4su)__a & (__v4su)__b);
}
# 439 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_andnot_ps(__m128 __a, __m128 __b)
{
  return (__m128)(~(__v4su)__a & (__v4su)__b);
}
# 457 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_or_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4su)__a | (__v4su)__b);
}
# 476 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_xor_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4su)__a ^ (__v4su)__b);
}
# 498 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpeq_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpeqss((__v4sf)__a, (__v4sf)__b);
}
# 516 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpeq_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpeqps((__v4sf)__a, (__v4sf)__b);
}
# 539 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmplt_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpltss((__v4sf)__a, (__v4sf)__b);
}
# 558 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmplt_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpltps((__v4sf)__a, (__v4sf)__b);
}
# 582 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmple_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpless((__v4sf)__a, (__v4sf)__b);
}
# 601 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmple_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpleps((__v4sf)__a, (__v4sf)__b);
}
# 624 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpgt_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_shufflevector((__v4sf)__a,
                                         (__v4sf)__builtin_ia32_cmpltss((__v4sf)__b, (__v4sf)__a),
                                         4, 1, 2, 3);
}
# 645 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpgt_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpltps((__v4sf)__b, (__v4sf)__a);
}
# 669 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpge_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_shufflevector((__v4sf)__a,
                                         (__v4sf)__builtin_ia32_cmpless((__v4sf)__b, (__v4sf)__a),
                                         4, 1, 2, 3);
}
# 690 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpge_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpleps((__v4sf)__b, (__v4sf)__a);
}
# 712 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpneq_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpneqss((__v4sf)__a, (__v4sf)__b);
}
# 730 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpneq_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpneqps((__v4sf)__a, (__v4sf)__b);
}
# 753 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnlt_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnltss((__v4sf)__a, (__v4sf)__b);
}
# 772 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnlt_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnltps((__v4sf)__a, (__v4sf)__b);
}
# 796 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnle_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnless((__v4sf)__a, (__v4sf)__b);
}
# 815 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnle_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnleps((__v4sf)__a, (__v4sf)__b);
}
# 839 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpngt_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_shufflevector((__v4sf)__a,
                                         (__v4sf)__builtin_ia32_cmpnltss((__v4sf)__b, (__v4sf)__a),
                                         4, 1, 2, 3);
}
# 860 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpngt_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnltps((__v4sf)__b, (__v4sf)__a);
}
# 884 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnge_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_shufflevector((__v4sf)__a,
                                         (__v4sf)__builtin_ia32_cmpnless((__v4sf)__b, (__v4sf)__a),
                                         4, 1, 2, 3);
}
# 905 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnge_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnleps((__v4sf)__b, (__v4sf)__a);
}
# 929 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpord_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpordss((__v4sf)__a, (__v4sf)__b);
}
# 948 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpord_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpordps((__v4sf)__a, (__v4sf)__b);
}
# 972 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpunord_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpunordss((__v4sf)__a, (__v4sf)__b);
}
# 991 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpunord_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpunordps((__v4sf)__a, (__v4sf)__b);
}
# 1011 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comieq_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comieq((__v4sf)__a, (__v4sf)__b);
}
# 1032 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comilt_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comilt((__v4sf)__a, (__v4sf)__b);
}
# 1053 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comile_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comile((__v4sf)__a, (__v4sf)__b);
}
# 1074 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comigt_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comigt((__v4sf)__a, (__v4sf)__b);
}
# 1095 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comige_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comige((__v4sf)__a, (__v4sf)__b);
}
# 1116 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comineq_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comineq((__v4sf)__a, (__v4sf)__b);
}
# 1137 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomieq_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomieq((__v4sf)__a, (__v4sf)__b);
}
# 1158 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomilt_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomilt((__v4sf)__a, (__v4sf)__b);
}
# 1180 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomile_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomile((__v4sf)__a, (__v4sf)__b);
}
# 1202 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomigt_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomigt((__v4sf)__a, (__v4sf)__b);
}
# 1224 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomige_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomige((__v4sf)__a, (__v4sf)__b);
}
# 1245 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomineq_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomineq((__v4sf)__a, (__v4sf)__b);
}
# 1262 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtss_si32(__m128 __a)
{
  return __builtin_ia32_cvtss2si((__v4sf)__a);
}
# 1279 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvt_ss2si(__m128 __a)
{
  return _mm_cvtss_si32(__a);
}
# 1298 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtss_si64(__m128 __a)
{
  return __builtin_ia32_cvtss2si64((__v4sf)__a);
}
# 1316 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtps_pi32(__m128 __a)
{
  return (__m64)__builtin_ia32_cvtps2pi((__v4sf)__a);
}
# 1332 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvt_ps2pi(__m128 __a)
{
  return _mm_cvtps_pi32(__a);
}
# 1350 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvttss_si32(__m128 __a)
{
  return __builtin_ia32_cvttss2si((__v4sf)__a);
}
# 1368 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtt_ss2si(__m128 __a)
{
  return _mm_cvttss_si32(__a);
}
# 1386 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvttss_si64(__m128 __a)
{
  return __builtin_ia32_cvttss2si64((__v4sf)__a);
}
# 1403 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvttps_pi32(__m128 __a)
{
  return (__m64)__builtin_ia32_cvttps2pi((__v4sf)__a);
}
# 1420 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtt_ps2pi(__m128 __a)
{
  return _mm_cvttps_pi32(__a);
}
# 1442 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtsi32_ss(__m128 __a, int __b)
{
  __a[0] = __b;
  return __a;
}
# 1465 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvt_si2ss(__m128 __a, int __b)
{
  return _mm_cvtsi32_ss(__a, __b);
}
# 1489 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtsi64_ss(__m128 __a, long long __b)
{
  __a[0] = __b;
  return __a;
}
# 1515 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpi32_ps(__m128 __a, __m64 __b)
{
  return __builtin_ia32_cvtpi2ps((__v4sf)__a, (__v2si)__b);
}
# 1538 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvt_pi2ps(__m128 __a, __m64 __b)
{
  return _mm_cvtpi32_ps(__a, __b);
}
# 1555 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtss_f32(__m128 __a)
{
  return __a[0];
}
# 1576 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_loadh_pi(__m128 __a, const __m64 *__p)
{
  typedef float __mm_loadh_pi_v2f32 __attribute__((__vector_size__(8)));
  struct __mm_loadh_pi_struct {
    __mm_loadh_pi_v2f32 __u;
  } __attribute__((__packed__, __may_alias__));
  __mm_loadh_pi_v2f32 __b = ((struct __mm_loadh_pi_struct*)__p)->__u;
  __m128 __bb = __builtin_shufflevector(__b, __b, 0, 1, 0, 1);
  return __builtin_shufflevector(__a, __bb, 0, 1, 4, 5);
}
# 1603 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_loadl_pi(__m128 __a, const __m64 *__p)
{
  typedef float __mm_loadl_pi_v2f32 __attribute__((__vector_size__(8)));
  struct __mm_loadl_pi_struct {
    __mm_loadl_pi_v2f32 __u;
  } __attribute__((__packed__, __may_alias__));
  __mm_loadl_pi_v2f32 __b = ((struct __mm_loadl_pi_struct*)__p)->__u;
  __m128 __bb = __builtin_shufflevector(__b, __b, 0, 1, 0, 1);
  return __builtin_shufflevector(__a, __bb, 4, 5, 2, 3);
}
# 1630 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_load_ss(const float *__p)
{
  struct __mm_load_ss_struct {
    float __u;
  } __attribute__((__packed__, __may_alias__));
  float __u = ((struct __mm_load_ss_struct*)__p)->__u;
  return (__m128){ __u, 0, 0, 0 };
}
# 1652 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_load1_ps(const float *__p)
{
  struct __mm_load1_ps_struct {
    float __u;
  } __attribute__((__packed__, __may_alias__));
  float __u = ((struct __mm_load1_ps_struct*)__p)->__u;
  return (__m128){ __u, __u, __u, __u };
}
# 1675 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_load_ps(const float *__p)
{
  return *(__m128*)__p;
}
# 1692 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_loadu_ps(const float *__p)
{
  struct __loadu_ps {
    __m128 __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_ps*)__p)->__v;
}
# 1714 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_loadr_ps(const float *__p)
{
  __m128 __a = _mm_load_ps(__p);
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 3, 2, 1, 0);
}
# 1729 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_undefined_ps(void)
{
  return (__m128)__builtin_ia32_undef128();
}
# 1749 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_set_ss(float __w)
{
  return (__m128){ __w, 0, 0, 0 };
}
# 1767 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_set1_ps(float __w)
{
  return (__m128){ __w, __w, __w, __w };
}
# 1786 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_set_ps1(float __w)
{
    return _mm_set1_ps(__w);
}
# 1813 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_set_ps(float __z, float __y, float __x, float __w)
{
  return (__m128){ __w, __x, __y, __z };
}
# 1841 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_setr_ps(float __z, float __y, float __x, float __w)
{
  return (__m128){ __z, __y, __x, __w };
}
# 1856 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_setzero_ps(void)
{
  return (__m128){ 0, 0, 0, 0 };
}
# 1873 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_storeh_pi(__m64 *__p, __m128 __a)
{
  __builtin_ia32_storehps((__v2si *)__p, (__v4sf)__a);
}
# 1890 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_storel_pi(__m64 *__p, __m128 __a)
{
  __builtin_ia32_storelps((__v2si *)__p, (__v4sf)__a);
}
# 1907 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_store_ss(float *__p, __m128 __a)
{
  struct __mm_store_ss_struct {
    float __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_store_ss_struct*)__p)->__u = __a[0];
}
# 1928 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_storeu_ps(float *__p, __m128 __a)
{
  struct __storeu_ps {
    __m128 __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_ps*)__p)->__v = __a;
}
# 1950 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_store_ps(float *__p, __m128 __a)
{
  *(__m128*)__p = __a;
}
# 1969 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_store1_ps(float *__p, __m128 __a)
{
  __a = __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 0, 0, 0, 0);
  _mm_store_ps(__p, __a);
}
# 1988 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_store_ps1(float *__p, __m128 __a)
{
  return _mm_store1_ps(__p, __a);
}
# 2007 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_storer_ps(float *__p, __m128 __a)
{
  __a = __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 3, 2, 1, 0);
  _mm_store_ps(__p, __a);
}
# 2061 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_stream_pi(__m64 *__p, __m64 __a)
{
  __builtin_ia32_movntq(__p, __a);
}
# 2080 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_stream_ps(float *__p, __m128 __a)
{
  __builtin_nontemporal_store((__v4sf)__a, (__v4sf*)__p);
}
# 2095 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sfence(void)
{
  __builtin_ia32_sfence();
}
# 2160 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_max_pi16(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pmaxsw((__v4hi)__a, (__v4hi)__b);
}
# 2179 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_max_pu8(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pmaxub((__v8qi)__a, (__v8qi)__b);
}
# 2198 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_min_pi16(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pminsw((__v4hi)__a, (__v4hi)__b);
}
# 2217 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_min_pu8(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pminub((__v8qi)__a, (__v8qi)__b);
}
# 2235 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_movemask_pi8(__m64 __a)
{
  return __builtin_ia32_pmovmskb((__v8qi)__a);
}
# 2254 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_mulhi_pu16(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pmulhuw((__v4hi)__a, (__v4hi)__b);
}
# 2311 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_maskmove_si64(__m64 __d, __m64 __n, char *__p)
{
  __builtin_ia32_maskmovq((__v8qi)__d, (__v8qi)__n, __p);
}
# 2330 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_avg_pu8(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pavgb((__v8qi)__a, (__v8qi)__b);
}
# 2349 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_avg_pu16(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pavgw((__v4hi)__a, (__v4hi)__b);
}
# 2371 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sad_pu8(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_psadbw((__v8qi)__a, (__v8qi)__b);
}
# 2409 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_getcsr(void)
{
  return __builtin_ia32_stmxcsr();
}
# 2451 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_setcsr(unsigned int __i)
{
  __builtin_ia32_ldmxcsr(__i);
}
# 2512 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_unpackhi_ps(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 2, 6, 3, 7);
}
# 2535 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_unpacklo_ps(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 0, 4, 1, 5);
}
# 2556 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_move_ss(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 4, 1, 2, 3);
}
# 2577 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_movehl_ps(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 6, 7, 2, 3);
}
# 2598 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_movelh_ps(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 0, 1, 4, 5);
}
# 2616 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpi16_ps(__m64 __a)
{
  __m64 __b, __c;
  __m128 __r;

  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_setzero_ps();
  __r = _mm_cvtpi32_ps(__r, __c);
  __r = _mm_movelh_ps(__r, __r);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);

  return __r;
}
# 2646 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpu16_ps(__m64 __a)
{
  __m64 __b, __c;
  __m128 __r;

  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_setzero_ps();
  __r = _mm_cvtpi32_ps(__r, __c);
  __r = _mm_movelh_ps(__r, __r);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);

  return __r;
}
# 2675 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpi8_ps(__m64 __a)
{
  __m64 __b;

  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);

  return _mm_cvtpi16_ps(__b);
}
# 2700 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpu8_ps(__m64 __a)
{
  __m64 __b;

  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);

  return _mm_cvtpi16_ps(__b);
}
# 2727 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpi32x2_ps(__m64 __a, __m64 __b)
{
  __m128 __c;

  __c = _mm_setzero_ps();
  __c = _mm_cvtpi32_ps(__c, __b);
  __c = _mm_movelh_ps(__c, __c);

  return _mm_cvtpi32_ps(__c, __a);
}
# 2755 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtps_pi16(__m128 __a)
{
  __m64 __b, __c;

  __b = _mm_cvtps_pi32(__a);
  __a = _mm_movehl_ps(__a, __a);
  __c = _mm_cvtps_pi32(__a);

  return _mm_packs_pi32(__b, __c);
}
# 2784 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtps_pi8(__m128 __a)
{
  __m64 __b, __c;

  __b = _mm_cvtps_pi16(__a);
  __c = _mm_setzero_si64();

  return _mm_packs_pi16(__b, __c);
}
# 2809 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_movemask_ps(__m128 __a)
{
  return __builtin_ia32_movmskps((__v4sf)__a);
}
# 2890 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 1 3
# 27 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 1 3
# 28 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 2 3

typedef double __m128d __attribute__((__vector_size__(16)));
typedef long long __m128i __attribute__((__vector_size__(16)));


typedef double __v2df __attribute__ ((__vector_size__ (16)));
typedef long long __v2di __attribute__ ((__vector_size__ (16)));
typedef short __v8hi __attribute__((__vector_size__(16)));
typedef char __v16qi __attribute__((__vector_size__(16)));


typedef unsigned long long __v2du __attribute__ ((__vector_size__ (16)));
typedef unsigned short __v8hu __attribute__((__vector_size__(16)));
typedef unsigned char __v16qu __attribute__((__vector_size__(16)));



typedef signed char __v16qs __attribute__((__vector_size__(16)));


# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\f16cintrin.h" 1 3
# 45 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\f16cintrin.h" 3
static __inline float __attribute__((__always_inline__, __nodebug__, __target__("f16c")))
_cvtsh_ss(unsigned short __a)
{
  __v8hi v = {(short)__a, 0, 0, 0, 0, 0, 0, 0};
  __v4sf r = __builtin_ia32_vcvtph2ps(v);
  return r[0];
}
# 116 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\f16cintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("f16c")))
_mm_cvtph_ps(__m128i __a)
{
  return (__m128)__builtin_ia32_vcvtph2ps((__v8hi)__a);
}
# 48 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 2 3




static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_sd(__m128d __a, __m128d __b)
{
  __a[0] += __b[0];
  return __a;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2df)__a + (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_sd(__m128d __a, __m128d __b)
{
  __a[0] -= __b[0];
  return __a;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2df)__a - (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mul_sd(__m128d __a, __m128d __b)
{
  __a[0] *= __b[0];
  return __a;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mul_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2df)__a * (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_div_sd(__m128d __a, __m128d __b)
{
  __a[0] /= __b[0];
  return __a;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_div_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2df)__a / (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sqrt_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_sqrtsd((__v2df)__b);
  return (__m128d) { __c[0], __a[1] };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sqrt_pd(__m128d __a)
{
  return __builtin_ia32_sqrtpd((__v2df)__a);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_min_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_minsd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_min_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_minpd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_max_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_maxsd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_max_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_maxpd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_and_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v4su)__a & (__v4su)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_andnot_pd(__m128d __a, __m128d __b)
{
  return (__m128d)(~(__v4su)__a & (__v4su)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_or_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v4su)__a | (__v4su)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_xor_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v4su)__a ^ (__v4su)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpeqpd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpltpd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmple_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmplepd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpltpd((__v2df)__b, (__v2df)__a);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpge_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmplepd((__v2df)__b, (__v2df)__a);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpord_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpordpd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpunord_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpunordpd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpneq_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpneqpd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnlt_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnltpd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnle_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnlepd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpngt_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnltpd((__v2df)__b, (__v2df)__a);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnge_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnlepd((__v2df)__b, (__v2df)__a);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpeqsd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpltsd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmple_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmplesd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_cmpltsd((__v2df)__b, (__v2df)__a);
  return (__m128d) { __c[0], __a[1] };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpge_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_cmplesd((__v2df)__b, (__v2df)__a);
  return (__m128d) { __c[0], __a[1] };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpord_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpordsd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpunord_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpunordsd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpneq_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpneqsd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnlt_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnltsd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnle_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnlesd((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpngt_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_cmpnltsd((__v2df)__b, (__v2df)__a);
  return (__m128d) { __c[0], __a[1] };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnge_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_cmpnlesd((__v2df)__b, (__v2df)__a);
  return (__m128d) { __c[0], __a[1] };
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comieq_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdeq((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comilt_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdlt((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comile_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdle((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comigt_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdgt((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comige_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdge((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comineq_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdneq((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomieq_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdeq((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomilt_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdlt((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomile_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdle((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomigt_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdgt((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomige_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdge((__v2df)__a, (__v2df)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomineq_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdneq((__v2df)__a, (__v2df)__b);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtpd_ps(__m128d __a)
{
  return __builtin_ia32_cvtpd2ps((__v2df)__a);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtps_pd(__m128 __a)
{
  return (__m128d) __builtin_convertvector(
      __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 0, 1), __v2df);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtepi32_pd(__m128i __a)
{
  return (__m128d) __builtin_convertvector(
      __builtin_shufflevector((__v4si)__a, (__v4si)__a, 0, 1), __v2df);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtpd_epi32(__m128d __a)
{
  return __builtin_ia32_cvtpd2dq((__v2df)__a);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsd_si32(__m128d __a)
{
  return __builtin_ia32_cvtsd2si((__v2df)__a);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsd_ss(__m128 __a, __m128d __b)
{
  return (__m128)__builtin_ia32_cvtsd2ss((__v4sf)__a, (__v2df)__b);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi32_sd(__m128d __a, int __b)
{
  __a[0] = __b;
  return __a;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtss_sd(__m128d __a, __m128 __b)
{
  __a[0] = __b[0];
  return __a;
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttpd_epi32(__m128d __a)
{
  return (__m128i)__builtin_ia32_cvttpd2dq((__v2df)__a);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttsd_si32(__m128d __a)
{
  return __builtin_ia32_cvttsd2si((__v2df)__a);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtpd_pi32(__m128d __a)
{
  return (__m64)__builtin_ia32_cvtpd2pi((__v2df)__a);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttpd_pi32(__m128d __a)
{
  return (__m64)__builtin_ia32_cvttpd2pi((__v2df)__a);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtpi32_pd(__m64 __a)
{
  return __builtin_ia32_cvtpi2pd((__v2si)__a);
}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsd_f64(__m128d __a)
{
  return __a[0];
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_load_pd(double const *__dp)
{
  return *(__m128d*)__dp;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_load1_pd(double const *__dp)
{
  struct __mm_load1_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  double __u = ((struct __mm_load1_pd_struct*)__dp)->__u;
  return (__m128d){ __u, __u };
}



static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadr_pd(double const *__dp)
{
  __m128d __u = *(__m128d*)__dp;
  return __builtin_shufflevector((__v2df)__u, (__v2df)__u, 1, 0);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadu_pd(double const *__dp)
{
  struct __loadu_pd {
    __m128d __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_pd*)__dp)->__v;
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadu_si64(void const *__a)
{
  struct __loadu_si64 {
    long long __v;
  } __attribute__((__packed__, __may_alias__));
  long long __u = ((struct __loadu_si64*)__a)->__v;
  return (__m128i){__u, 0L};
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_load_sd(double const *__dp)
{
  struct __mm_load_sd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  double __u = ((struct __mm_load_sd_struct*)__dp)->__u;
  return (__m128d){ __u, 0 };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadh_pd(__m128d __a, double const *__dp)
{
  struct __mm_loadh_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  double __u = ((struct __mm_loadh_pd_struct*)__dp)->__u;
  return (__m128d){ __a[0], __u };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadl_pd(__m128d __a, double const *__dp)
{
  struct __mm_loadl_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  double __u = ((struct __mm_loadl_pd_struct*)__dp)->__u;
  return (__m128d){ __u, __a[1] };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_undefined_pd(void)
{
  return (__m128d)__builtin_ia32_undef128();
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_sd(double __w)
{
  return (__m128d){ __w, 0 };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_pd(double __w)
{
  return (__m128d){ __w, __w };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_pd(double __w, double __x)
{
  return (__m128d){ __x, __w };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_pd(double __w, double __x)
{
  return (__m128d){ __w, __x };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setzero_pd(void)
{
  return (__m128d){ 0, 0 };
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_move_sd(__m128d __a, __m128d __b)
{
  return (__m128d){ __b[0], __a[1] };
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store_sd(double *__dp, __m128d __a)
{
  struct __mm_store_sd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_store_sd_struct*)__dp)->__u = __a[0];
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store_pd(double *__dp, __m128d __a)
{
  *(__m128d*)__dp = __a;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store1_pd(double *__dp, __m128d __a)
{
  __a = __builtin_shufflevector((__v2df)__a, (__v2df)__a, 0, 0);
  _mm_store_pd(__dp, __a);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store_pd1(double *__dp, __m128d __a)
{
  return _mm_store1_pd(__dp, __a);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storeu_pd(double *__dp, __m128d __a)
{
  struct __storeu_pd {
    __m128d __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_pd*)__dp)->__v = __a;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storer_pd(double *__dp, __m128d __a)
{
  __a = __builtin_shufflevector((__v2df)__a, (__v2df)__a, 1, 0);
  *(__m128d *)__dp = __a;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storeh_pd(double *__dp, __m128d __a)
{
  struct __mm_storeh_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_storeh_pd_struct*)__dp)->__u = __a[1];
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storel_pd(double *__dp, __m128d __a)
{
  struct __mm_storeh_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_storeh_pd_struct*)__dp)->__u = __a[0];
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)((__v16qu)__a + (__v16qu)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hu)__a + (__v8hu)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)((__v4su)__a + (__v4su)__b);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_si64(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_paddq((__v1di)__a, (__v1di)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_epi64(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a + (__v2du)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_adds_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_paddsb128((__v16qi)__a, (__v16qi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_adds_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_paddsw128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_adds_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_paddusb128((__v16qi)__a, (__v16qi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_adds_epu16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_paddusw128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_avg_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pavgb128((__v16qi)__a, (__v16qi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_avg_epu16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pavgw128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_madd_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmaddwd128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_max_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmaxsw128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_max_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmaxub128((__v16qi)__a, (__v16qi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_min_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pminsw128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_min_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pminub128((__v16qi)__a, (__v16qi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mulhi_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmulhw128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mulhi_epu16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmulhuw128((__v8hi)__a, (__v8hi)__b);
}
# 772 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mullo_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hu)__a * (__v8hu)__b);
}
# 791 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mul_su32(__m64 __a, __m64 __b)
{
  return __builtin_ia32_pmuludq((__v2si)__a, (__v2si)__b);
}
# 810 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mul_epu32(__m128i __a, __m128i __b)
{
  return __builtin_ia32_pmuludq128((__v4si)__a, (__v4si)__b);
}
# 832 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sad_epu8(__m128i __a, __m128i __b)
{
  return __builtin_ia32_psadbw128((__v16qi)__a, (__v16qi)__b);
}
# 850 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)((__v16qu)__a - (__v16qu)__b);
}
# 868 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hu)__a - (__v8hu)__b);
}
# 886 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)((__v4su)__a - (__v4su)__b);
}
# 905 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_si64(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_psubq((__v1di)__a, (__v1di)__b);
}
# 923 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_epi64(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a - (__v2du)__b);
}
# 944 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_subs_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_psubsb128((__v16qi)__a, (__v16qi)__b);
}
# 965 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_subs_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_psubsw128((__v8hi)__a, (__v8hi)__b);
}
# 985 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_subs_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_psubusb128((__v16qi)__a, (__v16qi)__b);
}
# 1005 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_subs_epu16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_psubusw128((__v8hi)__a, (__v8hi)__b);
}
# 1023 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_and_si128(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a & (__v2du)__b);
}
# 1043 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_andnot_si128(__m128i __a, __m128i __b)
{
  return (__m128i)(~(__v2du)__a & (__v2du)__b);
}
# 1060 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_or_si128(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a | (__v2du)__b);
}
# 1078 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_xor_si128(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a ^ (__v2du)__b);
}
# 1138 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_slli_epi16(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psllwi128((__v8hi)__a, __count);
}
# 1157 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sll_epi16(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psllw128((__v8hi)__a, (__v8hi)__count);
}
# 1176 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_slli_epi32(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_pslldi128((__v4si)__a, __count);
}
# 1195 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sll_epi32(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_pslld128((__v4si)__a, (__v4si)__count);
}
# 1214 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_slli_epi64(__m128i __a, int __count)
{
  return __builtin_ia32_psllqi128((__v2di)__a, __count);
}
# 1233 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sll_epi64(__m128i __a, __m128i __count)
{
  return __builtin_ia32_psllq128((__v2di)__a, (__v2di)__count);
}
# 1253 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srai_epi16(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psrawi128((__v8hi)__a, __count);
}
# 1273 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sra_epi16(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psraw128((__v8hi)__a, (__v8hi)__count);
}
# 1293 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srai_epi32(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psradi128((__v4si)__a, __count);
}
# 1313 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sra_epi32(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psrad128((__v4si)__a, (__v4si)__count);
}
# 1373 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srli_epi16(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psrlwi128((__v8hi)__a, __count);
}
# 1392 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srl_epi16(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psrlw128((__v8hi)__a, (__v8hi)__count);
}
# 1411 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srli_epi32(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psrldi128((__v4si)__a, __count);
}
# 1430 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srl_epi32(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psrld128((__v4si)__a, (__v4si)__count);
}
# 1449 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srli_epi64(__m128i __a, int __count)
{
  return __builtin_ia32_psrlqi128((__v2di)__a, __count);
}
# 1468 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srl_epi64(__m128i __a, __m128i __count)
{
  return __builtin_ia32_psrlq128((__v2di)__a, (__v2di)__count);
}
# 1487 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)((__v16qi)__a == (__v16qi)__b);
}
# 1506 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hi)__a == (__v8hi)__b);
}
# 1525 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)((__v4si)__a == (__v4si)__b);
}
# 1545 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_epi8(__m128i __a, __m128i __b)
{


  return (__m128i)((__v16qs)__a > (__v16qs)__b);
}
# 1567 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hi)__a > (__v8hi)__b);
}
# 1587 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)((__v4si)__a > (__v4si)__b);
}
# 1607 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_epi8(__m128i __a, __m128i __b)
{
  return _mm_cmpgt_epi8(__b, __a);
}
# 1627 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_epi16(__m128i __a, __m128i __b)
{
  return _mm_cmpgt_epi16(__b, __a);
}
# 1647 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_epi32(__m128i __a, __m128i __b)
{
  return _mm_cmpgt_epi32(__b, __a);
}
# 1671 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi64_sd(__m128d __a, long long __b)
{
  __a[0] = __b;
  return __a;
}
# 1689 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsd_si64(__m128d __a)
{
  return __builtin_ia32_cvtsd2si64((__v2df)__a);
}
# 1706 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttsd_si64(__m128d __a)
{
  return __builtin_ia32_cvttsd2si64((__v2df)__a);
}
# 1722 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtepi32_ps(__m128i __a)
{
  return __builtin_ia32_cvtdq2ps((__v4si)__a);
}
# 1738 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtps_epi32(__m128 __a)
{
  return (__m128i)__builtin_ia32_cvtps2dq((__v4sf)__a);
}
# 1754 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttps_epi32(__m128 __a)
{
  return (__m128i)__builtin_ia32_cvttps2dq((__v4sf)__a);
}
# 1770 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi32_si128(int __a)
{
  return (__m128i)(__v4si){ __a, 0, 0, 0 };
}
# 1787 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi64_si128(long long __a)
{
  return (__m128i){ __a, 0 };
}
# 1805 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi128_si32(__m128i __a)
{
  __v4si __b = (__v4si)__a;
  return __b[0];
}
# 1824 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi128_si64(__m128i __a)
{
  return __a[0];
}
# 1841 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_load_si128(__m128i const *__p)
{
  return *__p;
}
# 1857 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadu_si128(__m128i const *__p)
{
  struct __loadu_si128 {
    __m128i __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_si128*)__p)->__v;
}
# 1878 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadl_epi64(__m128i const *__p)
{
  struct __mm_loadl_epi64_struct {
    long long __u;
  } __attribute__((__packed__, __may_alias__));
  return (__m128i) { ((struct __mm_loadl_epi64_struct*)__p)->__u, 0};
}
# 1896 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_undefined_si128(void)
{
  return (__m128i)__builtin_ia32_undef128();
}
# 1918 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi64x(long long __q1, long long __q0)
{
  return (__m128i){ __q0, __q1 };
}
# 1940 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi64(__m64 __q1, __m64 __q0)
{
  return (__m128i){ (long long)__q0, (long long)__q1 };
}
# 1968 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi32(int __i3, int __i2, int __i1, int __i0)
{
  return (__m128i)(__v4si){ __i0, __i1, __i2, __i3};
}
# 2008 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi16(short __w7, short __w6, short __w5, short __w4, short __w3, short __w2, short __w1, short __w0)
{
  return (__m128i)(__v8hi){ __w0, __w1, __w2, __w3, __w4, __w5, __w6, __w7 };
}
# 2056 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi8(char __b15, char __b14, char __b13, char __b12, char __b11, char __b10, char __b9, char __b8, char __b7, char __b6, char __b5, char __b4, char __b3, char __b2, char __b1, char __b0)
{
  return (__m128i)(__v16qi){ __b0, __b1, __b2, __b3, __b4, __b5, __b6, __b7, __b8, __b9, __b10, __b11, __b12, __b13, __b14, __b15 };
}
# 2075 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi64x(long long __q)
{
  return (__m128i){ __q, __q };
}
# 2094 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi64(__m64 __q)
{
  return (__m128i){ (long long)__q, (long long)__q };
}
# 2113 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi32(int __i)
{
  return (__m128i)(__v4si){ __i, __i, __i, __i };
}
# 2132 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi16(short __w)
{
  return (__m128i)(__v8hi){ __w, __w, __w, __w, __w, __w, __w, __w };
}
# 2151 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi8(char __b)
{
  return (__m128i)(__v16qi){ __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b };
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_epi64(__m64 __q0, __m64 __q1)
{
  return (__m128i){ (long long)__q0, (long long)__q1 };
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_epi32(int __i0, int __i1, int __i2, int __i3)
{
  return (__m128i)(__v4si){ __i0, __i1, __i2, __i3};
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_epi16(short __w0, short __w1, short __w2, short __w3, short __w4, short __w5, short __w6, short __w7)
{
  return (__m128i)(__v8hi){ __w0, __w1, __w2, __w3, __w4, __w5, __w6, __w7 };
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_epi8(char __b0, char __b1, char __b2, char __b3, char __b4, char __b5, char __b6, char __b7, char __b8, char __b9, char __b10, char __b11, char __b12, char __b13, char __b14, char __b15)
{
  return (__m128i)(__v16qi){ __b0, __b1, __b2, __b3, __b4, __b5, __b6, __b7, __b8, __b9, __b10, __b11, __b12, __b13, __b14, __b15 };
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setzero_si128(void)
{
  return (__m128i){ 0LL, 0LL };
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store_si128(__m128i *__p, __m128i __b)
{
  *__p = __b;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storeu_si128(__m128i *__p, __m128i __b)
{
  struct __storeu_si128 {
    __m128i __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_si128*)__p)->__v = __b;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_maskmoveu_si128(__m128i __d, __m128i __n, char *__p)
{
  __builtin_ia32_maskmovdqu((__v16qi)__d, (__v16qi)__n, __p);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storel_epi64(__m128i *__p, __m128i __a)
{
  struct __mm_storel_epi64_struct {
    long long __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_storel_epi64_struct*)__p)->__u = __a[0];
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_stream_pd(double *__p, __m128d __a)
{
  __builtin_nontemporal_store((__v2df)__a, (__v2df*)__p);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_stream_si128(__m128i *__p, __m128i __a)
{
  __builtin_nontemporal_store((__v2di)__a, (__v2di*)__p);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_stream_si32(int *__p, int __a)
{
  __builtin_ia32_movnti(__p, __a);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_stream_si64(long long *__p, long long __a)
{
  __builtin_ia32_movnti64(__p, __a);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_clflush(void const *__p)
{
  __builtin_ia32_clflush(__p);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_lfence(void)
{
  __builtin_ia32_lfence();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mfence(void)
{
  __builtin_ia32_mfence();
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_packs_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_packsswb128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_packs_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_packssdw128((__v4si)__a, (__v4si)__b);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_packus_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_packuswb128((__v8hi)__a, (__v8hi)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_extract_epi16(__m128i __a, int __imm)
{
  __v8hi __b = (__v8hi)__a;
  return (unsigned short)__b[__imm & 7];
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_insert_epi16(__m128i __a, int __b, int __imm)
{
  __v8hi __c = (__v8hi)__a;
  __c[__imm & 7] = __b;
  return (__m128i)__c;
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_movemask_epi8(__m128i __a)
{
  return __builtin_ia32_pmovmskb128((__v16qi)__a);
}
# 2322 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v16qi)__a, (__v16qi)__b, 8, 16+8, 9, 16+9, 10, 16+10, 11, 16+11, 12, 16+12, 13, 16+13, 14, 16+14, 15, 16+15);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v8hi)__a, (__v8hi)__b, 4, 8+4, 5, 8+5, 6, 8+6, 7, 8+7);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v4si)__a, (__v4si)__b, 2, 4+2, 3, 4+3);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_epi64(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v2di)__a, (__v2di)__b, 1, 2+1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v16qi)__a, (__v16qi)__b, 0, 16+0, 1, 16+1, 2, 16+2, 3, 16+3, 4, 16+4, 5, 16+5, 6, 16+6, 7, 16+7);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v8hi)__a, (__v8hi)__b, 0, 8+0, 1, 8+1, 2, 8+2, 3, 8+3);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v4si)__a, (__v4si)__b, 0, 4+0, 1, 4+1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_epi64(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v2di)__a, (__v2di)__b, 0, 2+0);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_movepi64_pi64(__m128i __a)
{
  return (__m64)__a[0];
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_movpi64_epi64(__m64 __a)
{
  return (__m128i){ (long long)__a, 0 };
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_move_epi64(__m128i __a)
{
  return __builtin_shufflevector((__v2di)__a, (__m128i){ 0 }, 0, 2);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_pd(__m128d __a, __m128d __b)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__b, 1, 2+1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_pd(__m128d __a, __m128d __b)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__b, 0, 2+0);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_movemask_pd(__m128d __a)
{
  return __builtin_ia32_movmskpd((__v2df)__a);
}






static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castpd_ps(__m128d __a)
{
  return (__m128)__a;
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castpd_si128(__m128d __a)
{
  return (__m128i)__a;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castps_pd(__m128 __a)
{
  return (__m128d)__a;
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castps_si128(__m128 __a)
{
  return (__m128i)__a;
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castsi128_ps(__m128i __a)
{
  return (__m128)__a;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castsi128_pd(__m128i __a)
{
  return (__m128d)__a;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_pause(void)
{
  __builtin_ia32_pause();
}
# 2891 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xmmintrin.h" 2 3
# 33 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3







# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 1 3
# 45 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_lddqu_si128(__m128i const *__p)
{
  return (__m128i)__builtin_ia32_lddqu((char const *)__p);
}
# 64 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_addsub_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_addsubps((__v4sf)__a, (__v4sf)__b);
}
# 87 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_hadd_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_haddps((__v4sf)__a, (__v4sf)__b);
}
# 110 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_hsub_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_hsubps((__v4sf)__a, (__v4sf)__b);
}
# 132 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_movehdup_ps(__m128 __a)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 1, 1, 3, 3);
}
# 154 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_moveldup_ps(__m128 __a)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 0, 0, 2, 2);
}
# 173 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_addsub_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_addsubpd((__v2df)__a, (__v2df)__b);
}
# 196 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_hadd_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_haddpd((__v2df)__a, (__v2df)__b);
}
# 219 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_hsub_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_hsubpd((__v2df)__a, (__v2df)__b);
}
# 255 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_movedup_pd(__m128d __a)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__a, 0, 0);
}
# 284 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_monitor(void const *__p, unsigned __extensions, unsigned __hints)
{
  __builtin_ia32_monitor((void *)__p, __extensions, __hints);
}
# 303 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_mwait(unsigned __extensions, unsigned __hints)
{
  __builtin_ia32_mwait(__extensions, __hints);
}
# 41 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 1 3
# 44 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_pi8(__m64 __a)
{
    return (__m64)__builtin_ia32_pabsb((__v8qi)__a);
}
# 62 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_epi8(__m128i __a)
{
    return (__m128i)__builtin_ia32_pabsb128((__v16qi)__a);
}
# 80 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_pi16(__m64 __a)
{
    return (__m64)__builtin_ia32_pabsw((__v4hi)__a);
}
# 98 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_epi16(__m128i __a)
{
    return (__m128i)__builtin_ia32_pabsw128((__v8hi)__a);
}
# 116 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_pi32(__m64 __a)
{
    return (__m64)__builtin_ia32_pabsd((__v2si)__a);
}
# 134 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_epi32(__m128i __a)
{
    return (__m128i)__builtin_ia32_pabsd128((__v4si)__a);
}
# 203 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadd_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phaddw128((__v8hi)__a, (__v8hi)__b);
}
# 226 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadd_epi32(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phaddd128((__v4si)__a, (__v4si)__b);
}
# 249 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadd_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phaddw((__v4hi)__a, (__v4hi)__b);
}
# 272 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadd_pi32(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phaddd((__v2si)__a, (__v2si)__b);
}
# 296 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadds_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phaddsw128((__v8hi)__a, (__v8hi)__b);
}
# 320 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadds_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phaddsw((__v4hi)__a, (__v4hi)__b);
}
# 343 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsub_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phsubw128((__v8hi)__a, (__v8hi)__b);
}
# 366 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsub_epi32(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phsubd128((__v4si)__a, (__v4si)__b);
}
# 389 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsub_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phsubw((__v4hi)__a, (__v4hi)__b);
}
# 412 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsub_pi32(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phsubd((__v2si)__a, (__v2si)__b);
}
# 437 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsubs_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phsubsw128((__v8hi)__a, (__v8hi)__b);
}
# 462 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsubs_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phsubsw((__v4hi)__a, (__v4hi)__b);
}
# 495 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_maddubs_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_pmaddubsw128((__v16qi)__a, (__v16qi)__b);
}
# 524 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_maddubs_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_pmaddubsw((__v8qi)__a, (__v8qi)__b);
}
# 544 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_mulhrs_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_pmulhrsw128((__v8hi)__a, (__v8hi)__b);
}
# 564 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_mulhrs_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_pmulhrsw((__v4hi)__a, (__v4hi)__b);
}
# 590 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_shuffle_epi8(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_pshufb128((__v16qi)__a, (__v16qi)__b);
}
# 615 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_shuffle_pi8(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_pshufb((__v8qi)__a, (__v8qi)__b);
}
# 640 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_epi8(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_psignb128((__v16qi)__a, (__v16qi)__b);
}
# 665 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_psignw128((__v8hi)__a, (__v8hi)__b);
}
# 690 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_epi32(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_psignd128((__v4si)__a, (__v4si)__b);
}
# 715 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_pi8(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_psignb((__v8qi)__a, (__v8qi)__b);
}
# 740 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_psignw((__v4hi)__a, (__v4hi)__b);
}
# 765 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_pi32(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_psignd((__v2si)__a, (__v2si)__b);
}
# 45 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\smmintrin.h" 1 3
# 87 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\smmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_blendv_pd (__m128d __V1, __m128d __V2, __m128d __M)
{
  return (__m128d) __builtin_ia32_blendvpd ((__v2df)__V1, (__v2df)__V2,
                                            (__v2df)__M);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_blendv_ps (__m128 __V1, __m128 __V2, __m128 __M)
{
  return (__m128) __builtin_ia32_blendvps ((__v4sf)__V1, (__v4sf)__V2,
                                           (__v4sf)__M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_blendv_epi8 (__m128i __V1, __m128i __V2, __m128i __M)
{
  return (__m128i) __builtin_ia32_pblendvb128 ((__v16qi)__V1, (__v16qi)__V2,
                                               (__v16qi)__M);
}
# 121 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_mullo_epi32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) ((__v4su)__V1 * (__v4su)__V2);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_mul_epi32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmuldq128 ((__v4si)__V1, (__v4si)__V2);
}
# 143 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_stream_load_si128 (__m128i const *__V)
{
  return (__m128i) __builtin_ia32_movntdqa ((const __v2di *) __V);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_min_epi8 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pminsb128 ((__v16qi) __V1, (__v16qi) __V2);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_max_epi8 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmaxsb128 ((__v16qi) __V1, (__v16qi) __V2);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_min_epu16 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pminuw128 ((__v8hi) __V1, (__v8hi) __V2);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_max_epu16 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmaxuw128 ((__v8hi) __V1, (__v8hi) __V2);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_min_epi32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pminsd128 ((__v4si) __V1, (__v4si) __V2);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_max_epi32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmaxsd128 ((__v4si) __V1, (__v4si) __V2);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_min_epu32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pminud128((__v4si) __V1, (__v4si) __V2);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_max_epu32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmaxud128((__v4si) __V1, (__v4si) __V2);
}
# 251 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\smmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_testz_si128(__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestz128((__v2di)__M, (__v2di)__V);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_testc_si128(__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestc128((__v2di)__M, (__v2di)__V);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_testnzc_si128(__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestnzc128((__v2di)__M, (__v2di)__V);
}






static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cmpeq_epi64(__m128i __V1, __m128i __V2)
{
  return (__m128i)((__v2di)__V1 == (__v2di)__V2);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi8_epi16(__m128i __V)
{


  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1, 2, 3, 4, 5, 6, 7), __v8hi);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi8_epi32(__m128i __V)
{


  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1, 2, 3), __v4si);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi8_epi64(__m128i __V)
{


  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1), __v2di);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi16_epi32(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v8hi)__V, (__v8hi)__V, 0, 1, 2, 3), __v4si);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi16_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v8hi)__V, (__v8hi)__V, 0, 1), __v2di);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi32_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v4si)__V, (__v4si)__V, 0, 1), __v2di);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu8_epi16(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1, 2, 3, 4, 5, 6, 7), __v8hi);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu8_epi32(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1, 2, 3), __v4si);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu8_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1), __v2di);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu16_epi32(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v8hu)__V, (__v8hu)__V, 0, 1, 2, 3), __v4si);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu16_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v8hu)__V, (__v8hu)__V, 0, 1), __v2di);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu32_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v4su)__V, (__v4su)__V, 0, 1), __v2di);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_packus_epi32(__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_packusdw128((__v4si)__V1, (__v4si)__V2);
}






static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_minpos_epu16(__m128i __V)
{
  return (__m128i) __builtin_ia32_phminposuw128((__v8hi)__V);
}
# 468 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_cmpgt_epi64(__m128i __V1, __m128i __V2)
{
  return (__m128i)((__v2di)__V1 > (__v2di)__V2);
}


static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_crc32_u8(unsigned int __C, unsigned char __D)
{
  return __builtin_ia32_crc32qi(__C, __D);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_crc32_u16(unsigned int __C, unsigned short __D)
{
  return __builtin_ia32_crc32hi(__C, __D);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_crc32_u32(unsigned int __C, unsigned int __D)
{
  return __builtin_ia32_crc32si(__C, __D);
}


static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_crc32_u64(unsigned long long __C, unsigned long long __D)
{
  return __builtin_ia32_crc32di(__C, __D);
}
# 50 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\wmmintrin.h" 1 3
# 29 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\wmmintrin.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\__wmmintrin_aes.h" 1 3
# 45 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesenc_si128(__m128i __V, __m128i __R)
{
  return (__m128i)__builtin_ia32_aesenc128((__v2di)__V, (__v2di)__R);
}
# 65 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesenclast_si128(__m128i __V, __m128i __R)
{
  return (__m128i)__builtin_ia32_aesenclast128((__v2di)__V, (__v2di)__R);
}
# 85 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesdec_si128(__m128i __V, __m128i __R)
{
  return (__m128i)__builtin_ia32_aesdec128((__v2di)__V, (__v2di)__R);
}
# 105 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesdeclast_si128(__m128i __V, __m128i __R)
{
  return (__m128i)__builtin_ia32_aesdeclast128((__v2di)__V, (__v2di)__R);
}
# 122 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesimc_si128(__m128i __V)
{
  return (__m128i)__builtin_ia32_aesimc128((__v2di)__V);
}
# 30 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\wmmintrin.h" 2 3

# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\__wmmintrin_pclmul.h" 1 3
# 32 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\wmmintrin.h" 2 3
# 55 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\clflushoptintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\clflushoptintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("clflushopt")))
_mm_clflushopt(char * __m) {
  __builtin_ia32_clflushopt(__m);
}
# 59 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 1 3
# 31 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
typedef double __v4df __attribute__ ((__vector_size__ (32)));
typedef float __v8sf __attribute__ ((__vector_size__ (32)));
typedef long long __v4di __attribute__ ((__vector_size__ (32)));
typedef int __v8si __attribute__ ((__vector_size__ (32)));
typedef short __v16hi __attribute__ ((__vector_size__ (32)));
typedef char __v32qi __attribute__ ((__vector_size__ (32)));


typedef unsigned long long __v4du __attribute__ ((__vector_size__ (32)));
typedef unsigned int __v8su __attribute__ ((__vector_size__ (32)));
typedef unsigned short __v16hu __attribute__ ((__vector_size__ (32)));
typedef unsigned char __v32qu __attribute__ ((__vector_size__ (32)));



typedef signed char __v32qs __attribute__((__vector_size__(32)));

typedef float __m256 __attribute__ ((__vector_size__ (32)));
typedef double __m256d __attribute__((__vector_size__(32)));
typedef long long __m256i __attribute__((__vector_size__(32)));
# 68 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_add_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4df)__a+(__v4df)__b);
}
# 86 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_add_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8sf)__a+(__v8sf)__b);
}
# 104 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_sub_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4df)__a-(__v4df)__b);
}
# 122 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_sub_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8sf)__a-(__v8sf)__b);
}
# 141 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_addsub_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_addsubpd256((__v4df)__a, (__v4df)__b);
}
# 160 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_addsub_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_addsubps256((__v8sf)__a, (__v8sf)__b);
}
# 178 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_div_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4df)__a/(__v4df)__b);
}
# 196 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_div_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8sf)__a/(__v8sf)__b);
}
# 215 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_max_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_maxpd256((__v4df)__a, (__v4df)__b);
}
# 234 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_max_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_maxps256((__v8sf)__a, (__v8sf)__b);
}
# 253 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_min_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_minpd256((__v4df)__a, (__v4df)__b);
}
# 272 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_min_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_minps256((__v8sf)__a, (__v8sf)__b);
}
# 290 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_mul_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4df)__a * (__v4df)__b);
}
# 308 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_mul_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8sf)__a * (__v8sf)__b);
}
# 325 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_sqrt_pd(__m256d __a)
{
  return (__m256d)__builtin_ia32_sqrtpd256((__v4df)__a);
}
# 342 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_sqrt_ps(__m256 __a)
{
  return (__m256)__builtin_ia32_sqrtps256((__v8sf)__a);
}
# 359 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_rsqrt_ps(__m256 __a)
{
  return (__m256)__builtin_ia32_rsqrtps256((__v8sf)__a);
}
# 376 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_rcp_ps(__m256 __a)
{
  return (__m256)__builtin_ia32_rcpps256((__v8sf)__a);
}
# 528 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_and_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4du)__a & (__v4du)__b);
}
# 546 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_and_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8su)__a & (__v8su)__b);
}
# 567 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_andnot_pd(__m256d __a, __m256d __b)
{
  return (__m256d)(~(__v4du)__a & (__v4du)__b);
}
# 588 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_andnot_ps(__m256 __a, __m256 __b)
{
  return (__m256)(~(__v8su)__a & (__v8su)__b);
}
# 606 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_or_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4du)__a | (__v4du)__b);
}
# 624 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_or_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8su)__a | (__v8su)__b);
}
# 642 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_xor_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4du)__a ^ (__v4du)__b);
}
# 660 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_xor_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8su)__a ^ (__v8su)__b);
}
# 684 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_hadd_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_haddpd256((__v4df)__a, (__v4df)__b);
}
# 707 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_hadd_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_haddps256((__v8sf)__a, (__v8sf)__b);
}
# 730 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_hsub_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_hsubpd256((__v4df)__a, (__v4df)__b);
}
# 753 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_hsub_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_hsubps256((__v8sf)__a, (__v8sf)__b);
}
# 783 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_permutevar_pd(__m128d __a, __m128i __c)
{
  return (__m128d)__builtin_ia32_vpermilvarpd((__v2df)__a, (__v2di)__c);
}
# 822 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_permutevar_pd(__m256d __a, __m256i __c)
{
  return (__m256d)__builtin_ia32_vpermilvarpd256((__v4df)__a, (__v4di)__c);
}
# 877 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_permutevar_ps(__m128 __a, __m128i __c)
{
  return (__m128)__builtin_ia32_vpermilvarps((__v4sf)__a, (__v4si)__c);
}
# 968 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_permutevar_ps(__m256 __a, __m256i __c)
{
  return (__m256)__builtin_ia32_vpermilvarps256((__v8sf)__a, (__v8si)__c);
}
# 1419 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_blendv_pd(__m256d __a, __m256d __b, __m256d __c)
{
  return (__m256d)__builtin_ia32_blendvpd256(
    (__v4df)__a, (__v4df)__b, (__v4df)__c);
}
# 1447 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_blendv_ps(__m256 __a, __m256 __b, __m256 __c)
{
  return (__m256)__builtin_ia32_blendvps256(
    (__v8sf)__a, (__v8sf)__b, (__v8sf)__c);
}
# 1867 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_extract_epi32(__m256i __a, const int __imm)
{
  __v8si __b = (__v8si)__a;
  return __b[__imm & 7];
}
# 1889 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_extract_epi16(__m256i __a, const int __imm)
{
  __v16hi __b = (__v16hi)__a;
  return (unsigned short)__b[__imm & 15];
}
# 1911 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_extract_epi8(__m256i __a, const int __imm)
{
  __v32qi __b = (__v32qi)__a;
  return (unsigned char)__b[__imm & 31];
}
# 1934 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline long long __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_extract_epi64(__m256i __a, const int __imm)
{
  __v4di __b = (__v4di)__a;
  return __b[__imm & 3];
}
# 1960 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_insert_epi32(__m256i __a, int __b, int const __imm)
{
  __v8si __c = (__v8si)__a;
  __c[__imm & 7] = __b;
  return (__m256i)__c;
}
# 1987 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_insert_epi16(__m256i __a, int __b, int const __imm)
{
  __v16hi __c = (__v16hi)__a;
  __c[__imm & 15] = __b;
  return (__m256i)__c;
}
# 2013 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_insert_epi8(__m256i __a, int __b, int const __imm)
{
  __v32qi __c = (__v32qi)__a;
  __c[__imm & 31] = __b;
  return (__m256i)__c;
}
# 2040 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_insert_epi64(__m256i __a, long long __b, int const __imm)
{
  __v4di __c = (__v4di)__a;
  __c[__imm & 3] = __b;
  return (__m256i)__c;
}
# 2059 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtepi32_pd(__m128i __a)
{
  return (__m256d)__builtin_convertvector((__v4si)__a, __v4df);
}
# 2074 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtepi32_ps(__m256i __a)
{
  return (__m256)__builtin_ia32_cvtdq2ps256((__v8si) __a);
}
# 2090 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtpd_ps(__m256d __a)
{
  return (__m128)__builtin_ia32_cvtpd2ps256((__v4df) __a);
}
# 2105 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtps_epi32(__m256 __a)
{
  return (__m256i)__builtin_ia32_cvtps2dq256((__v8sf) __a);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtps_pd(__m128 __a)
{
  return (__m256d)__builtin_convertvector((__v4sf)__a, __v4df);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvttpd_epi32(__m256d __a)
{
  return (__m128i)__builtin_ia32_cvttpd2dq256((__v4df) __a);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtpd_epi32(__m256d __a)
{
  return (__m128i)__builtin_ia32_cvtpd2dq256((__v4df) __a);
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvttps_epi32(__m256 __a)
{
  return (__m256i)__builtin_ia32_cvttps2dq256((__v8sf) __a);
}

static __inline double __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtsd_f64(__m256d __a)
{
 return __a[0];
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtsi256_si32(__m256i __a)
{
 __v8si __b = (__v8si)__a;
 return __b[0];
}

static __inline float __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtss_f32(__m256 __a)
{
 return __a[0];
}


static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_movehdup_ps(__m256 __a)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__a, 1, 1, 3, 3, 5, 5, 7, 7);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_moveldup_ps(__m256 __a)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__a, 0, 0, 2, 2, 4, 4, 6, 6);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_movedup_pd(__m256d __a)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)__a, 0, 0, 2, 2);
}


static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_unpackhi_pd(__m256d __a, __m256d __b)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)__b, 1, 5, 1+2, 5+2);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_unpacklo_pd(__m256d __a, __m256d __b)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)__b, 0, 4, 0+2, 4+2);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_unpackhi_ps(__m256 __a, __m256 __b)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__b, 2, 10, 2+1, 10+1, 6, 14, 6+1, 14+1);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_unpacklo_ps(__m256 __a, __m256 __b)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__b, 0, 8, 0+1, 8+1, 4, 12, 4+1, 12+1);
}


static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testz_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_vtestzpd((__v2df)__a, (__v2df)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testc_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_vtestcpd((__v2df)__a, (__v2df)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testnzc_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_vtestnzcpd((__v2df)__a, (__v2df)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testz_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_vtestzps((__v4sf)__a, (__v4sf)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testc_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_vtestcps((__v4sf)__a, (__v4sf)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testnzc_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_vtestnzcps((__v4sf)__a, (__v4sf)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testz_pd(__m256d __a, __m256d __b)
{
  return __builtin_ia32_vtestzpd256((__v4df)__a, (__v4df)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testc_pd(__m256d __a, __m256d __b)
{
  return __builtin_ia32_vtestcpd256((__v4df)__a, (__v4df)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testnzc_pd(__m256d __a, __m256d __b)
{
  return __builtin_ia32_vtestnzcpd256((__v4df)__a, (__v4df)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testz_ps(__m256 __a, __m256 __b)
{
  return __builtin_ia32_vtestzps256((__v8sf)__a, (__v8sf)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testc_ps(__m256 __a, __m256 __b)
{
  return __builtin_ia32_vtestcps256((__v8sf)__a, (__v8sf)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testnzc_ps(__m256 __a, __m256 __b)
{
  return __builtin_ia32_vtestnzcps256((__v8sf)__a, (__v8sf)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testz_si256(__m256i __a, __m256i __b)
{
  return __builtin_ia32_ptestz256((__v4di)__a, (__v4di)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testc_si256(__m256i __a, __m256i __b)
{
  return __builtin_ia32_ptestc256((__v4di)__a, (__v4di)__b);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testnzc_si256(__m256i __a, __m256i __b)
{
  return __builtin_ia32_ptestnzc256((__v4di)__a, (__v4di)__b);
}


static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_movemask_pd(__m256d __a)
{
  return __builtin_ia32_movmskpd256((__v4df)__a);
}

static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_movemask_ps(__m256 __a)
{
  return __builtin_ia32_movmskps256((__v8sf)__a);
}


static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_zeroall(void)
{
  __builtin_ia32_vzeroall();
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_zeroupper(void)
{
  __builtin_ia32_vzeroupper();
}


static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_broadcast_ss(float const *__a)
{
  float __f = *__a;
  return (__m128)(__v4sf){ __f, __f, __f, __f };
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_broadcast_sd(double const *__a)
{
  double __d = *__a;
  return (__m256d)(__v4df){ __d, __d, __d, __d };
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_broadcast_ss(float const *__a)
{
  float __f = *__a;
  return (__m256)(__v8sf){ __f, __f, __f, __f, __f, __f, __f, __f };
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_broadcast_pd(__m128d const *__a)
{
  return (__m256d)__builtin_ia32_vbroadcastf128_pd256((__v2df const *)__a);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_broadcast_ps(__m128 const *__a)
{
  return (__m256)__builtin_ia32_vbroadcastf128_ps256((__v4sf const *)__a);
}


static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_load_pd(double const *__p)
{
  return *(__m256d *)__p;
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_load_ps(float const *__p)
{
  return *(__m256 *)__p;
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu_pd(double const *__p)
{
  struct __loadu_pd {
    __m256d __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_pd*)__p)->__v;
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu_ps(float const *__p)
{
  struct __loadu_ps {
    __m256 __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_ps*)__p)->__v;
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_load_si256(__m256i const *__p)
{
  return *__p;
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu_si256(__m256i const *__p)
{
  struct __loadu_si256 {
    __m256i __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_si256*)__p)->__v;
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_lddqu_si256(__m256i const *__p)
{
  return (__m256i)__builtin_ia32_lddqu256((char const *)__p);
}


static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_store_pd(double *__p, __m256d __a)
{
  *(__m256d *)__p = __a;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_store_ps(float *__p, __m256 __a)
{
  *(__m256 *)__p = __a;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu_pd(double *__p, __m256d __a)
{
  struct __storeu_pd {
    __m256d __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_pd*)__p)->__v = __a;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu_ps(float *__p, __m256 __a)
{
  struct __storeu_ps {
    __m256 __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_ps*)__p)->__v = __a;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_store_si256(__m256i *__p, __m256i __a)
{
  *__p = __a;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu_si256(__m256i *__p, __m256i __a)
{
  struct __storeu_si256 {
    __m256i __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_si256*)__p)->__v = __a;
}


static __inline __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_maskload_pd(double const *__p, __m128i __m)
{
  return (__m128d)__builtin_ia32_maskloadpd((const __v2df *)__p, (__v2di)__m);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_maskload_pd(double const *__p, __m256i __m)
{
  return (__m256d)__builtin_ia32_maskloadpd256((const __v4df *)__p,
                                               (__v4di)__m);
}

static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_maskload_ps(float const *__p, __m128i __m)
{
  return (__m128)__builtin_ia32_maskloadps((const __v4sf *)__p, (__v4si)__m);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_maskload_ps(float const *__p, __m256i __m)
{
  return (__m256)__builtin_ia32_maskloadps256((const __v8sf *)__p, (__v8si)__m);
}


static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_maskstore_ps(float *__p, __m256i __m, __m256 __a)
{
  __builtin_ia32_maskstoreps256((__v8sf *)__p, (__v8si)__m, (__v8sf)__a);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_maskstore_pd(double *__p, __m128i __m, __m128d __a)
{
  __builtin_ia32_maskstorepd((__v2df *)__p, (__v2di)__m, (__v2df)__a);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_maskstore_pd(double *__p, __m256i __m, __m256d __a)
{
  __builtin_ia32_maskstorepd256((__v4df *)__p, (__v4di)__m, (__v4df)__a);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_maskstore_ps(float *__p, __m128i __m, __m128 __a)
{
  __builtin_ia32_maskstoreps((__v4sf *)__p, (__v4si)__m, (__v4sf)__a);
}


static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_stream_si256(__m256i *__a, __m256i __b)
{
  __builtin_nontemporal_store((__v4di)__b, (__v4di*)__a);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_stream_pd(double *__a, __m256d __b)
{
  __builtin_nontemporal_store((__v4df)__b, (__v4df*)__a);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_stream_ps(float *__p, __m256 __a)
{
  __builtin_nontemporal_store((__v8sf)__a, (__v8sf*)__p);
}


static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_undefined_pd(void)
{
  return (__m256d)__builtin_ia32_undef256();
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_undefined_ps(void)
{
  return (__m256)__builtin_ia32_undef256();
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_undefined_si256(void)
{
  return (__m256i)__builtin_ia32_undef256();
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_pd(double __a, double __b, double __c, double __d)
{
  return (__m256d){ __d, __c, __b, __a };
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_ps(float __a, float __b, float __c, float __d,
              float __e, float __f, float __g, float __h)
{
  return (__m256){ __h, __g, __f, __e, __d, __c, __b, __a };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_epi32(int __i0, int __i1, int __i2, int __i3,
                 int __i4, int __i5, int __i6, int __i7)
{
  return (__m256i)(__v8si){ __i7, __i6, __i5, __i4, __i3, __i2, __i1, __i0 };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_epi16(short __w15, short __w14, short __w13, short __w12,
                 short __w11, short __w10, short __w09, short __w08,
                 short __w07, short __w06, short __w05, short __w04,
                 short __w03, short __w02, short __w01, short __w00)
{
  return (__m256i)(__v16hi){ __w00, __w01, __w02, __w03, __w04, __w05, __w06,
    __w07, __w08, __w09, __w10, __w11, __w12, __w13, __w14, __w15 };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_epi8(char __b31, char __b30, char __b29, char __b28,
                char __b27, char __b26, char __b25, char __b24,
                char __b23, char __b22, char __b21, char __b20,
                char __b19, char __b18, char __b17, char __b16,
                char __b15, char __b14, char __b13, char __b12,
                char __b11, char __b10, char __b09, char __b08,
                char __b07, char __b06, char __b05, char __b04,
                char __b03, char __b02, char __b01, char __b00)
{
  return (__m256i)(__v32qi){
    __b00, __b01, __b02, __b03, __b04, __b05, __b06, __b07,
    __b08, __b09, __b10, __b11, __b12, __b13, __b14, __b15,
    __b16, __b17, __b18, __b19, __b20, __b21, __b22, __b23,
    __b24, __b25, __b26, __b27, __b28, __b29, __b30, __b31
  };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_epi64x(long long __a, long long __b, long long __c, long long __d)
{
  return (__m256i)(__v4di){ __d, __c, __b, __a };
}


static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_pd(double __a, double __b, double __c, double __d)
{
  return (__m256d){ __a, __b, __c, __d };
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_ps(float __a, float __b, float __c, float __d,
               float __e, float __f, float __g, float __h)
{
  return (__m256){ __a, __b, __c, __d, __e, __f, __g, __h };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_epi32(int __i0, int __i1, int __i2, int __i3,
                  int __i4, int __i5, int __i6, int __i7)
{
  return (__m256i)(__v8si){ __i0, __i1, __i2, __i3, __i4, __i5, __i6, __i7 };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_epi16(short __w15, short __w14, short __w13, short __w12,
       short __w11, short __w10, short __w09, short __w08,
       short __w07, short __w06, short __w05, short __w04,
       short __w03, short __w02, short __w01, short __w00)
{
  return (__m256i)(__v16hi){ __w15, __w14, __w13, __w12, __w11, __w10, __w09,
    __w08, __w07, __w06, __w05, __w04, __w03, __w02, __w01, __w00 };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_epi8(char __b31, char __b30, char __b29, char __b28,
                 char __b27, char __b26, char __b25, char __b24,
                 char __b23, char __b22, char __b21, char __b20,
                 char __b19, char __b18, char __b17, char __b16,
                 char __b15, char __b14, char __b13, char __b12,
                 char __b11, char __b10, char __b09, char __b08,
                 char __b07, char __b06, char __b05, char __b04,
                 char __b03, char __b02, char __b01, char __b00)
{
  return (__m256i)(__v32qi){
    __b31, __b30, __b29, __b28, __b27, __b26, __b25, __b24,
    __b23, __b22, __b21, __b20, __b19, __b18, __b17, __b16,
    __b15, __b14, __b13, __b12, __b11, __b10, __b09, __b08,
    __b07, __b06, __b05, __b04, __b03, __b02, __b01, __b00 };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_epi64x(long long __a, long long __b, long long __c, long long __d)
{
  return (__m256i)(__v4di){ __a, __b, __c, __d };
}


static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_pd(double __w)
{
  return (__m256d){ __w, __w, __w, __w };
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_ps(float __w)
{
  return (__m256){ __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_epi32(int __i)
{
  return (__m256i)(__v8si){ __i, __i, __i, __i, __i, __i, __i, __i };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_epi16(short __w)
{
  return (__m256i)(__v16hi){ __w, __w, __w, __w, __w, __w, __w, __w, __w, __w,
    __w, __w, __w, __w, __w, __w };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_epi8(char __b)
{
  return (__m256i)(__v32qi){ __b, __b, __b, __b, __b, __b, __b, __b, __b, __b,
    __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b,
    __b, __b, __b, __b, __b, __b, __b };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_epi64x(long long __q)
{
  return (__m256i)(__v4di){ __q, __q, __q, __q };
}


static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setzero_pd(void)
{
  return (__m256d){ 0, 0, 0, 0 };
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setzero_ps(void)
{
  return (__m256){ 0, 0, 0, 0, 0, 0, 0, 0 };
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setzero_si256(void)
{
  return (__m256i){ 0LL, 0LL, 0LL, 0LL };
}


static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castpd_ps(__m256d __a)
{
  return (__m256)__a;
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castpd_si256(__m256d __a)
{
  return (__m256i)__a;
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castps_pd(__m256 __a)
{
  return (__m256d)__a;
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castps_si256(__m256 __a)
{
  return (__m256i)__a;
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castsi256_ps(__m256i __a)
{
  return (__m256)__a;
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castsi256_pd(__m256i __a)
{
  return (__m256d)__a;
}

static __inline __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castpd256_pd128(__m256d __a)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)__a, 0, 1);
}

static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castps256_ps128(__m256 __a)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__a, 0, 1, 2, 3);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castsi256_si128(__m256i __a)
{
  return __builtin_shufflevector((__v4di)__a, (__v4di)__a, 0, 1);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castpd128_pd256(__m128d __a)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__a, 0, 1, -1, -1);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castps128_ps256(__m128 __a)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 0, 1, 2, 3, -1, -1, -1, -1);
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castsi128_si256(__m128i __a)
{
  return __builtin_shufflevector((__v2di)__a, (__v2di)__a, 0, 1, -1, -1);
}
# 2841 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu2_m128(float const *__addr_hi, float const *__addr_lo)
{
  __m256 __v256 = _mm256_castps128_ps256(_mm_loadu_ps(__addr_lo));
  return __extension__ ({ (__m256)__builtin_shufflevector( (__v8sf)(__m256)(__v256), (__v8sf)_mm256_castps128_ps256((__m128)(_mm_loadu_ps(__addr_hi))), (((1) & 1) ? 0 : 8), (((1) & 1) ? 1 : 9), (((1) & 1) ? 2 : 10), (((1) & 1) ? 3 : 11), (((1) & 1) ? 8 : 4), (((1) & 1) ? 9 : 5), (((1) & 1) ? 10 : 6), (((1) & 1) ? 11 : 7) );});
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu2_m128d(double const *__addr_hi, double const *__addr_lo)
{
  __m256d __v256 = _mm256_castpd128_pd256(_mm_loadu_pd(__addr_lo));
  return __extension__ ({ (__m256d)__builtin_shufflevector( (__v4df)(__m256d)(__v256), (__v4df)_mm256_castpd128_pd256((__m128d)(_mm_loadu_pd(__addr_hi))), (((1) & 1) ? 0 : 4), (((1) & 1) ? 1 : 5), (((1) & 1) ? 4 : 2), (((1) & 1) ? 5 : 3) );});
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu2_m128i(__m128i const *__addr_hi, __m128i const *__addr_lo)
{
  __m256i __v256 = _mm256_castsi128_si256(_mm_loadu_si128(__addr_lo));
  return __extension__ ({ (__m256i)__builtin_shufflevector( (__v4di)(__m256i)(__v256), (__v4di)_mm256_castsi128_si256((__m128i)(_mm_loadu_si128(__addr_hi))), (((1) & 1) ? 0 : 4), (((1) & 1) ? 1 : 5), (((1) & 1) ? 4 : 2), (((1) & 1) ? 5 : 3) );});
}


static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu2_m128(float *__addr_hi, float *__addr_lo, __m256 __a)
{
  __m128 __v128;

  __v128 = _mm256_castps256_ps128(__a);
  _mm_storeu_ps(__addr_lo, __v128);
  __v128 = __extension__ ({ (__m128)__builtin_shufflevector( (__v8sf)(__m256)(__a), (__v8sf)(_mm256_undefined_ps()), (((1) & 1) ? 4 : 0), (((1) & 1) ? 5 : 1), (((1) & 1) ? 6 : 2), (((1) & 1) ? 7 : 3) );});
  _mm_storeu_ps(__addr_hi, __v128);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu2_m128d(double *__addr_hi, double *__addr_lo, __m256d __a)
{
  __m128d __v128;

  __v128 = _mm256_castpd256_pd128(__a);
  _mm_storeu_pd(__addr_lo, __v128);
  __v128 = __extension__ ({ (__m128d)__builtin_shufflevector( (__v4df)(__m256d)(__a), (__v4df)(_mm256_undefined_pd()), (((1) & 1) ? 2 : 0), (((1) & 1) ? 3 : 1) );});
  _mm_storeu_pd(__addr_hi, __v128);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu2_m128i(__m128i *__addr_hi, __m128i *__addr_lo, __m256i __a)
{
  __m128i __v128;

  __v128 = _mm256_castsi256_si128(__a);
  _mm_storeu_si128(__addr_lo, __v128);
  __v128 = __extension__ ({ (__m128i)__builtin_shufflevector( (__v4di)(__m256i)(__a), (__v4di)(_mm256_undefined_si256()), (((1) & 1) ? 2 : 0), (((1) & 1) ? 3 : 1) );});
  _mm_storeu_si128(__addr_hi, __v128);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_m128 (__m128 __hi, __m128 __lo) {
  return (__m256) __builtin_shufflevector((__v4sf)__lo, (__v4sf)__hi, 0, 1, 2, 3, 4, 5, 6, 7);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_m128d (__m128d __hi, __m128d __lo) {
  return (__m256d)_mm256_set_m128((__m128)__hi, (__m128)__lo);
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_m128i (__m128i __hi, __m128i __lo) {
  return (__m256i)_mm256_set_m128((__m128)__hi, (__m128)__lo);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_m128 (__m128 __lo, __m128 __hi) {
  return _mm256_set_m128(__hi, __lo);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_m128d (__m128d __lo, __m128d __hi) {
  return (__m256d)_mm256_set_m128((__m128)__hi, (__m128)__lo);
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_m128i (__m128i __lo, __m128i __hi) {
  return (__m256i)_mm256_set_m128((__m128)__hi, (__m128)__lo);
}
# 63 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 1 3
# 39 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_abs_epi8(__m256i __a)
{
    return (__m256i)__builtin_ia32_pabsb256((__v32qi)__a);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_abs_epi16(__m256i __a)
{
    return (__m256i)__builtin_ia32_pabsw256((__v16hi)__a);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_abs_epi32(__m256i __a)
{
    return (__m256i)__builtin_ia32_pabsd256((__v8si)__a);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_packs_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_packsswb256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_packs_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_packssdw256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_packus_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_packuswb256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_packus_epi32(__m256i __V1, __m256i __V2)
{
  return (__m256i) __builtin_ia32_packusdw256((__v8si)__V1, (__v8si)__V2);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_add_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)((__v32qu)__a + (__v32qu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_add_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hu)__a + (__v16hu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_add_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)((__v8su)__a + (__v8su)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_add_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a + (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_adds_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_paddsb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_adds_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_paddsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_adds_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_paddusb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_adds_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_paddusw256((__v16hi)__a, (__v16hi)__b);
}





static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_and_si256(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a & (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_andnot_si256(__m256i __a, __m256i __b)
{
  return (__m256i)(~(__v4du)__a & (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_avg_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pavgb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_avg_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pavgw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_blendv_epi8(__m256i __V1, __m256i __V2, __m256i __M)
{
  return (__m256i)__builtin_ia32_pblendvb256((__v32qi)__V1, (__v32qi)__V2,
                                              (__v32qi)__M);
}
# 184 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpeq_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)((__v32qi)__a == (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpeq_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hi)__a == (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpeq_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)((__v8si)__a == (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpeq_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4di)__a == (__v4di)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpgt_epi8(__m256i __a, __m256i __b)
{


  return (__m256i)((__v32qs)__a > (__v32qs)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpgt_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hi)__a > (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpgt_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)((__v8si)__a > (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpgt_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4di)__a > (__v4di)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hadd_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phaddw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hadd_epi32(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phaddd256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hadds_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phaddsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hsub_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phsubw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hsub_epi32(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phsubd256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hsubs_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phsubsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maddubs_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_pmaddubsw256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_madd_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaddwd256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxsb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxsd256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxub256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxuw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epu32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxud256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminsb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminsd256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminub256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminuw256 ((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epu32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminud256((__v8si)__a, (__v8si)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_movemask_epi8(__m256i __a)
{
  return __builtin_ia32_pmovmskb256((__v32qi)__a);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi8_epi16(__m128i __V)
{


  return (__m256i)__builtin_convertvector((__v16qs)__V, __v16hi);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi8_epi32(__m128i __V)
{


  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1, 2, 3, 4, 5, 6, 7), __v8si);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi8_epi64(__m128i __V)
{


  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1, 2, 3), __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi16_epi32(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v8hi)__V, __v8si);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi16_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v8hi)__V, (__v8hi)__V, 0, 1, 2, 3), __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi32_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v4si)__V, __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu8_epi16(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v16qu)__V, __v16hi);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu8_epi32(__m128i __V)
{
  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1, 2, 3, 4, 5, 6, 7), __v8si);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu8_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1, 2, 3), __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu16_epi32(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v8hu)__V, __v8si);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu16_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v8hu)__V, (__v8hu)__V, 0, 1, 2, 3), __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu32_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v4su)__V, __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mul_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmuldq256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mulhrs_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmulhrsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mulhi_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmulhuw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mulhi_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmulhw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mullo_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hu)__a * (__v16hu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mullo_epi32 (__m256i __a, __m256i __b)
{
  return (__m256i)((__v8su)__a * (__v8su)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mul_epu32(__m256i __a, __m256i __b)
{
  return __builtin_ia32_pmuludq256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_or_si256(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a | (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sad_epu8(__m256i __a, __m256i __b)
{
  return __builtin_ia32_psadbw256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_shuffle_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pshufb256((__v32qi)__a, (__v32qi)__b);
}
# 538 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sign_epi8(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_psignb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sign_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_psignw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sign_epi32(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_psignd256((__v8si)__a, (__v8si)__b);
}
# 595 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_slli_epi16(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psllwi256((__v16hi)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sll_epi16(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psllw256((__v16hi)__a, (__v8hi)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_slli_epi32(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_pslldi256((__v8si)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sll_epi32(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_pslld256((__v8si)__a, (__v4si)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_slli_epi64(__m256i __a, int __count)
{
  return __builtin_ia32_psllqi256((__v4di)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sll_epi64(__m256i __a, __m128i __count)
{
  return __builtin_ia32_psllq256((__v4di)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srai_epi16(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psrawi256((__v16hi)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sra_epi16(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psraw256((__v16hi)__a, (__v8hi)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srai_epi32(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psradi256((__v8si)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sra_epi32(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psrad256((__v8si)__a, (__v4si)__count);
}
# 694 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srli_epi16(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psrlwi256((__v16hi)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srl_epi16(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psrlw256((__v16hi)__a, (__v8hi)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srli_epi32(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psrldi256((__v8si)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srl_epi32(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psrld256((__v8si)__a, (__v4si)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srli_epi64(__m256i __a, int __count)
{
  return __builtin_ia32_psrlqi256((__v4di)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srl_epi64(__m256i __a, __m128i __count)
{
  return __builtin_ia32_psrlq256((__v4di)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sub_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)((__v32qu)__a - (__v32qu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sub_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hu)__a - (__v16hu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sub_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)((__v8su)__a - (__v8su)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sub_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a - (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_subs_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_psubsb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_subs_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_psubsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_subs_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_psubusb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_subs_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_psubusw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpackhi_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v32qi)__a, (__v32qi)__b, 8, 32+8, 9, 32+9, 10, 32+10, 11, 32+11, 12, 32+12, 13, 32+13, 14, 32+14, 15, 32+15, 24, 32+24, 25, 32+25, 26, 32+26, 27, 32+27, 28, 32+28, 29, 32+29, 30, 32+30, 31, 32+31);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpackhi_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v16hi)__a, (__v16hi)__b, 4, 16+4, 5, 16+5, 6, 16+6, 7, 16+7, 12, 16+12, 13, 16+13, 14, 16+14, 15, 16+15);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpackhi_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v8si)__a, (__v8si)__b, 2, 8+2, 3, 8+3, 6, 8+6, 7, 8+7);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpackhi_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v4di)__a, (__v4di)__b, 1, 4+1, 3, 4+3);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpacklo_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v32qi)__a, (__v32qi)__b, 0, 32+0, 1, 32+1, 2, 32+2, 3, 32+3, 4, 32+4, 5, 32+5, 6, 32+6, 7, 32+7, 16, 32+16, 17, 32+17, 18, 32+18, 19, 32+19, 20, 32+20, 21, 32+21, 22, 32+22, 23, 32+23);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpacklo_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v16hi)__a, (__v16hi)__b, 0, 16+0, 1, 16+1, 2, 16+2, 3, 16+3, 8, 16+8, 9, 16+9, 10, 16+10, 11, 16+11);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpacklo_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v8si)__a, (__v8si)__b, 0, 8+0, 1, 8+1, 4, 8+4, 5, 8+5);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpacklo_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v4di)__a, (__v4di)__b, 0, 4+0, 2, 4+2);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_xor_si256(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a ^ (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_stream_load_si256(__m256i const *__V)
{
  return (__m256i)__builtin_ia32_movntdqa256((const __v4di *)__V);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastss_ps(__m128 __X)
{
  return (__m128)__builtin_shufflevector((__v4sf)__X, (__v4sf)__X, 0, 0, 0, 0);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastsd_pd(__m128d __a)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__a, 0, 0);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastss_ps(__m128 __X)
{
  return (__m256)__builtin_shufflevector((__v4sf)__X, (__v4sf)__X, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastsd_pd(__m128d __X)
{
  return (__m256d)__builtin_shufflevector((__v2df)__X, (__v2df)__X, 0, 0, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastsi128_si256(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v2di)__X, (__v2di)__X, 0, 1, 0, 1);
}
# 888 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastb_epi8(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v16qi)__X, (__v16qi)__X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastw_epi16(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v8hi)__X, (__v8hi)__X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastd_epi32(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v4si)__X, (__v4si)__X, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastq_epi64(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v2di)__X, (__v2di)__X, 0, 0, 0, 0);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastb_epi8(__m128i __X)
{
  return (__m128i)__builtin_shufflevector((__v16qi)__X, (__v16qi)__X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastw_epi16(__m128i __X)
{
  return (__m128i)__builtin_shufflevector((__v8hi)__X, (__v8hi)__X, 0, 0, 0, 0, 0, 0, 0, 0);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastd_epi32(__m128i __X)
{
  return (__m128i)__builtin_shufflevector((__v4si)__X, (__v4si)__X, 0, 0, 0, 0);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastq_epi64(__m128i __X)
{
  return (__m128i)__builtin_shufflevector((__v2di)__X, (__v2di)__X, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_permutevar8x32_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_permvarsi256((__v8si)__a, (__v8si)__b);
}
# 951 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_permutevar8x32_ps(__m256 __a, __m256i __b)
{
  return (__m256)__builtin_ia32_permvarsf256((__v8sf)__a, (__v8si)__b);
}
# 982 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maskload_epi32(int const *__X, __m256i __M)
{
  return (__m256i)__builtin_ia32_maskloadd256((const __v8si *)__X, (__v8si)__M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maskload_epi64(long long const *__X, __m256i __M)
{
  return (__m256i)__builtin_ia32_maskloadq256((const __v4di *)__X, (__v4di)__M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_maskload_epi32(int const *__X, __m128i __M)
{
  return (__m128i)__builtin_ia32_maskloadd((const __v4si *)__X, (__v4si)__M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_maskload_epi64(long long const *__X, __m128i __M)
{
  return (__m128i)__builtin_ia32_maskloadq((const __v2di *)__X, (__v2di)__M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maskstore_epi32(int *__X, __m256i __M, __m256i __Y)
{
  __builtin_ia32_maskstored256((__v8si *)__X, (__v8si)__M, (__v8si)__Y);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maskstore_epi64(long long *__X, __m256i __M, __m256i __Y)
{
  __builtin_ia32_maskstoreq256((__v4di *)__X, (__v4di)__M, (__v4di)__Y);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_maskstore_epi32(int *__X, __m128i __M, __m128i __Y)
{
  __builtin_ia32_maskstored((__v4si *)__X, (__v4si)__M, (__v4si)__Y);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_maskstore_epi64(long long *__X, __m128i __M, __m128i __Y)
{
  __builtin_ia32_maskstoreq(( __v2di *)__X, (__v2di)__M, (__v2di)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sllv_epi32(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psllv8si((__v8si)__X, (__v8si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_sllv_epi32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psllv4si((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sllv_epi64(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psllv4di((__v4di)__X, (__v4di)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_sllv_epi64(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psllv2di((__v2di)__X, (__v2di)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srav_epi32(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psrav8si((__v8si)__X, (__v8si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_srav_epi32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psrav4si((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srlv_epi32(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psrlv8si((__v8si)__X, (__v8si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_srlv_epi32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psrlv4si((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srlv_epi64(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psrlv4di((__v4di)__X, (__v4di)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_srlv_epi64(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psrlv2di((__v2di)__X, (__v2di)__Y);
}
# 67 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3








static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("f16c")))
_mm256_cvtph_ps(__m128i __a)
{
  return (__m256)__builtin_ia32_vcvtph2ps256((__v8hi)__a);
}




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 1 3
# 152 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned short __attribute__((__always_inline__, __nodebug__))
__tzcnt_u16(unsigned short __X)
{
  return __X ? __builtin_ctzs(__X) : 16;
}
# 171 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__andn_u32(unsigned int __X, unsigned int __Y)
{
  return ~__X & __Y;
}
# 193 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__bextr_u32(unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_bextr_u32(__X, __Y);
}
# 217 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
_bextr_u32(unsigned int __X, unsigned int __Y, unsigned int __Z)
{
  return __builtin_ia32_bextr_u32 (__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}
# 234 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsi_u32(unsigned int __X)
{
  return __X & -__X;
}
# 251 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsmsk_u32(unsigned int __X)
{
  return __X ^ (__X - 1);
}
# 268 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsr_u32(unsigned int __X)
{
  return __X & (__X - 1);
}
# 284 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__))
__tzcnt_u32(unsigned int __X)
{
  return __X ? __builtin_ctz(__X) : 32;
}
# 300 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__))
_mm_tzcnt_32(unsigned int __X)
{
  return __X ? __builtin_ctz(__X) : 32;
}
# 408 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__andn_u64 (unsigned long long __X, unsigned long long __Y)
{
  return ~__X & __Y;
}
# 430 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__bextr_u64(unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_bextr_u64(__X, __Y);
}
# 454 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
_bextr_u64(unsigned long long __X, unsigned int __Y, unsigned int __Z)
{
  return __builtin_ia32_bextr_u64 (__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}
# 471 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsi_u64(unsigned long long __X)
{
  return __X & -__X;
}
# 488 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsmsk_u64(unsigned long long __X)
{
  return __X ^ (__X - 1);
}
# 505 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsr_u64(unsigned long long __X)
{
  return __X & (__X - 1);
}
# 521 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__tzcnt_u64(unsigned long long __X)
{
  return __X ? __builtin_ctzll(__X) : 64;
}
# 537 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__))
_mm_tzcnt_64(unsigned long long __X)
{
  return __X ? __builtin_ctzll(__X) : 64;
}
# 84 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmi2intrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmi2intrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_bzhi_u32(unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_bzhi_si(__X, __Y);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_pdep_u32(unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_pdep_si(__X, __Y);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_pext_u32(unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_pext_si(__X, __Y);
}



static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_bzhi_u64(unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_bzhi_di(__X, __Y);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_pdep_u64(unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_pdep_di(__X, __Y);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_pext_u64(unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_pext_di(__X, __Y);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_mulx_u64 (unsigned long long __X, unsigned long long __Y,
    unsigned long long *__P)
{
  unsigned __int128 __res = (unsigned __int128) __X * __Y;
  *__P = (unsigned long long) (__res >> 64);
  return (unsigned long long) __res;
}
# 88 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\lzcntintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\lzcntintrin.h" 3
static __inline__ unsigned short __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
__lzcnt16(unsigned short __X)
{
  return __X ? __builtin_clzs(__X) : 16;
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
__lzcnt32(unsigned int __X)
{
  return __X ? __builtin_clz(__X) : 32;
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
_lzcnt_u32(unsigned int __X)
{
  return __X ? __builtin_clz(__X) : 32;
}


static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
__lzcnt64(unsigned long long __X)
{
  return __X ? __builtin_clzll(__X) : 64;
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
_lzcnt_u64(unsigned long long __X)
{
  return __X ? __builtin_clzll(__X) : 64;
}
# 92 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\fmaintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\fmaintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmadd_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmadd_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmadd_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmadd_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsub_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsub_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmadd_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmadd_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmsub_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmsubss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmsub_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmsubsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmadd_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmadd_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfnmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfnmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfnmsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfnmsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmsubaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmsubaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}
# 96 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 1 3
# 30 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
typedef char __v64qi __attribute__((__vector_size__(64)));
typedef short __v32hi __attribute__((__vector_size__(64)));
typedef double __v8df __attribute__((__vector_size__(64)));
typedef float __v16sf __attribute__((__vector_size__(64)));
typedef long long __v8di __attribute__((__vector_size__(64)));
typedef int __v16si __attribute__((__vector_size__(64)));


typedef unsigned char __v64qu __attribute__((__vector_size__(64)));
typedef unsigned short __v32hu __attribute__((__vector_size__(64)));
typedef unsigned long long __v8du __attribute__((__vector_size__(64)));
typedef unsigned int __v16su __attribute__((__vector_size__(64)));

typedef float __m512 __attribute__((__vector_size__(64)));
typedef double __m512d __attribute__((__vector_size__(64)));
typedef long long __m512i __attribute__((__vector_size__(64)));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;
# 57 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
typedef enum
{
  _MM_PERM_AAAA = 0x00, _MM_PERM_AAAB = 0x01, _MM_PERM_AAAC = 0x02,
  _MM_PERM_AAAD = 0x03, _MM_PERM_AABA = 0x04, _MM_PERM_AABB = 0x05,
  _MM_PERM_AABC = 0x06, _MM_PERM_AABD = 0x07, _MM_PERM_AACA = 0x08,
  _MM_PERM_AACB = 0x09, _MM_PERM_AACC = 0x0A, _MM_PERM_AACD = 0x0B,
  _MM_PERM_AADA = 0x0C, _MM_PERM_AADB = 0x0D, _MM_PERM_AADC = 0x0E,
  _MM_PERM_AADD = 0x0F, _MM_PERM_ABAA = 0x10, _MM_PERM_ABAB = 0x11,
  _MM_PERM_ABAC = 0x12, _MM_PERM_ABAD = 0x13, _MM_PERM_ABBA = 0x14,
  _MM_PERM_ABBB = 0x15, _MM_PERM_ABBC = 0x16, _MM_PERM_ABBD = 0x17,
  _MM_PERM_ABCA = 0x18, _MM_PERM_ABCB = 0x19, _MM_PERM_ABCC = 0x1A,
  _MM_PERM_ABCD = 0x1B, _MM_PERM_ABDA = 0x1C, _MM_PERM_ABDB = 0x1D,
  _MM_PERM_ABDC = 0x1E, _MM_PERM_ABDD = 0x1F, _MM_PERM_ACAA = 0x20,
  _MM_PERM_ACAB = 0x21, _MM_PERM_ACAC = 0x22, _MM_PERM_ACAD = 0x23,
  _MM_PERM_ACBA = 0x24, _MM_PERM_ACBB = 0x25, _MM_PERM_ACBC = 0x26,
  _MM_PERM_ACBD = 0x27, _MM_PERM_ACCA = 0x28, _MM_PERM_ACCB = 0x29,
  _MM_PERM_ACCC = 0x2A, _MM_PERM_ACCD = 0x2B, _MM_PERM_ACDA = 0x2C,
  _MM_PERM_ACDB = 0x2D, _MM_PERM_ACDC = 0x2E, _MM_PERM_ACDD = 0x2F,
  _MM_PERM_ADAA = 0x30, _MM_PERM_ADAB = 0x31, _MM_PERM_ADAC = 0x32,
  _MM_PERM_ADAD = 0x33, _MM_PERM_ADBA = 0x34, _MM_PERM_ADBB = 0x35,
  _MM_PERM_ADBC = 0x36, _MM_PERM_ADBD = 0x37, _MM_PERM_ADCA = 0x38,
  _MM_PERM_ADCB = 0x39, _MM_PERM_ADCC = 0x3A, _MM_PERM_ADCD = 0x3B,
  _MM_PERM_ADDA = 0x3C, _MM_PERM_ADDB = 0x3D, _MM_PERM_ADDC = 0x3E,
  _MM_PERM_ADDD = 0x3F, _MM_PERM_BAAA = 0x40, _MM_PERM_BAAB = 0x41,
  _MM_PERM_BAAC = 0x42, _MM_PERM_BAAD = 0x43, _MM_PERM_BABA = 0x44,
  _MM_PERM_BABB = 0x45, _MM_PERM_BABC = 0x46, _MM_PERM_BABD = 0x47,
  _MM_PERM_BACA = 0x48, _MM_PERM_BACB = 0x49, _MM_PERM_BACC = 0x4A,
  _MM_PERM_BACD = 0x4B, _MM_PERM_BADA = 0x4C, _MM_PERM_BADB = 0x4D,
  _MM_PERM_BADC = 0x4E, _MM_PERM_BADD = 0x4F, _MM_PERM_BBAA = 0x50,
  _MM_PERM_BBAB = 0x51, _MM_PERM_BBAC = 0x52, _MM_PERM_BBAD = 0x53,
  _MM_PERM_BBBA = 0x54, _MM_PERM_BBBB = 0x55, _MM_PERM_BBBC = 0x56,
  _MM_PERM_BBBD = 0x57, _MM_PERM_BBCA = 0x58, _MM_PERM_BBCB = 0x59,
  _MM_PERM_BBCC = 0x5A, _MM_PERM_BBCD = 0x5B, _MM_PERM_BBDA = 0x5C,
  _MM_PERM_BBDB = 0x5D, _MM_PERM_BBDC = 0x5E, _MM_PERM_BBDD = 0x5F,
  _MM_PERM_BCAA = 0x60, _MM_PERM_BCAB = 0x61, _MM_PERM_BCAC = 0x62,
  _MM_PERM_BCAD = 0x63, _MM_PERM_BCBA = 0x64, _MM_PERM_BCBB = 0x65,
  _MM_PERM_BCBC = 0x66, _MM_PERM_BCBD = 0x67, _MM_PERM_BCCA = 0x68,
  _MM_PERM_BCCB = 0x69, _MM_PERM_BCCC = 0x6A, _MM_PERM_BCCD = 0x6B,
  _MM_PERM_BCDA = 0x6C, _MM_PERM_BCDB = 0x6D, _MM_PERM_BCDC = 0x6E,
  _MM_PERM_BCDD = 0x6F, _MM_PERM_BDAA = 0x70, _MM_PERM_BDAB = 0x71,
  _MM_PERM_BDAC = 0x72, _MM_PERM_BDAD = 0x73, _MM_PERM_BDBA = 0x74,
  _MM_PERM_BDBB = 0x75, _MM_PERM_BDBC = 0x76, _MM_PERM_BDBD = 0x77,
  _MM_PERM_BDCA = 0x78, _MM_PERM_BDCB = 0x79, _MM_PERM_BDCC = 0x7A,
  _MM_PERM_BDCD = 0x7B, _MM_PERM_BDDA = 0x7C, _MM_PERM_BDDB = 0x7D,
  _MM_PERM_BDDC = 0x7E, _MM_PERM_BDDD = 0x7F, _MM_PERM_CAAA = 0x80,
  _MM_PERM_CAAB = 0x81, _MM_PERM_CAAC = 0x82, _MM_PERM_CAAD = 0x83,
  _MM_PERM_CABA = 0x84, _MM_PERM_CABB = 0x85, _MM_PERM_CABC = 0x86,
  _MM_PERM_CABD = 0x87, _MM_PERM_CACA = 0x88, _MM_PERM_CACB = 0x89,
  _MM_PERM_CACC = 0x8A, _MM_PERM_CACD = 0x8B, _MM_PERM_CADA = 0x8C,
  _MM_PERM_CADB = 0x8D, _MM_PERM_CADC = 0x8E, _MM_PERM_CADD = 0x8F,
  _MM_PERM_CBAA = 0x90, _MM_PERM_CBAB = 0x91, _MM_PERM_CBAC = 0x92,
  _MM_PERM_CBAD = 0x93, _MM_PERM_CBBA = 0x94, _MM_PERM_CBBB = 0x95,
  _MM_PERM_CBBC = 0x96, _MM_PERM_CBBD = 0x97, _MM_PERM_CBCA = 0x98,
  _MM_PERM_CBCB = 0x99, _MM_PERM_CBCC = 0x9A, _MM_PERM_CBCD = 0x9B,
  _MM_PERM_CBDA = 0x9C, _MM_PERM_CBDB = 0x9D, _MM_PERM_CBDC = 0x9E,
  _MM_PERM_CBDD = 0x9F, _MM_PERM_CCAA = 0xA0, _MM_PERM_CCAB = 0xA1,
  _MM_PERM_CCAC = 0xA2, _MM_PERM_CCAD = 0xA3, _MM_PERM_CCBA = 0xA4,
  _MM_PERM_CCBB = 0xA5, _MM_PERM_CCBC = 0xA6, _MM_PERM_CCBD = 0xA7,
  _MM_PERM_CCCA = 0xA8, _MM_PERM_CCCB = 0xA9, _MM_PERM_CCCC = 0xAA,
  _MM_PERM_CCCD = 0xAB, _MM_PERM_CCDA = 0xAC, _MM_PERM_CCDB = 0xAD,
  _MM_PERM_CCDC = 0xAE, _MM_PERM_CCDD = 0xAF, _MM_PERM_CDAA = 0xB0,
  _MM_PERM_CDAB = 0xB1, _MM_PERM_CDAC = 0xB2, _MM_PERM_CDAD = 0xB3,
  _MM_PERM_CDBA = 0xB4, _MM_PERM_CDBB = 0xB5, _MM_PERM_CDBC = 0xB6,
  _MM_PERM_CDBD = 0xB7, _MM_PERM_CDCA = 0xB8, _MM_PERM_CDCB = 0xB9,
  _MM_PERM_CDCC = 0xBA, _MM_PERM_CDCD = 0xBB, _MM_PERM_CDDA = 0xBC,
  _MM_PERM_CDDB = 0xBD, _MM_PERM_CDDC = 0xBE, _MM_PERM_CDDD = 0xBF,
  _MM_PERM_DAAA = 0xC0, _MM_PERM_DAAB = 0xC1, _MM_PERM_DAAC = 0xC2,
  _MM_PERM_DAAD = 0xC3, _MM_PERM_DABA = 0xC4, _MM_PERM_DABB = 0xC5,
  _MM_PERM_DABC = 0xC6, _MM_PERM_DABD = 0xC7, _MM_PERM_DACA = 0xC8,
  _MM_PERM_DACB = 0xC9, _MM_PERM_DACC = 0xCA, _MM_PERM_DACD = 0xCB,
  _MM_PERM_DADA = 0xCC, _MM_PERM_DADB = 0xCD, _MM_PERM_DADC = 0xCE,
  _MM_PERM_DADD = 0xCF, _MM_PERM_DBAA = 0xD0, _MM_PERM_DBAB = 0xD1,
  _MM_PERM_DBAC = 0xD2, _MM_PERM_DBAD = 0xD3, _MM_PERM_DBBA = 0xD4,
  _MM_PERM_DBBB = 0xD5, _MM_PERM_DBBC = 0xD6, _MM_PERM_DBBD = 0xD7,
  _MM_PERM_DBCA = 0xD8, _MM_PERM_DBCB = 0xD9, _MM_PERM_DBCC = 0xDA,
  _MM_PERM_DBCD = 0xDB, _MM_PERM_DBDA = 0xDC, _MM_PERM_DBDB = 0xDD,
  _MM_PERM_DBDC = 0xDE, _MM_PERM_DBDD = 0xDF, _MM_PERM_DCAA = 0xE0,
  _MM_PERM_DCAB = 0xE1, _MM_PERM_DCAC = 0xE2, _MM_PERM_DCAD = 0xE3,
  _MM_PERM_DCBA = 0xE4, _MM_PERM_DCBB = 0xE5, _MM_PERM_DCBC = 0xE6,
  _MM_PERM_DCBD = 0xE7, _MM_PERM_DCCA = 0xE8, _MM_PERM_DCCB = 0xE9,
  _MM_PERM_DCCC = 0xEA, _MM_PERM_DCCD = 0xEB, _MM_PERM_DCDA = 0xEC,
  _MM_PERM_DCDB = 0xED, _MM_PERM_DCDC = 0xEE, _MM_PERM_DCDD = 0xEF,
  _MM_PERM_DDAA = 0xF0, _MM_PERM_DDAB = 0xF1, _MM_PERM_DDAC = 0xF2,
  _MM_PERM_DDAD = 0xF3, _MM_PERM_DDBA = 0xF4, _MM_PERM_DDBB = 0xF5,
  _MM_PERM_DDBC = 0xF6, _MM_PERM_DDBD = 0xF7, _MM_PERM_DDCA = 0xF8,
  _MM_PERM_DDCB = 0xF9, _MM_PERM_DDCC = 0xFA, _MM_PERM_DDCD = 0xFB,
  _MM_PERM_DDDA = 0xFC, _MM_PERM_DDDB = 0xFD, _MM_PERM_DDDC = 0xFE,
  _MM_PERM_DDDD = 0xFF
} _MM_PERM_ENUM;

typedef enum
{
  _MM_MANT_NORM_1_2,
  _MM_MANT_NORM_p5_2,
  _MM_MANT_NORM_p5_1,
  _MM_MANT_NORM_p75_1p5
} _MM_MANTISSA_NORM_ENUM;

typedef enum
{
  _MM_MANT_SIGN_src,
  _MM_MANT_SIGN_zero,
  _MM_MANT_SIGN_nan
} _MM_MANTISSA_SIGN_ENUM;






static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_setzero_si512(void)
{
  return (__m512i)(__v8di){ 0, 0, 0, 0, 0, 0, 0, 0 };
}



static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_undefined_pd(void)
{
  return (__m512d)__builtin_ia32_undef512();
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_undefined(void)
{
  return (__m512)__builtin_ia32_undef512();
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_undefined_ps(void)
{
  return (__m512)__builtin_ia32_undef512();
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_undefined_epi32(void)
{
  return (__m512i)__builtin_ia32_undef512();
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcastd_epi32 (__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v4si) __A,
                                          (__v4si)_mm_undefined_si128(),
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcastd_epi32 (__m512i __O, __mmask16 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512(__M,
                                             (__v16si) _mm512_broadcastd_epi32(__A),
                                             (__v16si) __O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcastd_epi32 (__mmask16 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512(__M,
                                             (__v16si) _mm512_broadcastd_epi32(__A),
                                             (__v16si) _mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcastq_epi64 (__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v2di) __A,
                                          (__v2di) _mm_undefined_si128(),
                                          0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcastq_epi64 (__m512i __O, __mmask8 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512(__M,
                                             (__v8di) _mm512_broadcastq_epi64(__A),
                                             (__v8di) __O);

}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcastq_epi64 (__mmask8 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512(__M,
                                             (__v8di) _mm512_broadcastq_epi64(__A),
                                             (__v8di) _mm512_setzero_si512());
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_set1_epi32(__mmask16 __M, int __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512_gpr_mask (__A,
                 (__v16si)
                 _mm512_setzero_si512 (),
                 __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_set1_epi64(__mmask8 __M, long long __A)
{

  return (__m512i) __builtin_ia32_pbroadcastq512_gpr_mask (__A,
                 (__v8di)
                 _mm512_setzero_si512 (),
                 __M);






}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_setzero_ps(void)
{
  return (__m512){ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
}



static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_setzero_pd(void)
{
  return (__m512d){ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_ps(float __w)
{
  return (__m512){ __w, __w, __w, __w, __w, __w, __w, __w,
                   __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_pd(double __w)
{
  return (__m512d){ __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_epi8(char __w)
{
  return (__m512i)(__v64qi){ __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_epi16(short __w)
{
  return (__m512i)(__v32hi){ __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_epi32(int __s)
{
  return (__m512i)(__v16si){ __s, __s, __s, __s, __s, __s, __s, __s,
                             __s, __s, __s, __s, __s, __s, __s, __s };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_epi64(long long __d)
{
  return (__m512i)(__v8di){ __d, __d, __d, __d, __d, __d, __d, __d };
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcastss_ps(__m128 __A)
{
  return (__m512)__builtin_shufflevector((__v4sf) __A,
                                         (__v4sf)_mm_undefined_ps(),
                                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set4_epi32 (int __A, int __B, int __C, int __D)
{
  return (__m512i)(__v16si)
   { __D, __C, __B, __A, __D, __C, __B, __A,
     __D, __C, __B, __A, __D, __C, __B, __A };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set4_epi64 (long long __A, long long __B, long long __C,
       long long __D)
{
  return (__m512i) (__v8di)
   { __D, __C, __B, __A, __D, __C, __B, __A };
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set4_pd (double __A, double __B, double __C, double __D)
{
  return (__m512d)
   { __D, __C, __B, __A, __D, __C, __B, __A };
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set4_ps (float __A, float __B, float __C, float __D)
{
  return (__m512)
   { __D, __C, __B, __A, __D, __C, __B, __A,
     __D, __C, __B, __A, __D, __C, __B, __A };
}
# 387 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcastsd_pd(__m128d __A)
{
  return (__m512d)__builtin_shufflevector((__v2df) __A,
                                          (__v2df) _mm_undefined_pd(),
                                          0, 0, 0, 0, 0, 0, 0, 0);
}



static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd256_pd512(__m256d __a)
{
  return __builtin_shufflevector(__a, __a, 0, 1, 2, 3, -1, -1, -1, -1);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps256_ps512(__m256 __a)
{
  return __builtin_shufflevector(__a, __a, 0, 1, 2, 3, 4, 5, 6, 7,
                                          -1, -1, -1, -1, -1, -1, -1, -1);
}

static __inline __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd512_pd128(__m512d __a)
{
  return __builtin_shufflevector(__a, __a, 0, 1);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd512_pd256 (__m512d __A)
{
  return __builtin_shufflevector(__A, __A, 0, 1, 2, 3);
}

static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps512_ps128(__m512 __a)
{
  return __builtin_shufflevector(__a, __a, 0, 1, 2, 3);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps512_ps256 (__m512 __A)
{
  return __builtin_shufflevector(__A, __A, 0, 1, 2, 3, 4, 5, 6, 7);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd_ps (__m512d __A)
{
  return (__m512) (__A);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd_si512 (__m512d __A)
{
  return (__m512i) (__A);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd128_pd512 (__m128d __A)
{
  return __builtin_shufflevector( __A, __A, 0, 1, -1, -1, -1, -1, -1, -1);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps_pd (__m512 __A)
{
  return (__m512d) (__A);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps_si512 (__m512 __A)
{
  return (__m512i) (__A);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps128_ps512 (__m128 __A)
{
    return __builtin_shufflevector( __A, __A, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi128_si512 (__m128i __A)
{
   return __builtin_shufflevector( __A, __A, 0, 1, -1, -1, -1, -1, -1, -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi256_si512 (__m256i __A)
{
   return __builtin_shufflevector( __A, __A, 0, 1, 2, 3, -1, -1, -1, -1);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi512_ps (__m512i __A)
{
  return (__m512) (__A);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi512_pd (__m512i __A)
{
  return (__m512d) (__A);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi512_si128 (__m512i __A)
{
  return (__m128i)__builtin_shufflevector(__A, __A , 0, 1);
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi512_si256 (__m512i __A)
{
  return (__m256i)__builtin_shufflevector(__A, __A , 0, 1, 2, 3);
}


static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_and_epi32(__m512i __a, __m512i __b)
{
  return (__m512i)((__v16su)__a & (__v16su)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_and_epi32(__m512i __src, __mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__k,
                (__v16si) _mm512_and_epi32(__a, __b),
                (__v16si) __src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_and_epi32(__mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i) _mm512_mask_and_epi32(_mm512_setzero_si512 (),
                                         __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_and_epi64(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a & (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_and_epi64(__m512i __src, __mmask8 __k, __m512i __a, __m512i __b)
{
    return (__m512i) __builtin_ia32_selectq_512 ((__mmask8) __k,
                (__v8di) _mm512_and_epi64(__a, __b),
                (__v8di) __src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_and_epi64(__mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i) _mm512_mask_and_epi64(_mm512_setzero_si512 (),
                                         __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_andnot_si512 (__m512i __A, __m512i __B)
{
  return (__m512i)(~(__v8du)(__A) & (__v8du)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_andnot_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i)(~(__v16su)(__A) & (__v16su)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_andnot_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                         (__v16si)_mm512_andnot_epi32(__A, __B),
                                         (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_andnot_epi32(__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)_mm512_mask_andnot_epi32(_mm512_setzero_si512(),
                                           __U, __A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_andnot_epi64(__m512i __A, __m512i __B)
{
  return (__m512i)(~(__v8du)(__A) & (__v8du)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_andnot_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                          (__v8di)_mm512_andnot_epi64(__A, __B),
                                          (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_andnot_epi64(__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)_mm512_mask_andnot_epi64(_mm512_setzero_si512(),
                                           __U, __A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_or_epi32(__m512i __a, __m512i __b)
{
  return (__m512i)((__v16su)__a | (__v16su)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_or_epi32(__m512i __src, __mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__k,
                                             (__v16si)_mm512_or_epi32(__a, __b),
                                             (__v16si)__src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_or_epi32(__mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)_mm512_mask_or_epi32(_mm512_setzero_si512(), __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_or_epi64(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a | (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_or_epi64(__m512i __src, __mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__k,
                                             (__v8di)_mm512_or_epi64(__a, __b),
                                             (__v8di)__src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_or_epi64(__mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i)_mm512_mask_or_epi64(_mm512_setzero_si512(), __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_xor_epi32(__m512i __a, __m512i __b)
{
  return (__m512i)((__v16su)__a ^ (__v16su)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_xor_epi32(__m512i __src, __mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__k,
                                            (__v16si)_mm512_xor_epi32(__a, __b),
                                            (__v16si)__src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_xor_epi32(__mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)_mm512_mask_xor_epi32(_mm512_setzero_si512(), __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_xor_epi64(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a ^ (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_xor_epi64(__m512i __src, __mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__k,
                                             (__v8di)_mm512_xor_epi64(__a, __b),
                                             (__v8di)__src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_xor_epi64(__mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i)_mm512_mask_xor_epi64(_mm512_setzero_si512(), __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_and_si512(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a & (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_or_si512(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a | (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_xor_si512(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a ^ (__v8du)__b);
}



static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_add_pd(__m512d __a, __m512d __b)
{
  return (__m512d)((__v8df)__a + (__v8df)__b);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_add_ps(__m512 __a, __m512 __b)
{
  return (__m512)((__v16sf)__a + (__v16sf)__b);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mul_pd(__m512d __a, __m512d __b)
{
  return (__m512d)((__v8df)__a * (__v8df)__b);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mul_ps(__m512 __a, __m512 __b)
{
  return (__m512)((__v16sf)__a * (__v16sf)__b);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sub_pd(__m512d __a, __m512d __b)
{
  return (__m512d)((__v8df)__a - (__v8df)__b);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sub_ps(__m512 __a, __m512 __b)
{
  return (__m512)((__v16sf)__a - (__v16sf)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_add_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v8du) __A + (__v8du) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_add_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddq512_mask ((__v8di) __A,
             (__v8di) __B,
             (__v8di) __W,
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_add_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddq512_mask ((__v8di) __A,
             (__v8di) __B,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sub_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v8du) __A - (__v8du) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sub_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubq512_mask ((__v8di) __A,
             (__v8di) __B,
             (__v8di) __W,
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sub_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubq512_mask ((__v8di) __A,
             (__v8di) __B,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_add_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v16su) __A + (__v16su) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_add_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddd512_mask ((__v16si) __A,
             (__v16si) __B,
             (__v16si) __W,
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_add_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddd512_mask ((__v16si) __A,
             (__v16si) __B,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sub_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v16su) __A - (__v16su) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sub_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubd512_mask ((__v16si) __A,
             (__v16si) __B,
             (__v16si) __W,
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sub_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubd512_mask ((__v16si) __A,
             (__v16si) __B,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) __U);
}
# 851 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_pd(__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) -1,
             0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
                  (__v8df) __B,
                  (__v8df) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
                  (__v8df) __B,
                  (__v8df)
                  _mm512_setzero_pd (),
                  (__mmask8) __U,
                  0x04);
}
# 901 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_ps(__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) -1,
            0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_max_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_maxss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_max_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_maxss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 969 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_max_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_maxsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_max_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_maxsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 1005 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline __m512i
__attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_epi32(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_epi32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_epi32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_epu32(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_epu32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_epu32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_epi64(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_epi64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_epi64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_epu64(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_epu64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_epu64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di)
                   _mm512_setzero_si512 (),
                   __M);
}
# 1136 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_pd(__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) -1,
             0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
                  (__v8df) __B,
                  (__v8df) __W,
                  (__mmask8) __U,
                  0x04);
}
# 1175 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
                  (__v8df) __B,
                  (__v8df)
                  _mm512_setzero_pd (),
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_ps(__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) -1,
            0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_min_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_minss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_min_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_minss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 1254 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_min_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_minsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_min_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_minsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 1290 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline __m512i
__attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_epi32(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_epi32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_epi32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_epu32(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_epu32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_epu32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_epi64(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_epi64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_epi64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_epu64(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_epu64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_epu64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mul_epi32(__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuldq512_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mul_epi32 (__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuldq512_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v8di) __W, __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mul_epi32 (__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuldq512_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v8di)
              _mm512_setzero_si512 (),
              __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mul_epu32(__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuludq512_mask ((__v16si) __X,
               (__v16si) __Y,
               (__v8di)
               _mm512_setzero_si512 (),
               (__mmask8) -1);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mul_epu32 (__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuludq512_mask ((__v16si) __X,
               (__v16si) __Y,
               (__v8di) __W, __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mul_epu32 (__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_pmuludq512_mask ((__v16si) __X,
               (__v16si) __Y,
               (__v8di)
               _mm512_setzero_si512 (),
               __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mullo_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v16su) __A * (__v16su) __B);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mullo_epi32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulld512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mullo_epi32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulld512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si) __W, __M);
}
# 1498 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sqrt_pd(__m512d __a)
{
  return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__a,
                                                (__v8df) _mm512_setzero_pd (),
                                                (__mmask8) -1,
                                                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sqrt_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_sqrtpd512_mask ((__v8df) __A,
                   (__v8df) __W,
                   (__mmask8) __U,
                   0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sqrt_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_sqrtpd512_mask ((__v8df) __A,
                   (__v8df)
                   _mm512_setzero_pd (),
                   (__mmask8) __U,
                   0x04);
}
# 1541 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sqrt_ps(__m512 __a)
{
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__a,
                                               (__v16sf) _mm512_setzero_ps (),
                                               (__mmask16) -1,
                                               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sqrt_ps(__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A,
                                               (__v16sf) __W,
                                               (__mmask16) __U,
                                               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sqrt_ps( __mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A,
                                               (__v16sf) _mm512_setzero_ps (),
                                               (__mmask16) __U,
                                               0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rsqrt14_pd(__m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
                 (__v8df)
                 _mm512_setzero_pd (),
                 (__mmask8) -1);}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rsqrt14_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
                  (__v8df) __W,
                  (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rsqrt14_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
                  (__v8df)
                  _mm512_setzero_pd (),
                  (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rsqrt14_ps(__m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
                (__v16sf)
                _mm512_setzero_ps (),
                (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rsqrt14_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
                 (__v16sf) __W,
                 (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rsqrt14_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_rsqrt14_ss(__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_rsqrt14ss_mask ((__v4sf) __A,
             (__v4sf) __B,
             (__v4sf)
             _mm_setzero_ps (),
             (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_rsqrt14_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_rsqrt14ss_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_rsqrt14_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_rsqrt14ss_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) _mm_setzero_ps (),
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_rsqrt14_sd(__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_rsqrt14sd_mask ((__v2df) __A,
              (__v2df) __B,
              (__v2df)
              _mm_setzero_pd (),
              (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_rsqrt14_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_rsqrt14sd_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_rsqrt14_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_rsqrt14sd_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) _mm_setzero_pd (),
          (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rcp14_pd(__m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
               (__v8df)
               _mm512_setzero_pd (),
               (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rcp14_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
                (__v8df) __W,
                (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rcp14_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
                (__v8df)
                _mm512_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rcp14_ps(__m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
              (__v16sf)
              _mm512_setzero_ps (),
              (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rcp14_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rcp14_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
                   (__v16sf)
                   _mm512_setzero_ps (),
                   (__mmask16) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_rcp14_ss(__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_rcp14ss_mask ((__v4sf) __A,
                 (__v4sf) __B,
                 (__v4sf)
                 _mm_setzero_ps (),
                 (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_rcp14_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_rcp14ss_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_rcp14_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_rcp14ss_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) _mm_setzero_ps (),
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_rcp14_sd(__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_rcp14sd_mask ((__v2df) __A,
            (__v2df) __B,
            (__v2df)
            _mm_setzero_pd (),
            (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_rcp14_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_rcp14sd_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_rcp14_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_rcp14sd_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) _mm_setzero_pd (),
          (__mmask8) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_floor_ps(__m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
                                                  (0x00 | 0x01),
                                                  (__v16sf) __A, -1,
                                                  0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_floor_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
                   (0x00 | 0x01),
                   (__v16sf) __W, __U,
                   0x04);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_floor_pd(__m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
                                                   (0x00 | 0x01),
                                                   (__v8df) __A, -1,
                                                   0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_floor_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
                (0x00 | 0x01),
                (__v8df) __W, __U,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_ceil_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
                   (0x00 | 0x02),
                   (__v16sf) __W, __U,
                   0x04);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_ceil_ps(__m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
                                                  (0x00 | 0x02),
                                                  (__v16sf) __A, -1,
                                                  0x04);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_ceil_pd(__m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
                                                   (0x00 | 0x02),
                                                   (__v8df) __A, -1,
                                                   0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_ceil_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
                (0x00 | 0x02),
                (__v8df) __W, __U,
                0x04);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_abs_epi64(__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_abs_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
                  (__v8di) __W,
                  (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_abs_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
                  (__v8di)
                  _mm512_setzero_si512 (),
                  (__mmask8) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_abs_epi32(__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_abs_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
                  (__v16si) __W,
                  (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_abs_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_add_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_addss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_add_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_addss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 1943 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_add_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_addsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_add_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_addsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 1978 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_add_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_addpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) __W,
             (__mmask8) __U,
             0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_add_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_addpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) _mm512_setzero_pd (),
             (__mmask8) __U,
             0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_add_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_addps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) __W,
            (__mmask16) __U,
            0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_add_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_addps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) _mm512_setzero_ps (),
            (__mmask16) __U,
            0x04);
}
# 2050 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_sub_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_subss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_sub_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_subss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 2085 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_sub_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_subsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_sub_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_subsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 2121 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sub_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_subpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) __W,
             (__mmask8) __U,
             0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sub_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_subpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) __U,
             0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sub_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_subps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) __W,
            (__mmask16) __U,
            0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sub_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_subps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) __U,
            0x04);
}
# 2195 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_mul_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_mulss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_mul_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_mulss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 2230 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_mul_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_mulsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_mul_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_mulsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 2266 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mul_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_mulpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) __W,
             (__mmask8) __U,
             0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mul_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_mulpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) __U,
             0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mul_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_mulps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) __W,
            (__mmask16) __U,
            0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mul_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_mulps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) __U,
            0x04);
}
# 2340 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_div_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_divss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_div_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_divss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 2376 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_div_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_divsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_div_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_divsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 2412 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_div_pd(__m512d __a, __m512d __b)
{
  return (__m512d)((__v8df)__a/(__v8df)__b);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_div_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_divpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) __W,
             (__mmask8) __U,
             0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_div_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_divpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) __U,
             0x04);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_div_ps(__m512 __a, __m512 __b)
{
  return (__m512)((__v16sf)__a/(__v16sf)__b);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_div_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_divps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) __W,
            (__mmask16) __U,
            0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_div_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_divps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) __U,
            0x04);
}
# 2644 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmadd_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
                                                    (__v8df) __B,
                                                    (__v8df) __C,
                                                    (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
                                                    (__v8df) __B,
                                                    (__v8df) __C,
                                                    (__mmask8) __U,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask3 ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmsub_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
                                                    (__v8df) __B,
                                                    -(__v8df) __C,
                                                    (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
                                                    (__v8df) __B,
                                                    -(__v8df) __C,
                                                    (__mmask8) __U,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz ((__v8df) __A,
                                                     (__v8df) __B,
                                                     -(__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask (-(__v8df) __A,
                                                    (__v8df) __B,
                                                    (__v8df) __C,
                                                    (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask3 (-(__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fnmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz (-(__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask (-(__v8df) __A,
                                                    (__v8df) __B,
                                                    -(__v8df) __C,
                                                    (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fnmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz (-(__v8df) __A,
                                                     (__v8df) __B,
                                                     -(__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}
# 2848 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmadd_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
                                                   (__v16sf) __B,
                                                   (__v16sf) __C,
                                                   (__mmask16) -1,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
                                                   (__v16sf) __B,
                                                   (__v16sf) __C,
                                                   (__mmask16) __U,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask3 ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmsub_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
                                                   (__v16sf) __B,
                                                   -(__v16sf) __C,
                                                   (__mmask16) -1,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
                                                   (__v16sf) __B,
                                                   -(__v16sf) __C,
                                                   (__mmask16) __U,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    -(__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask (-(__v16sf) __A,
                                                   (__v16sf) __B,
                                                   (__v16sf) __C,
                                                   (__mmask16) -1,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask3 (-(__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fnmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz (-(__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask (-(__v16sf) __A,
                                                   (__v16sf) __B,
                                                   -(__v16sf) __C,
                                                   (__mmask16) -1,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fnmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz (-(__v16sf) __A,
                                                    (__v16sf) __B,
                                                    -(__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}
# 3017 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
                                                       (__v8df) __B,
                                                       (__v8df) __C,
                                                       (__mmask8) -1,
                                                       0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmaddsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
                                                       (__v8df) __B,
                                                       (__v8df) __C,
                                                       (__mmask8) __U,
                                                       0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask3 ((__v8df) __A,
                                                        (__v8df) __B,
                                                        (__v8df) __C,
                                                        (__mmask8) __U,
                                                        0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmaddsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_maskz ((__v8df) __A,
                                                        (__v8df) __B,
                                                        (__v8df) __C,
                                                        (__mmask8) __U,
                                                        0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
                                                       (__v8df) __B,
                                                       -(__v8df) __C,
                                                       (__mmask8) -1,
                                                       0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmsubadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
                                                       (__v8df) __B,
                                                       -(__v8df) __C,
                                                       (__mmask8) __U,
                                                       0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmsubadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_maskz ((__v8df) __A,
                                                        (__v8df) __B,
                                                        -(__v8df) __C,
                                                        (__mmask8) __U,
                                                        0x04);
}
# 3136 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
                                                      (__v16sf) __B,
                                                      (__v16sf) __C,
                                                      (__mmask16) -1,
                                                      0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmaddsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
                                                      (__v16sf) __B,
                                                      (__v16sf) __C,
                                                      (__mmask16) __U,
                                                      0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask3 ((__v16sf) __A,
                                                       (__v16sf) __B,
                                                       (__v16sf) __C,
                                                       (__mmask16) __U,
                                                       0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmaddsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_maskz ((__v16sf) __A,
                                                       (__v16sf) __B,
                                                       (__v16sf) __C,
                                                       (__mmask16) __U,
                                                       0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
                                                      (__v16sf) __B,
                                                      -(__v16sf) __C,
                                                      (__mmask16) -1,
                                                      0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmsubadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
                                                      (__v16sf) __B,
                                                      -(__v16sf) __C,
                                                      (__mmask16) __U,
                                                      0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmsubadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_maskz ((__v16sf) __A,
                                                       (__v16sf) __B,
                                                       -(__v16sf) __C,
                                                       (__mmask16) __U,
                                                       0x04);
}
# 3213 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmsubpd512_mask3 ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}
# 3230 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmsubps512_mask3 ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}
# 3247 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmsubaddpd512_mask3 ((__v8df) __A,
                                                        (__v8df) __B,
                                                        (__v8df) __C,
                                                        (__mmask8) __U,
                                                        0x04);
}
# 3264 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmsubaddps512_mask3 ((__v16sf) __A,
                                                       (__v16sf) __B,
                                                       (__v16sf) __C,
                                                       (__mmask16) __U,
                                                       0x04);
}
# 3281 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fnmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfnmaddpd512_mask ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}
# 3298 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fnmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfnmaddps512_mask ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}
# 3322 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fnmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfnmsubpd512_mask ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfnmsubpd512_mask3 ((__v8df) __A,
                                                      (__v8df) __B,
                                                      (__v8df) __C,
                                                      (__mmask8) __U,
                                                      0x04);
}
# 3356 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fnmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfnmsubps512_mask ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfnmsubps512_mask3 ((__v16sf) __A,
                                                     (__v16sf) __B,
                                                     (__v16sf) __C,
                                                     (__mmask16) __U,
                                                     0x04);
}





static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutex2var_epi32(__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_mask ((__v16si) __I
                                                                 ,
                                                       (__v16si) __A,
                                                       (__v16si) __B,
                                                       (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutex2var_epi32 (__m512i __A, __mmask16 __U,
                                __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_mask ((__v16si) __I
                                                                  ,
                                                        (__v16si) __A,
                                                        (__v16si) __B,
                                                        (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutex2var_epi32 (__mmask16 __U, __m512i __A,
                                 __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_maskz ((__v16si) __I
                                                                  ,
                                                        (__v16si) __A,
                                                        (__v16si) __B,
                                                        (__mmask16) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutex2var_epi64(__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_mask ((__v8di) __I
                                                                 ,
                                                       (__v8di) __A,
                                                       (__v8di) __B,
                                                       (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutex2var_epi64 (__m512i __A, __mmask8 __U, __m512i __I,
                                __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_mask ((__v8di) __I
                                                                 ,
                                                       (__v8di) __A,
                                                       (__v8di) __B,
                                                       (__mmask8) __U);
}


static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutex2var_epi64 (__mmask8 __U, __m512i __A,
         __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_maskz ((__v8di) __I
                                                                  ,
                                                        (__v8di) __A,
                                                        (__v8di) __B,
                                                        (__mmask8) __U);
}
# 3513 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_blend_pd(__mmask8 __U, __m512d __A, __m512d __W)
{
  return (__m512d) __builtin_ia32_selectpd_512 ((__mmask8) __U,
                 (__v8df) __W,
                 (__v8df) __A);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_blend_ps(__mmask16 __U, __m512 __A, __m512 __W)
{
  return (__m512) __builtin_ia32_selectps_512 ((__mmask16) __U,
                (__v16sf) __W,
                (__v16sf) __A);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_blend_epi64(__mmask8 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_selectq_512 ((__mmask8) __U,
                (__v8di) __W,
                (__v8di) __A);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_blend_epi32(__mmask16 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_selectd_512 ((__mmask16) __U,
                (__v16si) __W,
                (__v16si) __A);
}
# 3597 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvttps_epu32(__m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) -1,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvttps_epu32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
                   (__v16si) __W,
                   (__mmask16) __U,
                   0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvttps_epu32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
                   (__v16si) _mm512_setzero_si512 (),
                   (__mmask16) __U,
                   0x04);
}
# 3655 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu32_ps (__m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
                 (__v16sf) _mm512_undefined_ps (),
                 (__mmask16) -1,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu32_ps (__m512 __W, __mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
                 (__v16sf) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu32_ps (__mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
                 (__v16sf) _mm512_setzero_ps (),
                 (__mmask16) __U,
                 0x04);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_pd(__m256i __A)
{
  return (__m512d) __builtin_ia32_cvtdq2pd512_mask ((__v8si) __A,
                (__v8df)
                _mm512_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_pd (__m512d __W, __mmask8 __U, __m256i __A)
{
  return (__m512d) __builtin_ia32_cvtdq2pd512_mask ((__v8si) __A,
                (__v8df) __W,
                (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_pd (__mmask8 __U, __m256i __A)
{
  return (__m512d) __builtin_ia32_cvtdq2pd512_mask ((__v8si) __A,
                (__v8df) _mm512_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_ps (__m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
                (__v16sf) _mm512_undefined_ps (),
                (__mmask16) -1,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_ps (__m512 __W, __mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
                (__v16sf) __W,
                (__mmask16) __U,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_ps (__mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
                (__v16sf) _mm512_setzero_ps (),
                (__mmask16) __U,
                0x04);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu32_pd(__m256i __A)
{
  return (__m512d) __builtin_ia32_cvtudq2pd512_mask ((__v8si) __A,
                (__v8df)
                _mm512_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu32_pd (__m512d __W, __mmask8 __U, __m256i __A)
{
  return (__m512d) __builtin_ia32_cvtudq2pd512_mask ((__v8si) __A,
                  (__v8df) __W,
                  (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu32_pd (__mmask8 __U, __m256i __A)
{
  return (__m512d) __builtin_ia32_cvtudq2pd512_mask ((__v8si) __A,
                  (__v8df) _mm512_setzero_pd (),
                  (__mmask8) __U);
}
# 3774 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtpd_ps (__m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
                (__v8sf) _mm256_undefined_ps (),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtpd_ps (__m256 __W, __mmask8 __U, __m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
                (__v8sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtpd_ps (__mmask8 __U, __m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
                (__v8sf) _mm256_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 3847 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtph_ps(__m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
                (__v16sf)
                _mm512_setzero_ps (),
                (__mmask16) -1,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtph_ps (__m512 __W, __mmask16 __U, __m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
                 (__v16sf) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtph_ps (__mmask16 __U, __m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
                 (__v16sf) _mm512_setzero_ps (),
                 (__mmask16) __U,
                 0x04);
}
# 3890 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvttpd_epi32(__m512d __a)
{
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df) __a,
                                                   (__v8si)_mm256_setzero_si256(),
                                                   (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvttpd_epi32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2dq512_mask ((__v8df) __A,
                  (__v8si) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvttpd_epi32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2dq512_mask ((__v8df) __A,
                  (__v8si) _mm256_setzero_si256 (),
                  (__mmask8) __U,
                  0x04);
}
# 3932 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvttps_epi32(__m512 __a)
{
  return (__m512i)
    __builtin_ia32_cvttps2dq512_mask((__v16sf) __a,
                                     (__v16si) _mm512_setzero_si512 (),
                                     (__mmask16) -1, 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvttps_epi32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2dq512_mask ((__v16sf) __A,
                  (__v16si) __W,
                  (__mmask16) __U,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvttps_epi32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2dq512_mask ((__v16sf) __A,
                  (__v16si) _mm512_setzero_si512 (),
                  (__mmask16) __U,
                  0x04);
}
# 3974 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtps_epi32 (__m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
                 (__v16si) _mm512_undefined_epi32 (),
                 (__mmask16) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtps_epi32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
                 (__v16si) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtps_epi32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
                 (__v16si)
                 _mm512_setzero_si512 (),
                 (__mmask16) __U,
                 0x04);
}
# 4017 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtpd_epi32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
                 (__v8si)
                 _mm256_undefined_si256 (),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtpd_epi32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
                 (__v8si) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtpd_epi32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U,
                 0x04);
}
# 4061 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtps_epu32 ( __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A, (__v16si) _mm512_undefined_epi32 (), (__mmask16) -1, 0x04);}






static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtps_epu32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A,
                  (__v16si) __W,
                  (__mmask16) __U,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtps_epu32 ( __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) __U ,
                  0x04);
}
# 4105 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtpd_epu32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
                  (__v8si)
                  _mm256_undefined_si256 (),
                  (__mmask8) -1,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtpd_epu32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
                  (__v8si) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtpd_epu32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U,
                  0x04);
}



static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpackhi_pd(__m512d __a, __m512d __b)
{
  return (__m512d)__builtin_shufflevector((__v8df)__a, (__v8df)__b,
                                          1, 9, 1+2, 9+2, 1+4, 9+4, 1+6, 9+6);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpackhi_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                           (__v8df)_mm512_unpackhi_pd(__A, __B),
                                           (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpackhi_pd(__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                           (__v8df)_mm512_unpackhi_pd(__A, __B),
                                           (__v8df)_mm512_setzero_pd());
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpacklo_pd(__m512d __a, __m512d __b)
{
  return (__m512d)__builtin_shufflevector((__v8df)__a, (__v8df)__b,
                                          0, 8, 0+2, 8+2, 0+4, 8+4, 0+6, 8+6);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpacklo_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                           (__v8df)_mm512_unpacklo_pd(__A, __B),
                                           (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpacklo_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                           (__v8df)_mm512_unpacklo_pd(__A, __B),
                                           (__v8df)_mm512_setzero_pd());
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpackhi_ps(__m512 __a, __m512 __b)
{
  return (__m512)__builtin_shufflevector((__v16sf)__a, (__v16sf)__b,
                                         2, 18, 3, 19,
                                         2+4, 18+4, 3+4, 19+4,
                                         2+8, 18+8, 3+8, 19+8,
                                         2+12, 18+12, 3+12, 19+12);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpackhi_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16) __U,
                                          (__v16sf)_mm512_unpackhi_ps(__A, __B),
                                          (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpackhi_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16) __U,
                                          (__v16sf)_mm512_unpackhi_ps(__A, __B),
                                          (__v16sf)_mm512_setzero_ps());
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpacklo_ps(__m512 __a, __m512 __b)
{
  return (__m512)__builtin_shufflevector((__v16sf)__a, (__v16sf)__b,
                                         0, 16, 1, 17,
                                         0+4, 16+4, 1+4, 17+4,
                                         0+8, 16+8, 1+8, 17+8,
                                         0+12, 16+12, 1+12, 17+12);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpacklo_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16) __U,
                                          (__v16sf)_mm512_unpacklo_ps(__A, __B),
                                          (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpacklo_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16) __U,
                                          (__v16sf)_mm512_unpacklo_ps(__A, __B),
                                          (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpackhi_epi32(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_shufflevector((__v16si)__A, (__v16si)__B,
                                          2, 18, 3, 19,
                                          2+4, 18+4, 3+4, 19+4,
                                          2+8, 18+8, 3+8, 19+8,
                                          2+12, 18+12, 3+12, 19+12);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpackhi_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16) __U,
                                       (__v16si)_mm512_unpackhi_epi32(__A, __B),
                                       (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpackhi_epi32(__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16) __U,
                                       (__v16si)_mm512_unpackhi_epi32(__A, __B),
                                       (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpacklo_epi32(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_shufflevector((__v16si)__A, (__v16si)__B,
                                          0, 16, 1, 17,
                                          0+4, 16+4, 1+4, 17+4,
                                          0+8, 16+8, 1+8, 17+8,
                                          0+12, 16+12, 1+12, 17+12);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpacklo_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16) __U,
                                       (__v16si)_mm512_unpacklo_epi32(__A, __B),
                                       (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpacklo_epi32(__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16) __U,
                                       (__v16si)_mm512_unpacklo_epi32(__A, __B),
                                       (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpackhi_epi64(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_shufflevector((__v8di)__A, (__v8di)__B,
                                          1, 9, 1+2, 9+2, 1+4, 9+4, 1+6, 9+6);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpackhi_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8) __U,
                                        (__v8di)_mm512_unpackhi_epi64(__A, __B),
                                        (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpackhi_epi64(__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8) __U,
                                        (__v8di)_mm512_unpackhi_epi64(__A, __B),
                                        (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpacklo_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_shufflevector((__v8di)__A, (__v8di)__B,
                                          0, 8, 0+2, 8+2, 0+4, 8+4, 0+6, 8+6);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpacklo_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8) __U,
                                        (__v8di)_mm512_unpacklo_epi64(__A, __B),
                                        (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpacklo_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8) __U,
                                        (__v8di)_mm512_unpacklo_epi64(__A, __B),
                                        (__v8di)_mm512_setzero_si512());
}



static __inline __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_test_epi32_mask(__m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestmd512 ((__v16si) __A,
            (__v16si) __B,
            (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_test_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestmd512 ((__v16si) __A,
                 (__v16si) __B, __U);
}

static __inline __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_test_epi64_mask(__m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq512 ((__v8di) __A,
                 (__v8di) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_test_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq512 ((__v8di) __A, (__v8di) __B, __U);
}




static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_loadu_si512 (void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const int *) __P,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) -1);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_loadu_epi32 (__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const int *) __P,
                  (__v16si) __W,
                  (__mmask16) __U);
}


static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_loadu_epi32(__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const int *)__P,
                                                     (__v16si)
                                                     _mm512_setzero_si512 (),
                                                     (__mmask16) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_loadu_epi64 (__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqudi512_mask ((const long long *) __P,
                  (__v8di) __W,
                  (__mmask8) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_loadu_epi64(__mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqudi512_mask ((const long long *)__P,
                                                     (__v8di)
                                                     _mm512_setzero_si512 (),
                                                     (__mmask8) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_loadu_ps (__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadups512_mask ((const float *) __P,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_loadu_ps(__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadups512_mask ((const float *)__P,
                                                  (__v16sf)
                                                  _mm512_setzero_ps (),
                                                  (__mmask16) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_loadu_pd (__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadupd512_mask ((const double *) __P,
                (__v8df) __W,
                (__mmask8) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_loadu_pd(__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadupd512_mask ((const double *)__P,
                                                   (__v8df)
                                                   _mm512_setzero_pd (),
                                                   (__mmask8) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_loadu_pd(double const *__p)
{
  struct __loadu_pd {
    __m512d __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_pd*)__p)->__v;
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_loadu_ps(float const *__p)
{
  struct __loadu_ps {
    __m512 __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_ps*)__p)->__v;
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_ps(float const *__p)
{
  return (__m512) __builtin_ia32_loadaps512_mask ((const __v16sf *)__p,
                                                  (__v16sf)
                                                  _mm512_setzero_ps (),
                                                  (__mmask16) -1);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_load_ps (__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadaps512_mask ((const __v16sf *) __P,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_load_ps(__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadaps512_mask ((const __v16sf *)__P,
                                                  (__v16sf)
                                                  _mm512_setzero_ps (),
                                                  (__mmask16) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_pd(double const *__p)
{
  return (__m512d) __builtin_ia32_loadapd512_mask ((const __v8df *)__p,
                                                   (__v8df)
                                                   _mm512_setzero_pd (),
                                                   (__mmask8) -1);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_load_pd (__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadapd512_mask ((const __v8df *) __P,
                          (__v8df) __W,
                          (__mmask8) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_load_pd(__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadapd512_mask ((const __v8df *)__P,
                                                   (__v8df)
                                                   _mm512_setzero_pd (),
                                                   (__mmask8) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_si512 (void const *__P)
{
  return *(__m512i *) __P;
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_epi32 (void const *__P)
{
  return *(__m512i *) __P;
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_epi64 (void const *__P)
{
  return *(__m512i *) __P;
}



static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_storeu_epi64(void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_storedqudi512_mask ((long long *)__P, (__v8di) __A,
                                     (__mmask8) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_storeu_si512 (void *__P, __m512i __A)
{
  __builtin_ia32_storedqusi512_mask ((int *) __P, (__v16si) __A,
            (__mmask16) -1);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_storeu_epi32(void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_storedqusi512_mask ((int *)__P, (__v16si) __A,
                                     (__mmask16) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_storeu_pd(void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_storeupd512_mask ((double *)__P, (__v8df) __A, (__mmask8) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_storeu_pd(void *__P, __m512d __A)
{
  __builtin_ia32_storeupd512_mask((double *)__P, (__v8df)__A, (__mmask8)-1);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_storeu_ps(void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_storeups512_mask ((float *)__P, (__v16sf) __A,
                                   (__mmask16) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_storeu_ps(void *__P, __m512 __A)
{
  __builtin_ia32_storeups512_mask((float *)__P, (__v16sf)__A, (__mmask16)-1);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_store_pd(void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_storeapd512_mask ((__v8df *)__P, (__v8df) __A, (__mmask8) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_pd(void *__P, __m512d __A)
{
  *(__m512d*)__P = __A;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_store_ps(void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_storeaps512_mask ((__v16sf *)__P, (__v16sf) __A,
                                   (__mmask16) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_ps(void *__P, __m512 __A)
{
  *(__m512*)__P = __A;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_si512 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_epi32 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_epi64 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}



static __inline __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_knot(__mmask16 __M)
{
  return __builtin_ia32_knothi(__M);
}



static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpeq_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__a, (__v16si)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpeq_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__a, (__v16si)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpeq_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 0,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpeq_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 0,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpeq_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__a, (__v8di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpeq_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__a, (__v8di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpeq_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpeq_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 0,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpge_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 5,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpge_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpge_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 5,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpge_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 5,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpge_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpge_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpge_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpge_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpgt_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__a, (__v16si)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpgt_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__a, (__v16si)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpgt_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 6,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpgt_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 6,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpgt_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__a, (__v8di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpgt_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__a, (__v8di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpgt_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpgt_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 6,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmple_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 2,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmple_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmple_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 2,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmple_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 2,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmple_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmple_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmple_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmple_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmplt_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 1,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmplt_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmplt_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 1,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmplt_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 1,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmplt_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmplt_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmplt_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmplt_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpneq_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 4,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpneq_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 4,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpneq_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 4,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpneq_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 4,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpneq_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpneq_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpneq_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpneq_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 4,
                                                __u);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi8_epi32 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbd512_mask ((__v16qi) __A,
                (__v16si)
                _mm512_setzero_si512 (),
                (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi8_epi32 (__m512i __W, __mmask16 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbd512_mask ((__v16qi) __A,
                (__v16si) __W,
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi8_epi32 (__mmask16 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbd512_mask ((__v16qi) __A,
                (__v16si)
                _mm512_setzero_si512 (),
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi8_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbq512_mask ((__v16qi) __A,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi8_epi64 (__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbq512_mask ((__v16qi) __A,
                (__v8di) __W,
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbq512_mask ((__v16qi) __A,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_epi64 (__m256i __X)
{
  return (__m512i) __builtin_ia32_pmovsxdq512_mask ((__v8si) __X,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_epi64 (__m512i __W, __mmask8 __U, __m256i __X)
{
  return (__m512i) __builtin_ia32_pmovsxdq512_mask ((__v8si) __X,
                (__v8di) __W,
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_epi64 (__mmask8 __U, __m256i __X)
{
  return (__m512i) __builtin_ia32_pmovsxdq512_mask ((__v8si) __X,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi16_epi32 (__m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwd512_mask ((__v16hi) __A,
                (__v16si)
                _mm512_setzero_si512 (),
                (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi16_epi32 (__m512i __W, __mmask16 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwd512_mask ((__v16hi) __A,
                (__v16si) __W,
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi16_epi32 (__mmask16 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwd512_mask ((__v16hi) __A,
                (__v16si)
                _mm512_setzero_si512 (),
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi16_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwq512_mask ((__v8hi) __A,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi16_epi64 (__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwq512_mask ((__v8hi) __A,
                (__v8di) __W,
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi16_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovsxwq512_mask ((__v8hi) __A,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu8_epi32 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbd512_mask ((__v16qi) __A,
                (__v16si)
                _mm512_setzero_si512 (),
                (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu8_epi32 (__m512i __W, __mmask16 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbd512_mask ((__v16qi) __A,
                (__v16si) __W,
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu8_epi32 (__mmask16 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbd512_mask ((__v16qi) __A,
                (__v16si)
                _mm512_setzero_si512 (),
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu8_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbq512_mask ((__v16qi) __A,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu8_epi64 (__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbq512_mask ((__v16qi) __A,
                (__v8di) __W,
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbq512_mask ((__v16qi) __A,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu32_epi64 (__m256i __X)
{
  return (__m512i) __builtin_ia32_pmovzxdq512_mask ((__v8si) __X,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu32_epi64 (__m512i __W, __mmask8 __U, __m256i __X)
{
  return (__m512i) __builtin_ia32_pmovzxdq512_mask ((__v8si) __X,
                (__v8di) __W,
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu32_epi64 (__mmask8 __U, __m256i __X)
{
  return (__m512i) __builtin_ia32_pmovzxdq512_mask ((__v8si) __X,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu16_epi32 (__m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwd512_mask ((__v16hi) __A,
                (__v16si)
                _mm512_setzero_si512 (),
                (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu16_epi32 (__m512i __W, __mmask16 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwd512_mask ((__v16hi) __A,
                (__v16si) __W,
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu16_epi32 (__mmask16 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwd512_mask ((__v16hi) __A,
                (__v16si)
                _mm512_setzero_si512 (),
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu16_epi64 (__m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwq512_mask ((__v8hi) __A,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu16_epi64 (__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwq512_mask ((__v8hi) __A,
                (__v8di) __W,
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu16_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m512i) __builtin_ia32_pmovzxwq512_mask ((__v8hi) __A,
                (__v8di)
                _mm512_setzero_si512 (),
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rorv_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rorv_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rorv_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rorv_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rorv_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rorv_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) __U);
}
# 5309 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rolv_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rolv_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rolv_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rolv_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rolv_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rolv_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) __U);
}
# 5458 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_load_epi32 (__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa32load512_mask ((const __v16si *) __P,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_load_epi32 (__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa32load512_mask ((const __v16si *) __P,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_store_epi32 (void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_movdqa32store512_mask ((__v16si *) __P, (__v16si) __A,
          (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mov_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectd_512 ((__mmask16) __U,
                 (__v16si) __A,
                 (__v16si) __W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mov_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectd_512 ((__mmask16) __U,
                 (__v16si) __A,
                 (__v16si) _mm512_setzero_si512 ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mov_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectq_512 ((__mmask8) __U,
                 (__v8di) __A,
                 (__v8di) __W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mov_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectq_512 ((__mmask8) __U,
                 (__v8di) __A,
                 (__v8di) _mm512_setzero_si512 ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_load_epi64 (__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa64load512_mask ((const __v8di *) __P,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_load_epi64 (__mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa64load512_mask ((const __v8di *) __P,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_store_epi64 (void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_movdqa64store512_mask ((__v8di *) __P, (__v8di) __A,
          (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_movedup_pd (__m512d __A)
{
  return (__m512d)__builtin_shufflevector((__v8df)__A, (__v8df)__A,
                                          0, 0, 2, 2, 4, 4, 6, 6);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_movedup_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_movedup_pd(__A),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_movedup_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_movedup_pd(__A),
                                              (__v8df)_mm512_setzero_pd());
}
# 5726 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_getexp_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_getexpsd128_round_mask ((__v2df) __A,
                 (__v2df) __B, (__v2df) _mm_setzero_pd(), (__mmask8) -1, 0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_getexp_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_getexpsd128_round_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_getexp_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_getexpsd128_round_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) _mm_setzero_pd (),
          (__mmask8) __U,
          0x04);
}
# 5771 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_getexp_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_getexpss128_round_mask ((__v4sf) __A,
                (__v4sf) __B, (__v4sf) _mm_setzero_ps(), (__mmask8) -1, 0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_getexp_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_getexpss128_round_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_getexp_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_getexpss128_round_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) _mm_setzero_pd (),
          (__mmask8) __U,
          0x04);
}
# 5900 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kmov (__mmask16 __A)
{
  return __A;
}
# 5917 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2_permutex2var_epi32 (__m512i __A, __m512i __I,
         __mmask16 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2vard512_mask ((__v16si) __A,
                   (__v16si) __I
                             ,
                   (__v16si) __B,
                   (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sll_epi32 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_pslld512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sll_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_pslld512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si) __W,
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sll_epi32 (__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_pslld512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sll_epi64 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psllq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sll_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psllq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di) __W,
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sll_epi64 (__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psllq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sllv_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sllv_epi32 (__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sllv_epi32 (__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sllv_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di)
             _mm512_undefined_pd (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sllv_epi64 (__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di) __W,
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sllv_epi64 (__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psllv8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sra_epi32 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrad512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sra_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrad512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si) __W,
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sra_epi32 (__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrad512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sra_epi64 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psraq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sra_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psraq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di) __W,
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sra_epi64 (__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psraq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srav_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srav_epi32 (__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srav_epi32 (__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srav_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srav_epi64 (__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di) __W,
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srav_epi64 (__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrav8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srl_epi32 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrld512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srl_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrld512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si) __W,
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srl_epi32 (__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrld512_mask ((__v16si) __A,
             (__v4si) __B,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srl_epi64 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srl_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di) __W,
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srl_epi64 (__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlq512_mask ((__v8di) __A,
             (__v2di) __B,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srlv_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srlv_epi32 (__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srlv_epi32 (__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv16si_mask ((__v16si) __X,
              (__v16si) __Y,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srlv_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srlv_epi64 (__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di) __W,
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srlv_epi64 (__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_psrlv8di_mask ((__v8di) __X,
             (__v8di) __Y,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) __U);
}
# 6324 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ unsigned __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtsd_u32 (__m128d __A)
{
  return (unsigned) __builtin_ia32_vcvtsd2usi32 ((__v2df) __A,
             0x04);
}





static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtsd_u64 (__m128d __A)
{
  return (unsigned long long) __builtin_ia32_vcvtsd2usi64 ((__v2df)
                 __A,
                 0x04);
}
# 6358 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ unsigned __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtss_u32 (__m128 __A)
{
  return (unsigned) __builtin_ia32_vcvtss2usi32 ((__v4sf) __A,
             0x04);
}





static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtss_u64 (__m128 __A)
{
  return (unsigned long long) __builtin_ia32_vcvtss2usi64 ((__v4sf)
                 __A,
                 0x04);
}







static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttsd_i32 (__m128d __A)
{
  return (int) __builtin_ia32_vcvttsd2si32 ((__v2df) __A,
              0x04);
}







static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttsd_i64 (__m128d __A)
{
  return (long long) __builtin_ia32_vcvttsd2si64 ((__v2df) __A,
              0x04);
}




static __inline__ unsigned __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttsd_u32 (__m128d __A)
{
  return (unsigned) __builtin_ia32_vcvttsd2usi32 ((__v2df) __A,
              0x04);
}





static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttsd_u64 (__m128d __A)
{
  return (unsigned long long) __builtin_ia32_vcvttsd2usi64 ((__v2df)
                  __A,
                  0x04);
}







static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttss_i32 (__m128 __A)
{
  return (int) __builtin_ia32_vcvttss2si32 ((__v4sf) __A,
              0x04);
}







static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttss_i64 (__m128 __A)
{
  return (long long) __builtin_ia32_vcvttss2si64 ((__v4sf) __A,
              0x04);
}




static __inline__ unsigned __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttss_u32 (__m128 __A)
{
  return (unsigned) __builtin_ia32_vcvttss2usi32 ((__v4sf) __A,
              0x04);
}





static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttss_u64 (__m128 __A)
{
  return (unsigned long long) __builtin_ia32_vcvttss2usi64 ((__v4sf)
                  __A,
                  0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2_permutex2var_pd (__m512d __A, __m512i __I, __mmask8 __U,
            __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermi2varpd512_mask ((__v8df) __A,
              (__v8di) __I
                        ,
              (__v8df) __B,
              (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2_permutex2var_ps (__m512 __A, __m512i __I, __mmask16 __U,
            __m512 __B)
{
  return (__m512) __builtin_ia32_vpermi2varps512_mask ((__v16sf) __A,
                   (__v16si) __I
                             ,
                   (__v16sf) __B,
                   (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2_permutex2var_epi64 (__m512i __A, __m512i __I,
         __mmask8 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2varq512_mask ((__v8di) __A,
                   (__v8di) __I
                             ,
                   (__v8di) __B,
                   (__mmask8) __U);
}
# 6558 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutevar_pd (__m512d __A, __m512i __C)
{
  return (__m512d) __builtin_ia32_vpermilvarpd512_mask ((__v8df) __A,
              (__v8di) __C,
              (__v8df)
              _mm512_undefined_pd (),
              (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutevar_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512i __C)
{
  return (__m512d) __builtin_ia32_vpermilvarpd512_mask ((__v8df) __A,
              (__v8di) __C,
              (__v8df) __W,
              (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutevar_pd (__mmask8 __U, __m512d __A, __m512i __C)
{
  return (__m512d) __builtin_ia32_vpermilvarpd512_mask ((__v8df) __A,
              (__v8di) __C,
              (__v8df)
              _mm512_setzero_pd (),
              (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutevar_ps (__m512 __A, __m512i __C)
{
  return (__m512) __builtin_ia32_vpermilvarps512_mask ((__v16sf) __A,
                   (__v16si) __C,
                   (__v16sf)
                   _mm512_undefined_ps (),
                   (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutevar_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512i __C)
{
  return (__m512) __builtin_ia32_vpermilvarps512_mask ((__v16sf) __A,
                   (__v16si) __C,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutevar_ps (__mmask16 __U, __m512 __A, __m512i __C)
{
  return (__m512) __builtin_ia32_vpermilvarps512_mask ((__v16sf) __A,
                   (__v16si) __C,
                   (__v16sf)
                   _mm512_setzero_ps (),
                   (__mmask16) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutex2var_pd(__m512d __A, __m512i __I, __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_mask ((__v8di) __I
                              ,
                    (__v8df) __A,
                    (__v8df) __B,
                    (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutex2var_pd (__m512d __A, __mmask8 __U, __m512i __I, __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_mask ((__v8di) __I
                              ,
                    (__v8df) __A,
                    (__v8df) __B,
                    (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutex2var_pd (__mmask8 __U, __m512d __A, __m512i __I,
            __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_maskz ((__v8di) __I
                                                                   ,
                                                         (__v8df) __A,
                                                         (__v8df) __B,
                                                         (__mmask8) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutex2var_ps(__m512 __A, __m512i __I, __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_mask ((__v16si) __I
                                                                   ,
                                                         (__v16sf) __A,
                                                         (__v16sf) __B,
                                                         (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutex2var_ps (__m512 __A, __mmask16 __U, __m512i __I, __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_mask ((__v16si) __I
                                                                   ,
                                                         (__v16sf) __A,
                                                         (__v16sf) __B,
                                                         (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutex2var_ps (__mmask16 __U, __m512 __A, __m512i __I,
            __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_maskz ((__v16si) __I
                                                                  ,
                                                        (__v16sf) __A,
                                                        (__v16sf) __B,
                                                        (__mmask16) __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_testn_epi32_mask (__m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmd512 ((__v16si) __A,
             (__v16si) __B,
             (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_testn_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmd512 ((__v16si) __A,
             (__v16si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_testn_epi64_mask (__m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq512 ((__v8di) __A,
            (__v8di) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_testn_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq512 ((__v8di) __A,
            (__v8di) __B, __U);
}
# 6723 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvttpd_epu32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
                  (__v8si)
                  _mm256_undefined_si256 (),
                  (__mmask8) -1,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvttpd_epu32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
                  (__v8si) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvttpd_epu32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U,
                  0x04);
}
# 6854 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_scalef_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
                (__v8df) __B,
                (__v8df)
                _mm512_undefined_pd (),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_scalef_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
                (__v8df) __B,
                (__v8df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_scalef_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
                (__v8df) __B,
                (__v8df)
                _mm512_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 6904 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_scalef_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
               (__v16sf) __B,
               (__v16sf)
               _mm512_undefined_ps (),
               (__mmask16) -1,
               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_scalef_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
               (__v16sf) __B,
               (__v16sf) __W,
               (__mmask16) __U,
               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_scalef_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
               (__v16sf) __B,
               (__v16sf)
               _mm512_setzero_ps (),
               (__mmask16) __U,
               0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_scalef_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_scalefsd_round_mask ((__v2df) __A,
              (__v2df)( __B), (__v2df) _mm_setzero_pd(),
              (__mmask8) -1,
              0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_scalef_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_scalefsd_round_mask ( (__v2df) __A,
                 (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_scalef_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_scalefsd_round_mask ( (__v2df) __A,
                 (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 6989 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_scalef_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_scalefss_round_mask ((__v4sf) __A,
             (__v4sf)( __B), (__v4sf) _mm_setzero_ps(),
             (__mmask8) -1,
             0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_scalef_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_scalefss_round_mask ( (__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_scalef_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_scalefss_round_mask ( (__v4sf) __A,
                 (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 7191 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_sqrt_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_sqrtsd_round_mask ( (__v2df) __A,
                 (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_sqrt_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_sqrtsd_round_mask ( (__v2df) __A,
                 (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 7229 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_sqrt_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_sqrtss_round_mask ( (__v4sf) __A,
                 (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_sqrt_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_sqrtss_round_mask ( (__v4sf) __A,
                 (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}







static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcast_f32x4 (__m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x4_512 ((__v4sf) __A,
                 (__v16sf)
                 _mm512_undefined_ps (),
                 (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcast_f32x4 (__m512 __O, __mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x4_512 ((__v4sf) __A,
                 (__v16sf) __O,
                 __M);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcast_f32x4 (__mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x4_512 ((__v4sf) __A,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 __M);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcast_f64x4 (__m256d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x4_512 ((__v4df) __A,
                  (__v8df)
                  _mm512_undefined_pd (),
                  (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcast_f64x4 (__m512d __O, __mmask8 __M, __m256d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x4_512 ((__v4df) __A,
                  (__v8df) __O,
                  __M);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcast_f64x4 (__mmask8 __M, __m256d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x4_512 ((__v4df) __A,
                  (__v8df)
                  _mm512_setzero_pd (),
                  __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcast_i32x4 (__m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x4_512 ((__v4si) __A,
                  (__v16si)
                  _mm512_undefined_epi32 (),
                  (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcast_i32x4 (__m512i __O, __mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x4_512 ((__v4si) __A,
                  (__v16si) __O,
                  __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcast_i32x4 (__mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x4_512 ((__v4si) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcast_i64x4 (__m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x4_512 ((__v4di) __A,
                  (__v8di)
                  _mm512_undefined_epi32 (),
                  (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcast_i64x4 (__m512i __O, __mmask8 __M, __m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x4_512 ((__v4di) __A,
                  (__v8di) __O,
                  __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcast_i64x4 (__mmask8 __M, __m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x4_512 ((__v4di) __A,
                  (__v8di)
                  _mm512_setzero_si512 (),
                  __M);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcastsd_pd (__m512d __O, __mmask8 __M, __m128d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512(__M,
                                              (__v8df) _mm512_broadcastsd_pd(__A),
                                              (__v8df) __O);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcastsd_pd (__mmask8 __M, __m128d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512(__M,
                                              (__v8df) _mm512_broadcastsd_pd(__A),
                                              (__v8df) _mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcastss_ps (__m512 __O, __mmask16 __M, __m128 __A)
{
  return (__m512)__builtin_ia32_selectps_512(__M,
                                             (__v16sf) _mm512_broadcastss_ps(__A),
                                             (__v16sf) __O);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcastss_ps (__mmask16 __M, __m128 __A)
{
  return (__m512)__builtin_ia32_selectps_512(__M,
                                             (__v16sf) _mm512_broadcastss_ps(__A),
                                             (__v16sf) _mm512_setzero_ps());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
               (__v16qi) _mm_undefined_si128 (),
               (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovsdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
               (__v16hi) _mm256_undefined_si256 (),
               (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
               (__v16hi) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
               (__v16hi) _mm256_setzero_si256 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi32_storeu_epi16 (void *__P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovsdw512mem_mask ((__v16hi*) __P, (__v16si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
               (__v16qi) _mm_undefined_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi64_epi32 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
               (__v8si) _mm256_undefined_si256 (),
               (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
               (__v8si) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
               (__v8si) _mm256_setzero_si256 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_storeu_epi32 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqd512mem_mask ((__v8si *) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
               (__v8hi) _mm_undefined_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
               (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqw512mem_mask ((__v8hi *) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
                (__v16qi) _mm_undefined_si128 (),
                (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovusdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
                (__v16hi) _mm256_undefined_si256 (),
                (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
                (__v16hi) __O,
                __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
                (__v16hi) _mm256_setzero_si256 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi32_storeu_epi16 (void *__P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovusdw512mem_mask ((__v16hi*) __P, (__v16si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
                (__v16qi) _mm_undefined_si128 (),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi64_epi32 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
                (__v8si) _mm256_undefined_si256 (),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
                (__v8si) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
                (__v8si) _mm256_setzero_si256 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_storeu_epi32 (void* __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqd512mem_mask ((__v8si*) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
                (__v8hi) _mm_undefined_si128 (),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_storeu_epi16 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqw512mem_mask ((__v8hi*) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
              (__v16qi) _mm_undefined_si128 (),
              (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
              (__v16hi) _mm256_undefined_si256 (),
              (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
              (__v16hi) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
              (__v16hi) _mm256_setzero_si256 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_storeu_epi16 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovdw512mem_mask ((__v16hi *) __P, (__v16si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
              (__v16qi) _mm_undefined_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi64_epi32 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
              (__v8si) _mm256_undefined_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
              (__v8si) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
              (__v8si) _mm256_setzero_si256 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_storeu_epi32 (void* __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqd512mem_mask ((__v8si *) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
              (__v8hi) _mm_undefined_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
              (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_storeu_epi16 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqw512mem_mask ((__v8hi *) __P, (__v8di) __A, __M);
}
# 8030 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_getexp_pd (__m512d __A)
{
  return (__m512d) __builtin_ia32_getexppd512_mask ((__v8df) __A,
                (__v8df) _mm512_undefined_pd (),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_getexp_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_getexppd512_mask ((__v8df) __A,
                (__v8df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_getexp_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_getexppd512_mask ((__v8df) __A,
                (__v8df) _mm512_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 8072 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_getexp_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_getexpps512_mask ((__v16sf) __A,
               (__v16sf) _mm512_undefined_ps (),
               (__mmask16) -1,
               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_getexp_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_getexpps512_mask ((__v16sf) __A,
               (__v16sf) __W,
               (__mmask16) __U,
               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_getexp_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_getexpps512_mask ((__v16sf) __A,
               (__v16sf) _mm512_setzero_ps (),
               (__mmask16) __U,
               0x04);
}
# 8275 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fmadd_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fmadd_ss (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
 return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fmadd_ss (__m128 __W, __m128 __X, __m128 __Y, __mmask8 __U)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask3 ((__v4sf) __W,
          (__v4sf) __X,
          (__v4sf) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fmsub_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __A,
          -(__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fmsub_ss (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
 return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __A,
          (__v4sf) __B,
          -(__v4sf) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fmsub_ss (__m128 __W, __m128 __X, __m128 __Y, __mmask8 __U)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask3 ((__v4sf) __W,
          (__v4sf) __X,
          -(__v4sf) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fnmadd_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask (-(__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fnmadd_ss (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
 return (__m128) __builtin_ia32_vfmaddss3_maskz (-(__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fnmadd_ss (__m128 __W, __m128 __X, __m128 __Y, __mmask8 __U)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask3 (-(__v4sf) __W,
          (__v4sf) __X,
          (__v4sf) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fnmsub_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask (-(__v4sf) __A,
          -(__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fnmsub_ss (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
 return (__m128) __builtin_ia32_vfmaddss3_maskz (-(__v4sf) __A,
          (__v4sf) __B,
          -(__v4sf) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fnmsub_ss (__m128 __W, __m128 __X, __m128 __Y, __mmask8 __U)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask3 (-(__v4sf) __W,
          (__v4sf) __X,
          -(__v4sf) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fmadd_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fmadd_sd (__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_maskz ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fmadd_sd (__m128d __W, __m128d __X, __m128d __Y, __mmask8 __U)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask3 ((__v2df) __W,
          (__v2df) __X,
          (__v2df) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fmsub_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask ( (__v2df) __A,
          -(__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fmsub_sd (__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_maskz ( (__v2df) __A,
          (__v2df) __B,
          -(__v2df) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fmsub_sd (__m128d __W, __m128d __X, __m128d __Y, __mmask8 __U)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask3 ((__v2df) __W,
          (__v2df) __X,
          -(__v2df) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fnmadd_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask ( -(__v2df) __A,
          (__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fnmadd_sd (__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_maskz ( -(__v2df) __A,
          (__v2df) __B,
          (__v2df) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fnmadd_sd (__m128d __W, __m128d __X, __m128d __Y, __mmask8 __U)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask3 (-(__v2df) __W,
          (__v2df) __X,
          (__v2df) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fnmsub_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask ( -(__v2df) __A,
          -(__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fnmsub_sd (__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_maskz ( -(__v2df) __A,
          (__v2df) __B,
          -(__v2df) __C,
          (__mmask8) __U,
          0x04);
}
# 8644 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fnmsub_sd (__m128d __W, __m128d __X, __m128d __Y, __mmask8 __U)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask3 (-(__v2df) (__W),
          (__v2df) __X,
          -(__v2df) (__Y),
          (__mmask8) __U,
          0x04);
}
# 8704 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutexvar_pd (__m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
                 (__v8di) __X,
                 (__v8df) _mm512_undefined_pd (),
                 (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutexvar_pd (__m512d __W, __mmask8 __U, __m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
                 (__v8di) __X,
                 (__v8df) __W,
                 (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutexvar_pd (__mmask8 __U, __m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
                 (__v8di) __X,
                 (__v8df) _mm512_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutexvar_epi64 (__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
                 (__v8di) __X,
                 (__v8di) _mm512_setzero_si512 (),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutexvar_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
                 (__v8di) __X,
                 (__v8di) _mm512_undefined_epi32 (),
                 (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutexvar_epi64 (__m512i __W, __mmask8 __M, __m512i __X,
             __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
                 (__v8di) __X,
                 (__v8di) __W,
                 __M);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutexvar_ps (__m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
                (__v16si) __X,
                (__v16sf) _mm512_undefined_ps (),
                (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutexvar_ps (__m512 __W, __mmask16 __U, __m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
                (__v16si) __X,
                (__v16sf) __W,
                (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutexvar_ps (__mmask16 __U, __m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
                (__v16si) __X,
                (__v16sf) _mm512_setzero_ps (),
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutexvar_epi32 (__mmask16 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
                 (__v16si) __X,
                 (__v16si) _mm512_setzero_si512 (),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutexvar_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
                 (__v16si) __X,
                 (__v16si) _mm512_undefined_epi32 (),
                 (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutexvar_epi32 (__m512i __W, __mmask16 __M, __m512i __X,
             __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
                 (__v16si) __X,
                 (__v16si) __W,
                 __M);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kand (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kandhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kandn (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kandnhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_korhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kortestc (__mmask16 __A, __mmask16 __B)
{
  return __builtin_ia32_kortestchi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kortestz (__mmask16 __A, __mmask16 __B)
{
  return __builtin_ia32_kortestzhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kunpackb (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kunpckhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kxnor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kxnorhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kxor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kxorhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_stream_si512 (__m512i * __P, __m512i __A)
{
  __builtin_nontemporal_store((__v8di)__A, (__v8di*)__P);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_stream_load_si512 (void *__P)
{
  return __builtin_ia32_movntdqa512 ((__v8di *)__P);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_stream_pd (double *__P, __m512d __A)
{
  __builtin_nontemporal_store((__v8df)__A, (__v8df*)__P);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_stream_ps (float *__P, __m512 __A)
{
  __builtin_nontemporal_store((__v16sf)__A, (__v16sf*)__P);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compress_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_compressdf512_mask ((__v8df) __A,
                  (__v8df) __W,
                  (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_compress_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_compressdf512_mask ((__v8df) __A,
                  (__v8df)
                  _mm512_setzero_pd (),
                  (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compress_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compressdi512_mask ((__v8di) __A,
                  (__v8di) __W,
                  (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_compress_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compressdi512_mask ((__v8di) __A,
                  (__v8di)
                  _mm512_setzero_si512 (),
                  (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compress_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_compresssf512_mask ((__v16sf) __A,
                 (__v16sf) __W,
                 (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_compress_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_compresssf512_mask ((__v16sf) __A,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compress_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compresssi512_mask ((__v16si) __A,
                  (__v16si) __W,
                  (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_compress_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compresssi512_mask ((__v16si) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) __U);
}
# 8998 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_movehdup_ps (__m512 __A)
{
  return (__m512)__builtin_shufflevector((__v16sf)__A, (__v16sf)__A,
                         1, 1, 3, 3, 5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 15, 15);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_movehdup_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_movehdup_ps(__A),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_movehdup_ps (__mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_movehdup_ps(__A),
                                             (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_moveldup_ps (__m512 __A)
{
  return (__m512)__builtin_shufflevector((__v16sf)__A, (__v16sf)__A,
                         0, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_moveldup_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_moveldup_ps(__A),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_moveldup_ps (__mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_moveldup_ps(__A),
                                             (__v16sf)_mm512_setzero_ps());
}
# 9074 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expand_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_expanddf512_mask ((__v8df) __A,
                (__v8df) __W,
                (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expand_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_expanddf512_mask ((__v8df) __A,
                (__v8df) _mm512_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expand_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expanddi512_mask ((__v8di) __A,
                (__v8di) __W,
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expand_epi64 ( __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expanddi512_mask ((__v8di) __A,
                (__v8di) _mm512_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expandloadu_pd(__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_expandloaddf512_mask ((const __v8df *)__P,
              (__v8df) __W,
              (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expandloadu_pd(__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_expandloaddf512_mask ((const __v8df *)__P,
              (__v8df) _mm512_setzero_pd(),
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expandloadu_epi64(__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloaddi512_mask ((const __v8di *)__P,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expandloadu_epi64(__mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloaddi512_mask ((const __v8di *)__P,
              (__v8di) _mm512_setzero_pd(),
              (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expandloadu_ps(__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_expandloadsf512_mask ((const __v16sf *)__P,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expandloadu_ps(__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_expandloadsf512_mask ((const __v16sf *)__P,
                   (__v16sf) _mm512_setzero_ps(),
                   (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expandloadu_epi32(__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloadsi512_mask ((const __v16si *)__P,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expandloadu_epi32(__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloadsi512_mask ((const __v16si *)__P,
              (__v16si) _mm512_setzero_ps(),
              (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expand_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_expandsf512_mask ((__v16sf) __A,
               (__v16sf) __W,
               (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expand_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_expandsf512_mask ((__v16sf) __A,
               (__v16sf) _mm512_setzero_ps(),
               (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expand_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expandsi512_mask ((__v16si) __A,
                (__v16si) __W,
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expand_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expandsi512_mask ((__v16si) __A,
                (__v16si) _mm512_setzero_ps(),
                (__mmask16) __U);
}
# 9217 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtps_pd (__m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
                (__v8df)
                _mm512_undefined_pd (),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtps_pd (__m512d __W, __mmask8 __U, __m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
                (__v8df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtps_pd (__mmask8 __U, __m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
                (__v8df)
                _mm512_setzero_pd (),
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mov_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_selectpd_512 ((__mmask8) __U,
              (__v8df) __A,
              (__v8df) __W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mov_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_selectpd_512 ((__mmask8) __U,
              (__v8df) __A,
              (__v8df) _mm512_setzero_pd ());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mov_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_selectps_512 ((__mmask16) __U,
             (__v16sf) __A,
             (__v16sf) __W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mov_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_selectps_512 ((__mmask16) __U,
             (__v16sf) __A,
             (__v16sf) _mm512_setzero_ps ());
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compressstoreu_pd (void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_compressstoredf512_mask ((__v8df *) __P, (__v8df) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compressstoreu_epi64 (void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_compressstoredi512_mask ((__v8di *) __P, (__v8di) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compressstoreu_ps (void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_compressstoresf512_mask ((__v16sf *) __P, (__v16sf) __A,
            (__mmask16) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compressstoreu_epi32 (void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_compressstoresi512_mask ((__v16si *) __P, (__v16si) __A,
            (__mmask16) __U);
}
# 9324 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_cvtsd_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128d __B)
{
  return __builtin_ia32_cvtsd2ss_round_mask ((__v4sf)(__A),
                                             (__v2df)(__B),
                                             (__v4sf)(__W),
                                             (__mmask8)(__U), 0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_cvtsd_ss (__mmask8 __U, __m128 __A, __m128d __B)
{
  return __builtin_ia32_cvtsd2ss_round_mask ((__v4sf)(__A),
                                             (__v2df)(__B),
                                             (__v4sf)_mm_setzero_ps(),
                                             (__mmask8)(__U), 0x04);
}
# 9391 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_cvtss_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128 __B)
{
  return __builtin_ia32_cvtss2sd_round_mask((__v2df)(__A),
                                              (__v4sf)(__B),
                                              (__v2df)(__W),
                                              (__mmask8)(__U), 0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_cvtss_sd (__mmask8 __U, __m128d __A, __m128 __B)
{
  return __builtin_ia32_cvtss2sd_round_mask((__v2df)(__A),
                                              (__v4sf)(__B),
                                              (__v2df)_mm_setzero_pd(),
                                              (__mmask8)(__U), 0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtu32_sd (__m128d __A, unsigned __B)
{
  return (__m128d) __builtin_ia32_cvtusi2sd32 ((__v2df) __A, __B);
}





static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtu64_sd (__m128d __A, unsigned long long __B)
{
  return (__m128d) __builtin_ia32_cvtusi2sd64 ((__v2df) __A, __B,
                 0x04);
}





static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtu32_ss (__m128 __A, unsigned __B)
{
  return (__m128) __builtin_ia32_cvtusi2ss32 ((__v4sf) __A, __B,
                0x04);
}





static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtu64_ss (__m128 __A, unsigned long long __B)
{
  return (__m128) __builtin_ia32_cvtusi2ss64 ((__v4sf) __A, __B,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_set1_epi32 (__m512i __O, __mmask16 __M, int __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512_gpr_mask (__A, (__v16si) __O,
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_set1_epi64 (__m512i __O, __mmask8 __M, long long __A)
{
  return (__m512i) __builtin_ia32_pbroadcastq512_gpr_mask (__A, (__v8di) __O,
                 __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_epi32 (int __A, int __B, int __C, int __D,
     int __E, int __F, int __G, int __H,
     int __I, int __J, int __K, int __L,
     int __M, int __N, int __O, int __P)
{
  return __extension__ (__m512i)(__v16si)
  { __P, __O, __N, __M, __L, __K, __J, __I,
    __H, __G, __F, __E, __D, __C, __B, __A };
}






static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_epi64 (long long __A, long long __B, long long __C,
     long long __D, long long __E, long long __F,
     long long __G, long long __H)
{
  return __extension__ (__m512i) (__v8di)
  { __H, __G, __F, __E, __D, __C, __B, __A };
}




static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_pd (double __A, double __B, double __C, double __D,
        double __E, double __F, double __G, double __H)
{
  return __extension__ (__m512d)
  { __H, __G, __F, __E, __D, __C, __B, __A };
}




static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_ps (float __A, float __B, float __C, float __D,
        float __E, float __F, float __G, float __H,
        float __I, float __J, float __K, float __L,
        float __M, float __N, float __O, float __P)
{
  return __extension__ (__m512)
  { __P, __O, __N, __M, __L, __K, __J, __I,
    __H, __G, __F, __E, __D, __C, __B, __A };
}





static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_abs_ps(__m512 A)
{
  return (__m512)_mm512_and_epi32(_mm512_set1_epi32(0x7FFFFFFF),(__m512i)A) ;
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_abs_ps(__m512 W, __mmask16 K, __m512 A)
{
  return (__m512)_mm512_mask_and_epi32((__m512i)W, K, _mm512_set1_epi32(0x7FFFFFFF),(__m512i)A) ;
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_abs_pd(__m512d A)
{
  return (__m512d)_mm512_and_epi64(_mm512_set1_epi64(0x7FFFFFFFFFFFFFFF),(__v8di)A) ;
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_abs_pd(__m512d W, __mmask8 K, __m512d A)
{
  return (__m512d)_mm512_mask_and_epi64((__v8di)W, K, _mm512_set1_epi64(0x7FFFFFFFFFFFFFFF),(__v8di)A);
}
# 100 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_setzero_di(void) {
  return (__m128i)(__v2di){ 0LL, 0LL};
}



static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpeq_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__a, (__v4si)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpeq_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__a, (__v4si)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpeq_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpeq_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 0,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpeq_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__a, (__v8si)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpeq_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__a, (__v8si)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpeq_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpeq_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 0,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpeq_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__a, (__v2di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpeq_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__a, (__v2di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpeq_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpeq_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 0,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpeq_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__a, (__v4di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpeq_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__a, (__v4di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpeq_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpeq_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 0,
                                                __u);
}


static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpge_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpge_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpge_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpge_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 5,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpge_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpge_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpge_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpge_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 5,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpge_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpge_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpge_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpge_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 5,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpge_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpge_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpge_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpge_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 5,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpgt_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__a, (__v4si)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpgt_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__a, (__v4si)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpgt_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpgt_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 6,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpgt_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__a, (__v8si)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpgt_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__a, (__v8si)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpgt_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpgt_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 6,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpgt_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__a, (__v2di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpgt_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__a, (__v2di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpgt_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpgt_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 6,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpgt_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__a, (__v4di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpgt_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__a, (__v4di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpgt_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpgt_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 6,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmple_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmple_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmple_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmple_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 2,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmple_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmple_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmple_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmple_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 2,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmple_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmple_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmple_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmple_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 2,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmple_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmple_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmple_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmple_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 2,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmplt_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmplt_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmplt_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmplt_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 1,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmplt_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmplt_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmplt_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmplt_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 1,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmplt_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmplt_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmplt_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmplt_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 1,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmplt_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmplt_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmplt_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmplt_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 1,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpneq_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpneq_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpneq_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpneq_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 4,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpneq_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpneq_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpneq_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpneq_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 4,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpneq_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpneq_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpneq_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpneq_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 4,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpneq_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpneq_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpneq_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpneq_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 4,
                                                __u);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_add_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_paddd256_mask ((__v8si) __A,
             (__v8si) __B,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_add_epi32 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_paddd256_mask ((__v8si) __A,
             (__v8si) __B,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_add_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_paddq256_mask ((__v4di) __A,
             (__v4di) __B,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_add_epi64 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_paddq256_mask ((__v4di) __A,
             (__v4di) __B,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sub_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_psubd256_mask ((__v8si) __A,
             (__v8si) __B,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sub_epi32 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psubd256_mask ((__v8si) __A,
             (__v8si) __B,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sub_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_psubq256_mask ((__v4di) __A,
             (__v4di) __B,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sub_epi64 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psubq256_mask ((__v4di) __A,
             (__v4di) __B,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_add_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_paddd128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_add_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_paddd128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_add_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_paddq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_add_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_paddq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sub_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psubd128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sub_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psubd128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sub_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psubq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sub_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psubq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mul_epi32 (__m256i __W, __mmask8 __M, __m256i __X,
           __m256i __Y)
{
  return (__m256i) __builtin_ia32_pmuldq256_mask ((__v8si) __X,
              (__v8si) __Y,
              (__v4di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mul_epi32 (__mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_pmuldq256_mask ((__v8si) __X,
              (__v8si) __Y,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mul_epi32 (__m128i __W, __mmask8 __M, __m128i __X,
        __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmuldq128_mask ((__v4si) __X,
              (__v4si) __Y,
              (__v2di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mul_epi32 (__mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmuldq128_mask ((__v4si) __X,
              (__v4si) __Y,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mul_epu32 (__m256i __W, __mmask8 __M, __m256i __X,
           __m256i __Y)
{
  return (__m256i) __builtin_ia32_pmuludq256_mask ((__v8si) __X,
               (__v8si) __Y,
               (__v4di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mul_epu32 (__mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_pmuludq256_mask ((__v8si) __X,
               (__v8si) __Y,
               (__v4di)
               _mm256_setzero_si256 (),
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mul_epu32 (__m128i __W, __mmask8 __M, __m128i __X,
        __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmuludq128_mask ((__v4si) __X,
               (__v4si) __Y,
               (__v2di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mul_epu32 (__mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_pmuludq128_mask ((__v4si) __X,
               (__v4si) __Y,
               (__v2di)
               _mm_setzero_si128 (),
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mullo_epi32 (__mmask8 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pmulld256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mullo_epi32 (__m256i __W, __mmask8 __M, __m256i __A,
       __m256i __B)
{
  return (__m256i) __builtin_ia32_pmulld256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mullo_epi32 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pmulld128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mullo_epi32 (__m128i __W, __mmask16 __M, __m128i __A,
          __m128i __B)
{
  return (__m128i) __builtin_ia32_pmulld128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_and_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_and_si256(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_and_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_and_epi32(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_and_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_and_si128(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_and_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_and_epi32(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_andnot_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                          (__v8si)_mm256_andnot_si256(__A, __B),
                                          (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_andnot_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_andnot_epi32(_mm256_setzero_si256(),
                                           __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_andnot_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_andnot_si128(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_andnot_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_andnot_epi32(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_or_epi32 (__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_or_si256(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_or_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_or_epi32(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_or_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_or_si128(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_or_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_or_epi32(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_xor_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_xor_si256(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_xor_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_xor_epi32(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_xor_epi32(__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_xor_si128(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_xor_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_xor_epi32(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_and_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_and_si256(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_and_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_and_epi64(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_and_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_and_si128(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_and_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_and_epi64(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_andnot_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                          (__v4di)_mm256_andnot_si256(__A, __B),
                                          (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_andnot_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_andnot_epi64(_mm256_setzero_si256(),
                                           __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_andnot_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_andnot_si128(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_andnot_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_andnot_epi64(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_or_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_or_si256(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_or_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_or_epi64(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_or_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_or_si128(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_or_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_or_epi64(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_xor_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_xor_si256(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_xor_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_xor_epi64(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_xor_epi64(__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_xor_si128(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_xor_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_xor_epi64(_mm_setzero_si128(), __U, __A, __B);
}
# 1240 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_mask ((__v2df) __A,
                                                    (__v2df) __B,
                                                    (__v2df) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_mask3 ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_maskz ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_mask ((__v2df) __A,
                                                    (__v2df) __B,
                                                    -(__v2df) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_maskz ((__v2df) __A,
                                                     (__v2df) __B,
                                                     -(__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_mask3 (-(__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fnmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_maskz (-(__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fnmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_maskz (-(__v2df) __A,
                                                     (__v2df) __B,
                                                     -(__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_mask ((__v4df) __A,
                                                    (__v4df) __B,
                                                    (__v4df) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_mask3 ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_maskz ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_mask ((__v4df) __A,
                                                    (__v4df) __B,
                                                    -(__v4df) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_maskz ((__v4df) __A,
                                                     (__v4df) __B,
                                                     -(__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_mask3 (-(__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fnmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_maskz (-(__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fnmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_maskz (-(__v4df) __A,
                                                     (__v4df) __B,
                                                     -(__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_mask ((__v4sf) __A,
                                                   (__v4sf) __B,
                                                   (__v4sf) __C,
                                                   (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmaddps128_mask3 ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_maskz ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_mask ((__v4sf) __A,
                                                   (__v4sf) __B,
                                                   -(__v4sf) __C,
                                                   (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_maskz ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    -(__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmaddps128_mask3 (-(__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fnmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_maskz (-(__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fnmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_maskz (-(__v4sf) __A,
                                                    (__v4sf) __B,
                                                    -(__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_mask ((__v8sf) __A,
                                                   (__v8sf) __B,
                                                   (__v8sf) __C,
                                                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmaddps256_mask3 ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_maskz ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_mask ((__v8sf) __A,
                                                   (__v8sf) __B,
                                                   -(__v8sf) __C,
                                                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_maskz ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    -(__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmaddps256_mask3 (-(__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fnmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_maskz (-(__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fnmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_maskz (-(__v8sf) __A,
                                                    (__v8sf) __B,
                                                    -(__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmaddsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_mask ((__v2df) __A,
                                                       (__v2df) __B,
                                                       (__v2df) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_mask3 ((__v2df) __A,
                                                        (__v2df) __B,
                                                        (__v2df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmaddsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_maskz ((__v2df) __A,
                                                        (__v2df) __B,
                                                        (__v2df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmsubadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_mask ((__v2df) __A,
                                                       (__v2df) __B,
                                                       -(__v2df) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmsubadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_maskz ((__v2df) __A,
                                                        (__v2df) __B,
                                                        -(__v2df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmaddsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_mask ((__v4df) __A,
                                                       (__v4df) __B,
                                                       (__v4df) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_mask3 ((__v4df) __A,
                                                        (__v4df) __B,
                                                        (__v4df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmaddsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_maskz ((__v4df) __A,
                                                        (__v4df) __B,
                                                        (__v4df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmsubadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_mask ((__v4df) __A,
                                                       (__v4df) __B,
                                                       -(__v4df) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmsubadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_maskz ((__v4df) __A,
                                                        (__v4df) __B,
                                                        -(__v4df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmaddsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_mask ((__v4sf) __A,
                                                      (__v4sf) __B,
                                                      (__v4sf) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_mask3 ((__v4sf) __A,
                                                       (__v4sf) __B,
                                                       (__v4sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmaddsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_maskz ((__v4sf) __A,
                                                       (__v4sf) __B,
                                                       (__v4sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmsubadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_mask ((__v4sf) __A,
                                                      (__v4sf) __B,
                                                      -(__v4sf) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmsubadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_maskz ((__v4sf) __A,
                                                       (__v4sf) __B,
                                                       -(__v4sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmaddsub_ps(__m256 __A, __mmask8 __U, __m256 __B,
                         __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_mask ((__v8sf) __A,
                                                      (__v8sf) __B,
                                                      (__v8sf) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_mask3 ((__v8sf) __A,
                                                       (__v8sf) __B,
                                                       (__v8sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmaddsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_maskz ((__v8sf) __A,
                                                       (__v8sf) __B,
                                                       (__v8sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmsubadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_mask ((__v8sf) __A,
                                                      (__v8sf) __B,
                                                      -(__v8sf) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmsubadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_maskz ((__v8sf) __A,
                                                       (__v8sf) __B,
                                                       -(__v8sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmsubpd128_mask3 ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmsubpd256_mask3 ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmsubps128_mask3 ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmsubps256_mask3 ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmsubaddpd128_mask3 ((__v2df) __A,
                                                        (__v2df) __B,
                                                        (__v2df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmsubaddpd256_mask3 ((__v4df) __A,
                                                        (__v4df) __B,
                                                        (__v4df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmsubaddps128_mask3 ((__v4sf) __A,
                                                       (__v4sf) __B,
                                                       (__v4sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmsubaddps256_mask3 ((__v8sf) __A,
                                                       (__v8sf) __B,
                                                       (__v8sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fnmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfnmaddpd128_mask ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fnmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfnmaddpd256_mask ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fnmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfnmaddps128_mask ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fnmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfnmaddps256_mask ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fnmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfnmsubpd128_mask ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfnmsubpd128_mask3 ((__v2df) __A,
                                                      (__v2df) __B,
                                                      (__v2df) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fnmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfnmsubpd256_mask ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfnmsubpd256_mask3 ((__v4df) __A,
                                                      (__v4df) __B,
                                                      (__v4df) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fnmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfnmsubps128_mask ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfnmsubps128_mask3 ((__v4sf) __A,
                                                     (__v4sf) __B,
                                                     (__v4sf) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fnmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfnmsubps256_mask ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfnmsubps256_mask3 ((__v8sf) __A,
                                                     (__v8sf) __B,
                                                     (__v8sf) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_add_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_addpd128_mask ((__v2df) __A,
             (__v2df) __B,
             (__v2df) __W,
             (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_add_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_addpd128_mask ((__v2df) __A,
             (__v2df) __B,
             (__v2df)
             _mm_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_add_pd (__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_addpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df) __W,
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_add_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_addpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df)
             _mm256_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_add_ps (__m128 __W, __mmask16 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_addps128_mask ((__v4sf) __A,
            (__v4sf) __B,
            (__v4sf) __W,
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_add_ps (__mmask16 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_addps128_mask ((__v4sf) __A,
            (__v4sf) __B,
            (__v4sf)
            _mm_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_add_ps (__m256 __W, __mmask16 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_addps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf) __W,
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_add_ps (__mmask16 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_addps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf)
            _mm256_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_blend_epi32 (__mmask8 __U, __m128i __A, __m128i __W) {
  return (__m128i) __builtin_ia32_selectd_128 ((__mmask8) __U,
                (__v4si) __W,
                (__v4si) __A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_blend_epi32 (__mmask8 __U, __m256i __A, __m256i __W) {
  return (__m256i) __builtin_ia32_selectd_256 ((__mmask8) __U,
                (__v8si) __W,
                (__v8si) __A);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_blend_pd (__mmask8 __U, __m128d __A, __m128d __W) {
  return (__m128d) __builtin_ia32_selectpd_128 ((__mmask8) __U,
                 (__v2df) __W,
                 (__v2df) __A);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_blend_pd (__mmask8 __U, __m256d __A, __m256d __W) {
  return (__m256d) __builtin_ia32_selectpd_256 ((__mmask8) __U,
                 (__v4df) __W,
                 (__v4df) __A);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_blend_ps (__mmask8 __U, __m128 __A, __m128 __W) {
  return (__m128) __builtin_ia32_selectps_128 ((__mmask8) __U,
                (__v4sf) __W,
                (__v4sf) __A);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_blend_ps (__mmask8 __U, __m256 __A, __m256 __W) {
  return (__m256) __builtin_ia32_selectps_256 ((__mmask8) __U,
                (__v8sf) __W,
                (__v8sf) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_blend_epi64 (__mmask8 __U, __m128i __A, __m128i __W) {
  return (__m128i) __builtin_ia32_selectq_128 ((__mmask8) __U,
                (__v2di) __W,
                (__v2di) __A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_blend_epi64 (__mmask8 __U, __m256i __A, __m256i __W) {
  return (__m256i) __builtin_ia32_selectq_256 ((__mmask8) __U,
                (__v4di) __W,
                (__v4di) __A);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compress_pd (__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_compressdf128_mask ((__v2df) __A,
                  (__v2df) __W,
                  (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_compress_pd (__mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_compressdf128_mask ((__v2df) __A,
                  (__v2df)
                  _mm_setzero_pd (),
                  (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compress_pd (__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_compressdf256_mask ((__v4df) __A,
                  (__v4df) __W,
                  (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_compress_pd (__mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_compressdf256_mask ((__v4df) __A,
                  (__v4df)
                  _mm256_setzero_pd (),
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compress_epi64 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_compressdi128_mask ((__v2di) __A,
                  (__v2di) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_compress_epi64 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_compressdi128_mask ((__v2di) __A,
                  (__v2di)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compress_epi64 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_compressdi256_mask ((__v4di) __A,
                  (__v4di) __W,
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_compress_epi64 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_compressdi256_mask ((__v4di) __A,
                  (__v4di)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compress_ps (__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_compresssf128_mask ((__v4sf) __A,
                 (__v4sf) __W,
                 (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_compress_ps (__mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_compresssf128_mask ((__v4sf) __A,
                 (__v4sf)
                 _mm_setzero_ps (),
                 (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compress_ps (__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_compresssf256_mask ((__v8sf) __A,
                 (__v8sf) __W,
                 (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_compress_ps (__mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_compresssf256_mask ((__v8sf) __A,
                 (__v8sf)
                 _mm256_setzero_ps (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compress_epi32 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_compresssi128_mask ((__v4si) __A,
                  (__v4si) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_compress_epi32 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_compresssi128_mask ((__v4si) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compress_epi32 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_compresssi256_mask ((__v8si) __A,
                  (__v8si) __W,
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_compress_epi32 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_compresssi256_mask ((__v8si) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compressstoreu_pd (void *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_compressstoredf128_mask ((__v2df *) __P,
            (__v2df) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compressstoreu_pd (void *__P, __mmask8 __U, __m256d __A) {
  __builtin_ia32_compressstoredf256_mask ((__v4df *) __P,
            (__v4df) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compressstoreu_epi64 (void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_compressstoredi128_mask ((__v2di *) __P,
            (__v2di) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compressstoreu_epi64 (void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_compressstoredi256_mask ((__v4di *) __P,
            (__v4di) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compressstoreu_ps (void *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_compressstoresf128_mask ((__v4sf *) __P,
            (__v4sf) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compressstoreu_ps (void *__P, __mmask8 __U, __m256 __A) {
  __builtin_ia32_compressstoresf256_mask ((__v8sf *) __P,
            (__v8sf) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compressstoreu_epi32 (void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_compressstoresi128_mask ((__v4si *) __P,
            (__v4si) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compressstoreu_epi32 (void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_compressstoresi256_mask ((__v8si *) __P,
            (__v8si) __A,
            (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_pd (__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtdq2pd128_mask ((__v4si) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_pd (__mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtdq2pd128_mask ((__v4si) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_pd (__m256d __W, __mmask8 __U, __m128i __A) {
  return (__m256d) __builtin_ia32_cvtdq2pd256_mask ((__v4si) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_pd (__mmask8 __U, __m128i __A) {
  return (__m256d) __builtin_ia32_cvtdq2pd256_mask ((__v4si) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_ps (__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtdq2ps128_mask ((__v4si) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_ps (__mmask16 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtdq2ps128_mask ((__v4si) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_ps (__m256 __W, __mmask8 __U, __m256i __A) {
  return (__m256) __builtin_ia32_cvtdq2ps256_mask ((__v8si) __A,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_ps (__mmask16 __U, __m256i __A) {
  return (__m256) __builtin_ia32_cvtdq2ps256_mask ((__v8si) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtpd_epi32 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2dq128_mask ((__v2df) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtpd_epi32 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2dq128_mask ((__v2df) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtpd_epi32 (__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2dq256_mask ((__v4df) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtpd_epi32 (__mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2dq256_mask ((__v4df) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtpd_ps (__m128 __W, __mmask8 __U, __m128d __A) {
  return (__m128) __builtin_ia32_cvtpd2ps_mask ((__v2df) __A,
            (__v4sf) __W,
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtpd_ps (__mmask8 __U, __m128d __A) {
  return (__m128) __builtin_ia32_cvtpd2ps_mask ((__v2df) __A,
            (__v4sf)
            _mm_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtpd_ps (__m128 __W, __mmask8 __U, __m256d __A) {
  return (__m128) __builtin_ia32_cvtpd2ps256_mask ((__v4df) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtpd_ps (__mmask8 __U, __m256d __A) {
  return (__m128) __builtin_ia32_cvtpd2ps256_mask ((__v4df) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtpd_epu32 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq128_mask ((__v2df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtpd_epu32 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq128_mask ((__v2df) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtpd_epu32 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq128_mask ((__v2df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtpd_epu32 (__m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq256_mask ((__v4df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtpd_epu32 (__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq256_mask ((__v4df) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtpd_epu32 (__mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq256_mask ((__v4df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtps_epi32 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2dq128_mask ((__v4sf) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtps_epi32 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2dq128_mask ((__v4sf) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtps_epi32 (__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2dq256_mask ((__v8sf) __A,
                (__v8si) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtps_epi32 (__mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2dq256_mask ((__v8sf) __A,
                (__v8si)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtps_pd (__m128d __W, __mmask8 __U, __m128 __A) {
  return (__m128d) __builtin_ia32_cvtps2pd128_mask ((__v4sf) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtps_pd (__mmask8 __U, __m128 __A) {
  return (__m128d) __builtin_ia32_cvtps2pd128_mask ((__v4sf) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtps_pd (__m256d __W, __mmask8 __U, __m128 __A) {
  return (__m256d) __builtin_ia32_cvtps2pd256_mask ((__v4sf) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtps_pd (__mmask8 __U, __m128 __A) {
  return (__m256d) __builtin_ia32_cvtps2pd256_mask ((__v4sf) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtps_epu32 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2udq128_mask ((__v4sf) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtps_epu32 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2udq128_mask ((__v4sf) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtps_epu32 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2udq128_mask ((__v4sf) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtps_epu32 (__m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2udq256_mask ((__v8sf) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtps_epu32 (__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2udq256_mask ((__v8sf) __A,
                 (__v8si) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtps_epu32 (__mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2udq256_mask ((__v8sf) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvttpd_epi32 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2dq128_mask ((__v2df) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvttpd_epi32 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2dq128_mask ((__v2df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvttpd_epi32 (__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2dq256_mask ((__v4df) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvttpd_epi32 (__mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2dq256_mask ((__v4df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvttpd_epu32 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq128_mask ((__v2df) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvttpd_epu32 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq128_mask ((__v2df) __A,
                  (__v4si) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvttpd_epu32 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq128_mask ((__v2df) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvttpd_epu32 (__m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq256_mask ((__v4df) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvttpd_epu32 (__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq256_mask ((__v4df) __A,
                  (__v4si) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvttpd_epu32 (__mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq256_mask ((__v4df) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvttps_epi32 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2dq128_mask ((__v4sf) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvttps_epi32 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2dq128_mask ((__v4sf) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvttps_epi32 (__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2dq256_mask ((__v8sf) __A,
                 (__v8si) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvttps_epi32 (__mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2dq256_mask ((__v8sf) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvttps_epu32 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2udq128_mask ((__v4sf) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvttps_epu32 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2udq128_mask ((__v4sf) __A,
                  (__v4si) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvttps_epu32 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2udq128_mask ((__v4sf) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvttps_epu32 (__m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2udq256_mask ((__v8sf) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvttps_epu32 (__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2udq256_mask ((__v8sf) __A,
                  (__v8si) __W,
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvttps_epu32 (__mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2udq256_mask ((__v8sf) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepu32_pd (__m128i __A) {
  return (__m128d) __builtin_ia32_cvtudq2pd128_mask ((__v4si) __A,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu32_pd (__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtudq2pd128_mask ((__v4si) __A,
                 (__v2df) __W,
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu32_pd (__mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtudq2pd128_mask ((__v4si) __A,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepu32_pd (__m128i __A) {
  return (__m256d) __builtin_ia32_cvtudq2pd256_mask ((__v4si) __A,
                 (__v4df)
                 _mm256_setzero_pd (),
                 (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu32_pd (__m256d __W, __mmask8 __U, __m128i __A) {
  return (__m256d) __builtin_ia32_cvtudq2pd256_mask ((__v4si) __A,
                 (__v4df) __W,
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu32_pd (__mmask8 __U, __m128i __A) {
  return (__m256d) __builtin_ia32_cvtudq2pd256_mask ((__v4si) __A,
                 (__v4df)
                 _mm256_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepu32_ps (__m128i __A) {
  return (__m128) __builtin_ia32_cvtudq2ps128_mask ((__v4si) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu32_ps (__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtudq2ps128_mask ((__v4si) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu32_ps (__mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtudq2ps128_mask ((__v4si) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepu32_ps (__m256i __A) {
  return (__m256) __builtin_ia32_cvtudq2ps256_mask ((__v8si) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu32_ps (__m256 __W, __mmask8 __U, __m256i __A) {
  return (__m256) __builtin_ia32_cvtudq2ps256_mask ((__v8si) __A,
                (__v8sf) __W,
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu32_ps (__mmask8 __U, __m256i __A) {
  return (__m256) __builtin_ia32_cvtudq2ps256_mask ((__v8si) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_div_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_divpd_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_div_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_divpd_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_div_pd (__m256d __W, __mmask8 __U, __m256d __A,
        __m256d __B) {
  return (__m256d) __builtin_ia32_divpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df) __W,
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_div_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_divpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df)
             _mm256_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_div_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_divps_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_div_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_divps_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_div_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_divps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf) __W,
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_div_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_divps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf)
            _mm256_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expand_pd (__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_expanddf128_mask ((__v2df) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expand_pd (__mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_expanddf128_mask ((__v2df) __A,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expand_pd (__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_expanddf256_mask ((__v4df) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expand_pd (__mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_expanddf256_mask ((__v4df) __A,
                 (__v4df)
                 _mm256_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expand_epi64 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_expanddi128_mask ((__v2di) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expand_epi64 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_expanddi128_mask ((__v2di) __A,
                 (__v2di)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expand_epi64 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_expanddi256_mask ((__v4di) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expand_epi64 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_expanddi256_mask ((__v4di) __A,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expandloadu_pd (__m128d __W, __mmask8 __U, void const *__P) {
  return (__m128d) __builtin_ia32_expandloaddf128_mask ((__v2df *) __P,
              (__v2df) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expandloadu_pd (__mmask8 __U, void const *__P) {
  return (__m128d) __builtin_ia32_expandloaddf128_mask ((__v2df *) __P,
               (__v2df)
               _mm_setzero_pd (),
               (__mmask8)
               __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expandloadu_pd (__m256d __W, __mmask8 __U, void const *__P) {
  return (__m256d) __builtin_ia32_expandloaddf256_mask ((__v4df *) __P,
              (__v4df) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expandloadu_pd (__mmask8 __U, void const *__P) {
  return (__m256d) __builtin_ia32_expandloaddf256_mask ((__v4df *) __P,
               (__v4df)
               _mm256_setzero_pd (),
               (__mmask8)
               __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expandloadu_epi64 (__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i) __builtin_ia32_expandloaddi128_mask ((__v2di *) __P,
              (__v2di) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expandloadu_epi64 (__mmask8 __U, void const *__P) {
  return (__m128i) __builtin_ia32_expandloaddi128_mask ((__v2di *) __P,
               (__v2di)
               _mm_setzero_si128 (),
               (__mmask8)
               __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expandloadu_epi64 (__m256i __W, __mmask8 __U,
             void const *__P) {
  return (__m256i) __builtin_ia32_expandloaddi256_mask ((__v4di *) __P,
              (__v4di) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expandloadu_epi64 (__mmask8 __U, void const *__P) {
  return (__m256i) __builtin_ia32_expandloaddi256_mask ((__v4di *) __P,
               (__v4di)
               _mm256_setzero_si256 (),
               (__mmask8)
               __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expandloadu_ps (__m128 __W, __mmask8 __U, void const *__P) {
  return (__m128) __builtin_ia32_expandloadsf128_mask ((__v4sf *) __P,
                   (__v4sf) __W,
                   (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expandloadu_ps (__mmask8 __U, void const *__P) {
  return (__m128) __builtin_ia32_expandloadsf128_mask ((__v4sf *) __P,
              (__v4sf)
              _mm_setzero_ps (),
              (__mmask8)
              __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expandloadu_ps (__m256 __W, __mmask8 __U, void const *__P) {
  return (__m256) __builtin_ia32_expandloadsf256_mask ((__v8sf *) __P,
                   (__v8sf) __W,
                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expandloadu_ps (__mmask8 __U, void const *__P) {
  return (__m256) __builtin_ia32_expandloadsf256_mask ((__v8sf *) __P,
              (__v8sf)
              _mm256_setzero_ps (),
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expandloadu_epi32 (__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i) __builtin_ia32_expandloadsi128_mask ((__v4si *) __P,
              (__v4si) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expandloadu_epi32 (__mmask8 __U, void const *__P) {
  return (__m128i) __builtin_ia32_expandloadsi128_mask ((__v4si *) __P,
               (__v4si)
               _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expandloadu_epi32 (__m256i __W, __mmask8 __U,
             void const *__P) {
  return (__m256i) __builtin_ia32_expandloadsi256_mask ((__v8si *) __P,
              (__v8si) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expandloadu_epi32 (__mmask8 __U, void const *__P) {
  return (__m256i) __builtin_ia32_expandloadsi256_mask ((__v8si *) __P,
               (__v8si)
               _mm256_setzero_si256 (),
               (__mmask8)
               __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expand_ps (__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_expandsf128_mask ((__v4sf) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expand_ps (__mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_expandsf128_mask ((__v4sf) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expand_ps (__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_expandsf256_mask ((__v8sf) __A,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expand_ps (__mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_expandsf256_mask ((__v8sf) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expand_epi32 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_expandsi128_mask ((__v4si) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expand_epi32 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_expandsi128_mask ((__v4si) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expand_epi32 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_expandsi256_mask ((__v8si) __A,
                (__v8si) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expand_epi32 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_expandsi256_mask ((__v8si) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_getexp_pd (__m128d __A) {
  return (__m128d) __builtin_ia32_getexppd128_mask ((__v2df) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_getexp_pd (__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_getexppd128_mask ((__v2df) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_getexp_pd (__mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_getexppd128_mask ((__v2df) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_getexp_pd (__m256d __A) {
  return (__m256d) __builtin_ia32_getexppd256_mask ((__v4df) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_getexp_pd (__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_getexppd256_mask ((__v4df) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_getexp_pd (__mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_getexppd256_mask ((__v4df) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_getexp_ps (__m128 __A) {
  return (__m128) __builtin_ia32_getexpps128_mask ((__v4sf) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_getexp_ps (__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_getexpps128_mask ((__v4sf) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_getexp_ps (__mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_getexpps128_mask ((__v4sf) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_getexp_ps (__m256 __A) {
  return (__m256) __builtin_ia32_getexpps256_mask ((__v8sf) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_getexp_ps (__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_getexpps256_mask ((__v8sf) __A,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_getexp_ps (__mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_getexpps256_mask ((__v8sf) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_maxpd_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_maxpd_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_pd (__m256d __W, __mmask8 __U, __m256d __A,
        __m256d __B) {
  return (__m256d) __builtin_ia32_maxpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df) __W,
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_maxpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df)
             _mm256_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_maxps_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_maxps_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_maxps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf) __W,
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_maxps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf)
            _mm256_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_minpd_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_minpd_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_pd (__m256d __W, __mmask8 __U, __m256d __A,
        __m256d __B) {
  return (__m256d) __builtin_ia32_minpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df) __W,
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_minpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df)
             _mm256_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_minps_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_minps_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_minps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf) __W,
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_minps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf)
            _mm256_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mul_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_mulpd_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mul_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_mulpd_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mul_pd (__m256d __W, __mmask8 __U, __m256d __A,
        __m256d __B) {
  return (__m256d) __builtin_ia32_mulpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df) __W,
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mul_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_mulpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df)
             _mm256_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mul_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_mulps_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mul_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_mulps_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mul_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_mulps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf) __W,
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mul_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_mulps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf)
            _mm256_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_abs_epi32 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_pabsd128_mask ((__v4si) __A,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_abs_epi32 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_pabsd128_mask ((__v4si) __A,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_abs_epi32 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_pabsd256_mask ((__v8si) __A,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_abs_epi32 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_pabsd256_mask ((__v8si) __A,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_abs_epi64 (__m128i __A) {
  return (__m128i) __builtin_ia32_pabsq128_mask ((__v2di) __A,
             (__v2di)
             _mm_setzero_si128 (),
             (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_abs_epi64 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_pabsq128_mask ((__v2di) __A,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_abs_epi64 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_pabsq128_mask ((__v2di) __A,
             (__v2di)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_abs_epi64 (__m256i __A) {
  return (__m256i) __builtin_ia32_pabsq256_mask ((__v4di) __A,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_abs_epi64 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_pabsq256_mask ((__v4di) __A,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_abs_epi64 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_pabsq256_mask ((__v4di) __A,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_epi32 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxsd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_epi32 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxsd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_epi32 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxsd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_epi32 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxsd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_epi64 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_epi64 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_max_epi64 (__m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_epi64 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_epi64 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_max_epi64 (__m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_epu32 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxud128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_epu32 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxud128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_epu32 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxud256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_epu32 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxud256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_epu64 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_max_epu64 (__m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_epu64 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_epu64 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_max_epu64 (__m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_epu64 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_epi32 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminsd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_epi32 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pminsd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_epi32 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminsd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_epi32 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pminsd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_min_epi64 (__m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_epi64 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pminsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_epi64 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_min_epi64 (__m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_epi64 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pminsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_epi64 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_epu32 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminud128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_epu32 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pminud128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_epu32 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminud256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_epu32 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pminud256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_min_epu64 (__m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_epu64 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pminuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_epu64 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_min_epu64 (__m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_epu64 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pminuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_epu64 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}
# 3830 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_scalef_pd (__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_scalefpd128_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_scalef_pd (__m128d __W, __mmask8 __U, __m128d __A,
        __m128d __B) {
  return (__m128d) __builtin_ia32_scalefpd128_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_scalef_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_scalefpd128_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_scalef_pd (__m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_scalefpd256_mask ((__v4df) __A,
                (__v4df) __B,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_scalef_pd (__m256d __W, __mmask8 __U, __m256d __A,
           __m256d __B) {
  return (__m256d) __builtin_ia32_scalefpd256_mask ((__v4df) __A,
                (__v4df) __B,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_scalef_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_scalefpd256_mask ((__v4df) __A,
                (__v4df) __B,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_scalef_ps (__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_scalefps128_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_scalef_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_scalefps128_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_scalef_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_scalefps128_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_scalef_ps (__m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_scalefps256_mask ((__v8sf) __A,
               (__v8sf) __B,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_scalef_ps (__m256 __W, __mmask8 __U, __m256 __A,
           __m256 __B) {
  return (__m256) __builtin_ia32_scalefps256_mask ((__v8sf) __A,
               (__v8sf) __B,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_scalef_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_scalefps256_mask ((__v8sf) __A,
               (__v8sf) __B,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) __U);
}
# 4097 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sqrt_pd (__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_sqrtpd128_mask ((__v2df) __A,
              (__v2df) __W,
              (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sqrt_pd (__mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_sqrtpd128_mask ((__v2df) __A,
              (__v2df)
              _mm_setzero_pd (),
              (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sqrt_pd (__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_sqrtpd256_mask ((__v4df) __A,
              (__v4df) __W,
              (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sqrt_pd (__mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_sqrtpd256_mask ((__v4df) __A,
              (__v4df)
              _mm256_setzero_pd (),
              (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sqrt_ps (__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_sqrtps128_mask ((__v4sf) __A,
             (__v4sf) __W,
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sqrt_ps (__mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_sqrtps128_mask ((__v4sf) __A,
             (__v4sf)
             _mm_setzero_ps (),
             (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sqrt_ps (__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_sqrtps256_mask ((__v8sf) __A,
             (__v8sf) __W,
             (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sqrt_ps (__mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_sqrtps256_mask ((__v8sf) __A,
             (__v8sf)
             _mm256_setzero_ps (),
             (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sub_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_subpd128_mask ((__v2df) __A,
             (__v2df) __B,
             (__v2df) __W,
             (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sub_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_subpd128_mask ((__v2df) __A,
             (__v2df) __B,
             (__v2df)
             _mm_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sub_pd (__m256d __W, __mmask8 __U, __m256d __A,
        __m256d __B) {
  return (__m256d) __builtin_ia32_subpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df) __W,
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sub_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_subpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df)
             _mm256_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sub_ps (__m128 __W, __mmask16 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_subps128_mask ((__v4sf) __A,
            (__v4sf) __B,
            (__v4sf) __W,
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sub_ps (__mmask16 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_subps128_mask ((__v4sf) __A,
            (__v4sf) __B,
            (__v4sf)
            _mm_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sub_ps (__m256 __W, __mmask16 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_subps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf) __W,
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sub_ps (__mmask16 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_subps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf)
            _mm256_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask2_permutex2var_epi32 (__m128i __A, __m128i __I, __mmask8 __U,
            __m128i __B) {
  return (__m128i) __builtin_ia32_vpermi2vard128_mask ((__v4si) __A,
                   (__v4si) __I
                             ,
                   (__v4si) __B,
                   (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask2_permutex2var_epi32 (__m256i __A, __m256i __I,
         __mmask8 __U, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermi2vard256_mask ((__v8si) __A,
                   (__v8si) __I
                             ,
                   (__v8si) __B,
                   (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask2_permutex2var_pd (__m128d __A, __m128i __I, __mmask8 __U,
         __m128d __B) {
  return (__m128d) __builtin_ia32_vpermi2varpd128_mask ((__v2df) __A,
              (__v2di) __I
                        ,
              (__v2df) __B,
              (__mmask8)
              __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask2_permutex2var_pd (__m256d __A, __m256i __I, __mmask8 __U,
            __m256d __B) {
  return (__m256d) __builtin_ia32_vpermi2varpd256_mask ((__v4df) __A,
              (__v4di) __I
                        ,
              (__v4df) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask2_permutex2var_ps (__m128 __A, __m128i __I, __mmask8 __U,
         __m128 __B) {
  return (__m128) __builtin_ia32_vpermi2varps128_mask ((__v4sf) __A,
                   (__v4si) __I
                             ,
                   (__v4sf) __B,
                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask2_permutex2var_ps (__m256 __A, __m256i __I, __mmask8 __U,
            __m256 __B) {
  return (__m256) __builtin_ia32_vpermi2varps256_mask ((__v8sf) __A,
                   (__v8si) __I
                             ,
                   (__v8sf) __B,
                   (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask2_permutex2var_epi64 (__m128i __A, __m128i __I, __mmask8 __U,
            __m128i __B) {
  return (__m128i) __builtin_ia32_vpermi2varq128_mask ((__v2di) __A,
                   (__v2di) __I
                             ,
                   (__v2di) __B,
                   (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask2_permutex2var_epi64 (__m256i __A, __m256i __I,
         __mmask8 __U, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermi2varq256_mask ((__v4di) __A,
                   (__v4di) __I
                             ,
                   (__v4di) __B,
                   (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_permutex2var_epi32 (__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2vard128_mask ((__v4si) __I
                             ,
                   (__v4si) __A,
                   (__v4si) __B,
                   (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutex2var_epi32 (__m128i __A, __mmask8 __U, __m128i __I,
           __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2vard128_mask ((__v4si) __I
                             ,
                   (__v4si) __A,
                   (__v4si) __B,
                   (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutex2var_epi32 (__mmask8 __U, __m128i __A, __m128i __I,
            __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2vard128_maskz ((__v4si) __I
                        ,
              (__v4si) __A,
              (__v4si) __B,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutex2var_epi32 (__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2vard256_mask ((__v8si) __I
                             ,
                   (__v8si) __A,
                   (__v8si) __B,
                   (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutex2var_epi32 (__m256i __A, __mmask8 __U, __m256i __I,
        __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2vard256_mask ((__v8si) __I
                             ,
                   (__v8si) __A,
                   (__v8si) __B,
                   (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutex2var_epi32 (__mmask8 __U, __m256i __A,
         __m256i __I, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2vard256_maskz ((__v8si) __I
                        ,
              (__v8si) __A,
              (__v8si) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_permutex2var_pd (__m128d __A, __m128i __I, __m128d __B) {
  return (__m128d) __builtin_ia32_vpermt2varpd128_mask ((__v2di) __I
                        ,
              (__v2df) __A,
              (__v2df) __B,
              (__mmask8) -
              1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutex2var_pd (__m128d __A, __mmask8 __U, __m128i __I,
        __m128d __B) {
  return (__m128d) __builtin_ia32_vpermt2varpd128_mask ((__v2di) __I
                        ,
              (__v2df) __A,
              (__v2df) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutex2var_pd (__mmask8 __U, __m128d __A, __m128i __I,
         __m128d __B) {
  return (__m128d) __builtin_ia32_vpermt2varpd128_maskz ((__v2di) __I
                         ,
               (__v2df) __A,
               (__v2df) __B,
               (__mmask8)
               __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutex2var_pd (__m256d __A, __m256i __I, __m256d __B) {
  return (__m256d) __builtin_ia32_vpermt2varpd256_mask ((__v4di) __I
                        ,
              (__v4df) __A,
              (__v4df) __B,
              (__mmask8) -
              1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutex2var_pd (__m256d __A, __mmask8 __U, __m256i __I,
           __m256d __B) {
  return (__m256d) __builtin_ia32_vpermt2varpd256_mask ((__v4di) __I
                        ,
              (__v4df) __A,
              (__v4df) __B,
              (__mmask8)
              __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutex2var_pd (__mmask8 __U, __m256d __A, __m256i __I,
            __m256d __B) {
  return (__m256d) __builtin_ia32_vpermt2varpd256_maskz ((__v4di) __I
                         ,
               (__v4df) __A,
               (__v4df) __B,
               (__mmask8)
               __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_permutex2var_ps (__m128 __A, __m128i __I, __m128 __B) {
  return (__m128) __builtin_ia32_vpermt2varps128_mask ((__v4si) __I
                             ,
                   (__v4sf) __A,
                   (__v4sf) __B,
                   (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutex2var_ps (__m128 __A, __mmask8 __U, __m128i __I,
        __m128 __B) {
  return (__m128) __builtin_ia32_vpermt2varps128_mask ((__v4si) __I
                             ,
                   (__v4sf) __A,
                   (__v4sf) __B,
                   (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutex2var_ps (__mmask8 __U, __m128 __A, __m128i __I,
         __m128 __B) {
  return (__m128) __builtin_ia32_vpermt2varps128_maskz ((__v4si) __I
                        ,
              (__v4sf) __A,
              (__v4sf) __B,
              (__mmask8)
              __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutex2var_ps (__m256 __A, __m256i __I, __m256 __B) {
  return (__m256) __builtin_ia32_vpermt2varps256_mask ((__v8si) __I
                             ,
                   (__v8sf) __A,
                   (__v8sf) __B,
                   (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutex2var_ps (__m256 __A, __mmask8 __U, __m256i __I,
           __m256 __B) {
  return (__m256) __builtin_ia32_vpermt2varps256_mask ((__v8si) __I
                             ,
                   (__v8sf) __A,
                   (__v8sf) __B,
                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutex2var_ps (__mmask8 __U, __m256 __A, __m256i __I,
            __m256 __B) {
  return (__m256) __builtin_ia32_vpermt2varps256_maskz ((__v8si) __I
                        ,
              (__v8sf) __A,
              (__v8sf) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_permutex2var_epi64 (__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2varq128_mask ((__v2di) __I
                             ,
                   (__v2di) __A,
                   (__v2di) __B,
                   (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutex2var_epi64 (__m128i __A, __mmask8 __U, __m128i __I,
           __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2varq128_mask ((__v2di) __I
                             ,
                   (__v2di) __A,
                   (__v2di) __B,
                   (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutex2var_epi64 (__mmask8 __U, __m128i __A, __m128i __I,
            __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2varq128_maskz ((__v2di) __I
                        ,
              (__v2di) __A,
              (__v2di) __B,
              (__mmask8)
              __U);
}


static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutex2var_epi64 (__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2varq256_mask ((__v4di) __I
                             ,
                   (__v4di) __A,
                   (__v4di) __B,
                   (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutex2var_epi64 (__m256i __A, __mmask8 __U, __m256i __I,
        __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2varq256_mask ((__v4di) __I
                             ,
                   (__v4di) __A,
                   (__v4di) __B,
                   (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutex2var_epi64 (__mmask8 __U, __m256i __A,
         __m256i __I, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2varq256_maskz ((__v4di) __I
                        ,
              (__v4di) __A,
              (__v4di) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi8_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxbd128_mask ((__v16qi) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi8_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxbd128_mask ((__v16qi) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi8_epi32 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxbd256_mask ((__v16qi) __A,
                (__v8si) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi8_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxbd256_mask ((__v16qi) __A,
                (__v8si)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi8_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxbq128_mask ((__v16qi) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxbq128_mask ((__v16qi) __A,
                (__v2di)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi8_epi64 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxbq256_mask ((__v16qi) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxbq256_mask ((__v16qi) __A,
                (__v4di)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_epi64 (__m128i __W, __mmask8 __U, __m128i __X)
{
  return (__m128i) __builtin_ia32_pmovsxdq128_mask ((__v4si) __X,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_epi64 (__mmask8 __U, __m128i __X)
{
  return (__m128i) __builtin_ia32_pmovsxdq128_mask ((__v4si) __X,
                (__v2di)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_epi64 (__m256i __W, __mmask8 __U, __m128i __X)
{
  return (__m256i) __builtin_ia32_pmovsxdq256_mask ((__v4si) __X,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_epi64 (__mmask8 __U, __m128i __X)
{
  return (__m256i) __builtin_ia32_pmovsxdq256_mask ((__v4si) __X,
                (__v4di)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi16_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxwd128_mask ((__v8hi) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi16_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxwd128_mask ((__v8hi) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi16_epi32 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxwd256_mask ((__v8hi) __A,
                (__v8si) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi16_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxwd256_mask ((__v8hi) __A,
                (__v8si)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi16_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxwq128_mask ((__v8hi) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi16_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxwq128_mask ((__v8hi) __A,
                (__v2di)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi16_epi64 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxwq256_mask ((__v8hi) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi16_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxwq256_mask ((__v8hi) __A,
                (__v4di)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu8_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxbd128_mask ((__v16qi) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu8_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxbd128_mask ((__v16qi) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu8_epi32 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxbd256_mask ((__v16qi) __A,
                (__v8si) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu8_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxbd256_mask ((__v16qi) __A,
                (__v8si)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu8_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxbq128_mask ((__v16qi) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxbq128_mask ((__v16qi) __A,
                (__v2di)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu8_epi64 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxbq256_mask ((__v16qi) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxbq256_mask ((__v16qi) __A,
                (__v4di)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu32_epi64 (__m128i __W, __mmask8 __U, __m128i __X)
{
  return (__m128i) __builtin_ia32_pmovzxdq128_mask ((__v4si) __X,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu32_epi64 (__mmask8 __U, __m128i __X)
{
  return (__m128i) __builtin_ia32_pmovzxdq128_mask ((__v4si) __X,
                (__v2di)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu32_epi64 (__m256i __W, __mmask8 __U, __m128i __X)
{
  return (__m256i) __builtin_ia32_pmovzxdq256_mask ((__v4si) __X,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu32_epi64 (__mmask8 __U, __m128i __X)
{
  return (__m256i) __builtin_ia32_pmovzxdq256_mask ((__v4si) __X,
                (__v4di)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu16_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxwd128_mask ((__v8hi) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu16_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxwd128_mask ((__v8hi) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu16_epi32 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxwd256_mask ((__v8hi) __A,
                (__v8si) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu16_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxwd256_mask ((__v8hi) __A,
                (__v8si)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu16_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxwq128_mask ((__v8hi) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu16_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxwq128_mask ((__v8hi) __A,
                (__v2di)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu16_epi64 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxwq256_mask ((__v8hi) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu16_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxwq256_mask ((__v8hi) __A,
                (__v4di)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}
# 4951 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rolv_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rolv_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rolv_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rolv_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rolv_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rolv_epi32 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rolv_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rolv_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rolv_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rolv_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rolv_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rolv_epi64 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}
# 5127 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sll_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_pslld128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sll_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pslld128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sll_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_pslld256_mask ((__v8si) __A,
             (__v4si) __B,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sll_epi32 (__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_pslld256_mask ((__v8si) __A,
             (__v4si) __B,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}
# 5187 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sll_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psllq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sll_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psllq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di)
             _mm_setzero_di (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sll_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_psllq256_mask ((__v4di) __A,
             (__v2di) __B,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sll_epi64 (__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psllq256_mask ((__v4di) __A,
             (__v2di) __B,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}
# 5248 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rorv_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rorv_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rorv_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rorv_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rorv_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rorv_epi32 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rorv_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rorv_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rorv_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rorv_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rorv_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rorv_epi64 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sllv_epi64 (__m128i __W, __mmask8 __U, __m128i __X,
         __m128i __Y)
{
  return (__m128i) __builtin_ia32_psllv2di_mask ((__v2di) __X,
             (__v2di) __Y,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sllv_epi64 (__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psllv2di_mask ((__v2di) __X,
             (__v2di) __Y,
             (__v2di)
             _mm_setzero_di (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sllv_epi64 (__m256i __W, __mmask8 __U, __m256i __X,
      __m256i __Y)
{
  return (__m256i) __builtin_ia32_psllv4di_mask ((__v4di) __X,
             (__v4di) __Y,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sllv_epi64 (__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psllv4di_mask ((__v4di) __X,
             (__v4di) __Y,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sllv_epi32 (__m128i __W, __mmask8 __U, __m128i __X,
         __m128i __Y)
{
  return (__m128i) __builtin_ia32_psllv4si_mask ((__v4si) __X,
             (__v4si) __Y,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sllv_epi32 (__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psllv4si_mask ((__v4si) __X,
             (__v4si) __Y,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sllv_epi32 (__m256i __W, __mmask8 __U, __m256i __X,
      __m256i __Y)
{
  return (__m256i) __builtin_ia32_psllv8si_mask ((__v8si) __X,
             (__v8si) __Y,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sllv_epi32 (__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psllv8si_mask ((__v8si) __X,
             (__v8si) __Y,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}



static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srlv_epi64 (__m128i __W, __mmask8 __U, __m128i __X,
         __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrlv2di_mask ((__v2di) __X,
             (__v2di) __Y,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srlv_epi64 (__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrlv2di_mask ((__v2di) __X,
             (__v2di) __Y,
             (__v2di)
             _mm_setzero_di (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srlv_epi64 (__m256i __W, __mmask8 __U, __m256i __X,
      __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrlv4di_mask ((__v4di) __X,
             (__v4di) __Y,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srlv_epi64 (__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrlv4di_mask ((__v4di) __X,
             (__v4di) __Y,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srlv_epi32 (__m128i __W, __mmask8 __U, __m128i __X,
         __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrlv4si_mask ((__v4si) __X,
             (__v4si) __Y,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srlv_epi32 (__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrlv4si_mask ((__v4si) __X,
             (__v4si) __Y,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srlv_epi32 (__m256i __W, __mmask8 __U, __m256i __X,
      __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrlv8si_mask ((__v8si) __X,
             (__v8si) __Y,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srlv_epi32 (__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrlv8si_mask ((__v8si) __X,
             (__v8si) __Y,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}



static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srl_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psrld128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srl_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psrld128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srl_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_psrld256_mask ((__v8si) __A,
             (__v4si) __B,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srl_epi32 (__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psrld256_mask ((__v8si) __A,
             (__v4si) __B,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}
# 5592 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srl_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psrlq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srl_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psrlq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di)
             _mm_setzero_di (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srl_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_psrlq256_mask ((__v4di) __A,
             (__v2di) __B,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srl_epi64 (__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psrlq256_mask ((__v4di) __A,
             (__v2di) __B,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}
# 5652 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srav_epi32 (__m128i __W, __mmask8 __U, __m128i __X,
         __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrav4si_mask ((__v4si) __X,
             (__v4si) __Y,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srav_epi32 (__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psrav4si_mask ((__v4si) __X,
             (__v4si) __Y,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srav_epi32 (__m256i __W, __mmask8 __U, __m256i __X,
      __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrav8si_mask ((__v8si) __X,
             (__v8si) __Y,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srav_epi32 (__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psrav8si_mask ((__v8si) __X,
             (__v8si) __Y,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_srav_epi64 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psravq128_mask ((__v2di) __X,
              (__v2di) __Y,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srav_epi64 (__m128i __W, __mmask8 __U, __m128i __X,
         __m128i __Y)
{
  return (__m128i) __builtin_ia32_psravq128_mask ((__v2di) __X,
              (__v2di) __Y,
              (__v2di) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srav_epi64 (__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_psravq128_mask ((__v2di) __X,
              (__v2di) __Y,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_srav_epi64 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psravq256_mask ((__v4di) __X,
              (__v4di) __Y,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srav_epi64 (__m256i __W, __mmask8 __U, __m256i __X,
      __m256i __Y)
{
  return (__m256i) __builtin_ia32_psravq256_mask ((__v4di) __X,
              (__v4di) __Y,
              (__v4di) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srav_epi64 (__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_psravq256_mask ((__v4di) __X,
              (__v4di) __Y,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mov_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectd_128 ((__mmask8) __U,
                 (__v4si) __A,
                 (__v4si) __W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mov_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectd_128 ((__mmask8) __U,
                 (__v4si) __A,
                 (__v4si) _mm_setzero_si128 ());
}


static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mov_epi32 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectd_256 ((__mmask8) __U,
                 (__v8si) __A,
                 (__v8si) __W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mov_epi32 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectd_256 ((__mmask8) __U,
                 (__v8si) __A,
                 (__v8si) _mm256_setzero_si256 ());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_load_epi32 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_movdqa32load128_mask ((__v4si *) __P,
              (__v4si) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_load_epi32 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_movdqa32load128_mask ((__v4si *) __P,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_load_epi32 (__m256i __W, __mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_movdqa32load256_mask ((__v8si *) __P,
              (__v8si) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_load_epi32 (__mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_movdqa32load256_mask ((__v8si *) __P,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8)
              __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_store_epi32 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_movdqa32store128_mask ((__v4si *) __P,
          (__v4si) __A,
          (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_store_epi32 (void *__P, __mmask8 __U, __m256i __A)
{
  __builtin_ia32_movdqa32store256_mask ((__v8si *) __P,
          (__v8si) __A,
          (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mov_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectq_128 ((__mmask8) __U,
                 (__v2di) __A,
                 (__v2di) __W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mov_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectq_128 ((__mmask8) __U,
                 (__v2di) __A,
                 (__v2di) _mm_setzero_di ());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mov_epi64 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectq_256 ((__mmask8) __U,
                 (__v4di) __A,
                 (__v4di) __W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mov_epi64 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectq_256 ((__mmask8) __U,
                 (__v4di) __A,
                 (__v4di) _mm256_setzero_si256 ());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_load_epi64 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_movdqa64load128_mask ((__v2di *) __P,
              (__v2di) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_load_epi64 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_movdqa64load128_mask ((__v2di *) __P,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_load_epi64 (__m256i __W, __mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_movdqa64load256_mask ((__v4di *) __P,
              (__v4di) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_load_epi64 (__mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_movdqa64load256_mask ((__v4di *) __P,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8)
              __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_store_epi64 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_movdqa64store128_mask ((__v2di *) __P,
          (__v2di) __A,
          (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_store_epi64 (void *__P, __mmask8 __U, __m256i __A)
{
  __builtin_ia32_movdqa64store256_mask ((__v4di *) __P,
          (__v4di) __A,
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_movedup_pd (__m128d __W, __mmask8 __U, __m128d __A)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_movedup_pd(__A),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_movedup_pd (__mmask8 __U, __m128d __A)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_movedup_pd(__A),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_movedup_pd (__m256d __W, __mmask8 __U, __m256d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_movedup_pd(__A),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_movedup_pd (__mmask8 __U, __m256d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_movedup_pd(__A),
                                              (__v4df)_mm256_setzero_pd());
}
# 5978 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_set1_epi64 (__m128i __O, __mmask8 __M, long long __A)
{
  return (__m128i) __builtin_ia32_pbroadcastq128_gpr_mask (__A, (__v2di) __O,
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_set1_epi64 (__mmask8 __M, long long __A)
{
  return (__m128i) __builtin_ia32_pbroadcastq128_gpr_mask (__A,
                 (__v2di)
                 _mm_setzero_si128 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_set1_epi64 (__m256i __O, __mmask8 __M, long long __A)
{
  return (__m256i) __builtin_ia32_pbroadcastq256_gpr_mask (__A, (__v4di) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_set1_epi64 (__mmask8 __M, long long __A)
{
  return (__m256i) __builtin_ia32_pbroadcastq256_gpr_mask (__A,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 __M);
}
# 6082 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_load_pd (__m128d __W, __mmask8 __U, void const *__P)
{
  return (__m128d) __builtin_ia32_loadapd128_mask ((__v2df *) __P,
               (__v2df) __W,
               (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_load_pd (__mmask8 __U, void const *__P)
{
  return (__m128d) __builtin_ia32_loadapd128_mask ((__v2df *) __P,
               (__v2df)
               _mm_setzero_pd (),
               (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_load_pd (__m256d __W, __mmask8 __U, void const *__P)
{
  return (__m256d) __builtin_ia32_loadapd256_mask ((__v4df *) __P,
               (__v4df) __W,
               (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_load_pd (__mmask8 __U, void const *__P)
{
  return (__m256d) __builtin_ia32_loadapd256_mask ((__v4df *) __P,
               (__v4df)
               _mm256_setzero_pd (),
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_load_ps (__m128 __W, __mmask8 __U, void const *__P)
{
  return (__m128) __builtin_ia32_loadaps128_mask ((__v4sf *) __P,
              (__v4sf) __W,
              (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_load_ps (__mmask8 __U, void const *__P)
{
  return (__m128) __builtin_ia32_loadaps128_mask ((__v4sf *) __P,
              (__v4sf)
              _mm_setzero_ps (),
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_load_ps (__m256 __W, __mmask8 __U, void const *__P)
{
  return (__m256) __builtin_ia32_loadaps256_mask ((__v8sf *) __P,
              (__v8sf) __W,
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_load_ps (__mmask8 __U, void const *__P)
{
  return (__m256) __builtin_ia32_loadaps256_mask ((__v8sf *) __P,
              (__v8sf)
              _mm256_setzero_ps (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_loadu_epi64 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddqudi128_mask ((__v2di *) __P,
                 (__v2di) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_loadu_epi64 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddqudi128_mask ((__v2di *) __P,
                 (__v2di)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_loadu_epi64 (__m256i __W, __mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddqudi256_mask ((__v4di *) __P,
                 (__v4di) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_loadu_epi64 (__mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddqudi256_mask ((__v4di *) __P,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_loadu_epi32 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddqusi128_mask ((__v4si *) __P,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_loadu_epi32 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddqusi128_mask ((__v4si *) __P,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_loadu_epi32 (__m256i __W, __mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddqusi256_mask ((__v8si *) __P,
                 (__v8si) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_loadu_epi32 (__mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddqusi256_mask ((__v8si *) __P,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_loadu_pd (__m128d __W, __mmask8 __U, void const *__P)
{
  return (__m128d) __builtin_ia32_loadupd128_mask ((__v2df *) __P,
               (__v2df) __W,
               (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_loadu_pd (__mmask8 __U, void const *__P)
{
  return (__m128d) __builtin_ia32_loadupd128_mask ((__v2df *) __P,
               (__v2df)
               _mm_setzero_pd (),
               (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_loadu_pd (__m256d __W, __mmask8 __U, void const *__P)
{
  return (__m256d) __builtin_ia32_loadupd256_mask ((__v4df *) __P,
               (__v4df) __W,
               (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_loadu_pd (__mmask8 __U, void const *__P)
{
  return (__m256d) __builtin_ia32_loadupd256_mask ((__v4df *) __P,
               (__v4df)
               _mm256_setzero_pd (),
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_loadu_ps (__m128 __W, __mmask8 __U, void const *__P)
{
  return (__m128) __builtin_ia32_loadups128_mask ((__v4sf *) __P,
              (__v4sf) __W,
              (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_loadu_ps (__mmask8 __U, void const *__P)
{
  return (__m128) __builtin_ia32_loadups128_mask ((__v4sf *) __P,
              (__v4sf)
              _mm_setzero_ps (),
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_loadu_ps (__m256 __W, __mmask8 __U, void const *__P)
{
  return (__m256) __builtin_ia32_loadups256_mask ((__v8sf *) __P,
              (__v8sf) __W,
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_loadu_ps (__mmask8 __U, void const *__P)
{
  return (__m256) __builtin_ia32_loadups256_mask ((__v8sf *) __P,
              (__v8sf)
              _mm256_setzero_ps (),
              (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_store_pd (void *__P, __mmask8 __U, __m128d __A)
{
  __builtin_ia32_storeapd128_mask ((__v2df *) __P,
           (__v2df) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_store_pd (void *__P, __mmask8 __U, __m256d __A)
{
  __builtin_ia32_storeapd256_mask ((__v4df *) __P,
           (__v4df) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_store_ps (void *__P, __mmask8 __U, __m128 __A)
{
  __builtin_ia32_storeaps128_mask ((__v4sf *) __P,
           (__v4sf) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_store_ps (void *__P, __mmask8 __U, __m256 __A)
{
  __builtin_ia32_storeaps256_mask ((__v8sf *) __P,
           (__v8sf) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_storeu_epi64 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_storedqudi128_mask ((__v2di *) __P,
             (__v2di) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_storeu_epi64 (void *__P, __mmask8 __U, __m256i __A)
{
  __builtin_ia32_storedqudi256_mask ((__v4di *) __P,
             (__v4di) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_storeu_epi32 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_storedqusi128_mask ((__v4si *) __P,
             (__v4si) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_storeu_epi32 (void *__P, __mmask8 __U, __m256i __A)
{
  __builtin_ia32_storedqusi256_mask ((__v8si *) __P,
             (__v8si) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_storeu_pd (void *__P, __mmask8 __U, __m128d __A)
{
  __builtin_ia32_storeupd128_mask ((__v2df *) __P,
           (__v2df) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_storeu_pd (void *__P, __mmask8 __U, __m256d __A)
{
  __builtin_ia32_storeupd256_mask ((__v4df *) __P,
           (__v4df) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_storeu_ps (void *__P, __mmask8 __U, __m128 __A)
{
  __builtin_ia32_storeups128_mask ((__v4sf *) __P,
           (__v4sf) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_storeu_ps (void *__P, __mmask8 __U, __m256 __A)
{
  __builtin_ia32_storeups256_mask ((__v8sf *) __P,
           (__v8sf) __A,
           (__mmask8) __U);
}


static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpackhi_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_unpackhi_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpackhi_pd(__mmask8 __U, __m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_unpackhi_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpackhi_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                           (__v4df)_mm256_unpackhi_pd(__A, __B),
                                           (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpackhi_pd(__mmask8 __U, __m256d __A, __m256d __B)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                           (__v4df)_mm256_unpackhi_pd(__A, __B),
                                           (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpackhi_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_unpackhi_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpackhi_ps(__mmask8 __U, __m128 __A, __m128 __B)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_unpackhi_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpackhi_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                           (__v8sf)_mm256_unpackhi_ps(__A, __B),
                                           (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpackhi_ps(__mmask8 __U, __m256 __A, __m256 __B)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                           (__v8sf)_mm256_unpackhi_ps(__A, __B),
                                           (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpacklo_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_unpacklo_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpacklo_pd(__mmask8 __U, __m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_unpacklo_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpacklo_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                           (__v4df)_mm256_unpacklo_pd(__A, __B),
                                           (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpacklo_pd(__mmask8 __U, __m256d __A, __m256d __B)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                           (__v4df)_mm256_unpacklo_pd(__A, __B),
                                           (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpacklo_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_unpacklo_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpacklo_ps(__mmask8 __U, __m128 __A, __m128 __B)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_unpacklo_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpacklo_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                           (__v8sf)_mm256_unpacklo_ps(__A, __B),
                                           (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpacklo_ps(__mmask8 __U, __m256 __A, __m256 __B)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                           (__v8sf)_mm256_unpacklo_ps(__A, __B),
                                           (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rcp14_pd (__m128d __A)
{
  return (__m128d) __builtin_ia32_rcp14pd128_mask ((__v2df) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rcp14_pd (__m128d __W, __mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_rcp14pd128_mask ((__v2df) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rcp14_pd (__mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_rcp14pd128_mask ((__v2df) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rcp14_pd (__m256d __A)
{
  return (__m256d) __builtin_ia32_rcp14pd256_mask ((__v4df) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rcp14_pd (__m256d __W, __mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_rcp14pd256_mask ((__v4df) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rcp14_pd (__mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_rcp14pd256_mask ((__v4df) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rcp14_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_rcp14ps128_mask ((__v4sf) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rcp14_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_rcp14ps128_mask ((__v4sf) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rcp14_ps (__mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_rcp14ps128_mask ((__v4sf) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rcp14_ps (__m256 __A)
{
  return (__m256) __builtin_ia32_rcp14ps256_mask ((__v8sf) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rcp14_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_rcp14ps256_mask ((__v8sf) __A,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rcp14_ps (__mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_rcp14ps256_mask ((__v8sf) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) __U);
}
# 6655 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutevar_pd (__m128d __W, __mmask8 __U, __m128d __A,
      __m128i __C)
{
  return (__m128d) __builtin_ia32_vpermilvarpd_mask ((__v2df) __A,
                 (__v2di) __C,
                 (__v2df) __W,
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutevar_pd (__mmask8 __U, __m128d __A, __m128i __C)
{
  return (__m128d) __builtin_ia32_vpermilvarpd_mask ((__v2df) __A,
                 (__v2di) __C,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutevar_pd (__m256d __W, __mmask8 __U, __m256d __A,
         __m256i __C)
{
  return (__m256d) __builtin_ia32_vpermilvarpd256_mask ((__v4df) __A,
              (__v4di) __C,
              (__v4df) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutevar_pd (__mmask8 __U, __m256d __A, __m256i __C)
{
  return (__m256d) __builtin_ia32_vpermilvarpd256_mask ((__v4df) __A,
              (__v4di) __C,
              (__v4df)
              _mm256_setzero_pd (),
              (__mmask8)
              __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutevar_ps (__m128 __W, __mmask8 __U, __m128 __A,
      __m128i __C)
{
  return (__m128) __builtin_ia32_vpermilvarps_mask ((__v4sf) __A,
                (__v4si) __C,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutevar_ps (__mmask8 __U, __m128 __A, __m128i __C)
{
  return (__m128) __builtin_ia32_vpermilvarps_mask ((__v4sf) __A,
                (__v4si) __C,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutevar_ps (__m256 __W, __mmask8 __U, __m256 __A,
         __m256i __C)
{
  return (__m256) __builtin_ia32_vpermilvarps256_mask ((__v8sf) __A,
                   (__v8si) __C,
                   (__v8sf) __W,
                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutevar_ps (__mmask8 __U, __m256 __A, __m256i __C)
{
  return (__m256) __builtin_ia32_vpermilvarps256_mask ((__v8sf) __A,
                   (__v8si) __C,
                   (__v8sf)
                   _mm256_setzero_ps (),
                   (__mmask8) __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_test_epi32_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmd128 ((__v4si) __A,
                 (__v4si) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_test_epi32_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmd128 ((__v4si) __A,
                 (__v4si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_test_epi32_mask (__m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestmd256 ((__v8si) __A,
                 (__v8si) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_test_epi32_mask (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestmd256 ((__v8si) __A,
                 (__v8si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_test_epi64_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq128 ((__v2di) __A,
                 (__v2di) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_test_epi64_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq128 ((__v2di) __A,
                 (__v2di) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_test_epi64_mask (__m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq256 ((__v4di) __A,
                 (__v4di) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_test_epi64_mask (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq256 ((__v4di) __A,
                 (__v4di) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_testn_epi32_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmd128 ((__v4si) __A,
            (__v4si) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_testn_epi32_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmd128 ((__v4si) __A,
            (__v4si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_testn_epi32_mask (__m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmd256 ((__v8si) __A,
            (__v8si) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_testn_epi32_mask (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmd256 ((__v8si) __A,
            (__v8si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_testn_epi64_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq128 ((__v2di) __A,
            (__v2di) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_testn_epi64_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq128 ((__v2di) __A,
            (__v2di) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_testn_epi64_mask (__m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq256 ((__v4di) __A,
            (__v4di) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_testn_epi64_mask (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq256 ((__v4di) __A,
            (__v4di) __B, __U);
}



static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpackhi_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                           (__v4si)_mm_unpackhi_epi32(__A, __B),
                                           (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpackhi_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                           (__v4si)_mm_unpackhi_epi32(__A, __B),
                                           (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpackhi_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                        (__v8si)_mm256_unpackhi_epi32(__A, __B),
                                        (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpackhi_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                        (__v8si)_mm256_unpackhi_epi32(__A, __B),
                                        (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpackhi_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                           (__v2di)_mm_unpackhi_epi64(__A, __B),
                                           (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpackhi_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                           (__v2di)_mm_unpackhi_epi64(__A, __B),
                                           (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpackhi_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                        (__v4di)_mm256_unpackhi_epi64(__A, __B),
                                        (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpackhi_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                        (__v4di)_mm256_unpackhi_epi64(__A, __B),
                                        (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpacklo_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                           (__v4si)_mm_unpacklo_epi32(__A, __B),
                                           (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpacklo_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                           (__v4si)_mm_unpacklo_epi32(__A, __B),
                                           (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpacklo_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                        (__v8si)_mm256_unpacklo_epi32(__A, __B),
                                        (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpacklo_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                        (__v8si)_mm256_unpacklo_epi32(__A, __B),
                                        (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpacklo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                           (__v2di)_mm_unpacklo_epi64(__A, __B),
                                           (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpacklo_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                           (__v2di)_mm_unpacklo_epi64(__A, __B),
                                           (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpacklo_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                        (__v4di)_mm256_unpacklo_epi64(__A, __B),
                                        (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpacklo_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                        (__v4di)_mm256_unpacklo_epi64(__A, __B),
                                        (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sra_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psrad128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sra_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psrad128_mask ((__v4si) __A,
             (__v4si) __B,
             (__v4si)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sra_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_psrad256_mask ((__v8si) __A,
             (__v4si) __B,
             (__v8si) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sra_epi32 (__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psrad256_mask ((__v8si) __A,
             (__v4si) __B,
             (__v8si)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}
# 7047 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_sra_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psraq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di)
             _mm_setzero_di (),
             (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sra_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psraq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sra_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psraq128_mask ((__v2di) __A,
             (__v2di) __B,
             (__v2di)
             _mm_setzero_di (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_sra_epi64 (__m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psraq256_mask ((__v4di) __A,
             (__v2di) __B,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sra_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_psraq256_mask ((__v4di) __A,
             (__v2di) __B,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sra_epi64 (__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psraq256_mask ((__v4di) __A,
             (__v2di) __B,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}
# 7332 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rsqrt14_pd (__m128d __A)
{
  return (__m128d) __builtin_ia32_rsqrt14pd128_mask ((__v2df) __A,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rsqrt14_pd (__m128d __W, __mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_rsqrt14pd128_mask ((__v2df) __A,
                 (__v2df) __W,
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rsqrt14_pd (__mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_rsqrt14pd128_mask ((__v2df) __A,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rsqrt14_pd (__m256d __A)
{
  return (__m256d) __builtin_ia32_rsqrt14pd256_mask ((__v4df) __A,
                 (__v4df)
                 _mm256_setzero_pd (),
                 (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rsqrt14_pd (__m256d __W, __mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_rsqrt14pd256_mask ((__v4df) __A,
                 (__v4df) __W,
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rsqrt14_pd (__mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_rsqrt14pd256_mask ((__v4df) __A,
                 (__v4df)
                 _mm256_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rsqrt14_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_rsqrt14ps128_mask ((__v4sf) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rsqrt14_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_rsqrt14ps128_mask ((__v4sf) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rsqrt14_ps (__mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_rsqrt14ps128_mask ((__v4sf) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rsqrt14_ps (__m256 __A)
{
  return (__m256) __builtin_ia32_rsqrt14ps256_mask ((__v8sf) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rsqrt14_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_rsqrt14ps256_mask ((__v8sf) __A,
                (__v8sf) __W,
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rsqrt14_ps (__mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_rsqrt14ps256_mask ((__v8sf) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_broadcast_f32x4 (__m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x4_256_mask ((__v4sf) __A,
                (__v8sf)_mm256_undefined_pd (),
                (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcast_f32x4 (__m256 __O, __mmask8 __M, __m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x4_256_mask ((__v4sf) __A,
                (__v8sf) __O,
                __M);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcast_f32x4 (__mmask8 __M, __m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x4_256_mask ((__v4sf) __A,
                (__v8sf) _mm256_setzero_ps (),
                __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_broadcast_i32x4 (__m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x4_256_mask ((__v4si) __A,
                 (__v8si)_mm256_undefined_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcast_i32x4 (__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x4_256_mask ((__v4si) __A,
                 (__v8si)
                 __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcast_i32x4 (__mmask8 __M, __m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x4_256_mask ((__v4si)
                 __A,
                 (__v8si) _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcastsd_pd (__m256d __O, __mmask8 __M, __m128d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256(__M,
                                              (__v4df) _mm256_broadcastsd_pd(__A),
                                              (__v4df) __O);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcastsd_pd (__mmask8 __M, __m128d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256(__M,
                                              (__v4df) _mm256_broadcastsd_pd(__A),
                                              (__v4df) _mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_broadcastss_ps (__m128 __O, __mmask8 __M, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128(__M,
                                             (__v4sf) _mm_broadcastss_ps(__A),
                                             (__v4sf) __O);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_broadcastss_ps (__mmask8 __M, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128(__M,
                                             (__v4sf) _mm_broadcastss_ps(__A),
                                             (__v4sf) _mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcastss_ps (__m256 __O, __mmask8 __M, __m128 __A)
{
  return (__m256)__builtin_ia32_selectps_256(__M,
                                             (__v8sf) _mm256_broadcastss_ps(__A),
                                             (__v8sf) __O);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcastss_ps (__mmask8 __M, __m128 __A)
{
  return (__m256)__builtin_ia32_selectps_256(__M,
                                             (__v8sf) _mm256_broadcastss_ps(__A),
                                             (__v8sf) _mm256_setzero_ps());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_broadcastd_epi32 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128(__M,
                                             (__v4si) _mm_broadcastd_epi32(__A),
                                             (__v4si) __O);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_broadcastd_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128(__M,
                                             (__v4si) _mm_broadcastd_epi32(__A),
                                             (__v4si) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcastd_epi32 (__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256(__M,
                                             (__v8si) _mm256_broadcastd_epi32(__A),
                                             (__v8si) __O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcastd_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256(__M,
                                             (__v8si) _mm256_broadcastd_epi32(__A),
                                             (__v8si) _mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_broadcastq_epi64 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128(__M,
                                             (__v2di) _mm_broadcastq_epi64(__A),
                                             (__v2di) __O);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_broadcastq_epi64 (__mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128(__M,
                                             (__v2di) _mm_broadcastq_epi64(__A),
                                             (__v2di) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcastq_epi64 (__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256(__M,
                                             (__v4di) _mm256_broadcastq_epi64(__A),
                                             (__v4di) __O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcastq_epi64 (__mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256(__M,
                                             (__v4di) _mm256_broadcastq_epi64(__A),
                                             (__v4di) _mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi32_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb128_mask ((__v4si) __A,
               (__v16qi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi32_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb128_mask ((__v4si) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi32_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb128_mask ((__v4si) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi32_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb256_mask ((__v8si) __A,
               (__v16qi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi32_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb256_mask ((__v8si) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi32_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb256_mask ((__v8si) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsdb256mem_mask ((__v16qi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi32_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw128_mask ((__v4si) __A,
               (__v8hi)_mm_setzero_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi32_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw128_mask ((__v4si) __A,
               (__v8hi)__O,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi32_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw128_mask ((__v4si) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi32_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw256_mask ((__v8si) __A,
               (__v8hi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi32_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw256_mask ((__v8si) __A,
               (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi32_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw256_mask ((__v8si) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi32_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsdw256mem_mask ((__v8hi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi64_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb128_mask ((__v2di) __A,
               (__v16qi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb128_mask ((__v2di) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi64_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb128_mask ((__v2di) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi64_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb256_mask ((__v4di) __A,
               (__v16qi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb256_mask ((__v4di) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi64_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb256_mask ((__v4di) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi64_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd128_mask ((__v2di) __A,
               (__v4si)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_epi32 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd128_mask ((__v2di) __A,
               (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi64_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd128_mask ((__v2di) __A,
               (__v4si) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi64_epi32 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd256_mask ((__v4di) __A,
               (__v4si)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_epi32 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd256_mask ((__v4di) __A,
               (__v4si)__O,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi64_epi32 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd256_mask ((__v4di) __A,
               (__v4si) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_storeu_epi32 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsqd256mem_mask ((__v4si *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi64_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw128_mask ((__v2di) __A,
               (__v8hi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw128_mask ((__v2di) __A,
               (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi64_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw128_mask ((__v2di) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi64_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw256_mask ((__v4di) __A,
               (__v8hi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw256_mask ((__v4di) __A,
               (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi64_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw256_mask ((__v4di) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi32_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb128_mask ((__v4si) __A,
                (__v16qi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi32_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb128_mask ((__v4si) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi32_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb128_mask ((__v4si) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi32_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb256_mask ((__v8si) __A,
                (__v16qi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi32_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb256_mask ((__v8si) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi32_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb256_mask ((__v8si) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovusdb256mem_mask ((__v16qi*) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi32_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw128_mask ((__v4si) __A,
                (__v8hi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi32_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw128_mask ((__v4si) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi32_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw128_mask ((__v4si) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi32_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw256_mask ((__v8si) __A,
                (__v8hi) _mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi32_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw256_mask ((__v8si) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi32_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw256_mask ((__v8si) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi32_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovusdw256mem_mask ((__v8hi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi64_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb128_mask ((__v2di) __A,
                (__v16qi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb128_mask ((__v2di) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi64_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb128_mask ((__v2di) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi64_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb256_mask ((__v4di) __A,
                (__v16qi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb256_mask ((__v4di) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi64_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb256_mask ((__v4di) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovusqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi64_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd128_mask ((__v2di) __A,
                (__v4si)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_epi32 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd128_mask ((__v2di) __A,
                (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi64_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd128_mask ((__v2di) __A,
                (__v4si) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi64_epi32 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd256_mask ((__v4di) __A,
                (__v4si)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_epi32 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd256_mask ((__v4di) __A,
                (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi64_epi32 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd256_mask ((__v4di) __A,
                (__v4si) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_storeu_epi32 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovusqd256mem_mask ((__v4si *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi64_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw128_mask ((__v2di) __A,
                (__v8hi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw128_mask ((__v2di) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi64_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw128_mask ((__v2di) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi64_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw256_mask ((__v4di) __A,
                (__v8hi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw256_mask ((__v4di) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi64_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw256_mask ((__v4di) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  return __builtin_ia32_pmovusqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi32_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdb128_mask ((__v4si) __A,
              (__v16qi)_mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdb128_mask ((__v4si) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdb128_mask ((__v4si) __A,
              (__v16qi)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi32_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdb256_mask ((__v8si) __A,
              (__v16qi)_mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdb256_mask ((__v8si) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdb256_mask ((__v8si) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovdb256mem_mask ((__v16qi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi32_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdw128_mask ((__v4si) __A,
              (__v8hi) _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdw128_mask ((__v4si) __A,
              (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdw128_mask ((__v4si) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi32_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdw256_mask ((__v8si) __A,
              (__v8hi)_mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdw256_mask ((__v8si) __A,
              (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdw256_mask ((__v8si) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovdw256mem_mask ((__v8hi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi64_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqb128_mask ((__v2di) __A,
              (__v16qi) _mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqb128_mask ((__v2di) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi64_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqb128_mask ((__v2di) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi64_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqb256_mask ((__v4di) __A,
              (__v16qi) _mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqb256_mask ((__v4di) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi64_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqb256_mask ((__v4di) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi64_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqd128_mask ((__v2di) __A,
              (__v4si)_mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_epi32 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqd128_mask ((__v2di) __A,
              (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi64_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqd128_mask ((__v2di) __A,
              (__v4si) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi64_epi32 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqd256_mask ((__v4di) __A,
              (__v4si) _mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_epi32 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqd256_mask ((__v4di) __A,
              (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi64_epi32 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqd256_mask ((__v4di) __A,
              (__v4si) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_storeu_epi32 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovqd256mem_mask ((__v4si *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi64_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqw128_mask ((__v2di) __A,
              (__v8hi) _mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqw128_mask ((__v2di) __A,
              (__v8hi)__O,
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi64_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqw128_mask ((__v2di) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi64_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqw256_mask ((__v4di) __A,
              (__v8hi)_mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqw256_mask ((__v4di) __A,
              (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi64_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqw256_mask ((__v4di) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);
}
# 8750 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutexvar_pd (__m256i __X, __m256d __Y)
{
  return (__m256d) __builtin_ia32_permvardf256_mask ((__v4df) __Y,
                 (__v4di) __X,
                 (__v4df) _mm256_undefined_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutexvar_pd (__m256d __W, __mmask8 __U, __m256i __X,
          __m256d __Y)
{
  return (__m256d) __builtin_ia32_permvardf256_mask ((__v4df) __Y,
                 (__v4di) __X,
                 (__v4df) __W,
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutexvar_pd (__mmask8 __U, __m256i __X, __m256d __Y)
{
  return (__m256d) __builtin_ia32_permvardf256_mask ((__v4df) __Y,
                 (__v4di) __X,
                 (__v4df) _mm256_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutexvar_epi64 (__mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvardi256_mask ((__v4di) __Y,
                 (__v4di) __X,
                 (__v4di) _mm256_setzero_si256 (),
                 (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutexvar_epi64 ( __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvardi256_mask ((__v4di) __Y,
                 (__v4di) __X,
                 (__v4di) _mm256_undefined_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutexvar_epi64 (__m256i __W, __mmask8 __M, __m256i __X,
             __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvardi256_mask ((__v4di) __Y,
                 (__v4di) __X,
                 (__v4di) __W,
                 __M);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutexvar_ps (__m256 __W, __mmask8 __U, __m256i __X,
          __m256 __Y)
{
  return (__m256) __builtin_ia32_permvarsf256_mask ((__v8sf) __Y,
                (__v8si) __X,
                (__v8sf) __W,
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutexvar_ps (__mmask8 __U, __m256i __X, __m256 __Y)
{
  return (__m256) __builtin_ia32_permvarsf256_mask ((__v8sf) __Y,
                (__v8si) __X,
                (__v8sf) _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutexvar_ps (__m256i __X, __m256 __Y)
{
  return (__m256) __builtin_ia32_permvarsf256_mask ((__v8sf) __Y,
                (__v8si) __X,
                (__v8sf) _mm256_undefined_si256 (),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutexvar_epi32 (__mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvarsi256_mask ((__v8si) __Y,
                 (__v8si) __X,
                 (__v8si) _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutexvar_epi32 (__m256i __W, __mmask8 __M, __m256i __X,
             __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvarsi256_mask ((__v8si) __Y,
                 (__v8si) __X,
                 (__v8si) __W,
                 (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutexvar_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvarsi256_mask ((__v8si) __Y,
                 (__v8si) __X,
                 (__v8si) _mm256_undefined_si256(),
                 (__mmask8) -1);
}
# 8934 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_movehdup_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_movehdup_ps(__A),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_movehdup_ps (__mmask8 __U, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_movehdup_ps(__A),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_movehdup_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_movehdup_ps(__A),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_movehdup_ps (__mmask8 __U, __m256 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_movehdup_ps(__A),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_moveldup_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_moveldup_ps(__A),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_moveldup_ps (__mmask8 __U, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_moveldup_ps(__A),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_moveldup_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_moveldup_ps(__A),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_moveldup_ps (__mmask8 __U, __m256 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_moveldup_ps(__A),
                                             (__v8sf)_mm256_setzero_ps());
}
# 9018 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mov_pd (__m128d __W, __mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_selectpd_128 ((__mmask8) __U,
              (__v2df) __A,
              (__v2df) __W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mov_pd (__mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_selectpd_128 ((__mmask8) __U,
              (__v2df) __A,
              (__v2df) _mm_setzero_pd ());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mov_pd (__m256d __W, __mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_selectpd_256 ((__mmask8) __U,
              (__v4df) __A,
              (__v4df) __W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mov_pd (__mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_selectpd_256 ((__mmask8) __U,
              (__v4df) __A,
              (__v4df) _mm256_setzero_pd ());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mov_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_selectps_128 ((__mmask8) __U,
             (__v4sf) __A,
             (__v4sf) __W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mov_ps (__mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_selectps_128 ((__mmask8) __U,
             (__v4sf) __A,
             (__v4sf) _mm_setzero_ps ());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mov_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_selectps_256 ((__mmask8) __U,
             (__v8sf) __A,
             (__v8sf) __W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mov_ps (__mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_selectps_256 ((__mmask8) __U,
             (__v8sf) __A,
             (__v8sf) _mm256_setzero_ps ());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtph_ps (__m128 __W, __mmask8 __U, __m128i __A)
{
  return (__m128) __builtin_ia32_vcvtph2ps_mask ((__v8hi) __A,
             (__v4sf) __W,
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtph_ps (__mmask8 __U, __m128i __A)
{
  return (__m128) __builtin_ia32_vcvtph2ps_mask ((__v8hi) __A,
             (__v4sf)
             _mm_setzero_ps (),
             (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtph_ps (__m256 __W, __mmask8 __U, __m128i __A)
{
  return (__m256) __builtin_ia32_vcvtph2ps256_mask ((__v8hi) __A,
                (__v8sf) __W,
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtph_ps (__mmask8 __U, __m128i __A)
{
  return (__m256) __builtin_ia32_vcvtph2ps256_mask ((__v8hi) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtps_ph (__m128i __W, __mmask8 __U, __m128 __A)
{
  return (__m128i) __builtin_ia32_vcvtps2ph_mask ((__v4sf) __A, 0x04,
                                                  (__v8hi) __W,
                                                  (__mmask8) __U);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtps_ph (__mmask8 __U, __m128 __A)
{
  return (__m128i) __builtin_ia32_vcvtps2ph_mask ((__v4sf) __A, 0x04,
                                                  (__v8hi) _mm_setzero_si128 (),
                                                  (__mmask8) __U);
}
# 9142 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtps_ph (__m128i __W, __mmask8 __U, __m256 __A)
{
  return (__m128i) __builtin_ia32_vcvtps2ph256_mask ((__v8sf) __A, 0x04,
                                                      (__v8hi) __W,
                                                      (__mmask8) __U);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtps_ph ( __mmask8 __U, __m256 __A)
{
  return (__m128i) __builtin_ia32_vcvtps2ph256_mask ((__v8sf) __A, 0x04,
                                                      (__v8hi) _mm_setzero_si128(),
                                                      (__mmask8) __U);
}
# 104 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512bwintrin.h" 1 3
# 31 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512bwintrin.h" 3
typedef unsigned int __mmask32;
typedef unsigned long long __mmask64;




static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_setzero_qi(void) {
  return (__m512i)(__v64qi){ 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_setzero_hi(void) {
  return (__m512i)(__v32hi){ 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };
}



static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpeq_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__a, (__v64qi)__b,
                                                   (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpeq_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__a, (__v64qi)__b,
                                                   __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpeq_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 0,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpeq_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 0,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpeq_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__a, (__v32hi)__b,
                                                   (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpeq_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__a, (__v32hi)__b,
                                                   __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpeq_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 0,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpeq_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 0,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpge_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 5,
                                                (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpge_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 5,
                                                __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpge_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 5,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpge_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 5,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpge_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 5,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpge_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 5,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpge_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 5,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpge_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 5,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpgt_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__a, (__v64qi)__b,
                                                   (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpgt_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__a, (__v64qi)__b,
                                                   __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpgt_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 6,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpgt_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 6,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpgt_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__a, (__v32hi)__b,
                                                   (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpgt_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__a, (__v32hi)__b,
                                                   __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpgt_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 6,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpgt_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 6,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmple_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 2,
                                                (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmple_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 2,
                                                __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmple_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 2,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmple_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 2,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmple_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 2,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmple_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 2,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmple_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 2,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmple_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 2,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmplt_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 1,
                                                (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmplt_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 1,
                                                __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmplt_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 1,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmplt_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 1,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmplt_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 1,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmplt_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 1,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmplt_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 1,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmplt_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 1,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpneq_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 4,
                                                (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpneq_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 4,
                                                __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpneq_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 4,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpneq_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 4,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpneq_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 4,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpneq_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 4,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpneq_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 4,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpneq_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 4,
                                                 __u);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_add_epi8 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v64qu) __A + (__v64qu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_add_epi8 (__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_paddb512_mask ((__v64qi) __A,
             (__v64qi) __B,
             (__v64qi) __W,
             (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_add_epi8 (__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_paddb512_mask ((__v64qi) __A,
             (__v64qi) __B,
             (__v64qi) _mm512_setzero_qi(),
             (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sub_epi8 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v64qu) __A - (__v64qu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sub_epi8 (__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_psubb512_mask ((__v64qi) __A,
             (__v64qi) __B,
             (__v64qi) __W,
             (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sub_epi8 (__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_psubb512_mask ((__v64qi) __A,
             (__v64qi) __B,
             (__v64qi) _mm512_setzero_qi(),
             (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_add_epi16 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v32hu) __A + (__v32hu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_add_epi16 (__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_paddw512_mask ((__v32hi) __A,
             (__v32hi) __B,
             (__v32hi) __W,
             (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_add_epi16 (__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_paddw512_mask ((__v32hi) __A,
             (__v32hi) __B,
             (__v32hi) _mm512_setzero_hi(),
             (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sub_epi16 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v32hu) __A - (__v32hu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sub_epi16 (__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_psubw512_mask ((__v32hi) __A,
             (__v32hi) __B,
             (__v32hi) __W,
             (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sub_epi16 (__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_psubw512_mask ((__v32hi) __A,
             (__v32hi) __B,
             (__v32hi) _mm512_setzero_hi(),
             (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mullo_epi16 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v32hu) __A * (__v32hu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mullo_epi16 (__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_pmullw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mullo_epi16 (__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_pmullw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_blend_epi8 (__mmask64 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_selectb_512 ((__mmask64) __U,
              (__v64qi) __W,
              (__v64qi) __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_blend_epi16 (__mmask32 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_selectw_512 ((__mmask32) __U,
              (__v32hi) __W,
              (__v32hi) __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_abs_epi8 (__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsb512_mask ((__v64qi) __A,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_abs_epi8 (__m512i __W, __mmask64 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsb512_mask ((__v64qi) __A,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_abs_epi8 (__mmask64 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsb512_mask ((__v64qi) __A,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_abs_epi16 (__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsw512_mask ((__v32hi) __A,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_abs_epi16 (__m512i __W, __mmask32 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsw512_mask ((__v32hi) __A,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_abs_epi16 (__mmask32 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsw512_mask ((__v32hi) __A,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_packs_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_packssdw512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_packs_epi32 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_packssdw512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v32hi) _mm512_setzero_hi(),
              __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_packs_epi32 (__m512i __W, __mmask32 __M, __m512i __A,
       __m512i __B)
{
  return (__m512i) __builtin_ia32_packssdw512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v32hi) __W,
              __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_packs_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_packsswb512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_packs_epi16 (__m512i __W, __mmask64 __M, __m512i __A,
       __m512i __B)
{
  return (__m512i) __builtin_ia32_packsswb512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_packs_epi16 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_packsswb512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v64qi) _mm512_setzero_qi(),
              __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_packus_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_packusdw512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_packus_epi32 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_packusdw512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v32hi) _mm512_setzero_hi(),
              __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_packus_epi32 (__m512i __W, __mmask32 __M, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_packusdw512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v32hi) __W,
              __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_packus_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_packuswb512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_packus_epi16 (__m512i __W, __mmask64 __M, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_packuswb512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_packus_epi16 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_packuswb512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_adds_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_adds_epi8 (__m512i __W, __mmask64 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_adds_epi8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_adds_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_adds_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_adds_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_adds_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_adds_epu8 (__m512i __W, __mmask64 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_adds_epu8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_adds_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_adds_epu16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_adds_epu16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_avg_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_avg_epu8 (__m512i __W, __mmask64 __U, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_avg_epu8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_avg_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_avg_epu16 (__m512i __W, __mmask32 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_avg_epu16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_max_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_max_epi8 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_max_epi8 (__m512i __W, __mmask64 __M, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_max_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_max_epi16 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_max_epi16 (__m512i __W, __mmask32 __M, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_max_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_max_epu8 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_max_epu8 (__m512i __W, __mmask64 __M, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_max_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_max_epu16 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_max_epu16 (__m512i __W, __mmask32 __M, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_min_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_min_epi8 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_min_epi8 (__m512i __W, __mmask64 __M, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_min_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_min_epi16 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_min_epi16 (__m512i __W, __mmask32 __M, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_min_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_min_epu8 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_min_epu8 (__m512i __W, __mmask64 __M, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pminub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_min_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_min_epu16 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_min_epu16 (__m512i __W, __mmask32 __M, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_shuffle_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pshufb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_shuffle_epi8 (__m512i __W, __mmask64 __U, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_pshufb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_shuffle_epi8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pshufb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_subs_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_subs_epi8 (__m512i __W, __mmask64 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_subs_epi8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_subs_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_subs_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_subs_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_subs_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_subs_epu8 (__m512i __W, __mmask64 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_subs_epu8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_subs_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_subs_epu16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_subs_epu16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask2_permutex2var_epi16 (__m512i __A, __m512i __I,
         __mmask32 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2varhi512_mask ((__v32hi) __A,
              (__v32hi) __I ,
              (__v32hi) __B,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_permutex2var_epi16 (__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varhi512_mask ((__v32hi) __I ,
              (__v32hi) __A,
              (__v32hi) __B,
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_permutex2var_epi16 (__m512i __A, __mmask32 __U,
        __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varhi512_mask ((__v32hi) __I ,
              (__v32hi) __A,
              (__v32hi) __B,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_permutex2var_epi16 (__mmask32 __U, __m512i __A,
         __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varhi512_maskz ((__v32hi) __I
                        ,
              (__v32hi) __A,
              (__v32hi) __B,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mulhrs_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhrsw512_mask ((__v32hi) __A,
                (__v32hi) __B,
                (__v32hi) _mm512_setzero_hi(),
                (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mulhrs_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhrsw512_mask ((__v32hi) __A,
                (__v32hi) __B,
                (__v32hi) __W,
                (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mulhrs_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhrsw512_mask ((__v32hi) __A,
                (__v32hi) __B,
                (__v32hi) _mm512_setzero_hi(),
                (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mulhi_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mulhi_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
       __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mulhi_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mulhi_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhuw512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v32hi) _mm512_setzero_hi(),
               (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mulhi_epu16 (__m512i __W, __mmask32 __U, __m512i __A,
       __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhuw512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v32hi) __W,
               (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mulhi_epu16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhuw512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v32hi) _mm512_setzero_hi(),
               (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maddubs_epi16 (__m512i __X, __m512i __Y) {
  return (__m512i) __builtin_ia32_pmaddubsw512_mask ((__v64qi) __X,
                 (__v64qi) __Y,
                 (__v32hi) _mm512_setzero_hi(),
                 (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_maddubs_epi16 (__m512i __W, __mmask32 __U, __m512i __X,
         __m512i __Y) {
  return (__m512i) __builtin_ia32_pmaddubsw512_mask ((__v64qi) __X,
                 (__v64qi) __Y,
                 (__v32hi) __W,
                 (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_maddubs_epi16 (__mmask32 __U, __m512i __X, __m512i __Y) {
  return (__m512i) __builtin_ia32_pmaddubsw512_mask ((__v64qi) __X,
                 (__v64qi) __Y,
                 (__v32hi) _mm512_setzero_hi(),
                 (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_madd_epi16 (__m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_pmaddwd512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v16si) _mm512_setzero_si512(),
               (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_madd_epi16 (__m512i __W, __mmask16 __U, __m512i __A,
      __m512i __B) {
  return (__m512i) __builtin_ia32_pmaddwd512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v16si) __W,
               (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_madd_epi16 (__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_pmaddwd512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v16si) _mm512_setzero_si512(),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtsepi16_epi8 (__m512i __A) {
  return (__m256i) __builtin_ia32_pmovswb512_mask ((__v32hi) __A,
               (__v32qi)_mm256_setzero_si256(),
               (__mmask32) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtsepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovswb512_mask ((__v32hi) __A,
               (__v32qi)__O,
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtsepi16_epi8 (__mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovswb512_mask ((__v32hi) __A,
               (__v32qi) _mm256_setzero_si256(),
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtusepi16_epi8 (__m512i __A) {
  return (__m256i) __builtin_ia32_pmovuswb512_mask ((__v32hi) __A,
                (__v32qi) _mm256_setzero_si256(),
                (__mmask32) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtusepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovuswb512_mask ((__v32hi) __A,
                (__v32qi) __O,
                __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtusepi16_epi8 (__mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovuswb512_mask ((__v32hi) __A,
                (__v32qi) _mm256_setzero_si256(),
                __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtepi16_epi8 (__m512i __A) {
  return (__m256i) __builtin_ia32_pmovwb512_mask ((__v32hi) __A,
              (__v32qi) _mm256_setzero_si256(),
              (__mmask32) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovwb512_mask ((__v32hi) __A,
              (__v32qi) __O,
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtepi16_epi8 (__mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovwb512_mask ((__v32hi) __A,
              (__v32qi) _mm256_setzero_si256(),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)
{
  __builtin_ia32_pmovwb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)
{
  __builtin_ia32_pmovswb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)
{
  __builtin_ia32_pmovuswb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_unpackhi_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_shufflevector((__v64qi)__A, (__v64qi)__B,
                                          8, 64+8, 9, 64+9,
                                          10, 64+10, 11, 64+11,
                                          12, 64+12, 13, 64+13,
                                          14, 64+14, 15, 64+15,
                                          24, 64+24, 25, 64+25,
                                          26, 64+26, 27, 64+27,
                                          28, 64+28, 29, 64+29,
                                          30, 64+30, 31, 64+31,
                                          40, 64+40, 41, 64+41,
                                          42, 64+42, 43, 64+43,
                                          44, 64+44, 45, 64+45,
                                          46, 64+46, 47, 64+47,
                                          56, 64+56, 57, 64+57,
                                          58, 64+58, 59, 64+59,
                                          60, 64+60, 61, 64+61,
                                          62, 64+62, 63, 64+63);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_unpackhi_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                        (__v64qi)_mm512_unpackhi_epi8(__A, __B),
                                        (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_unpackhi_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                        (__v64qi)_mm512_unpackhi_epi8(__A, __B),
                                        (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_unpackhi_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_shufflevector((__v32hi)__A, (__v32hi)__B,
                                          4, 32+4, 5, 32+5,
                                          6, 32+6, 7, 32+7,
                                          12, 32+12, 13, 32+13,
                                          14, 32+14, 15, 32+15,
                                          20, 32+20, 21, 32+21,
                                          22, 32+22, 23, 32+23,
                                          28, 32+28, 29, 32+29,
                                          30, 32+30, 31, 32+31);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_unpackhi_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                       (__v32hi)_mm512_unpackhi_epi16(__A, __B),
                                       (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_unpackhi_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                       (__v32hi)_mm512_unpackhi_epi16(__A, __B),
                                       (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_unpacklo_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_shufflevector((__v64qi)__A, (__v64qi)__B,
                                          0, 64+0, 1, 64+1,
                                          2, 64+2, 3, 64+3,
                                          4, 64+4, 5, 64+5,
                                          6, 64+6, 7, 64+7,
                                          16, 64+16, 17, 64+17,
                                          18, 64+18, 19, 64+19,
                                          20, 64+20, 21, 64+21,
                                          22, 64+22, 23, 64+23,
                                          32, 64+32, 33, 64+33,
                                          34, 64+34, 35, 64+35,
                                          36, 64+36, 37, 64+37,
                                          38, 64+38, 39, 64+39,
                                          48, 64+48, 49, 64+49,
                                          50, 64+50, 51, 64+51,
                                          52, 64+52, 53, 64+53,
                                          54, 64+54, 55, 64+55);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_unpacklo_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                        (__v64qi)_mm512_unpacklo_epi8(__A, __B),
                                        (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_unpacklo_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                        (__v64qi)_mm512_unpacklo_epi8(__A, __B),
                                        (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_unpacklo_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_shufflevector((__v32hi)__A, (__v32hi)__B,
                                          0, 32+0, 1, 32+1,
                                          2, 32+2, 3, 32+3,
                                          8, 32+8, 9, 32+9,
                                          10, 32+10, 11, 32+11,
                                          16, 32+16, 17, 32+17,
                                          18, 32+18, 19, 32+19,
                                          24, 32+24, 25, 32+25,
                                          26, 32+26, 27, 32+27);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_unpacklo_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                       (__v32hi)_mm512_unpacklo_epi16(__A, __B),
                                       (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_unpacklo_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                       (__v32hi)_mm512_unpacklo_epi16(__A, __B),
                                       (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtepi8_epi16 (__m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbw512_mask ((__v32qi) __A,
                (__v32hi)
                _mm512_setzero_hi (),
                (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtepi8_epi16 (__m512i __W, __mmask32 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbw512_mask ((__v32qi) __A,
                (__v32hi) __W,
                (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtepi8_epi16 (__mmask32 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovsxbw512_mask ((__v32qi) __A,
                (__v32hi)
                _mm512_setzero_hi(),
                (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtepu8_epi16 (__m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbw512_mask ((__v32qi) __A,
                (__v32hi)
                _mm512_setzero_hi (),
                (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtepu8_epi16 (__m512i __W, __mmask32 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbw512_mask ((__v32qi) __A,
                (__v32hi) __W,
                (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtepu8_epi16 (__mmask32 __U, __m256i __A)
{
  return (__m512i) __builtin_ia32_pmovzxbw512_mask ((__v32qi) __A,
                (__v32hi)
                _mm512_setzero_hi(),
                (__mmask32) __U);
}
# 1706 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sllv_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psllv32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi)
              _mm512_setzero_hi (),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sllv_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_psllv32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sllv_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psllv32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi)
              _mm512_setzero_hi (),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sll_epi16 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psllw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi)
             _mm512_setzero_hi (),
             (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sll_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
           __m128i __B)
{
  return (__m512i) __builtin_ia32_psllw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi) __W,
             (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sll_epi16 (__mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psllw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi)
             _mm512_setzero_hi (),
             (__mmask32) __U);
}
# 1850 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_srlv_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psrlv32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi)
              _mm512_setzero_hi (),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_srlv_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_psrlv32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_srlv_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psrlv32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi)
              _mm512_setzero_hi (),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_srav_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psrav32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi)
              _mm512_setzero_hi (),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_srav_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_psrav32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_srav_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psrav32hi_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi)
              _mm512_setzero_hi (),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sra_epi16 (__m512i __A, __m128i __B)
{
 return (__m512i) __builtin_ia32_psraw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi)
             _mm512_setzero_hi (),
             (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sra_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
           __m128i __B)
{
  return (__m512i) __builtin_ia32_psraw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi) __W,
            (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sra_epi16 (__mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psraw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi)
             _mm512_setzero_hi (),
            (__mmask32) __U);
}
# 1956 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_srl_epi16 (__m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi)
             _mm512_setzero_hi (),
             (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_srl_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
           __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi) __W,
             (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_srl_epi16 (__mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i) __builtin_ia32_psrlw512_mask ((__v32hi) __A,
             (__v8hi) __B,
             (__v32hi)
             _mm512_setzero_hi (),
             (__mmask32) __U);
}
# 2070 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mov_epi16 (__m512i __W, __mmask32 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectw_512 ((__mmask32) __U,
                (__v32hi) __A,
                (__v32hi) __W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mov_epi16 (__mmask32 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectw_512 ((__mmask32) __U,
                (__v32hi) __A,
                (__v32hi) _mm512_setzero_hi ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mov_epi8 (__m512i __W, __mmask64 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectb_512 ((__mmask64) __U,
                (__v64qi) __A,
                (__v64qi) __W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mov_epi8 (__mmask64 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectb_512 ((__mmask64) __U,
                (__v64qi) __A,
                (__v64qi) _mm512_setzero_hi ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_set1_epi8 (__m512i __O, __mmask64 __M, char __A)
{
  return (__m512i) __builtin_ia32_pbroadcastb512_gpr_mask (__A,
                 (__v64qi) __O,
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_set1_epi8 (__mmask64 __M, char __A)
{
  return (__m512i) __builtin_ia32_pbroadcastb512_gpr_mask (__A,
                 (__v64qi)
                 _mm512_setzero_qi(),
                 __M);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_kunpackd (__mmask64 __A, __mmask64 __B)
{
  return (__mmask64) __builtin_ia32_kunpckdi ((__mmask64) __A,
                (__mmask64) __B);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_kunpackw (__mmask32 __A, __mmask32 __B)
{
  return (__mmask32) __builtin_ia32_kunpcksi ((__mmask32) __A,
                (__mmask32) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_loadu_epi16 (__m512i __W, __mmask32 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddquhi512_mask ((__v32hi *) __P,
                 (__v32hi) __W,
                 (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_loadu_epi16 (__mmask32 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddquhi512_mask ((__v32hi *) __P,
                 (__v32hi)
                 _mm512_setzero_hi (),
                 (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_loadu_epi8 (__m512i __W, __mmask64 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddquqi512_mask ((__v64qi *) __P,
                 (__v64qi) __W,
                 (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_loadu_epi8 (__mmask64 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddquqi512_mask ((__v64qi *) __P,
                 (__v64qi)
                 _mm512_setzero_hi (),
                 (__mmask64) __U);
}
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_storeu_epi16 (void *__P, __mmask32 __U, __m512i __A)
{
  __builtin_ia32_storedquhi512_mask ((__v32hi *) __P,
             (__v32hi) __A,
             (__mmask32) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_storeu_epi8 (void *__P, __mmask64 __U, __m512i __A)
{
  __builtin_ia32_storedquqi512_mask ((__v64qi *) __P,
             (__v64qi) __A,
             (__mmask64) __U);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_test_epi8_mask (__m512i __A, __m512i __B)
{
  return (__mmask64) __builtin_ia32_ptestmb512 ((__v64qi) __A,
            (__v64qi) __B,
            (__mmask64) -1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_test_epi8_mask (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__mmask64) __builtin_ia32_ptestmb512 ((__v64qi) __A,
            (__v64qi) __B, __U);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_test_epi16_mask (__m512i __A, __m512i __B)
{
  return (__mmask32) __builtin_ia32_ptestmw512 ((__v32hi) __A,
            (__v32hi) __B,
            (__mmask32) -1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_test_epi16_mask (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__mmask32) __builtin_ia32_ptestmw512 ((__v32hi) __A,
            (__v32hi) __B, __U);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_testn_epi8_mask (__m512i __A, __m512i __B)
{
  return (__mmask64) __builtin_ia32_ptestnmb512 ((__v64qi) __A,
             (__v64qi) __B,
             (__mmask64) -1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_testn_epi8_mask (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__mmask64) __builtin_ia32_ptestnmb512 ((__v64qi) __A,
             (__v64qi) __B, __U);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_testn_epi16_mask (__m512i __A, __m512i __B)
{
  return (__mmask32) __builtin_ia32_ptestnmw512 ((__v32hi) __A,
             (__v32hi) __B,
             (__mmask32) -1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_testn_epi16_mask (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__mmask32) __builtin_ia32_ptestnmw512 ((__v32hi) __A,
             (__v32hi) __B, __U);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_movepi8_mask (__m512i __A)
{
  return (__mmask64) __builtin_ia32_cvtb2mask512 ((__v64qi) __A);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_movepi16_mask (__m512i __A)
{
  return (__mmask32) __builtin_ia32_cvtw2mask512 ((__v32hi) __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_movm_epi8 (__mmask64 __A)
{
  return (__m512i) __builtin_ia32_cvtmask2b512 (__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_movm_epi16 (__mmask32 __A)
{
  return (__m512i) __builtin_ia32_cvtmask2w512 (__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_broadcastb_epi8 (__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v16qi) __A,
                                          (__v16qi)_mm_undefined_si128(),
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_broadcastb_epi8 (__m512i __O, __mmask64 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectb_512(__M,
                                             (__v64qi) _mm512_broadcastb_epi8(__A),
                                             (__v64qi) __O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_broadcastb_epi8 (__mmask64 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectb_512(__M,
                                             (__v64qi) _mm512_broadcastb_epi8(__A),
                                             (__v64qi) _mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_set1_epi16 (__m512i __O, __mmask32 __M, short __A)
{
  return (__m512i) __builtin_ia32_pbroadcastw512_gpr_mask (__A,
                 (__v32hi) __O,
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_set1_epi16 (__mmask32 __M, short __A)
{
  return (__m512i) __builtin_ia32_pbroadcastw512_gpr_mask (__A,
                 (__v32hi) _mm512_setzero_hi(),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_broadcastw_epi16 (__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v8hi) __A,
                                          (__v8hi)_mm_undefined_si128(),
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_broadcastw_epi16 (__m512i __O, __mmask32 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectw_512(__M,
                                             (__v32hi) _mm512_broadcastw_epi16(__A),
                                             (__v32hi) __O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_broadcastw_epi16 (__mmask32 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectw_512(__M,
                                             (__v32hi) _mm512_broadcastw_epi16(__A),
                                             (__v32hi) _mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_permutexvar_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarhi512_mask ((__v32hi) __B,
                 (__v32hi) __A,
                 (__v32hi) _mm512_undefined_epi32 (),
                 (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_permutexvar_epi16 (__mmask32 __M, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarhi512_mask ((__v32hi) __B,
                 (__v32hi) __A,
                 (__v32hi) _mm512_setzero_hi(),
                 (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_permutexvar_epi16 (__m512i __W, __mmask32 __M, __m512i __A,
             __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarhi512_mask ((__v32hi) __B,
                 (__v32hi) __A,
                 (__v32hi) __W,
                 (__mmask32) __M);
}
# 2399 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sad_epu8 (__m512i __A, __m512i __B)
{
 return (__m512i) __builtin_ia32_psadbw512 ((__v64qi) __A,
               (__v64qi) __B);
}
# 108 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512cdintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512cdintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_conflict_epi64 (__m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
                 (__v8di) _mm512_setzero_si512 (),
                 (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_mask_conflict_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
               (__v8di) __W,
               (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_maskz_conflict_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
                 (__v8di) _mm512_setzero_si512 (),
                 (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_conflict_epi32 (__m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
                 (__v16si) _mm512_setzero_si512 (),
                 (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_mask_conflict_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
               (__v16si) __W,
               (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_maskz_conflict_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
                 (__v16si) _mm512_setzero_si512 (),
                 (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_lzcnt_epi32 (__m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
             (__v16si) _mm512_setzero_si512 (),
             (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_mask_lzcnt_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
                 (__v16si) __W,
                 (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_maskz_lzcnt_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
             (__v16si) _mm512_setzero_si512 (),
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_lzcnt_epi64 (__m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
             (__v8di) _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_mask_lzcnt_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
                 (__v8di) __W,
                 (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_maskz_lzcnt_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
             (__v8di) _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_broadcastmb_epi64 (__mmask8 __A)
{
  return (__m512i) __builtin_ia32_broadcastmb512 (__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_broadcastmw_epi32 (__mmask16 __A)
{
  return (__m512i) __builtin_ia32_broadcastmw512 (__A);
}
# 112 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mullo_epi64 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v8du) __A * (__v8du) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_mullo_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_pmullq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_mullo_epi64 (__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_pmullq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_xor_pd (__m512d __A, __m512d __B) {
  return (__m512d) ((__v8du) __A ^ (__v8du) __B);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_xor_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_xorpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) __W,
             (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_xor_pd (__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_xorpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_xor_ps (__m512 __A, __m512 __B) {
  return (__m512) ((__v16su) __A ^ (__v16su) __B);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_xor_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_xorps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) __W,
            (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_xor_ps (__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_xorps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_or_pd (__m512d __A, __m512d __B) {
  return (__m512d) ((__v8du) __A | (__v8du) __B);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_or_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_orpd512_mask ((__v8df) __A,
            (__v8df) __B,
            (__v8df) __W,
            (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_or_pd (__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_orpd512_mask ((__v8df) __A,
            (__v8df) __B,
            (__v8df)
            _mm512_setzero_pd (),
            (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_or_ps (__m512 __A, __m512 __B) {
  return (__m512) ((__v16su) __A | (__v16su) __B);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_or_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_orps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf) __W,
                 (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_or_ps (__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_orps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_and_pd (__m512d __A, __m512d __B) {
  return (__m512d) ((__v8du) __A & (__v8du) __B);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_and_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_andpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df) __W,
             (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_and_pd (__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_andpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_and_ps (__m512 __A, __m512 __B) {
  return (__m512) ((__v16su) __A & (__v16su) __B);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_and_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_andps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf) __W,
            (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_and_ps (__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_andps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_andnot_pd (__m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_andnpd512_mask ((__v8df) __A,
              (__v8df) __B,
              (__v8df)
              _mm512_setzero_pd (),
              (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_andnot_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_andnpd512_mask ((__v8df) __A,
              (__v8df) __B,
              (__v8df) __W,
              (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_andnot_pd (__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d) __builtin_ia32_andnpd512_mask ((__v8df) __A,
              (__v8df) __B,
              (__v8df)
              _mm512_setzero_pd (),
              (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_andnot_ps (__m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_andnps512_mask ((__v16sf) __A,
             (__v16sf) __B,
             (__v16sf)
             _mm512_setzero_ps (),
             (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_andnot_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_andnps512_mask ((__v16sf) __A,
             (__v16sf) __B,
             (__v16sf) __W,
             (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_andnot_ps (__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512) __builtin_ia32_andnps512_mask ((__v16sf) __A,
             (__v16sf) __B,
             (__v16sf)
             _mm512_setzero_ps (),
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtpd_epi64 (__m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2qq512_mask ((__v8df) __A,
                (__v8di) _mm512_setzero_si512(),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtpd_epi64 (__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2qq512_mask ((__v8df) __A,
                (__v8di) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtpd_epi64 (__mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2qq512_mask ((__v8df) __A,
                (__v8di) _mm512_setzero_si512(),
                (__mmask8) __U,
                0x04);
}
# 279 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtpd_epu64 (__m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2uqq512_mask ((__v8df) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtpd_epu64 (__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2uqq512_mask ((__v8df) __A,
                 (__v8di) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtpd_epu64 (__mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2uqq512_mask ((__v8df) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) __U,
                 0x04);
}
# 318 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtps_epi64 (__m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2qq512_mask ((__v8sf) __A,
                (__v8di) _mm512_setzero_si512(),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtps_epi64 (__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2qq512_mask ((__v8sf) __A,
                (__v8di) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtps_epi64 (__mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2qq512_mask ((__v8sf) __A,
                (__v8di) _mm512_setzero_si512(),
                (__mmask8) __U,
                0x04);
}
# 357 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtps_epu64 (__m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2uqq512_mask ((__v8sf) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtps_epu64 (__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2uqq512_mask ((__v8sf) __A,
                 (__v8di) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtps_epu64 (__mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2uqq512_mask ((__v8sf) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) __U,
                 0x04);
}
# 397 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtepi64_pd (__m512i __A) {
  return (__m512d) __builtin_ia32_cvtqq2pd512_mask ((__v8di) __A,
                (__v8df) _mm512_setzero_pd(),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtepi64_pd (__m512d __W, __mmask8 __U, __m512i __A) {
  return (__m512d) __builtin_ia32_cvtqq2pd512_mask ((__v8di) __A,
                (__v8df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtepi64_pd (__mmask8 __U, __m512i __A) {
  return (__m512d) __builtin_ia32_cvtqq2pd512_mask ((__v8di) __A,
                (__v8df) _mm512_setzero_pd(),
                (__mmask8) __U,
                0x04);
}
# 436 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtepi64_ps (__m512i __A) {
  return (__m256) __builtin_ia32_cvtqq2ps512_mask ((__v8di) __A,
               (__v8sf) _mm256_setzero_ps(),
               (__mmask8) -1,
               0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtepi64_ps (__m256 __W, __mmask8 __U, __m512i __A) {
  return (__m256) __builtin_ia32_cvtqq2ps512_mask ((__v8di) __A,
               (__v8sf) __W,
               (__mmask8) __U,
               0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtepi64_ps (__mmask8 __U, __m512i __A) {
  return (__m256) __builtin_ia32_cvtqq2ps512_mask ((__v8di) __A,
               (__v8sf) _mm256_setzero_ps(),
               (__mmask8) __U,
               0x04);
}
# 476 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvttpd_epi64 (__m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2qq512_mask ((__v8df) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvttpd_epi64 (__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2qq512_mask ((__v8df) __A,
                 (__v8di) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvttpd_epi64 (__mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2qq512_mask ((__v8df) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) __U,
                 0x04);
}
# 515 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvttpd_epu64 (__m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2uqq512_mask ((__v8df) __A,
                  (__v8di) _mm512_setzero_si512(),
                  (__mmask8) -1,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvttpd_epu64 (__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2uqq512_mask ((__v8df) __A,
                  (__v8di) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvttpd_epu64 (__mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2uqq512_mask ((__v8df) __A,
                  (__v8di) _mm512_setzero_si512(),
                  (__mmask8) __U,
                  0x04);
}
# 554 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvttps_epi64 (__m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2qq512_mask ((__v8sf) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvttps_epi64 (__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2qq512_mask ((__v8sf) __A,
                 (__v8di) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvttps_epi64 (__mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2qq512_mask ((__v8sf) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) __U,
                 0x04);
}
# 593 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvttps_epu64 (__m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2uqq512_mask ((__v8sf) __A,
                  (__v8di) _mm512_setzero_si512(),
                  (__mmask8) -1,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvttps_epu64 (__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2uqq512_mask ((__v8sf) __A,
                  (__v8di) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvttps_epu64 (__mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2uqq512_mask ((__v8sf) __A,
                  (__v8di) _mm512_setzero_si512(),
                  (__mmask8) __U,
                  0x04);
}
# 632 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtepu64_pd (__m512i __A) {
  return (__m512d) __builtin_ia32_cvtuqq2pd512_mask ((__v8di) __A,
                 (__v8df) _mm512_setzero_pd(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtepu64_pd (__m512d __W, __mmask8 __U, __m512i __A) {
  return (__m512d) __builtin_ia32_cvtuqq2pd512_mask ((__v8di) __A,
                 (__v8df) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtepu64_pd (__mmask8 __U, __m512i __A) {
  return (__m512d) __builtin_ia32_cvtuqq2pd512_mask ((__v8di) __A,
                 (__v8df) _mm512_setzero_pd(),
                 (__mmask8) __U,
                 0x04);
}
# 673 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtepu64_ps (__m512i __A) {
  return (__m256) __builtin_ia32_cvtuqq2ps512_mask ((__v8di) __A,
                (__v8sf) _mm256_setzero_ps(),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtepu64_ps (__m256 __W, __mmask8 __U, __m512i __A) {
  return (__m256) __builtin_ia32_cvtuqq2ps512_mask ((__v8di) __A,
                (__v8sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtepu64_ps (__mmask8 __U, __m512i __A) {
  return (__m256) __builtin_ia32_cvtuqq2ps512_mask ((__v8di) __A,
                (__v8sf) _mm256_setzero_ps(),
                (__mmask8) __U,
                0x04);
}
# 983 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512dqintrin.h" 3
static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_movepi32_mask (__m512i __A)
{
  return (__mmask16) __builtin_ia32_cvtd2mask512 ((__v16si) __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_movm_epi32 (__mmask16 __A)
{
  return (__m512i) __builtin_ia32_cvtmask2d512 (__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_movm_epi64 (__mmask8 __A)
{
  return (__m512i) __builtin_ia32_cvtmask2q512 (__A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_movepi64_mask (__m512i __A)
{
  return (__mmask8) __builtin_ia32_cvtq2mask512 ((__v8di) __A);
}


static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_f32x2 (__m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x2_512_mask ((__v4sf) __A,
                (__v16sf)_mm512_undefined_ps(),
                (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_f32x2 (__m512 __O, __mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x2_512_mask ((__v4sf) __A,
                (__v16sf)
                __O, __M);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_f32x2 (__mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x2_512_mask ((__v4sf) __A,
                (__v16sf)_mm512_setzero_ps (),
                __M);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_f32x8 (__m256 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x8_512_mask ((__v8sf) __A,
                _mm512_undefined_ps(),
                (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_f32x8 (__m512 __O, __mmask16 __M, __m256 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x8_512_mask ((__v8sf) __A,
                (__v16sf)__O,
                __M);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_f32x8 (__mmask16 __M, __m256 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x8_512_mask ((__v8sf) __A,
                (__v16sf)_mm512_setzero_ps (),
                __M);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_f64x2 (__m128d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x2_512_mask ((__v2df) __A,
                 (__v8df)_mm512_undefined_pd(),
                 (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_f64x2 (__m512d __O, __mmask8 __M, __m128d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x2_512_mask ((__v2df) __A,
                 (__v8df)
                 __O, __M);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_f64x2 (__mmask8 __M, __m128d __A)
{
  return (__m512d) __builtin_ia32_broadcastf64x2_512_mask ((__v2df) __A,
                 (__v8df)_mm512_setzero_ps (),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_i32x2 (__m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x2_512_mask ((__v4si) __A,
                 (__v16si)_mm512_setzero_si512(),
                 (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_i32x2 (__m512i __O, __mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x2_512_mask ((__v4si) __A,
                 (__v16si)
                 __O, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_i32x2 (__mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x2_512_mask ((__v4si) __A,
                 (__v16si)_mm512_setzero_si512 (),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_i32x8 (__m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x8_512_mask ((__v8si) __A,
                 (__v16si)_mm512_setzero_si512(),
                 (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_i32x8 (__m512i __O, __mmask16 __M, __m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x8_512_mask ((__v8si) __A,
                 (__v16si)__O,
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_i32x8 (__mmask16 __M, __m256i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x8_512_mask ((__v8si) __A,
                 (__v16si)
                 _mm512_setzero_si512 (),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_i64x2 (__m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x2_512_mask ((__v2di) __A,
                 (__v8di)_mm512_setzero_si512(),
                 (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_i64x2 (__m512i __O, __mmask8 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x2_512_mask ((__v2di) __A,
                 (__v8di)
                 __O, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_i64x2 (__mmask8 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti64x2_512_mask ((__v2di) __A,
                 (__v8di)_mm512_setzero_si512 (),
                 __M);
}
# 116 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlbwintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlbwintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_setzero_hi(void){
    return (__m128i)(__v8hi){ 0, 0, 0, 0, 0, 0, 0, 0 };
}



static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpeq_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__a, (__v16qi)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpeq_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__a, (__v16qi)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpeq_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 0,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpeq_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 0,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpeq_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__a, (__v32qi)__b,
                                                   (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpeq_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__a, (__v32qi)__b,
                                                   __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpeq_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 0,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpeq_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 0,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpeq_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__a, (__v8hi)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpeq_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__a, (__v8hi)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpeq_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpeq_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 0,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpeq_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__a, (__v16hi)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpeq_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__a, (__v16hi)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpeq_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 0,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpeq_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 0,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpge_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 5,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpge_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpge_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 5,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpge_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 5,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpge_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 5,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpge_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 5,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpge_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 5,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpge_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 5,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpge_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpge_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpge_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpge_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpge_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 5,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpge_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpge_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 5,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpge_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 5,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpgt_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__a, (__v16qi)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpgt_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__a, (__v16qi)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpgt_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 6,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpgt_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 6,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpgt_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__a, (__v32qi)__b,
                                                   (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpgt_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__a, (__v32qi)__b,
                                                   __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpgt_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 6,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpgt_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 6,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpgt_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__a, (__v8hi)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpgt_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__a, (__v8hi)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpgt_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpgt_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 6,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpgt_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__a, (__v16hi)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpgt_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__a, (__v16hi)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpgt_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 6,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpgt_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 6,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmple_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 2,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmple_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmple_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 2,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmple_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 2,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmple_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 2,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmple_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 2,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmple_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 2,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmple_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 2,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmple_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmple_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmple_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmple_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmple_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 2,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmple_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmple_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 2,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmple_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 2,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmplt_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 1,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmplt_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmplt_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 1,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmplt_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 1,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmplt_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 1,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmplt_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 1,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmplt_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 1,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmplt_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 1,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmplt_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmplt_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmplt_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmplt_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmplt_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 1,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmplt_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmplt_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 1,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmplt_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 1,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpneq_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 4,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpneq_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 4,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpneq_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 4,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpneq_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 4,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpneq_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 4,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpneq_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 4,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpneq_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 4,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpneq_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 4,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpneq_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpneq_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpneq_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpneq_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 4,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpneq_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 4,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpneq_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 4,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpneq_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 4,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpneq_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 4,
                                                 __u);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_add_epi8 (__m256i __W, __mmask32 __U, __m256i __A, __m256i __B){
  return (__m256i) __builtin_ia32_paddb256_mask ((__v32qi) __A,
             (__v32qi) __B,
             (__v32qi) __W,
             (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_add_epi8 (__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_paddb256_mask ((__v32qi) __A,
             (__v32qi) __B,
             (__v32qi)
             _mm256_setzero_si256 (),
             (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_add_epi16 (__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_paddw256_mask ((__v16hi) __A,
             (__v16hi) __B,
             (__v16hi) __W,
             (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_add_epi16 (__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_paddw256_mask ((__v16hi) __A,
             (__v16hi) __B,
             (__v16hi)
             _mm256_setzero_si256 (),
             (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sub_epi8 (__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_psubb256_mask ((__v32qi) __A,
             (__v32qi) __B,
             (__v32qi) __W,
             (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sub_epi8 (__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_psubb256_mask ((__v32qi) __A,
             (__v32qi) __B,
             (__v32qi)
             _mm256_setzero_si256 (),
             (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sub_epi16 (__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_psubw256_mask ((__v16hi) __A,
             (__v16hi) __B,
             (__v16hi) __W,
             (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sub_epi16 (__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_psubw256_mask ((__v16hi) __A,
             (__v16hi) __B,
             (__v16hi)
             _mm256_setzero_si256 (),
             (__mmask16) __U);
}
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_add_epi8 (__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_paddb128_mask ((__v16qi) __A,
             (__v16qi) __B,
             (__v16qi) __W,
             (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_add_epi8 (__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_paddb128_mask ((__v16qi) __A,
             (__v16qi) __B,
             (__v16qi)
             _mm_setzero_si128 (),
             (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_add_epi16 (__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_paddw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_add_epi16 (__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_paddw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sub_epi8 (__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_psubb128_mask ((__v16qi) __A,
             (__v16qi) __B,
             (__v16qi) __W,
             (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sub_epi8 (__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_psubb128_mask ((__v16qi) __A,
             (__v16qi) __B,
             (__v16qi)
             _mm_setzero_si128 (),
             (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sub_epi16 (__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_psubw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sub_epi16 (__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_psubw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mullo_epi16 (__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmullw256_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi) __W,
              (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mullo_epi16 (__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmullw256_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi)
              _mm256_setzero_si256 (),
              (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mullo_epi16 (__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmullw128_mask ((__v8hi) __A,
              (__v8hi) __B,
              (__v8hi) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mullo_epi16 (__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmullw128_mask ((__v8hi) __A,
              (__v8hi) __B,
              (__v8hi)
              _mm_setzero_si128 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_blend_epi8 (__mmask16 __U, __m128i __A, __m128i __W)
{
  return (__m128i) __builtin_ia32_selectb_128 ((__mmask16) __U,
              (__v16qi) __W,
              (__v16qi) __A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_blend_epi8 (__mmask32 __U, __m256i __A, __m256i __W)
{
  return (__m256i) __builtin_ia32_selectb_256 ((__mmask32) __U,
               (__v32qi) __W,
               (__v32qi) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_blend_epi16 (__mmask8 __U, __m128i __A, __m128i __W)
{
  return (__m128i) __builtin_ia32_selectw_128 ((__mmask8) __U,
               (__v8hi) __W,
               (__v8hi) __A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_blend_epi16 (__mmask16 __U, __m256i __A, __m256i __W)
{
  return (__m256i) __builtin_ia32_selectw_256 ((__mmask16) __U,
               (__v16hi) __W,
               (__v16hi) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_abs_epi8 (__m128i __W, __mmask16 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pabsb128_mask ((__v16qi) __A,
               (__v16qi) __W,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_abs_epi8 (__mmask16 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pabsb128_mask ((__v16qi) __A,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_abs_epi8 (__m256i __W, __mmask32 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_pabsb256_mask ((__v32qi) __A,
               (__v32qi) __W,
               (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_abs_epi8 (__mmask32 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_pabsb256_mask ((__v32qi) __A,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_abs_epi16 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pabsw128_mask ((__v8hi) __A,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_abs_epi16 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pabsw128_mask ((__v8hi) __A,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_abs_epi16 (__m256i __W, __mmask16 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_pabsw256_mask ((__v16hi) __A,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_abs_epi16 (__mmask16 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_pabsw256_mask ((__v16hi) __A,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_packs_epi32 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_packssdw128_mask ((__v4si) __A,
               (__v4si) __B,
               (__v8hi) _mm_setzero_si128 (), __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_packs_epi32 (__m128i __W, __mmask16 __M, __m128i __A,
          __m128i __B)
{
  return (__m128i) __builtin_ia32_packssdw128_mask ((__v4si) __A,
               (__v4si) __B,
               (__v8hi) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_packs_epi32 (__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_packssdw256_mask ((__v8si) __A,
               (__v8si) __B,
               (__v16hi) _mm256_setzero_si256 (),
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_packs_epi32 (__m256i __W, __mmask16 __M, __m256i __A,
       __m256i __B)
{
  return (__m256i) __builtin_ia32_packssdw256_mask ((__v8si) __A,
               (__v8si) __B,
               (__v16hi) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_packs_epi16 (__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_packsswb128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_packs_epi16 (__m128i __W, __mmask16 __M, __m128i __A,
          __m128i __B)
{
  return (__m128i) __builtin_ia32_packsswb128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v16qi) __W,
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_packs_epi16 (__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_packsswb256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_packs_epi16 (__m256i __W, __mmask32 __M, __m256i __A,
       __m256i __B)
{
  return (__m256i) __builtin_ia32_packsswb256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v32qi) __W,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_packus_epi32 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_packusdw128_mask ((__v4si) __A,
               (__v4si) __B,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_packus_epi32 (__m128i __W, __mmask16 __M, __m128i __A,
           __m128i __B)
{
  return (__m128i) __builtin_ia32_packusdw128_mask ((__v4si) __A,
               (__v4si) __B,
               (__v8hi) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_packus_epi32 (__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_packusdw256_mask ((__v8si) __A,
               (__v8si) __B,
               (__v16hi) _mm256_setzero_si256 (),
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_packus_epi32 (__m256i __W, __mmask16 __M, __m256i __A,
        __m256i __B)
{
  return (__m256i) __builtin_ia32_packusdw256_mask ((__v8si) __A,
               (__v8si) __B,
               (__v16hi) __W,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_packus_epi16 (__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_packuswb128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_packus_epi16 (__m128i __W, __mmask16 __M, __m128i __A,
           __m128i __B)
{
  return (__m128i) __builtin_ia32_packuswb128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v16qi) __W,
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_packus_epi16 (__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_packuswb256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_packus_epi16 (__m256i __W, __mmask32 __M, __m256i __A,
        __m256i __B)
{
  return (__m256i) __builtin_ia32_packuswb256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v32qi) __W,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_adds_epi8 (__m128i __W, __mmask16 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_paddsb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_adds_epi8 (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_paddsb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_adds_epi8 (__m256i __W, __mmask32 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_paddsb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_adds_epi8 (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_paddsb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_adds_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_paddsw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_adds_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_paddsw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_adds_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_paddsw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_adds_epi16 (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_paddsw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_adds_epu8 (__m128i __W, __mmask16 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_paddusb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_adds_epu8 (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_paddusb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_adds_epu8 (__m256i __W, __mmask32 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_paddusb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_adds_epu8 (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_paddusb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_adds_epu16 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_paddusw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_adds_epu16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_paddusw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_adds_epu16 (__m256i __W, __mmask16 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_paddusw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_adds_epu16 (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_paddusw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_avg_epu8 (__m128i __W, __mmask16 __U, __m128i __A,
       __m128i __B)
{
  return (__m128i) __builtin_ia32_pavgb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_avg_epu8 (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pavgb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_avg_epu8 (__m256i __W, __mmask32 __U, __m256i __A,
          __m256i __B)
{
  return (__m256i) __builtin_ia32_pavgb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_avg_epu8 (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pavgb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_avg_epu16 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_pavgw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_avg_epu16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pavgw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_avg_epu16 (__m256i __W, __mmask16 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_pavgw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_avg_epu16 (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pavgw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_max_epi8 (__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pmaxsb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_max_epi8 (__m128i __W, __mmask16 __M, __m128i __A,
       __m128i __B)
{
  return (__m128i) __builtin_ia32_pmaxsb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_max_epi8 (__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pmaxsb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_max_epi8 (__m256i __W, __mmask32 __M, __m256i __A,
          __m256i __B)
{
  return (__m256i) __builtin_ia32_pmaxsb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_max_epi16 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pmaxsw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_max_epi16 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_pmaxsw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_max_epi16 (__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pmaxsw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_max_epi16 (__m256i __W, __mmask16 __M, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_pmaxsw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_max_epu8 (__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pmaxub128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_max_epu8 (__m128i __W, __mmask16 __M, __m128i __A,
       __m128i __B)
{
  return (__m128i) __builtin_ia32_pmaxub128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_max_epu8 (__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pmaxub256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_max_epu8 (__m256i __W, __mmask32 __M, __m256i __A,
          __m256i __B)
{
  return (__m256i) __builtin_ia32_pmaxub256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_max_epu16 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pmaxuw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_max_epu16 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_pmaxuw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_max_epu16 (__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pmaxuw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_max_epu16 (__m256i __W, __mmask16 __M, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_pmaxuw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_min_epi8 (__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pminsb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_min_epi8 (__m128i __W, __mmask16 __M, __m128i __A,
       __m128i __B)
{
  return (__m128i) __builtin_ia32_pminsb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_min_epi8 (__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pminsb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_min_epi8 (__m256i __W, __mmask32 __M, __m256i __A,
          __m256i __B)
{
  return (__m256i) __builtin_ia32_pminsb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_min_epi16 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pminsw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_min_epi16 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_pminsw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_min_epi16 (__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pminsw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_min_epi16 (__m256i __W, __mmask16 __M, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_pminsw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_min_epu8 (__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pminub128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_min_epu8 (__m128i __W, __mmask16 __M, __m128i __A,
       __m128i __B)
{
  return (__m128i) __builtin_ia32_pminub128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_min_epu8 (__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pminub256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_min_epu8 (__m256i __W, __mmask32 __M, __m256i __A,
          __m256i __B)
{
  return (__m256i) __builtin_ia32_pminub256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_min_epu16 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pminuw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_min_epu16 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_pminuw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_min_epu16 (__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pminuw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_min_epu16 (__m256i __W, __mmask16 __M, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_pminuw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_shuffle_epi8 (__m128i __W, __mmask16 __U, __m128i __A,
           __m128i __B)
{
  return (__m128i) __builtin_ia32_pshufb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_shuffle_epi8 (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_pshufb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_shuffle_epi8 (__m256i __W, __mmask32 __U, __m256i __A,
        __m256i __B)
{
  return (__m256i) __builtin_ia32_pshufb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_shuffle_epi8 (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_pshufb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_subs_epi8 (__m128i __W, __mmask16 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psubsb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_subs_epi8 (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psubsb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_subs_epi8 (__m256i __W, __mmask32 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_psubsb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_subs_epi8 (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psubsb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_subs_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_psubsw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_subs_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psubsw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_subs_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_psubsw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_subs_epi16 (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psubsw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_subs_epu8 (__m128i __W, __mmask16 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psubusb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) __W,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_subs_epu8 (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psubusb128_mask ((__v16qi) __A,
               (__v16qi) __B,
               (__v16qi) _mm_setzero_si128 (),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_subs_epu8 (__m256i __W, __mmask32 __U, __m256i __A,
           __m256i __B)
{
  return (__m256i) __builtin_ia32_psubusb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) __W,
               (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_subs_epu8 (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psubusb256_mask ((__v32qi) __A,
               (__v32qi) __B,
               (__v32qi) _mm256_setzero_si256 (),
               (__mmask32) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_subs_epu16 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_psubusw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_subs_epu16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psubusw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_subs_epu16 (__m256i __W, __mmask16 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_psubusw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_subs_epu16 (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psubusw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256 (),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask2_permutex2var_epi16 (__m128i __A, __m128i __I, __mmask8 __U,
            __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermi2varhi128_mask ((__v8hi) __A,
               (__v8hi) __I ,
               (__v8hi) __B,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask2_permutex2var_epi16 (__m256i __A, __m256i __I,
         __mmask16 __U, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermi2varhi256_mask ((__v16hi) __A,
               (__v16hi) __I ,
               (__v16hi) __B,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_permutex2var_epi16 (__m128i __A, __m128i __I, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varhi128_mask ((__v8hi) __I ,
               (__v8hi) __A,
               (__v8hi) __B,
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_permutex2var_epi16 (__m128i __A, __mmask8 __U, __m128i __I,
           __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varhi128_mask ((__v8hi) __I ,
               (__v8hi) __A,
               (__v8hi) __B,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_permutex2var_epi16 (__mmask8 __U, __m128i __A, __m128i __I,
            __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varhi128_maskz ((__v8hi) __I ,
               (__v8hi) __A,
               (__v8hi) __B,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_permutex2var_epi16 (__m256i __A, __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varhi256_mask ((__v16hi) __I ,
               (__v16hi) __A,
               (__v16hi) __B,
               (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_permutex2var_epi16 (__m256i __A, __mmask16 __U,
        __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varhi256_mask ((__v16hi) __I ,
               (__v16hi) __A,
               (__v16hi) __B,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_permutex2var_epi16 (__mmask16 __U, __m256i __A,
         __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varhi256_maskz ((__v16hi) __I ,
               (__v16hi) __A,
               (__v16hi) __B,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_maddubs_epi16 (__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i) __builtin_ia32_pmaddubsw128_mask ((__v16qi) __X,
               (__v16qi) __Y,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_maddubs_epi16 (__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i) __builtin_ia32_pmaddubsw128_mask ((__v16qi) __X,
               (__v16qi) __Y,
              (__v8hi) _mm_setzero_si128(),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_maddubs_epi16 (__m256i __W, __mmask16 __U, __m256i __X,
         __m256i __Y) {
  return (__m256i) __builtin_ia32_pmaddubsw256_mask ((__v32qi) __X,
               (__v32qi) __Y,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_maddubs_epi16 (__mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i) __builtin_ia32_pmaddubsw256_mask ((__v32qi) __X,
               (__v32qi) __Y,
               (__v16hi) _mm256_setzero_si256(),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_madd_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B) {
  return (__m128i) __builtin_ia32_pmaddwd128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v4si) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_madd_epi16 (__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaddwd128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v4si) _mm_setzero_si128(),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_madd_epi16 (__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaddwd256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v8si) __W,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_madd_epi16 (__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaddwd256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v8si) _mm256_setzero_si256(),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cvtsepi16_epi8 (__m128i __A) {
  return (__m128i) __builtin_ia32_pmovswb128_mask ((__v8hi) __A,
               (__v16qi) _mm_setzero_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtsepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovswb128_mask ((__v8hi) __A,
               (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtsepi16_epi8 (__mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovswb128_mask ((__v8hi) __A,
               (__v16qi) _mm_setzero_si128(),
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cvtsepi16_epi8 (__m256i __A) {
  return (__m128i) __builtin_ia32_pmovswb256_mask ((__v16hi) __A,
               (__v16qi) _mm_setzero_si128(),
               (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtsepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovswb256_mask ((__v16hi) __A,
               (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtsepi16_epi8 (__mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovswb256_mask ((__v16hi) __A,
               (__v16qi) _mm_setzero_si128(),
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cvtusepi16_epi8 (__m128i __A) {
  return (__m128i) __builtin_ia32_pmovuswb128_mask ((__v8hi) __A,
                (__v16qi) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtusepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovuswb128_mask ((__v8hi) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtusepi16_epi8 (__mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovuswb128_mask ((__v8hi) __A,
                (__v16qi) _mm_setzero_si128(),
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cvtusepi16_epi8 (__m256i __A) {
  return (__m128i) __builtin_ia32_pmovuswb256_mask ((__v16hi) __A,
                (__v16qi) _mm_setzero_si128(),
                (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtusepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovuswb256_mask ((__v16hi) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtusepi16_epi8 (__mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovuswb256_mask ((__v16hi) __A,
                (__v16qi) _mm_setzero_si128(),
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cvtepi16_epi8 (__m128i __A) {

  return (__m128i) __builtin_ia32_pmovwb128_mask ((__v8hi) __A,
               (__v16qi) _mm_setzero_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovwb128_mask ((__v8hi) __A,
               (__v16qi) __O,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtepi16_epi8 (__mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovwb128_mask ((__v8hi) __A,
               (__v16qi) _mm_setzero_si128(),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtepi16_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovwb128mem_mask ((__v16qi *) __P, (__v8hi) __A, __M);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovswb128mem_mask ((__v16qi *) __P, (__v8hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovuswb128mem_mask ((__v16qi *) __P, (__v8hi) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cvtepi16_epi8 (__m256i __A) {
  return (__m128i) __builtin_ia32_pmovwb256_mask ((__v16hi) __A,
               (__v16qi) _mm_setzero_si128(),
               (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovwb256_mask ((__v16hi) __A,
               (__v16qi) __O,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtepi16_epi8 (__mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovwb256_mask ((__v16hi) __A,
               (__v16qi) _mm_setzero_si128(),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtepi16_storeu_epi8 (void * __P, __mmask16 __M, __m256i __A)
{
  __builtin_ia32_pmovwb256mem_mask ((__v16qi *) __P, (__v16hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask16 __M, __m256i __A)
{
  __builtin_ia32_pmovswb256mem_mask ((__v16qi *) __P, (__v16hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovuswb256mem_mask ((__v16qi*) __P, (__v16hi) __A, __M);
}
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mulhrs_epi16 (__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i) __builtin_ia32_pmulhrsw128_mask ((__v8hi) __X,
               (__v8hi) __Y,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mulhrs_epi16 (__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i) __builtin_ia32_pmulhrsw128_mask ((__v8hi) __X,
               (__v8hi) __Y,
              (__v8hi) _mm_setzero_si128(),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mulhrs_epi16 (__m256i __W, __mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i) __builtin_ia32_pmulhrsw256_mask ((__v16hi) __X,
               (__v16hi) __Y,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mulhrs_epi16 (__mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i) __builtin_ia32_pmulhrsw256_mask ((__v16hi) __X,
               (__v16hi) __Y,
               (__v16hi) _mm256_setzero_si256(),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mulhi_epu16 (__m128i __W, __mmask8 __U, __m128i __A,
          __m128i __B) {
  return (__m128i) __builtin_ia32_pmulhuw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mulhi_epu16 (__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmulhuw128_mask ((__v8hi) __A,
               (__v8hi) __B,
              (__v8hi) _mm_setzero_si128(),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mulhi_epu16 (__m256i __W, __mmask16 __U, __m256i __A,
       __m256i __B) {
  return (__m256i) __builtin_ia32_pmulhuw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mulhi_epu16 (__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmulhuw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256(),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mulhi_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
          __m128i __B) {
  return (__m128i) __builtin_ia32_pmulhw128_mask ((__v8hi) __A,
               (__v8hi) __B,
               (__v8hi) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mulhi_epi16 (__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmulhw128_mask ((__v8hi) __A,
               (__v8hi) __B,
              (__v8hi) _mm_setzero_si128(),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mulhi_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
       __m256i __B) {
  return (__m256i) __builtin_ia32_pmulhw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) __W,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mulhi_epi16 (__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmulhw256_mask ((__v16hi) __A,
               (__v16hi) __B,
               (__v16hi) _mm256_setzero_si256(),
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_unpackhi_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                           (__v16qi)_mm_unpackhi_epi8(__A, __B),
                                           (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_unpackhi_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                           (__v16qi)_mm_unpackhi_epi8(__A, __B),
                                           (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_unpackhi_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                        (__v32qi)_mm256_unpackhi_epi8(__A, __B),
                                        (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_unpackhi_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                        (__v32qi)_mm256_unpackhi_epi8(__A, __B),
                                        (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_unpackhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                           (__v8hi)_mm_unpackhi_epi16(__A, __B),
                                           (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_unpackhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                           (__v8hi)_mm_unpackhi_epi16(__A, __B),
                                           (__v8hi) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_unpackhi_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                       (__v16hi)_mm256_unpackhi_epi16(__A, __B),
                                       (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_unpackhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                       (__v16hi)_mm256_unpackhi_epi16(__A, __B),
                                       (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_unpacklo_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                           (__v16qi)_mm_unpacklo_epi8(__A, __B),
                                           (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_unpacklo_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                           (__v16qi)_mm_unpacklo_epi8(__A, __B),
                                           (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_unpacklo_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                        (__v32qi)_mm256_unpacklo_epi8(__A, __B),
                                        (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_unpacklo_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                        (__v32qi)_mm256_unpacklo_epi8(__A, __B),
                                        (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_unpacklo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                           (__v8hi)_mm_unpacklo_epi16(__A, __B),
                                           (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_unpacklo_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                           (__v8hi)_mm_unpacklo_epi16(__A, __B),
                                           (__v8hi) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_unpacklo_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                       (__v16hi)_mm256_unpacklo_epi16(__A, __B),
                                       (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_unpacklo_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                       (__v16hi)_mm256_unpacklo_epi16(__A, __B),
                                       (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtepi8_epi16 (__m128i __W, __mmask32 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxbw128_mask ((__v16qi) __A,
                (__v8hi) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtepi8_epi16 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsxbw128_mask ((__v16qi) __A,
                (__v8hi)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtepi8_epi16 (__m256i __W, __mmask32 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxbw256_mask ((__v16qi) __A,
                (__v16hi) __W,
                (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtepi8_epi16 (__mmask16 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovsxbw256_mask ((__v16qi) __A,
                (__v16hi)
                _mm256_setzero_si256 (),
                (__mmask16) __U);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtepu8_epi16 (__m128i __W, __mmask32 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxbw128_mask ((__v16qi) __A,
                (__v8hi) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtepu8_epi16 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovzxbw128_mask ((__v16qi) __A,
                (__v8hi)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtepu8_epi16 (__m256i __W, __mmask32 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxbw256_mask ((__v16qi) __A,
                (__v16hi) __W,
                (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtepu8_epi16 (__mmask16 __U, __m128i __A)
{
  return (__m256i) __builtin_ia32_pmovzxbw256_mask ((__v16qi) __A,
                (__v16hi)
                _mm256_setzero_si256 (),
                (__mmask16) __U);
}
# 2463 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlbwintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_sllv_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psllv16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi)
              _mm256_setzero_si256 (),
              (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sllv_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_psllv16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi) __W,
              (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sllv_epi16 (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psllv16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi)
              _mm256_setzero_si256 (),
              (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_sllv_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psllv8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_hi (),
             (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sllv_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_psllv8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sllv_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psllv8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sll_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psllw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sll_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psllw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sll_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_psllw256_mask ((__v16hi) __A,
             (__v8hi) __B,
             (__v16hi) __W,
             (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sll_epi16 (__mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psllw256_mask ((__v16hi) __A,
             (__v8hi) __B,
             (__v16hi)
             _mm256_setzero_si256 (),
             (__mmask16) __U);
}
# 2585 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlbwintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_srlv_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psrlv16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi)
              _mm256_setzero_si256 (),
              (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_srlv_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_psrlv16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi) __W,
              (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_srlv_epi16 (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psrlv16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi)
              _mm256_setzero_si256 (),
              (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_srlv_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psrlv8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_hi (),
             (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_srlv_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_psrlv8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_srlv_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psrlv8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_srav_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psrav16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi)
              _mm256_setzero_si256 (),
              (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_srav_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_psrav16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi) __W,
              (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_srav_epi16 (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_psrav16hi_mask ((__v16hi) __A,
              (__v16hi) __B,
              (__v16hi)
              _mm256_setzero_si256 (),
              (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_srav_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psrav8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_hi (),
             (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_srav_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_psrav8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_srav_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psrav8hi_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sra_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psraw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sra_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psraw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sra_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_psraw256_mask ((__v16hi) __A,
             (__v8hi) __B,
             (__v16hi) __W,
             (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sra_epi16 (__mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psraw256_mask ((__v16hi) __A,
             (__v8hi) __B,
             (__v16hi)
             _mm256_setzero_si256 (),
             (__mmask16) __U);
}
# 2765 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlbwintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_srl_epi16 (__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i) __builtin_ia32_psrlw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_srl_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_psrlw128_mask ((__v8hi) __A,
             (__v8hi) __B,
             (__v8hi)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_srl_epi16 (__m256i __W, __mmask16 __U, __m256i __A,
           __m128i __B)
{
  return (__m256i) __builtin_ia32_psrlw256_mask ((__v16hi) __A,
             (__v8hi) __B,
             (__v16hi) __W,
             (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_srl_epi16 (__mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i) __builtin_ia32_psrlw256_mask ((__v16hi) __A,
             (__v8hi) __B,
             (__v16hi)
             _mm256_setzero_si256 (),
             (__mmask16) __U);
}
# 2825 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlbwintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mov_epi16 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectw_128 ((__mmask8) __U,
                (__v8hi) __A,
                (__v8hi) __W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mov_epi16 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectw_128 ((__mmask8) __U,
                (__v8hi) __A,
                (__v8hi) _mm_setzero_hi ());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mov_epi16 (__m256i __W, __mmask16 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectw_256 ((__mmask16) __U,
                (__v16hi) __A,
                (__v16hi) __W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mov_epi16 (__mmask16 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectw_256 ((__mmask16) __U,
                (__v16hi) __A,
                (__v16hi) _mm256_setzero_si256 ());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mov_epi8 (__m128i __W, __mmask16 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectb_128 ((__mmask16) __U,
                (__v16qi) __A,
                (__v16qi) __W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mov_epi8 (__mmask16 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectb_128 ((__mmask16) __U,
                (__v16qi) __A,
                (__v16qi) _mm_setzero_hi ());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mov_epi8 (__m256i __W, __mmask32 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectb_256 ((__mmask32) __U,
                (__v32qi) __A,
                (__v32qi) __W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mov_epi8 (__mmask32 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectb_256 ((__mmask32) __U,
                (__v32qi) __A,
                (__v32qi) _mm256_setzero_si256 ());
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_set1_epi8 (__m128i __O, __mmask16 __M, char __A)
{
  return (__m128i) __builtin_ia32_pbroadcastb128_gpr_mask (__A,
                 (__v16qi) __O,
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_set1_epi8 (__mmask16 __M, char __A)
{
  return (__m128i) __builtin_ia32_pbroadcastb128_gpr_mask (__A,
                 (__v16qi)
                 _mm_setzero_si128 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_set1_epi8 (__m256i __O, __mmask32 __M, char __A)
{
  return (__m256i) __builtin_ia32_pbroadcastb256_gpr_mask (__A,
                 (__v32qi) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_set1_epi8 (__mmask32 __M, char __A)
{
  return (__m256i) __builtin_ia32_pbroadcastb256_gpr_mask (__A,
                 (__v32qi)
                 _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_loadu_epi16 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddquhi128_mask ((__v8hi *) __P,
                 (__v8hi) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_loadu_epi16 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddquhi128_mask ((__v8hi *) __P,
                 (__v8hi)
                 _mm_setzero_hi (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_loadu_epi16 (__m256i __W, __mmask16 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddquhi256_mask ((__v16hi *) __P,
                 (__v16hi) __W,
                 (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_loadu_epi16 (__mmask16 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddquhi256_mask ((__v16hi *) __P,
                 (__v16hi)
                 _mm256_setzero_si256 (),
                 (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_loadu_epi8 (__m128i __W, __mmask16 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddquqi128_mask ((__v16qi *) __P,
                 (__v16qi) __W,
                 (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_loadu_epi8 (__mmask16 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddquqi128_mask ((__v16qi *) __P,
                 (__v16qi)
                 _mm_setzero_si128 (),
                 (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_loadu_epi8 (__m256i __W, __mmask32 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddquqi256_mask ((__v32qi *) __P,
                 (__v32qi) __W,
                 (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_loadu_epi8 (__mmask32 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddquqi256_mask ((__v32qi *) __P,
                 (__v32qi)
                 _mm256_setzero_si256 (),
                 (__mmask32) __U);
}
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_storeu_epi16 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_storedquhi128_mask ((__v8hi *) __P,
             (__v8hi) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_storeu_epi16 (void *__P, __mmask16 __U, __m256i __A)
{
  __builtin_ia32_storedquhi256_mask ((__v16hi *) __P,
             (__v16hi) __A,
             (__mmask16) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_storeu_epi8 (void *__P, __mmask16 __U, __m128i __A)
{
  __builtin_ia32_storedquqi128_mask ((__v16qi *) __P,
             (__v16qi) __A,
             (__mmask16) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_storeu_epi8 (void *__P, __mmask32 __U, __m256i __A)
{
  __builtin_ia32_storedquqi256_mask ((__v32qi *) __P,
             (__v32qi) __A,
             (__mmask32) __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_test_epi8_mask (__m128i __A, __m128i __B)
{
  return (__mmask16) __builtin_ia32_ptestmb128 ((__v16qi) __A,
            (__v16qi) __B,
            (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_test_epi8_mask (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__mmask16) __builtin_ia32_ptestmb128 ((__v16qi) __A,
            (__v16qi) __B, __U);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_test_epi8_mask (__m256i __A, __m256i __B)
{
  return (__mmask32) __builtin_ia32_ptestmb256 ((__v32qi) __A,
            (__v32qi) __B,
            (__mmask32) -1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_test_epi8_mask (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__mmask32) __builtin_ia32_ptestmb256 ((__v32qi) __A,
            (__v32qi) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_test_epi16_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmw128 ((__v8hi) __A,
                 (__v8hi) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_test_epi16_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmw128 ((__v8hi) __A,
                 (__v8hi) __B, __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_test_epi16_mask (__m256i __A, __m256i __B)
{
  return (__mmask16) __builtin_ia32_ptestmw256 ((__v16hi) __A,
            (__v16hi) __B,
            (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_test_epi16_mask (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__mmask16) __builtin_ia32_ptestmw256 ((__v16hi) __A,
            (__v16hi) __B, __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_testn_epi8_mask (__m128i __A, __m128i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmb128 ((__v16qi) __A,
             (__v16qi) __B,
             (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_testn_epi8_mask (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmb128 ((__v16qi) __A,
             (__v16qi) __B, __U);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_testn_epi8_mask (__m256i __A, __m256i __B)
{
  return (__mmask32) __builtin_ia32_ptestnmb256 ((__v32qi) __A,
             (__v32qi) __B,
             (__mmask32) -1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_testn_epi8_mask (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__mmask32) __builtin_ia32_ptestnmb256 ((__v32qi) __A,
             (__v32qi) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_testn_epi16_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmw128 ((__v8hi) __A,
            (__v8hi) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_testn_epi16_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmw128 ((__v8hi) __A,
            (__v8hi) __B, __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_testn_epi16_mask (__m256i __A, __m256i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmw256 ((__v16hi) __A,
             (__v16hi) __B,
             (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_testn_epi16_mask (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmw256 ((__v16hi) __A,
             (__v16hi) __B, __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_movepi8_mask (__m128i __A)
{
  return (__mmask16) __builtin_ia32_cvtb2mask128 ((__v16qi) __A);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_movepi8_mask (__m256i __A)
{
  return (__mmask32) __builtin_ia32_cvtb2mask256 ((__v32qi) __A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_movepi16_mask (__m128i __A)
{
  return (__mmask8) __builtin_ia32_cvtw2mask128 ((__v8hi) __A);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_movepi16_mask (__m256i __A)
{
  return (__mmask16) __builtin_ia32_cvtw2mask256 ((__v16hi) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_movm_epi8 (__mmask16 __A)
{
  return (__m128i) __builtin_ia32_cvtmask2b128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_movm_epi8 (__mmask32 __A)
{
  return (__m256i) __builtin_ia32_cvtmask2b256 (__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_movm_epi16 (__mmask8 __A)
{
  return (__m128i) __builtin_ia32_cvtmask2w128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_movm_epi16 (__mmask16 __A)
{
  return (__m256i) __builtin_ia32_cvtmask2w256 (__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_broadcastb_epi8 (__m128i __O, __mmask16 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectb_128(__M,
                                             (__v16qi) _mm_broadcastb_epi8(__A),
                                             (__v16qi) __O);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_broadcastb_epi8 (__mmask16 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectb_128(__M,
                                             (__v16qi) _mm_broadcastb_epi8(__A),
                                             (__v16qi) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_broadcastb_epi8 (__m256i __O, __mmask32 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectb_256(__M,
                                             (__v32qi) _mm256_broadcastb_epi8(__A),
                                             (__v32qi) __O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_broadcastb_epi8 (__mmask32 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectb_256(__M,
                                             (__v32qi) _mm256_broadcastb_epi8(__A),
                                             (__v32qi) _mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_broadcastw_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128(__M,
                                             (__v8hi) _mm_broadcastw_epi16(__A),
                                             (__v8hi) __O);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_broadcastw_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128(__M,
                                             (__v8hi) _mm_broadcastw_epi16(__A),
                                             (__v8hi) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_broadcastw_epi16 (__m256i __O, __mmask16 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectw_256(__M,
                                             (__v16hi) _mm256_broadcastw_epi16(__A),
                                             (__v16hi) __O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_broadcastw_epi16 (__mmask16 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectw_256(__M,
                                             (__v16hi) _mm256_broadcastw_epi16(__A),
                                             (__v16hi) _mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_set1_epi16 (__m256i __O, __mmask16 __M, short __A)
{
  return (__m256i) __builtin_ia32_pbroadcastw256_gpr_mask (__A,
                 (__v16hi) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_set1_epi16 (__mmask16 __M, short __A)
{
  return (__m256i) __builtin_ia32_pbroadcastw256_gpr_mask (__A,
                 (__v16hi) _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_set1_epi16 (__m128i __O, __mmask8 __M, short __A)
{
  return (__m128i) __builtin_ia32_pbroadcastw128_gpr_mask (__A,
                 (__v8hi) __O,
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_set1_epi16 (__mmask8 __M, short __A)
{
  return (__m128i) __builtin_ia32_pbroadcastw128_gpr_mask (__A,
                 (__v8hi) _mm_setzero_si128 (),
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_permutexvar_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarhi128_mask ((__v8hi) __B,
                 (__v8hi) __A,
                 (__v8hi) _mm_undefined_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_permutexvar_epi16 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarhi128_mask ((__v8hi) __B,
                 (__v8hi) __A,
                 (__v8hi) _mm_setzero_si128 (),
                 (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_permutexvar_epi16 (__m128i __W, __mmask8 __M, __m128i __A,
          __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarhi128_mask ((__v8hi) __B,
                 (__v8hi) __A,
                 (__v8hi) __W,
                 (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_permutexvar_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarhi256_mask ((__v16hi) __B,
                 (__v16hi) __A,
                 (__v16hi) _mm256_undefined_si256 (),
                 (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_permutexvar_epi16 (__mmask16 __M, __m256i __A,
        __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarhi256_mask ((__v16hi) __B,
                 (__v16hi) __A,
                 (__v16hi) _mm256_setzero_si256 (),
                 (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_permutexvar_epi16 (__m256i __W, __mmask16 __M, __m256i __A,
             __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarhi256_mask ((__v16hi) __B,
                 (__v16hi) __A,
                 (__v16hi) __W,
                 (__mmask16) __M);
}
# 121 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlcdintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vlcdintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_broadcastmb_epi64 (__mmask8 __A)
{
  return (__m128i) __builtin_ia32_broadcastmb128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_broadcastmb_epi64 (__mmask8 __A)
{
  return (__m256i) __builtin_ia32_broadcastmb256 (__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_broadcastmw_epi32 (__mmask16 __A)
{
  return (__m128i) __builtin_ia32_broadcastmw128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_broadcastmw_epi32 (__mmask16 __A)
{
  return (__m256i) __builtin_ia32_broadcastmw256 (__A);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_conflict_epi64 (__m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictdi_128_mask ((__v2di) __A,
               (__v2di) _mm_undefined_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_mask_conflict_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictdi_128_mask ((__v2di) __A,
               (__v2di) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_maskz_conflict_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictdi_128_mask ((__v2di) __A,
               (__v2di)
               _mm_setzero_di (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_conflict_epi64 (__m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictdi_256_mask ((__v4di) __A,
               (__v4di) _mm256_undefined_si256 (),
               (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_mask_conflict_epi64 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictdi_256_mask ((__v4di) __A,
               (__v4di) __W,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_maskz_conflict_epi64 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictdi_256_mask ((__v4di) __A,
               (__v4di) _mm256_setzero_si256 (),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_conflict_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictsi_128_mask ((__v4si) __A,
               (__v4si) _mm_undefined_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_mask_conflict_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictsi_128_mask ((__v4si) __A,
               (__v4si) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_maskz_conflict_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictsi_128_mask ((__v4si) __A,
               (__v4si) _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_conflict_epi32 (__m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictsi_256_mask ((__v8si) __A,
               (__v8si) _mm256_undefined_si256 (),
               (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_mask_conflict_epi32 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictsi_256_mask ((__v8si) __A,
               (__v8si) __W,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_maskz_conflict_epi32 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictsi_256_mask ((__v8si) __A,
               (__v8si)
               _mm256_setzero_si256 (),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_lzcnt_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntd_128_mask ((__v4si) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_mask_lzcnt_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntd_128_mask ((__v4si) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_maskz_lzcnt_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntd_128_mask ((__v4si) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_lzcnt_epi32 (__m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntd_256_mask ((__v8si) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_mask_lzcnt_epi32 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntd_256_mask ((__v8si) __A,
                 (__v8si) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_maskz_lzcnt_epi32 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntd_256_mask ((__v8si) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_lzcnt_epi64 (__m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntq_128_mask ((__v2di) __A,
                 (__v2di)
                 _mm_setzero_di (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_mask_lzcnt_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntq_128_mask ((__v2di) __A,
                 (__v2di) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_maskz_lzcnt_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntq_128_mask ((__v2di) __A,
                 (__v2di)
                 _mm_setzero_di (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_lzcnt_epi64 (__m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntq_256_mask ((__v4di) __A,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_mask_lzcnt_epi64 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntq_256_mask ((__v4di) __A,
                 (__v4di) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_maskz_lzcnt_epi64 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntq_256_mask ((__v4di) __A,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}
# 126 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vldqintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vldqintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mullo_epi64 (__m256i __A, __m256i __B) {
  return (__m256i) ((__v4du) __A * (__v4du) __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_mullo_epi64 (__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmullq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_mullo_epi64 (__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmullq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mullo_epi64 (__m128i __A, __m128i __B) {
  return (__m128i) ((__v2du) __A * (__v2du) __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_mullo_epi64 (__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmullq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_mullo_epi64 (__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmullq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_andnot_pd (__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_andnpd256_mask ((__v4df) __A,
              (__v4df) __B,
              (__v4df) __W,
              (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_andnot_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_andnpd256_mask ((__v4df) __A,
              (__v4df) __B,
              (__v4df)
              _mm256_setzero_pd (),
              (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_andnot_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_andnpd128_mask ((__v2df) __A,
              (__v2df) __B,
              (__v2df) __W,
              (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_andnot_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_andnpd128_mask ((__v2df) __A,
              (__v2df) __B,
              (__v2df)
              _mm_setzero_pd (),
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_andnot_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_andnps256_mask ((__v8sf) __A,
             (__v8sf) __B,
             (__v8sf) __W,
             (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_andnot_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_andnps256_mask ((__v8sf) __A,
             (__v8sf) __B,
             (__v8sf)
             _mm256_setzero_ps (),
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_andnot_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_andnps128_mask ((__v4sf) __A,
             (__v4sf) __B,
             (__v4sf) __W,
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_andnot_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_andnps128_mask ((__v4sf) __A,
             (__v4sf) __B,
             (__v4sf)
             _mm_setzero_ps (),
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_and_pd (__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_andpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df) __W,
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_and_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_andpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df)
             _mm256_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_and_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_andpd128_mask ((__v2df) __A,
             (__v2df) __B,
             (__v2df) __W,
             (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_and_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_andpd128_mask ((__v2df) __A,
             (__v2df) __B,
             (__v2df)
             _mm_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_and_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_andps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf) __W,
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_and_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_andps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf)
            _mm256_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_and_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_andps128_mask ((__v4sf) __A,
            (__v4sf) __B,
            (__v4sf) __W,
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_and_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_andps128_mask ((__v4sf) __A,
            (__v4sf) __B,
            (__v4sf)
            _mm_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_xor_pd (__m256d __W, __mmask8 __U, __m256d __A,
        __m256d __B) {
  return (__m256d) __builtin_ia32_xorpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df) __W,
             (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_xor_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_xorpd256_mask ((__v4df) __A,
             (__v4df) __B,
             (__v4df)
             _mm256_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_xor_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_xorpd128_mask ((__v2df) __A,
             (__v2df) __B,
             (__v2df) __W,
             (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_xor_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_xorpd128_mask ((__v2df) __A,
             (__v2df) __B,
             (__v2df)
             _mm_setzero_pd (),
             (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_xor_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_xorps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf) __W,
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_xor_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_xorps256_mask ((__v8sf) __A,
            (__v8sf) __B,
            (__v8sf)
            _mm256_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_xor_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_xorps128_mask ((__v4sf) __A,
            (__v4sf) __B,
            (__v4sf) __W,
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_xor_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_xorps128_mask ((__v4sf) __A,
            (__v4sf) __B,
            (__v4sf)
            _mm_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_or_pd (__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_orpd256_mask ((__v4df) __A,
            (__v4df) __B,
            (__v4df) __W,
            (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_or_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_orpd256_mask ((__v4df) __A,
            (__v4df) __B,
            (__v4df)
            _mm256_setzero_pd (),
            (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_or_pd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_orpd128_mask ((__v2df) __A,
            (__v2df) __B,
            (__v2df) __W,
            (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_or_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_orpd128_mask ((__v2df) __A,
            (__v2df) __B,
            (__v2df)
            _mm_setzero_pd (),
            (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_or_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_orps256_mask ((__v8sf) __A,
                 (__v8sf) __B,
                 (__v8sf) __W,
                 (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_or_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_orps256_mask ((__v8sf) __A,
                 (__v8sf) __B,
                 (__v8sf)
                 _mm256_setzero_ps (),
                 (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_or_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_orps128_mask ((__v4sf) __A,
                 (__v4sf) __B,
                 (__v4sf) __W,
                 (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_or_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_orps128_mask ((__v4sf) __A,
                 (__v4sf) __B,
                 (__v4sf)
                 _mm_setzero_ps (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtpd_epi64 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2qq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtpd_epi64 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2qq128_mask ((__v2df) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtpd_epi64 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2qq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtpd_epi64 (__m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2qq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtpd_epi64 (__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2qq256_mask ((__v4df) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtpd_epi64 (__mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2qq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtpd_epu64 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2uqq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtpd_epu64 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2uqq128_mask ((__v2df) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtpd_epu64 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2uqq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtpd_epu64 (__m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2uqq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtpd_epu64 (__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2uqq256_mask ((__v4df) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtpd_epu64 (__mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2uqq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtps_epi64 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2qq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtps_epi64 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2qq128_mask ((__v4sf) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtps_epi64 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2qq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtps_epi64 (__m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2qq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtps_epi64 (__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2qq256_mask ((__v4sf) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtps_epi64 (__mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2qq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtps_epu64 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2uqq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtps_epu64 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2uqq128_mask ((__v4sf) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtps_epu64 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2uqq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtps_epu64 (__m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2uqq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtps_epu64 (__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2uqq256_mask ((__v4sf) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtps_epu64 (__mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2uqq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtepi64_pd (__m128i __A) {
  return (__m128d) __builtin_ia32_cvtqq2pd128_mask ((__v2di) __A,
                (__v2df) _mm_setzero_pd(),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtepi64_pd (__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtqq2pd128_mask ((__v2di) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtepi64_pd (__mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtqq2pd128_mask ((__v2di) __A,
                (__v2df) _mm_setzero_pd(),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtepi64_pd (__m256i __A) {
  return (__m256d) __builtin_ia32_cvtqq2pd256_mask ((__v4di) __A,
                (__v4df) _mm256_setzero_pd(),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtepi64_pd (__m256d __W, __mmask8 __U, __m256i __A) {
  return (__m256d) __builtin_ia32_cvtqq2pd256_mask ((__v4di) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtepi64_pd (__mmask8 __U, __m256i __A) {
  return (__m256d) __builtin_ia32_cvtqq2pd256_mask ((__v4di) __A,
                (__v4df) _mm256_setzero_pd(),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtepi64_ps (__m128i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps128_mask ((__v2di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtepi64_ps (__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps128_mask ((__v2di) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtepi64_ps (__mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps128_mask ((__v2di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtepi64_ps (__m256i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps256_mask ((__v4di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtepi64_ps (__m128 __W, __mmask8 __U, __m256i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps256_mask ((__v4di) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtepi64_ps (__mmask8 __U, __m256i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps256_mask ((__v4di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvttpd_epi64 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2qq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvttpd_epi64 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2qq128_mask ((__v2df) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvttpd_epi64 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2qq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvttpd_epi64 (__m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2qq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvttpd_epi64 (__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2qq256_mask ((__v4df) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvttpd_epi64 (__mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2qq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvttpd_epu64 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2uqq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvttpd_epu64 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2uqq128_mask ((__v2df) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvttpd_epu64 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2uqq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvttpd_epu64 (__m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2uqq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvttpd_epu64 (__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2uqq256_mask ((__v4df) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvttpd_epu64 (__mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2uqq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvttps_epi64 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2qq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvttps_epi64 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2qq128_mask ((__v4sf) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvttps_epi64 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2qq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvttps_epi64 (__m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2qq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvttps_epi64 (__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2qq256_mask ((__v4sf) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvttps_epi64 (__mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2qq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvttps_epu64 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2uqq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvttps_epu64 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2uqq128_mask ((__v4sf) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvttps_epu64 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2uqq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvttps_epu64 (__m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2uqq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvttps_epu64 (__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2uqq256_mask ((__v4sf) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvttps_epu64 (__mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2uqq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtepu64_pd (__m128i __A) {
  return (__m128d) __builtin_ia32_cvtuqq2pd128_mask ((__v2di) __A,
                (__v2df) _mm_setzero_pd(),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtepu64_pd (__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtuqq2pd128_mask ((__v2di) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtepu64_pd (__mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtuqq2pd128_mask ((__v2di) __A,
                (__v2df) _mm_setzero_pd(),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtepu64_pd (__m256i __A) {
  return (__m256d) __builtin_ia32_cvtuqq2pd256_mask ((__v4di) __A,
                (__v4df) _mm256_setzero_pd(),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtepu64_pd (__m256d __W, __mmask8 __U, __m256i __A) {
  return (__m256d) __builtin_ia32_cvtuqq2pd256_mask ((__v4di) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtepu64_pd (__mmask8 __U, __m256i __A) {
  return (__m256d) __builtin_ia32_cvtuqq2pd256_mask ((__v4di) __A,
                (__v4df) _mm256_setzero_pd(),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtepu64_ps (__m128i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps128_mask ((__v2di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtepu64_ps (__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps128_mask ((__v2di) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtepu64_ps (__mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps128_mask ((__v2di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtepu64_ps (__m256i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps256_mask ((__v4di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtepu64_ps (__m128 __W, __mmask8 __U, __m256i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps256_mask ((__v4di) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtepu64_ps (__mmask8 __U, __m256i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps256_mask ((__v4di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) __U);
}
# 985 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vldqintrin.h" 3
static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_movepi32_mask (__m128i __A)
{
  return (__mmask8) __builtin_ia32_cvtd2mask128 ((__v4si) __A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_movepi32_mask (__m256i __A)
{
  return (__mmask8) __builtin_ia32_cvtd2mask256 ((__v8si) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_movm_epi32 (__mmask8 __A)
{
  return (__m128i) __builtin_ia32_cvtmask2d128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_movm_epi32 (__mmask8 __A)
{
  return (__m256i) __builtin_ia32_cvtmask2d256 (__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_movm_epi64 (__mmask8 __A)
{
  return (__m128i) __builtin_ia32_cvtmask2q128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_movm_epi64 (__mmask8 __A)
{
  return (__m256i) __builtin_ia32_cvtmask2q256 (__A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_movepi64_mask (__m128i __A)
{
  return (__mmask8) __builtin_ia32_cvtq2mask128 ((__v2di) __A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_movepi64_mask (__m256i __A)
{
  return (__mmask8) __builtin_ia32_cvtq2mask256 ((__v4di) __A);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_broadcast_f32x2 (__m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x2_256_mask ((__v4sf) __A,
                (__v8sf)_mm256_undefined_ps(),
                (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_broadcast_f32x2 (__m256 __O, __mmask8 __M, __m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x2_256_mask ((__v4sf) __A,
                (__v8sf) __O,
                __M);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_broadcast_f32x2 (__mmask8 __M, __m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x2_256_mask ((__v4sf) __A,
                (__v8sf) _mm256_setzero_ps (),
                __M);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_broadcast_f64x2 (__m128d __A)
{
  return (__m256d) __builtin_ia32_broadcastf64x2_256_mask ((__v2df) __A,
                 (__v4df)_mm256_undefined_pd(),
                 (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_broadcast_f64x2 (__m256d __O, __mmask8 __M, __m128d __A)
{
  return (__m256d) __builtin_ia32_broadcastf64x2_256_mask ((__v2df) __A,
                 (__v4df) __O,
                 __M);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_broadcast_f64x2 (__mmask8 __M, __m128d __A)
{
  return (__m256d) __builtin_ia32_broadcastf64x2_256_mask ((__v2df) __A,
                 (__v4df) _mm256_setzero_ps (),
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_broadcast_i32x2 (__m128i __A)
{
  return (__m128i) __builtin_ia32_broadcasti32x2_128_mask ((__v4si) __A,
                 (__v4si)_mm_undefined_si128(),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_broadcast_i32x2 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_broadcasti32x2_128_mask ((__v4si) __A,
                 (__v4si) __O,
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_broadcast_i32x2 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_broadcasti32x2_128_mask ((__v4si) __A,
                 (__v4si) _mm_setzero_si128 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_broadcast_i32x2 (__m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x2_256_mask ((__v4si) __A,
                 (__v8si)_mm256_undefined_si256(),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_broadcast_i32x2 (__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x2_256_mask ((__v4si) __A,
                 (__v8si) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_broadcast_i32x2 (__mmask8 __M, __m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x2_256_mask ((__v4si) __A,
                 (__v8si) _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_broadcast_i64x2 (__m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti64x2_256_mask ((__v2di) __A,
                 (__v4di)_mm256_undefined_si256(),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_broadcast_i64x2 (__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti64x2_256_mask ((__v2di) __A,
                 (__v4di) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_broadcast_i64x2 (__mmask8 __M, __m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti64x2_256_mask ((__v2di) __A,
                 (__v4di) _mm256_setzero_si256 (),
                 __M);
}
# 131 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512erintrin.h" 1 3
# 135 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512ifmaintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512ifmaintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_madd52hi_epu64 (__m512i __X, __m512i __Y, __m512i __Z)
{
  return (__m512i) __builtin_ia32_vpmadd52huq512_mask ((__v8di) __X,
                   (__v8di) __Y,
                   (__v8di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_mask_madd52hi_epu64 (__m512i __W, __mmask8 __M, __m512i __X,
          __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmadd52huq512_mask ((__v8di) __W,
                   (__v8di) __X,
                   (__v8di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_maskz_madd52hi_epu64 (__mmask8 __M, __m512i __X, __m512i __Y, __m512i __Z)
{
  return (__m512i) __builtin_ia32_vpmadd52huq512_maskz ((__v8di) __X,
              (__v8di) __Y,
              (__v8di) __Z,
              (__mmask8) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_madd52lo_epu64 (__m512i __X, __m512i __Y, __m512i __Z)
{
  return (__m512i) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __X,
                   (__v8di) __Y,
                   (__v8di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_mask_madd52lo_epu64 (__m512i __W, __mmask8 __M, __m512i __X,
          __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __W,
                   (__v8di) __X,
                   (__v8di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_maskz_madd52lo_epu64 (__mmask8 __M, __m512i __X, __m512i __Y, __m512i __Z)
{
  return (__m512i) __builtin_ia32_vpmadd52luq512_maskz ((__v8di) __X,
              (__v8di) __Y,
              (__v8di) __Z,
              (__mmask8) __M);
}
# 139 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512ifmavlintrin.h" 1 3
# 36 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512ifmavlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_madd52hi_epu64 (__m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i) __builtin_ia32_vpmadd52huq128_mask ((__v2di) __X,
                   (__v2di) __Y,
                   (__v2di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_mask_madd52hi_epu64 (__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmadd52huq128_mask ((__v2di) __W,
                   (__v2di) __X,
                   (__v2di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_maskz_madd52hi_epu64 (__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i) __builtin_ia32_vpmadd52huq128_maskz ((__v2di) __X,
              (__v2di) __Y,
              (__v2di) __Z,
              (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_madd52hi_epu64 (__m256i __X, __m256i __Y, __m256i __Z)
{
  return (__m256i) __builtin_ia32_vpmadd52huq256_mask ((__v4di) __X,
                   (__v4di) __Y,
                   (__v4di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_mask_madd52hi_epu64 (__m256i __W, __mmask8 __M, __m256i __X,
          __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmadd52huq256_mask ((__v4di) __W,
                   (__v4di) __X,
                   (__v4di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_maskz_madd52hi_epu64 (__mmask8 __M, __m256i __X, __m256i __Y, __m256i __Z)
{
  return (__m256i) __builtin_ia32_vpmadd52huq256_maskz ((__v4di) __X,
              (__v4di) __Y,
              (__v4di) __Z,
              (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_madd52lo_epu64 (__m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i) __builtin_ia32_vpmadd52luq128_mask ((__v2di) __X,
                   (__v2di) __Y,
                   (__v2di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_mask_madd52lo_epu64 (__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmadd52luq128_mask ((__v2di) __W,
                   (__v2di) __X,
                   (__v2di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_maskz_madd52lo_epu64 (__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i) __builtin_ia32_vpmadd52luq128_maskz ((__v2di) __X,
              (__v2di) __Y,
              (__v2di) __Z,
              (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_madd52lo_epu64 (__m256i __X, __m256i __Y, __m256i __Z)
{
  return (__m256i) __builtin_ia32_vpmadd52luq256_mask ((__v4di) __X,
                   (__v4di) __Y,
                   (__v4di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_mask_madd52lo_epu64 (__m256i __W, __mmask8 __M, __m256i __X,
          __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmadd52luq256_mask ((__v4di) __W,
                   (__v4di) __X,
                   (__v4di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_maskz_madd52lo_epu64 (__mmask8 __M, __m256i __X, __m256i __Y, __m256i __Z)
{
  return (__m256i) __builtin_ia32_vpmadd52luq256_maskz ((__v4di) __X,
              (__v4di) __Y,
              (__v4di) __Z,
              (__mmask8) __M);
}
# 144 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vbmiintrin.h" 1 3
# 35 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vbmiintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_mask2_permutex2var_epi8 (__m512i __A, __m512i __I,
         __mmask64 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2varqi512_mask ((__v64qi) __A,
              (__v64qi) __I
                        ,
              (__v64qi) __B,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_permutex2var_epi8 (__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varqi512_mask ((__v64qi) __I
                        ,
              (__v64qi) __A,
              (__v64qi) __B,
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_mask_permutex2var_epi8 (__m512i __A, __mmask64 __U,
        __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varqi512_mask ((__v64qi) __I
                        ,
              (__v64qi) __A,
              (__v64qi) __B,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_maskz_permutex2var_epi8 (__mmask64 __U, __m512i __A,
         __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varqi512_maskz ((__v64qi) __I
                         ,
               (__v64qi) __A,
               (__v64qi) __B,
               (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_permutexvar_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,
                 (__v64qi) __A,
                 (__v64qi) _mm512_undefined_epi32 (),
                 (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_maskz_permutexvar_epi8 (__mmask64 __M, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,
                 (__v64qi) __A,
                 (__v64qi) _mm512_setzero_si512(),
                 (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_mask_permutexvar_epi8 (__m512i __W, __mmask64 __M, __m512i __A,
             __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,
                 (__v64qi) __A,
                 (__v64qi) __W,
                 (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_mask_multishift_epi64_epi8 (__m512i __W, __mmask64 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,
                (__v64qi) __Y,
                (__v64qi) __W,
                (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_maskz_multishift_epi64_epi8 (__mmask64 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,
                (__v64qi) __Y,
                (__v64qi) _mm512_setzero_si512 (),
                (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_multishift_epi64_epi8 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,
                (__v64qi) __Y,
                (__v64qi) _mm512_undefined_epi32 (),
                (__mmask64) -1);
}
# 148 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vbmivlintrin.h" 1 3
# 35 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512vbmivlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_mask2_permutex2var_epi8 (__m128i __A, __m128i __I, __mmask16 __U,
            __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermi2varqi128_mask ((__v16qi) __A,
              (__v16qi) __I
                        ,
              (__v16qi) __B,
              (__mmask16)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_mask2_permutex2var_epi8 (__m256i __A, __m256i __I,
         __mmask32 __U, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermi2varqi256_mask ((__v32qi) __A,
              (__v32qi) __I
                        ,
              (__v32qi) __B,
              (__mmask32)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_permutex2var_epi8 (__m128i __A, __m128i __I, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varqi128_mask ((__v16qi) __I
                        ,
              (__v16qi) __A,
              (__v16qi) __B,
              (__mmask16) -
              1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_mask_permutex2var_epi8 (__m128i __A, __mmask16 __U, __m128i __I,
           __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varqi128_mask ((__v16qi) __I
                        ,
              (__v16qi) __A,
              (__v16qi) __B,
              (__mmask16)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_maskz_permutex2var_epi8 (__mmask16 __U, __m128i __A, __m128i __I,
            __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varqi128_maskz ((__v16qi) __I
                         ,
               (__v16qi) __A,
               (__v16qi) __B,
               (__mmask16)
               __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_permutex2var_epi8 (__m256i __A, __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varqi256_mask ((__v32qi) __I
                        ,
              (__v32qi) __A,
              (__v32qi) __B,
              (__mmask32) -
              1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_mask_permutex2var_epi8 (__m256i __A, __mmask32 __U,
        __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varqi256_mask ((__v32qi) __I
                        ,
              (__v32qi) __A,
              (__v32qi) __B,
              (__mmask32)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_maskz_permutex2var_epi8 (__mmask32 __U, __m256i __A,
         __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varqi256_maskz ((__v32qi) __I
                         ,
               (__v32qi) __A,
               (__v32qi) __B,
               (__mmask32)
               __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_permutexvar_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,
                 (__v16qi) __A,
                 (__v16qi) _mm_undefined_si128 (),
                 (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_maskz_permutexvar_epi8 (__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,
                 (__v16qi) __A,
                 (__v16qi) _mm_setzero_si128 (),
                 (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_mask_permutexvar_epi8 (__m128i __W, __mmask16 __M, __m128i __A,
          __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,
                 (__v16qi) __A,
                 (__v16qi) __W,
                 (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_permutexvar_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,
                 (__v32qi) __A,
                 (__v32qi) _mm256_undefined_si256 (),
                 (__mmask32) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_maskz_permutexvar_epi8 (__mmask32 __M, __m256i __A,
        __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,
                 (__v32qi) __A,
                 (__v32qi) _mm256_setzero_si256 (),
                 (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_mask_permutexvar_epi8 (__m256i __W, __mmask32 __M, __m256i __A,
             __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,
                 (__v32qi) __A,
                 (__v32qi) __W,
                 (__mmask32) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_mask_multishift_epi64_epi8 (__m128i __W, __mmask16 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,
                (__v16qi) __Y,
                (__v16qi) __W,
                (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_maskz_multishift_epi64_epi8 (__mmask16 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,
                (__v16qi) __Y,
                (__v16qi)
                _mm_setzero_si128 (),
                (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_multishift_epi64_epi8 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,
                (__v16qi) __Y,
                (__v16qi)
                _mm_undefined_si128 (),
                (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_mask_multishift_epi64_epi8 (__m256i __W, __mmask32 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,
                (__v32qi) __Y,
                (__v32qi) __W,
                (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_maskz_multishift_epi64_epi8 (__mmask32 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,
                (__v32qi) __Y,
                (__v32qi)
                _mm256_setzero_si256 (),
                (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_multishift_epi64_epi8 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,
                (__v32qi) __Y,
                (__v32qi)
                _mm256_undefined_si256 (),
                (__mmask32) -1);
}
# 153 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\avx512pfintrin.h" 1 3
# 157 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pkuintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\pkuintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("pku")))
_rdpkru_u32(void)
{
  return __builtin_ia32_rdpkru();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("pku")))
_wrpkru(unsigned int __val)
{
  return __builtin_ia32_wrpkru(__val);
}
# 161 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdrnd")))
_rdrand16_step(unsigned short *__p)
{
  return __builtin_ia32_rdrand16_step(__p);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdrnd")))
_rdrand32_step(unsigned int *__p)
{
  return __builtin_ia32_rdrand32_step(__p);
}


static __inline__ int __attribute__((__always_inline__, __nodebug__))
_bit_scan_forward(int __A) {
  return __builtin_ctz(__A);
}


static __inline__ int __attribute__((__always_inline__, __nodebug__))
_bit_scan_reverse(int __A) {
  return 31 - __builtin_clz(__A);
}


static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdrnd")))
_rdrand64_step(unsigned long long *__p)
{
  return __builtin_ia32_rdrand64_step(__p);
}





static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_readfsbase_u32(void)
{
  return __builtin_ia32_rdfsbase32();
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_readfsbase_u64(void)
{
  return __builtin_ia32_rdfsbase64();
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_readgsbase_u32(void)
{
  return __builtin_ia32_rdgsbase32();
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_readgsbase_u64(void)
{
  return __builtin_ia32_rdgsbase64();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_writefsbase_u32(unsigned int __V)
{
  return __builtin_ia32_wrfsbase32(__V);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_writefsbase_u64(unsigned long long __V)
{
  return __builtin_ia32_wrfsbase64(__V);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_writegsbase_u32(unsigned int __V)
{
  return __builtin_ia32_wrgsbase32(__V);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_writegsbase_u64(unsigned long long __V)
{
  return __builtin_ia32_wrgsbase64(__V);
}






# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\rtmintrin.h" 1 3
# 43 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\rtmintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("rtm")))
_xbegin(void)
{
  return __builtin_ia32_xbegin();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("rtm")))
_xend(void)
{
  __builtin_ia32_xend();
}
# 252 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xtestintrin.h" 1 3
# 35 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xtestintrin.h" 3
static __inline__ int
    __attribute__((__always_inline__, __nodebug__, __target__("rtm")))
    _xtest(void) {
  return __builtin_ia32_xtest();
}
# 253 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\shaintrin.h" 1 3
# 37 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\shaintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha1nexte_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha1nexte((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha1msg1_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha1msg1((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha1msg2_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha1msg2((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha256rnds2_epu32(__m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i)__builtin_ia32_sha256rnds2((__v4si)__X, (__v4si)__Y, (__v4si)__Z);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha256msg1_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha256msg1((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha256msg2_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha256msg2((__v4si)__X, (__v4si)__Y);
}
# 257 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\fxsrintrin.h" 1 3
# 33 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\fxsrintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fxsr")))
_fxsave(void *__p) {
  return __builtin_ia32_fxsave(__p);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fxsr")))
_fxsave64(void *__p) {
  return __builtin_ia32_fxsave64(__p);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fxsr")))
_fxrstor(void *__p) {
  return __builtin_ia32_fxrstor(__p);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fxsr")))
_fxrstor64(void *__p) {
  return __builtin_ia32_fxrstor64(__p);
}
# 261 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xsaveintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xsaveintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsave")))
_xsave(void *__p, unsigned long long __m) {
  return __builtin_ia32_xsave(__p, __m);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsave")))
_xrstor(void *__p, unsigned long long __m) {
  return __builtin_ia32_xrstor(__p, __m);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsave")))
_xsave64(void *__p, unsigned long long __m) {
  return __builtin_ia32_xsave64(__p, __m);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsave")))
_xrstor64(void *__p, unsigned long long __m) {
  return __builtin_ia32_xrstor64(__p, __m);
}
# 265 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xsaveoptintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xsaveoptintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaveopt")))
_xsaveopt(void *__p, unsigned long long __m) {
  return __builtin_ia32_xsaveopt(__p, __m);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaveopt")))
_xsaveopt64(void *__p, unsigned long long __m) {
  return __builtin_ia32_xsaveopt64(__p, __m);
}
# 269 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xsavecintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xsavecintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsavec")))
_xsavec(void *__p, unsigned long long __m) {
  __builtin_ia32_xsavec(__p, __m);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsavec")))
_xsavec64(void *__p, unsigned long long __m) {
  __builtin_ia32_xsavec64(__p, __m);
}
# 273 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xsavesintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xsavesintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaves")))
_xsaves(void *__p, unsigned long long __m) {
  __builtin_ia32_xsaves(__p, __m);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaves")))
_xrstors(void *__p, unsigned long long __m) {
  __builtin_ia32_xrstors(__p, __m);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaves")))
_xrstors64(void *__p, unsigned long long __m) {
  __builtin_ia32_xrstors64(__p, __m);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaves")))
_xsaves64(void *__p, unsigned long long __m) {
  __builtin_ia32_xsaves64(__p, __m);
}
# 277 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3




# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\adxintrin.h" 1 3
# 35 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\adxintrin.h" 3
static __inline unsigned char __attribute__((__always_inline__, __nodebug__, __target__("adx")))
_addcarryx_u32(unsigned char __cf, unsigned int __x, unsigned int __y,
               unsigned int *__p)
{
  return __builtin_ia32_addcarryx_u32(__cf, __x, __y, __p);
}


static __inline unsigned char __attribute__((__always_inline__, __nodebug__, __target__("adx")))
_addcarryx_u64(unsigned char __cf, unsigned long long __x,
               unsigned long long __y, unsigned long long *__p)
{
  return __builtin_ia32_addcarryx_u64(__cf, __x, __y, __p);
}



static __inline unsigned char __attribute__((__always_inline__, __nodebug__))
_addcarry_u32(unsigned char __cf, unsigned int __x, unsigned int __y,
              unsigned int *__p)
{
  return __builtin_ia32_addcarry_u32(__cf, __x, __y, __p);
}


static __inline unsigned char __attribute__((__always_inline__, __nodebug__))
_addcarry_u64(unsigned char __cf, unsigned long long __x,
              unsigned long long __y, unsigned long long *__p)
{
  return __builtin_ia32_addcarry_u64(__cf, __x, __y, __p);
}


static __inline unsigned char __attribute__((__always_inline__, __nodebug__))
_subborrow_u32(unsigned char __cf, unsigned int __x, unsigned int __y,
              unsigned int *__p)
{
  return __builtin_ia32_subborrow_u32(__cf, __x, __y, __p);
}


static __inline unsigned char __attribute__((__always_inline__, __nodebug__))
_subborrow_u64(unsigned char __cf, unsigned long long __x,
               unsigned long long __y, unsigned long long *__p)
{
  return __builtin_ia32_subborrow_u64(__cf, __x, __y, __p);
}
# 282 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\immintrin.h" 2 3
# 30 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3


# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mm3dnow.h" 1 3
# 28 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mm3dnow.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\prfchwintrin.h" 1 3
# 29 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mm3dnow.h" 2 3

typedef float __v2sf __attribute__((__vector_size__(8)));




static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_femms(void) {
  __builtin_ia32_femms();
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pavgusb(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pavgusb((__v8qi)__m1, (__v8qi)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pf2id(__m64 __m) {
  return (__m64)__builtin_ia32_pf2id((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfacc(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfacc((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfadd(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfadd((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfcmpeq(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfcmpeq((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfcmpge(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfcmpge((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfcmpgt(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfcmpgt((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfmax(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfmax((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfmin(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfmin((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfmul(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfmul((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrcp(__m64 __m) {
  return (__m64)__builtin_ia32_pfrcp((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrcpit1(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfrcpit1((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrcpit2(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfrcpit2((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrsqrt(__m64 __m) {
  return (__m64)__builtin_ia32_pfrsqrt((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrsqrtit1(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfrsqit1((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfsub(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfsub((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfsubr(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfsubr((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pi2fd(__m64 __m) {
  return (__m64)__builtin_ia32_pi2fd((__v2si)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pmulhrw(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pmulhrw((__v4hi)__m1, (__v4hi)__m2);
}





static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pf2iw(__m64 __m) {
  return (__m64)__builtin_ia32_pf2iw((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pfnacc(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfnacc((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pfpnacc(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfpnacc((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pi2fw(__m64 __m) {
  return (__m64)__builtin_ia32_pi2fw((__v2si)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pswapdsf(__m64 __m) {
  return (__m64)__builtin_ia32_pswapdsf((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pswapdsi(__m64 __m) {
  return (__m64)__builtin_ia32_pswapdsi((__v2si)__m);
}
# 33 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmiintrin.h" 1 3
# 37 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\bmi2intrin.h" 1 3
# 41 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\lzcntintrin.h" 1 3
# 45 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\popcntintrin.h" 1 3
# 40 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\popcntintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("popcnt")))
_mm_popcnt_u32(unsigned int __A)
{
  return __builtin_popcount(__A);
}
# 56 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\popcntintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("popcnt")))
_popcnt32(int __A)
{
  return __builtin_popcount(__A);
}
# 73 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\popcntintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("popcnt")))
_mm_popcnt_u64(unsigned long long __A)
{
  return __builtin_popcountll(__A);
}
# 89 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\popcntintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("popcnt")))
_popcnt64(long long __A)
{
  return __builtin_popcountll(__A);
}
# 49 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\rdseedintrin.h" 1 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\rdseedintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdseed")))
_rdseed16_step(unsigned short *__p)
{
  return __builtin_ia32_rdseed16_step(__p);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdseed")))
_rdseed32_step(unsigned int *__p)
{
  return __builtin_ia32_rdseed32_step(__p);
}


static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdseed")))
_rdseed64_step(unsigned long long *__p)
{
  return __builtin_ia32_rdseed64_step(__p);
}
# 53 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\prfchwintrin.h" 1 3
# 57 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\ammintrin.h" 1 3
# 78 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\ammintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4a")))
_mm_extract_si64(__m128i __x, __m128i __y)
{
  return (__m128i)__builtin_ia32_extrq((__v2di)__x, (__v16qi)__y);
}
# 150 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\ammintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4a")))
_mm_insert_si64(__m128i __x, __m128i __y)
{
  return (__m128i)__builtin_ia32_insertq((__v2di)__x, (__v2di)__y);
}
# 168 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\ammintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse4a")))
_mm_stream_sd(double *__p, __m128d __a)
{
  __builtin_ia32_movntsd(__p, (__v2df)__a);
}
# 186 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\ammintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse4a")))
_mm_stream_ss(float *__p, __m128 __a)
{
  __builtin_ia32_movntss(__p, (__v4sf)__a);
}
# 61 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\fma4intrin.h" 1 3
# 36 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\fma4intrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_macc_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_macc_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_macc_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_macc_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msub_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msub_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmacc_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmacc_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmacc_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmacc_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmsub_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmsubss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmsub_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmsubsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_maddsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_maddsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msubadd_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msubadd_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_macc_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_macc_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_msub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_msub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_nmacc_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfnmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_nmacc_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfnmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_nmsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfnmsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_nmsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfnmsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_maddsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_maddsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_msubadd_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmsubaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_msubadd_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmsubaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}
# 65 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xopintrin.h" 1 3
# 31 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xopintrin.h" 3
# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\fma4intrin.h" 1 3
# 32 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xopintrin.h" 2 3




static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacssww((__v8hi)__A, (__v8hi)__B, (__v8hi)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_macc_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsww((__v8hi)__A, (__v8hi)__B, (__v8hi)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccsd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccs_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacssdd((__v4si)__A, (__v4si)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_macc_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsdd((__v4si)__A, (__v4si)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccslo_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacssdql((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_macclo_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsdql((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccshi_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacssdqh((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_macchi_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsdqh((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maddsd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmadcsswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maddd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmadcswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddw_epi8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddbw((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddd_epi8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddbd((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epi8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddbq((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddd_epi16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddwd((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epi16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddwq((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epi32(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphadddq((__v4si)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddw_epu8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddubw((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddd_epu8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddubd((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epu8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddubq((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddd_epu16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphadduwd((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epu16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphadduwq((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epu32(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddudq((__v4si)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_hsubw_epi8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphsubbw((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_hsubd_epi16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphsubwd((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_hsubq_epi32(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphsubdq((__v4si)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_cmov_si128(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpcmov((__v2di)__A, (__v2di)__B, (__v2di)__C);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm256_cmov_si256(__m256i __A, __m256i __B, __m256i __C)
{
  return (__m256i)__builtin_ia32_vpcmov_256((__v4di)__A, (__v4di)__B, (__v4di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_perm_epi8(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpperm((__v16qi)__A, (__v16qi)__B, (__v16qi)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_rot_epi8(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vprotb((__v16qi)__A, (__v16qi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_rot_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vprotw((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_rot_epi32(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vprotd((__v4si)__A, (__v4si)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_rot_epi64(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vprotq((__v2di)__A, (__v2di)__B);
}
# 252 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xopintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_shl_epi8(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshlb((__v16qi)__A, (__v16qi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_shl_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshlw((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_shl_epi32(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshld((__v4si)__A, (__v4si)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_shl_epi64(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshlq((__v2di)__A, (__v2di)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_sha_epi8(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshab((__v16qi)__A, (__v16qi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_sha_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshaw((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_sha_epi32(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshad((__v4si)__A, (__v4si)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_sha_epi64(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshaq((__v2di)__A, (__v2di)__B);
}
# 341 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xopintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (7)); });
}
# 744 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\xopintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_frcz_ss(__m128 __A)
{
  return (__m128)__builtin_ia32_vfrczss((__v4sf)__A);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_frcz_sd(__m128d __A)
{
  return (__m128d)__builtin_ia32_vfrczsd((__v2df)__A);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_frcz_ps(__m128 __A)
{
  return (__m128)__builtin_ia32_vfrczps((__v4sf)__A);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_frcz_pd(__m128d __A)
{
  return (__m128d)__builtin_ia32_vfrczpd((__v2df)__A);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm256_frcz_ps(__m256 __A)
{
  return (__m256)__builtin_ia32_vfrczps256((__v8sf)__A);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm256_frcz_pd(__m256d __A)
{
  return (__m256d)__builtin_ia32_vfrczpd256((__v4df)__A);
}
# 69 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tbmintrin.h" 1 3
# 38 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\tbmintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcfill_u32(unsigned int __a)
{
  return __a & (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blci_u32(unsigned int __a)
{
  return __a | ~(__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcic_u32(unsigned int __a)
{
  return ~__a & (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcmsk_u32(unsigned int __a)
{
  return __a ^ (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcs_u32(unsigned int __a)
{
  return __a | (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blsfill_u32(unsigned int __a)
{
  return __a | (__a - 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blsic_u32(unsigned int __a)
{
  return ~__a | (__a - 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__t1mskc_u32(unsigned int __a)
{
  return ~__a | (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__tzmsk_u32(unsigned int __a)
{
  return ~__a & (__a - 1);
}






static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcfill_u64(unsigned long long __a)
{
  return __a & (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blci_u64(unsigned long long __a)
{
  return __a | ~(__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcic_u64(unsigned long long __a)
{
  return ~__a & (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcmsk_u64(unsigned long long __a)
{
  return __a ^ (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcs_u64(unsigned long long __a)
{
  return __a | (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blsfill_u64(unsigned long long __a)
{
  return __a | (__a - 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blsic_u64(unsigned long long __a)
{
  return ~__a | (__a - 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__t1mskc_u64(unsigned long long __a)
{
  return ~__a | (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__tzmsk_u64(unsigned long long __a)
{
  return ~__a & (__a - 1);
}
# 73 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\f16cintrin.h" 1 3
# 77 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3



# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mwaitxintrin.h" 1 3
# 33 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\mwaitxintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("mwaitx")))
_mm_monitorx(void const * __p, unsigned __extensions, unsigned __hints)
{
  __builtin_ia32_monitorx((void *)__p, __extensions, __hints);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("mwaitx")))
_mm_mwaitx(unsigned __extensions, unsigned __hints, unsigned __clock)
{
  __builtin_ia32_mwaitx(__extensions, __hints, __clock);
}
# 81 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\x86intrin.h" 2 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/opt_random.h" 2 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/opt_random.h" 3


namespace std
{
# 216 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/opt_random.h" 3
}
# 51 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\random" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\numeric" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\numeric" 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 1 3
# 65 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
namespace std
{
# 80 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
    {





                                                     ;

      for (; __first != __last; ++__first)
 {
   *__first = __value;
   ++__value;
 }
    }


}



namespace std
{
# 118 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __init + *__first;
      return __init;
    }
# 144 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp, typename _BinaryOperation>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __binary_op(__init, *__first);
      return __init;
    }
# 172 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __init + (*__first1 * *__first2);
      return __init;
    }
# 203 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));
      return __init;
    }
# 235 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __value + *__first;
   *++__result = __value;
 }
      return ++__result;
    }
# 275 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __binary_op(__value, *__first);
   *++__result = __value;
 }
      return ++__result;
    }
# 315 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    adjacent_difference(_InputIterator __first,
   _InputIterator __last, _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __tmp - __value;
   __value = std::move(__tmp);
 }
      return ++__result;
    }
# 357 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    adjacent_difference(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __binary_op(__tmp, __value);
   __value = std::move(__tmp);
 }
      return ++__result;
    }


}
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\numeric" 2 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 2 3

namespace std
{



  namespace __detail
  {
# 50 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 3
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      _Tp
      _Mod<_Tp, __m, __a, __c, false, true>::
      __calc(_Tp __x)
      {
 if (__a == 1)
   __x %= __m;
 else
   {
     static const _Tp __q = __m / __a;
     static const _Tp __r = __m % __a;

     _Tp __t1 = __a * (__x % __q);
     _Tp __t2 = __r * (__x / __q);
     if (__t1 >= __t2)
       __x = __t1 - __t2;
     else
       __x = __m - __t2 + __t1;
   }

 if (__c != 0)
   {
     const _Tp __d = __m - __x;
     if (__d > __c)
       __x += __c;
     else
       __x = __c - __d;
   }
 return __x;
      }

    template<typename _InputIterator, typename _OutputIterator,
      typename _Tp>
      _OutputIterator
      __normalize(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, const _Tp& __factor)
      {
 for (; __first != __last; ++__first, ++__result)
   *__result = *__first / __factor;
 return __result;
      }


  }



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;





  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
   && (__detail::__mod<_UIntType, __m>(__s) == 0))
 _M_x = 1;
      else
 _M_x = __detail::__mod<_UIntType, __m>(__s);
    }




  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      linear_congruential_engine<_UIntType, __a, __c, __m>::
      seed(_Sseq& __q)
      {
 const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits
                                 : std::__lg(__m);
 const _UIntType __k = (__k0 + 31) / 32;
 uint_least32_t __arr[__k + 3];
 __q.generate(__arr + 0, __arr + __k + 3);
 _UIntType __factor = 1u;
 _UIntType __sum = 0u;
 for (size_t __j = 0; __j < __k; ++__j)
   {
     __sum += __arr[__j + 3] * __factor;
     __factor *= __detail::_Shift<_UIntType, 32>::__value;
   }
 seed(__sum);
      }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const linear_congruential_engine<_UIntType,
      __a, __c, __m>& __lcr)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__os.widen(' '));

      __os << __lcr._M_x;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec);

      __is >> __lcr._M_x;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::word_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::state_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::shift_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::mask_bits;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::xor_mask;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_u;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_d;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_s;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_b;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_t;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_c;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_l;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
                                              initialization_multiplier;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::default_seed;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
 __detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
 {
   _UIntType __x = _M_x[__i - 1];
   __x ^= __x >> (__w - 2);
   __x *= __f;
   __x += __detail::__mod<_UIntType, __n>(__i);
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__x);
 }
      _M_p = state_size;
    }

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
         __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
 const _UIntType __upper_mask = (~_UIntType()) << __r;
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__n * __k];
 __q.generate(__arr + 0, __arr + __n * __k);

 bool __zero = true;
 for (size_t __i = 0; __i < state_size; ++__i)
   {
     _UIntType __factor = 1u;
     _UIntType __sum = 0u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);

     if (__zero)
       {
  if (__i == 0)
    {
      if ((_M_x[0] & __upper_mask) != 0u)
        __zero = false;
    }
  else if (_M_x[__i] != 0u)
    __zero = false;
       }
   }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
 _M_p = state_size;
      }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    _M_gen_rand(void)
    {
      const _UIntType __upper_mask = (~_UIntType()) << __r;
      const _UIntType __lower_mask = ~__upper_mask;

      for (size_t __k = 0; __k < (__n - __m); ++__k)
        {
   _UIntType __y = ((_M_x[__k] & __upper_mask)
      | (_M_x[__k + 1] & __lower_mask));
   _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
        }

      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 {
   _UIntType __y = ((_M_x[__k] & __upper_mask)
      | (_M_x[__k + 1] & __lower_mask));
   _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
 }

      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
         | (_M_x[0] & __lower_mask));
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    discard(unsigned long long __z)
    {
      while (__z > state_size - _M_p)
 {
   __z -= state_size - _M_p;
   _M_gen_rand();
 }
      _M_p += __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    operator()()
    {

      if (_M_p >= state_size)
 _M_gen_rand();


      result_type __z = _M_x[_M_p++];
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
      __z ^= (__z >> __l);

      return __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __n; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_p;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __n; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_p;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr _UIntType
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    void
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    seed(result_type __value)
    {
      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>
 __lcg(__value == 0u ? default_seed : __value);

      const size_t __n = (__w + 31) / 32;

      for (size_t __i = 0; __i < long_lag; ++__i)
 {
   _UIntType __sum = 0u;
   _UIntType __factor = 1u;
   for (size_t __j = 0; __j < __n; ++__j)
     {
       __sum += __detail::__mod<uint_least32_t,
         __detail::_Shift<uint_least32_t, 32>::__value>
    (__lcg()) * __factor;
       __factor *= __detail::_Shift<_UIntType, 32>::__value;
     }
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__sum);
 }
      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      seed(_Sseq& __q)
      {
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__r * __k];
 __q.generate(__arr + 0, __arr + __r * __k);

 for (size_t __i = 0; __i < long_lag; ++__i)
   {
     _UIntType __sum = 0u;
     _UIntType __factor = 1u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);
   }
 _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
 _M_p = 0;
      }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      result_type
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    operator()()
    {

      long __ps = _M_p - short_lag;
      if (__ps < 0)
 __ps += long_lag;




      _UIntType __xi;
      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)
 {
   __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;
   _M_carry = 0;
 }
      else
 {
   __xi = (__detail::_Shift<_UIntType, __w>::__value
    - _M_x[_M_p] - _M_carry + _M_x[__ps]);
   _M_carry = 1;
 }
      _M_x[_M_p] = __xi;


      if (++_M_p >= long_lag)
 _M_p = 0;

      return __xi;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const subtract_with_carry_engine<_UIntType,
      __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __r; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_carry << __space << __x._M_p;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __r; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_carry;
      __is >> __x._M_p;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    typename discard_block_engine<_RandomNumberEngine,
      __p, __r>::result_type
    discard_block_engine<_RandomNumberEngine, __p, __r>::
    operator()()
    {
      if (_M_n >= used_block)
 {
   _M_b.discard(block_size - _M_n);
   _M_n = 0;
 }
      ++_M_n;
      return _M_b();
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discard_block_engine<_RandomNumberEngine,
        __p, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base() << __space << __x._M_n;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discard_block_engine<_RandomNumberEngine, __p, __r>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b >> __x._M_n;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
      result_type
    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
    operator()()
    {
      typedef typename _RandomNumberEngine::result_type _Eresult_type;
      const _Eresult_type __r
 = (_M_b.max() - _M_b.min() < std::numeric_limits<_Eresult_type>::max()
    ? _M_b.max() - _M_b.min() + 1 : 0);
      const unsigned __edig = std::numeric_limits<_Eresult_type>::digits;
      const unsigned __m = __r ? std::__lg(__r) : __edig;

      typedef typename std::common_type<_Eresult_type, result_type>::type
 __ctype;
      const unsigned __cdig = std::numeric_limits<__ctype>::digits;

      unsigned __n, __n0;
      __ctype __s0, __s1, __y0, __y1;

      for (size_t __i = 0; __i < 2; ++__i)
 {
   __n = (__w + __m - 1) / __m + __i;
   __n0 = __n - __w % __n;
   const unsigned __w0 = __w / __n;

   __s0 = 0;
   __s1 = 0;
   if (__w0 < __cdig)
     {
       __s0 = __ctype(1) << __w0;
       __s1 = __s0 << 1;
     }

   __y0 = 0;
   __y1 = 0;
   if (__r)
     {
       __y0 = __s0 * (__r / __s0);
       if (__s1)
  __y1 = __s1 * (__r / __s1);

       if (__r - __y0 <= __y0 / __n)
  break;
     }
   else
     break;
 }

      result_type __sum = 0;
      for (size_t __k = 0; __k < __n0; ++__k)
 {
   __ctype __u;
   do
     __u = _M_b() - _M_b.min();
   while (__y0 && __u >= __y0);
   __sum = __s0 * __sum + (__s0 ? __u % __s0 : __u);
 }
      for (size_t __k = __n0; __k < __n; ++__k)
 {
   __ctype __u;
   do
     __u = _M_b() - _M_b.min();
   while (__y1 && __u >= __y1);
   __sum = __s1 * __sum + (__s1 ? __u % __s1 : __u);
 }
      return __sum;
    }


  template<typename _RandomNumberEngine, size_t __k>
    constexpr size_t
    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;

  template<typename _RandomNumberEngine, size_t __k>
    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type
    shuffle_order_engine<_RandomNumberEngine, __k>::
    operator()()
    {
      size_t __j = __k * ((_M_y - _M_b.min())
     / (_M_b.max() - _M_b.min() + 1.0L));
      _M_y = _M_v[__j];
      _M_v[__j] = _M_b();

      return _M_y;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base();
      for (size_t __i = 0; __i < __k; ++__i)
 __os << __space << __x._M_v[__i];
      __os << __space << __x._M_y;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b;
      for (size_t __i = 0; __i < __k; ++__i)
 __is >> __x._M_v[__i];
      __is >> __x._M_y;

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 924 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {

  const __uctype __uerange = __urange + 1;
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
# 1008 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 3
     __uctype __tmp;
     while (__f != __t)
       {
  do
    {
      const __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_int_distribution<_IntType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_real_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 auto __range = __p.b() - __p.a();
 while (__f != __t)
   *__f++ = __aurng() * __range + __p.a();
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_real_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _ForwardIterator,
    typename _UniformRandomNumberGenerator>
    void
    std::bernoulli_distribution::
    __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
      _UniformRandomNumberGenerator& __urng,
      const param_type& __p)
    {

      __detail::_Adaptor<_UniformRandomNumberGenerator, double>
 __aurng(__urng);
      auto __limit = __p.p() * (__aurng.max() - __aurng.min());

      while (__f != __t)
 *__f++ = (__aurng() - __aurng.min()) < __limit;
    }

  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bernoulli_distribution& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename geometric_distribution<_IntType>::result_type
      geometric_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {


 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 double __cand;
 do
   __cand = std::floor(std::log(1.0 - __aurng()) / __param._M_log_1_p);
 while (__cand >= __thr);

 return result_type(__cand + __naf);
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      geometric_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {



 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 while (__f != __t)
   {
     double __cand;
     do
       __cand = std::floor(std::log(1.0 - __aurng())
      / __param._M_log_1_p);
     while (__cand >= __thr);

     *__f++ = __cand + __naf;
   }
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __p;
      __is >> __p;
      __x.param(typename geometric_distribution<_IntType>::param_type(__p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng)
      {
 const double __y = _M_gd(__urng);


 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 typedef typename std::gamma_distribution<double>::param_type
   param_type;

 const double __y =
   _M_gd(__urng, param_type(__p.k(), (1.0 - __p.p()) / __p.p()));

 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      negative_binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   {
     const double __y = _M_gd(__urng);


     std::poisson_distribution<result_type> __poisson(__y);
     *__f++ = __poisson(__urng);
   }
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      negative_binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typename std::gamma_distribution<result_type>::param_type
   __p2(__p.k(), (1.0 - __p.p()) / __p.p());

 while (__f != __t)
   {
     const double __y = _M_gd(__urng, __p2);

     std::poisson_distribution<result_type> __poisson(__y);
     *__f++ = __poisson(__urng);
   }
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.k() << __space << __x.p()
    << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _IntType __k;
      double __p;
      __is >> __k >> __p >> __x._M_gd;
      __x.param(typename negative_binomial_distribution<_IntType>::
  param_type(__k, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    poisson_distribution<_IntType>::param_type::
    _M_initialize()
    {

      if (_M_mean >= 12)
 {
   const double __m = std::floor(_M_mean);
   _M_lm_thr = std::log(_M_mean);
   _M_lfm = std::lgamma(__m + 1);
   _M_sm = std::sqrt(__m);

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __dx = std::sqrt(2 * __m * std::log(32 * __m
             / __pi_4));
   _M_d = std::round(std::max(6.0, std::min(__m, __dx)));
   const double __cx = 2 * __m + _M_d;
   _M_scx = std::sqrt(__cx / 2);
   _M_1cx = 1 / __cx;

   _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);
   _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2))
  / _M_d;
 }
      else

 _M_lm_thr = std::exp(-_M_mean);
      }
# 1432 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename poisson_distribution<_IntType>::result_type
      poisson_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param.mean() >= 12)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __m = std::floor(__param.mean());

     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __c1 = __param._M_sm * __spi_2;
     const double __c2 = __param._M_c2b + __c1;
     const double __c3 = __c2 + 1;
     const double __c4 = __c3 + 1;

     const double __e178 = 1.0129030479320018583185514777512983L;
     const double __c5 = __c4 + __e178;
     const double __c = __param._M_cb + __c5;
     const double __2cx = 2 * (2 * __m + __param._M_d);

     bool __reject = true;
     do
       {
  const double __u = __c * __aurng();
  const double __e = -std::log(1.0 - __aurng());

  double __w = 0.0;

  if (__u <= __c1)
    {
      const double __n = _M_nd(__urng);
      const double __y = -std::abs(__n) * __param._M_sm - 1;
      __x = std::floor(__y);
      __w = -__n * __n / 2;
      if (__x < -__m)
        continue;
    }
  else if (__u <= __c2)
    {
      const double __n = _M_nd(__urng);
      const double __y = 1 + std::abs(__n) * __param._M_scx;
      __x = std::ceil(__y);
      __w = __y * (2 - __y) * __param._M_1cx;
      if (__x > __param._M_d)
        continue;
    }
  else if (__u <= __c3)


    __x = -1;
  else if (__u <= __c4)
    __x = 0;
  else if (__u <= __c5)
    __x = 1;
  else
    {
      const double __v = -std::log(1.0 - __aurng());
      const double __y = __param._M_d
         + __v * __2cx / __param._M_d;
      __x = std::ceil(__y);
      __w = -__param._M_d * __param._M_1cx * (1 + __y / 2);
    }

  __reject = (__w - __e - __x * __param._M_lm_thr
       > __param._M_lfm - std::lgamma(__x + __m + 1));

  __reject |= __x + __m >= __thr;

       } while (__reject);

     return result_type(__x + __m + __naf);
   }
 else

   {
     _IntType __x = 0;
     double __prod = 1.0;

     do
       {
  __prod *= __aurng();
  __x += 1;
       }
     while (__prod > __param._M_lm_thr);

     return __x - 1;
   }
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      poisson_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.mean() << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __mean;
      __is >> __mean >> __x._M_nd;
      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    binomial_distribution<_IntType>::param_type::
    _M_initialize()
    {
      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;

      _M_easy = true;


      if (_M_t * __p12 >= 8)
 {
   _M_easy = false;
   const double __np = std::floor(_M_t * __p12);
   const double __pa = __np / _M_t;
   const double __1p = 1 - __pa;

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __d1x =
     std::sqrt(__np * __1p * std::log(32 * __np
          / (81 * __pi_4 * __1p)));
   _M_d1 = std::round(std::max(1.0, __d1x));
   const double __d2x =
     std::sqrt(__np * __1p * std::log(32 * _M_t * __1p
          / (__pi_4 * __pa)));
   _M_d2 = std::round(std::max(1.0, __d2x));


   const double __spi_2 = 1.2533141373155002512078826424055226L;
   _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));
   _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));
   _M_c = 2 * _M_d1 / __np;
   _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;
   const double __a12 = _M_a1 + _M_s2 * __spi_2;
   const double __s1s = _M_s1 * _M_s1;
   _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))
        * 2 * __s1s / _M_d1
        * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));
   const double __s2s = _M_s2 * _M_s2;
   _M_s = (_M_a123 + 2 * __s2s / _M_d2
    * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));
   _M_lf = (std::lgamma(__np + 1)
     + std::lgamma(_M_t - __np + 1));
   _M_lp1p = std::log(__pa / __1p);

   _M_q = -std::log(1 - (__p12 - __pa) / __1p);
 }
      else

 _M_q = -std::log(1 - __p12);
    }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      _M_waiting(_UniformRandomNumberGenerator& __urng,
   _IntType __t, double __q)
      {
 _IntType __x = 0;
 double __sum = 0.0;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 do
   {
     if (__t == __x)
       return __x;
     const double __e = -std::log(1.0 - __aurng());
     __sum += __e / (__t - __x);
     __x += 1;
   }
 while (__sum <= __q);

 return __x - 1;
      }
# 1682 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 const _IntType __t = __param.t();
 const double __p = __param.p();
 const double __p12 = __p <= 0.5 ? __p : 1.0 - __p;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);


 if (!__param._M_easy)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __np = std::floor(__t * __p12);


     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __a1 = __param._M_a1;
     const double __a12 = __a1 + __param._M_s2 * __spi_2;
     const double __a123 = __param._M_a123;
     const double __s1s = __param._M_s1 * __param._M_s1;
     const double __s2s = __param._M_s2 * __param._M_s2;

     bool __reject;
     do
       {
  const double __u = __param._M_s * __aurng();

  double __v;

  if (__u <= __a1)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s1 * std::abs(__n);
      __reject = __y >= __param._M_d1;
      if (!__reject)
        {
   const double __e = -std::log(1.0 - __aurng());
   __x = std::floor(__y);
   __v = -__e - __n * __n / 2 + __param._M_c;
        }
    }
  else if (__u <= __a12)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s2 * std::abs(__n);
      __reject = __y >= __param._M_d2;
      if (!__reject)
        {
   const double __e = -std::log(1.0 - __aurng());
   __x = std::floor(-__y);
   __v = -__e - __n * __n / 2;
        }
    }
  else if (__u <= __a123)
    {
      const double __e1 = -std::log(1.0 - __aurng());
      const double __e2 = -std::log(1.0 - __aurng());

      const double __y = __param._M_d1
         + 2 * __s1s * __e1 / __param._M_d1;
      __x = std::floor(__y);
      __v = (-__e2 + __param._M_d1 * (1 / (__t - __np)
          -__y / (2 * __s1s)));
      __reject = false;
    }
  else
    {
      const double __e1 = -std::log(1.0 - __aurng());
      const double __e2 = -std::log(1.0 - __aurng());

      const double __y = __param._M_d2
         + 2 * __s2s * __e1 / __param._M_d2;
      __x = std::floor(-__y);
      __v = -__e2 - __param._M_d2 * __y / (2 * __s2s);
      __reject = false;
    }

  __reject = __reject || __x < -__np || __x > __t - __np;
  if (!__reject)
    {
      const double __lfx =
        std::lgamma(__np + __x + 1)
        + std::lgamma(__t - (__np + __x) + 1);
      __reject = __v > __param._M_lf - __lfx
        + __x * __param._M_lp1p;
    }

  __reject |= __x + __np >= __thr;
       }
     while (__reject);

     __x += __np + __naf;

     const _IntType __z = _M_waiting(__urng, __t - _IntType(__x),
         __param._M_q);
     __ret = _IntType(__x) + __z;
   }
 else

   __ret = _M_waiting(__urng, __t, __param._M_q);

 if (__p12 != __p)
   __ret = __t - __ret;
 return __ret;
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.t() << __space << __x.p()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __t;
      double __p;
      __is >> __t >> __p >> __x._M_nd;
      __x.param(typename binomial_distribution<_IntType>::
  param_type(__t, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::exponential_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 while (__f != __t)
   *__f++ = -std::log(result_type(1) - __aurng()) / __p.lambda();
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.lambda();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __lambda;
      __is >> __lambda;
      __x.param(typename exponential_distribution<_RealType>::
  param_type(__lambda));

      __is.flags(__flags);
      return __is;
    }
# 1931 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/random.tcc" 3
  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename normal_distribution<_RealType>::result_type
      normal_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 if (_M_saved_available)
   {
     _M_saved_available = false;
     __ret = _M_saved;
   }
 else
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     __ret = __y * __mult;
   }

 __ret = __ret * __param.stddev() + __param.mean();
 return __ret;
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      normal_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 if (__f == __t)
   return;

 if (_M_saved_available)
   {
     _M_saved_available = false;
     *__f++ = _M_saved * __param.stddev() + __param.mean();

     if (__f == __t)
       return;
   }

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 while (__f + 1 < __t)
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     *__f++ = __y * __mult * __param.stddev() + __param.mean();
     *__f++ = __x * __mult * __param.stddev() + __param.mean();
   }

 if (__f != __t)
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     *__f = __y * __mult * __param.stddev() + __param.mean();
   }
      }

  template<typename _RealType>
    bool
    operator==(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    {
      if (__d1._M_param == __d2._M_param
   && __d1._M_saved_available == __d2._M_saved_available)
 {
   if (__d1._M_saved_available
       && __d1._M_saved == __d2._M_saved)
     return true;
   else if(!__d1._M_saved_available)
     return true;
   else
     return false;
 }
      else
 return false;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const normal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.mean() << __space << __x.stddev()
    << __space << __x._M_saved_available;
      if (__x._M_saved_available)
 __os << __space << __x._M_saved;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        normal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      double __mean, __stddev;
      __is >> __mean >> __stddev
    >> __x._M_saved_available;
      if (__x._M_saved_available)
 __is >> __x._M_saved;
      __x.param(typename normal_distribution<_RealType>::
  param_type(__mean, __stddev));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      lognormal_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

   while (__f != __t)
     *__f++ = std::exp(__p.s() * _M_nd(__urng) + __p.m());
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.s()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __s;
      __is >> __m >> __s >> __x._M_nd;
      __x.param(typename lognormal_distribution<_RealType>::
  param_type(__m, __s));

      __is.flags(__flags);
      return __is;
    }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::chi_squared_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = 2 * _M_gd(__urng);
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::chi_squared_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const typename
        std::gamma_distribution<result_type>::param_type& __p)
      {

 while (__f != __t)
   *__f++ = 2 * _M_gd(__urng, __p);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_gd;
      __x.param(typename chi_squared_distribution<_RealType>::
  param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename cauchy_distribution<_RealType>::result_type
      cauchy_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 _RealType __u;
 do
   __u = __aurng();
 while (__u == 0.5);

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 return __p.a() + __p.b() * std::tan(__pi * __u);
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      cauchy_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 while (__f != __t)
   {
     _RealType __u;
     do
       __u = __aurng();
     while (__u == 0.5);

     *__f++ = __p.a() + __p.b() * std::tan(__pi * __u);
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename cauchy_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::fisher_f_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = ((_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::fisher_f_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typedef typename std::gamma_distribution<result_type>::param_type
   param_type;
 param_type __p1(__p.m() / 2);
 param_type __p2(__p.n() / 2);
 while (__f != __t)
   *__f++ = ((_M_gd_x(__urng, __p1) * n())
      / (_M_gd_y(__urng, __p2) * m()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.n()
    << __space << __x._M_gd_x << __space << __x._M_gd_y;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __n;
      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;
      __x.param(typename fisher_f_distribution<_RealType>::
  param_type(__m, __n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::student_t_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::student_t_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typename std::gamma_distribution<result_type>::param_type
   __p2(__p.n() / 2, 2);
 while (__f != __t)
   *__f++ = _M_nd(__urng) * std::sqrt(__p.n() / _M_gd(__urng, __p2));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_nd >> __x._M_gd;
      __x.param(typename student_t_distribution<_RealType>::param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    gamma_distribution<_RealType>::param_type::
    _M_initialize()
    {
      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;

      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);
      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);
    }






  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename gamma_distribution<_RealType>::result_type
      gamma_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 do
   {
     do
       {
  __n = _M_nd(__urng);
  __v = result_type(1.0) + __param._M_a2 * __n;
       }
     while (__v <= 0.0);

     __v = __v * __v * __v;
     __u = __aurng();
   }
 while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
        && (std::log(__u) > (0.5 * __n * __n + __a1
        * (1.0 - __v + std::log(__v)))));

 if (__param.alpha() == __param._M_malpha)
   return __a1 * __v * __param.beta();
 else
   {
     do
       __u = __aurng();
     while (__u == 0.0);

     return (std::pow(__u, result_type(1.0) / __param.alpha())
      * __a1 * __v * __param.beta());
   }
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      gamma_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 if (__param.alpha() == __param._M_malpha)
   while (__f != __t)
     {
       do
  {
    do
      {
        __n = _M_nd(__urng);
        __v = result_type(1.0) + __param._M_a2 * __n;
      }
    while (__v <= 0.0);

    __v = __v * __v * __v;
    __u = __aurng();
  }
       while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
       && (std::log(__u) > (0.5 * __n * __n + __a1
       * (1.0 - __v + std::log(__v)))));

       *__f++ = __a1 * __v * __param.beta();
     }
 else
   while (__f != __t)
     {
       do
  {
    do
      {
        __n = _M_nd(__urng);
        __v = result_type(1.0) + __param._M_a2 * __n;
      }
    while (__v <= 0.0);

    __v = __v * __v * __v;
    __u = __aurng();
  }
       while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
       && (std::log(__u) > (0.5 * __n * __n + __a1
       * (1.0 - __v + std::log(__v)))));

       do
  __u = __aurng();
       while (__u == 0.0);

       *__f++ = (std::pow(__u, result_type(1.0) / __param.alpha())
   * __a1 * __v * __param.beta());
     }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.alpha() << __space << __x.beta()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __alpha_val, __beta_val;
      __is >> __alpha_val >> __beta_val >> __x._M_nd;
      __x.param(typename gamma_distribution<_RealType>::
  param_type(__alpha_val, __beta_val));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename weibull_distribution<_RealType>::result_type
      weibull_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.b() * std::pow(-std::log(result_type(1) - __aurng()),
      result_type(1) / __p.a());
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      weibull_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 auto __inv_a = result_type(1) / __p.a();

 while (__f != __t)
   *__f++ = __p.b() * std::pow(-std::log(result_type(1) - __aurng()),
          __inv_a);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename weibull_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename extreme_value_distribution<_RealType>::result_type
      extreme_value_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.a() - __p.b() * std::log(-std::log(result_type(1)
            - __aurng()));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      extreme_value_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 while (__f != __t)
   *__f++ = __p.a() - __p.b() * std::log(-std::log(result_type(1)
         - __aurng()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename extreme_value_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    discrete_distribution<_IntType>::param_type::
    _M_initialize()
    {
      if (_M_prob.size() < 2)
 {
   _M_prob.clear();
   return;
 }

      const double __sum = std::accumulate(_M_prob.begin(),
        _M_prob.end(), 0.0);

      __detail::__normalize(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),
       __sum);

      _M_cp.reserve(_M_prob.size());
      std::partial_sum(_M_prob.begin(), _M_prob.end(),
         std::back_inserter(_M_cp));

      _M_cp[_M_cp.size() - 1] = 1.0;
    }

  template<typename _IntType>
    template<typename _Func>
      discrete_distribution<_IntType>::param_type::
      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)
      : _M_prob(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const double __delta = (__xmax - __xmin) / __n;

 _M_prob.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename discrete_distribution<_IntType>::result_type
      discrete_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 if (__param._M_cp.empty())
   return result_type(0);

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);

 return __pos - __param._M_cp.begin();
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      discrete_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 if (__param._M_cp.empty())
   {
     while (__f != __t)
       *__f++ = result_type(0);
     return;
   }

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 while (__f != __t)
   {
     const double __p = __aurng();
     auto __pos = std::lower_bound(__param._M_cp.begin(),
       __param._M_cp.end(), __p);

     *__f++ = __pos - __param._M_cp.begin();
   }
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      std::vector<double> __prob = __x.probabilities();
      __os << __prob.size();
      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<double> __prob_vec;
      __prob_vec.reserve(__n);
      for (; __n != 0; --__n)
 {
   double __prob;
   __is >> __prob;
   __prob_vec.push_back(__prob);
 }

      __x.param(typename discrete_distribution<_IntType>::
  param_type(__prob_vec.begin(), __prob_vec.end()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_constant_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      const double __sum = std::accumulate(_M_den.begin(),
        _M_den.end(), 0.0);

      __detail::__normalize(_M_den.begin(), _M_den.end(), _M_den.begin(),
       __sum);

      _M_cp.reserve(_M_den.size());
      std::partial_sum(_M_den.begin(), _M_den.end(),
         std::back_inserter(_M_cp));


      _M_cp[_M_cp.size() - 1] = 1.0;

      for (size_t __k = 0; __k < _M_den.size(); ++__k)
 _M_den[__k] /= _M_int[__k + 1] - _M_int[__k];
    }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp()
      {
 if (__bbegin != __bend)
   {
     for (;;)
       {
  _M_int.push_back(*__bbegin);
  ++__bbegin;
  if (__bbegin == __bend)
    break;

  _M_den.push_back(*__wbegin);
  ++__wbegin;
       }
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 _M_int.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   _M_int.push_back(*__biter);

 _M_den.reserve(_M_int.size() - 1);
 for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
   _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   _M_int.push_back(__xmin + __k * __delta);

 _M_den.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_constant_distribution<_RealType>::result_type
      piecewise_constant_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 return __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      piecewise_constant_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param._M_cp.empty())
   {
     while (__f != __t)
       *__f++ = __aurng();
     return;
   }

 while (__f != __t)
   {
     const double __p = __aurng();

     auto __pos = std::lower_bound(__param._M_cp.begin(),
       __param._M_cp.end(), __p);
     const size_t __i = __pos - __param._M_cp.begin();

     const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

     *__f++ = (__param._M_int[__i]
        + (__p - __pref) / __param._M_den[__i]);
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n);
      for (size_t __i = 0; __i < __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_constant_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_linear_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)
       && _M_den[0] == _M_den[1]))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      double __sum = 0.0;
      _M_cp.reserve(_M_int.size() - 1);
      _M_m.reserve(_M_int.size() - 1);
      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
 {
   const _RealType __delta = _M_int[__k + 1] - _M_int[__k];
   __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;
   _M_cp.push_back(__sum);
   _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);
 }


      __detail::__normalize(_M_den.begin(), _M_den.end(), _M_den.begin(),
       __sum);

      __detail::__normalize(_M_cp.begin(), _M_cp.end(), _M_cp.begin(), __sum);

      __detail::__normalize(_M_m.begin(), _M_m.end(), _M_m.begin(), __sum);


      _M_cp[_M_cp.size() - 1] = 1.0;
     }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 for (; __bbegin != __bend; ++__bbegin, ++__wbegin)
   {
     _M_int.push_back(*__bbegin);
     _M_den.push_back(*__wbegin);
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 _M_int.reserve(__bl.size());
 _M_den.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   {
     _M_int.push_back(*__biter);
     _M_den.push_back(__fw(*__biter));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 _M_den.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   {
     _M_int.push_back(__xmin + __k * __delta);
     _M_den.push_back(__fw(_M_int[__k] + __delta));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_linear_distribution<_RealType>::result_type
      piecewise_linear_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 const double __a = 0.5 * __param._M_m[__i];
 const double __b = __param._M_den[__i];
 const double __cm = __p - __pref;

 _RealType __x = __param._M_int[__i];
 if (__a == 0)
   __x += __cm / __b;
 else
   {
     const double __d = __b * __b + 4.0 * __a * __cm;
     __x += 0.5 * (std::sqrt(__d) - __b) / __a;
          }

        return __x;
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      piecewise_linear_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_linear_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    seed_seq::seed_seq(std::initializer_list<_IntType> __il)
    {
      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _InputIterator>
    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)
    {
      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _RandomAccessIterator>
    void
    seed_seq::generate(_RandomAccessIterator __begin,
         _RandomAccessIterator __end)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
        _Type;

      if (__begin == __end)
 return;

      std::fill(__begin, __end, _Type(0x8b8b8b8bu));

      const size_t __n = __end - __begin;
      const size_t __s = _M_v.size();
      const size_t __t = (__n >= 623) ? 11
         : (__n >= 68) ? 7
         : (__n >= 39) ? 5
         : (__n >= 7) ? 3
         : (__n - 1) / 2;
      const size_t __p = (__n - __t) / 2;
      const size_t __q = __p + __t;
      const size_t __m = std::max(size_t(__s + 1), __n);

      for (size_t __k = 0; __k < __m; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    ^ __begin[(__k + __p) % __n]
    ^ __begin[(__k - 1) % __n]);
   _Type __r1 = __arg ^ (__arg >> 27);
   __r1 = __detail::__mod<_Type,
      __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);
   _Type __r2 = __r1;
   if (__k == 0)
     __r2 += __s;
   else if (__k <= __s)
     __r2 += __k % __n + _M_v[__k - 1];
   else
     __r2 += __k % __n;
   __r2 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r2);
   __begin[(__k + __p) % __n] += __r1;
   __begin[(__k + __q) % __n] += __r2;
   __begin[__k % __n] = __r2;
 }

      for (size_t __k = __m; __k < __m + __n; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    + __begin[(__k + __p) % __n]
    + __begin[(__k - 1) % __n]);
   _Type __r3 = __arg ^ (__arg >> 27);
   __r3 = __detail::__mod<_Type,
     __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);
   _Type __r4 = __r3 - __k % __n;
   __r4 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r4);
   __begin[(__k + __p) % __n] ^= __r3;
   __begin[(__k + __q) % __n] ^= __r4;
   __begin[__k % __n] = __r4;
 }
    }

  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __urng)
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

      const size_t __b
 = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
                   __bits);
      const long double __r = static_cast<long double>(__urng.max())
       - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
 {
   __sum += _RealType(__urng() - __urng.min()) * __tmp;
   __tmp *= __r;
 }
      return __sum / __tmp;
    }


}
# 52 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\random" 2 3
# 67 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 2 3




namespace std
{



  template<typename _Iterator, typename _Compare>
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred),
       std::__iterator_category(__first));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 202 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }






  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
         return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
           typename _UnaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 423 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 471 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 506 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 523 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 541 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 556 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {




                                                     ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 580 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      return std::none_of(__first, __last, __pred);
    }
# 598 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {






                                                     ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 665 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 697 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 731 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }

  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 794 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {





      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 822 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
# 837 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
        if (!__pred(__first))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 891 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 924 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 990 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1020 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {






                                                     ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {




      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1175 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1202 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      _RandomAccessIterator __p = __first;

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
     }
 }
    }
# 1408 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }
# 1443 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }






  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__inplace_stable_partition(__first, __pred, __len / 2);


      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);
      if (__right_len)
 __right_split = std::__inplace_stable_partition(__middle,
       __pred,
       __right_len);
      std::rotate(__left_split, __middle, __right_split);
      std::advance(__left_split, std::distance(__middle, __right_split));
      return __left_split;
    }







  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;



   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }
   std::move(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __left_split =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);


   _Distance __right_len = __len - __len / 2;
   _ForwardIterator __right_split =
     std::__find_if_not_n(__middle, __right_len, __pred);
   if (__right_len)
     __right_split =
       std::__stable_partition_adaptive(__right_split, __last, __pred,
            __right_len,
            __buffer, __buffer_size);
   std::rotate(__left_split, __middle, __right_split);
   std::advance(__left_split, std::distance(__middle, __right_split));
   return __left_split;
 }
    }

  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
      if (__buf.size() > 0)
 return
   std::__stable_partition_adaptive(__first, __last, __pred,
        _DistanceType(__buf.requested_size()),
        __buf.begin(),
        _DistanceType(__buf.size()));
      else
 return
   std::__inplace_stable_partition(__first, __pred,
       _DistanceType(__buf.requested_size()));
    }
# 1650 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1736 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1756 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1784 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1809 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2020 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2077 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2109 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2183 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;





                                                                  ;
                                                                  ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2220 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
# 2235 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                    ;

                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2256 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;
                                                                  ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2291 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         __len1 - __len11, __len22, __buffer,
         __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);
    }
# 2584 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {





                                                  ;
                                                 ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2624 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {






                                                               ;
                                                              ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2795 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first2, __first1))
   return false;
 else if (__comp(__first1, __first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 2831 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
# 2845 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2873 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
# 2889 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2906 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2955 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 2986 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3053 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3084 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, ++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3133 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3167 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }

  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }
# 3206 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3220 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }
# 3249 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 3272 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {





                                                     ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 3296 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _Tp>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {



      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
                : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 3316 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
                       : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 3394 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 3420 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {





                                                     ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _Tp>
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3524 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {






                                                       ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3555 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {






                                                       ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3703 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {



                                                     ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;
      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }
# 3748 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return std::move(__f);
    }
# 3769 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3793 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3824 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3864 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 3896 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3921 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 3946 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 3969 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4009 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4048 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }
# 4083 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4116 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4150 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4187 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4220 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4252 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4284 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4315 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 4351 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4391 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4423 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {
     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }
# 4456 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4496 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4529 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {





                                                       ;
                                                      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4566 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {






                                                       ;
                                                      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4601 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {





                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4639 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {






                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4675 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4704 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {






                                                     ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4764 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
# 4781 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4812 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
# 4829 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 4874 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 4907 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {






                                                     ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4974 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
# 4994 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5021 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
# 5041 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5089 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
# 5107 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5135 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
# 5153 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5205 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
# 5223 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5253 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
# 5271 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5329 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
# 5349 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5377 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
# 5398 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5427 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5450 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5486 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5509 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


}
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\algorithm" 2 3
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 1 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 3

# 1 "C:\\Octave\\Octave-4.2.1\\include\\assert.h" 1 3
# 44 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 2 3
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h" 2





# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 1 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 3

# 1 "C:\\Octave\\Octave-4.2.1\\include\\assert.h" 1 3
# 44 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 2 3
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h" 2





# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-macros.h" 1
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-refcount.h" 1
# 70 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-refcount.h"
template <typename T>
class octave_refcount
{
public:

  typedef T count_type;

  octave_refcount (count_type initial_count)
    : count (initial_count)
  { }


  count_type operator++ (void)
  {
    return __sync_add_and_fetch (&count, 1);
  }

  count_type operator++ (int)
  {
    return __sync_fetch_and_add (&count, 1);
  }

  count_type operator-- (void)
  {
    return __sync_add_and_fetch (&count, -1);
  }

  count_type operator-- (int)
  {
    return __sync_fetch_and_add (&count, -1);
  }

  operator count_type (void) const
  {
    return static_cast<count_type const volatile&> (count);
  }

  count_type *get (void)
  {
    return &count;
  }

private:

  count_type count;
};
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h" 2
# 87 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h"
class

dim_vector
{
private:

  octave_idx_type *rep;

  octave_idx_type& count (void) const { return rep[-2]; }



  static octave_idx_type *newrep (int ndims)
  {
    octave_idx_type *r = new octave_idx_type [ndims + 2];

    *r++ = 1;
    *r++ = ndims;

    return r;
  }



  octave_idx_type *clonerep (void)
  {
    int l = ndims ();

    octave_idx_type* r = newrep (l);

    for (int i = 0; i < l; i++)
      r[i] = rep[i];

    return r;
  }



  octave_idx_type *resizerep (int n, octave_idx_type fill_value)
  {
    int l = ndims ();

    if (n < 2)
      n = 2;

    octave_idx_type* r = newrep (n);

    if (l > n)
      l = n;

    int j = 0;
    for (; j < l; j++)
      r[j] = rep[j];
    for (; j < n; j++)
      r[j] = fill_value;

    return r;
  }



  void freerep (void)
  {
    (void) ((!!(count () == 0)) || (_assert("count () == 0","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h",150),0));
    delete [] (rep - 2);
  }

  void make_unique (void)
  {
    if (count () > 1)
      {
        octave_idx_type *new_rep = clonerep ();

        if (__sync_add_and_fetch (&(count ()), -1) == 0)
          freerep ();

        rep = new_rep;
      }
  }

public:
# 205 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h"
  template <typename... Ints>
  dim_vector (const octave_idx_type r, const octave_idx_type c,
              Ints... lengths) : rep (newrep (2 + sizeof... (Ints)))
  {
    std::initializer_list<octave_idx_type> all_lengths = {r, c, lengths...};
    for (const octave_idx_type l: all_lengths)
      *rep++ = l;
    rep -= all_lengths.size ();
  }

  octave_idx_type& elem (int i)
  {



    make_unique ();
    return rep[i];
  }

  octave_idx_type elem (int i) const
  {



    return rep[i];
  }

  void chop_trailing_singletons (void)
  {
    int l = ndims ();
    if (l > 2 && rep[l-1] == 1)
      {
        make_unique ();
        do
          l--;
        while (l > 2 && rep[l-1] == 1);
        rep[-1] = l;
      }
  }

  void chop_all_singletons (void);


  octave_idx_type *to_jit (void) const
  {
    return rep;
  }

private:

  static octave_idx_type *nil_rep (void);

public:

  static octave_idx_type dim_max (void);

  explicit dim_vector (void) : rep (nil_rep ())
  { __sync_add_and_fetch (&(count ()), 1); }

  dim_vector (const dim_vector& dv) : rep (dv.rep)
  { __sync_add_and_fetch (&(count ()), 1); }


  explicit dim_vector (octave_idx_type *r) : rep (r) { }

  static dim_vector alloc (int n)
  {
    return dim_vector (newrep (n < 2 ? 2 : n));
  }

  dim_vector& operator = (const dim_vector& dv)
  {
    if (&dv != this)
      {
        if (__sync_add_and_fetch (&(count ()), -1) == 0)
          freerep ();

        rep = dv.rep;
        __sync_add_and_fetch (&(count ()), 1);
      }

    return *this;
  }

  ~dim_vector (void)
  {
    if (__sync_add_and_fetch (&(count ()), -1) == 0)
      freerep ();
  }







  octave_idx_type ndims (void) const { return rep[-1]; }
# 310 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h"
  int length (void) const { return ndims (); }

  octave_idx_type& operator () (int i) { return elem (i); }

  octave_idx_type operator () (int i) const { return elem (i); }

  void resize (int n, int fill_value = 0)
  {
    int len = ndims ();

    if (n != len)
      {
        octave_idx_type *r = resizerep (n, fill_value);

        if (__sync_add_and_fetch (&(count ()), -1) == 0)
          freerep ();

        rep = r;
      }
  }

  std::string str (char sep = 'x') const;

  bool all_zero (void) const
  {
    bool retval = true;

    for (int i = 0; i < ndims (); i++)
      {
        if (elem (i) != 0)
          {
            retval = false;
            break;
          }
      }

    return retval;
  }

  bool empty_2d (void) const
  {
    return ndims () == 2 && (elem (0) == 0 || elem (1) == 0);
  }

  bool zero_by_zero (void) const
  {
    return ndims () == 2 && elem (0) == 0 && elem (1) == 0;
  }

  bool any_zero (void) const
  {
    bool retval = false;

    for (int i = 0; i < ndims (); i++)
      {
        if (elem (i) == 0)
          {
            retval = true;
            break;
          }
      }

    return retval;
  }

  int num_ones (void) const;

  bool all_ones (void) const
  {
    return (num_ones () == ndims ());
  }
# 389 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h"
  octave_idx_type numel (int n = 0) const
  {
    int n_dims = ndims ();

    octave_idx_type retval = 1;

    for (int i = n; i < n_dims; i++)
      retval *= elem (i);

    return retval;
  }
# 411 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dim-vector.h"
  octave_idx_type safe_numel (void) const;

  bool any_neg (void) const
  {
    int n_dims = ndims ();
    int i;

    for (i = 0; i < n_dims; i++)
      if (elem (i) < 0)
        break;

    return i < n_dims;
  }

  dim_vector squeeze (void) const;


  bool concat (const dim_vector& dvb, int dim);



  bool hvcat (const dim_vector& dvb, int dim);







  dim_vector redim (int n) const;

  dim_vector as_column (void) const
  {
    if (ndims () == 2 && elem (1) == 1)
      return *this;
    else
      return dim_vector (numel (), 1);
  }

  dim_vector as_row (void) const
  {
    if (ndims () == 2 && elem (0) == 1)
      return *this;
    else
      return dim_vector (1, numel ());
  }

  bool is_vector (void) const
  {
    return (ndims () == 2 && (elem (0) == 1 || elem (1) == 1));
  }

  int first_non_singleton (int def = 0) const
  {
    for (int i = 0; i < ndims (); i++)
      {
        if (elem (i) != 1)
          return i;
      }

    return def;
  }


  octave_idx_type compute_index (const octave_idx_type* idx) const
  { return compute_index (idx, ndims ()); }


  octave_idx_type compute_index (const octave_idx_type *idx, int nidx) const
  {
    octave_idx_type k = 0;
    for (int i = nidx - 1; i >= 0; i--)
      k = rep[i] * k + idx[i];

    return k;
  }







  int increment_index (octave_idx_type *idx, int start = 0) const
  {
    int i;
    for (i = start; i < ndims (); i++)
      {
        if (++(*idx) == rep[i])
          *idx++ = 0;
        else
          break;
      }
    return i;
  }



  dim_vector cumulative (void) const
  {
    int nd = ndims ();
    dim_vector retval = alloc (nd);

    octave_idx_type k = 1;
    for (int i = 0; i < nd; i++)
      retval.rep[i] = k *= rep[i];

    return retval;
  }




  octave_idx_type cum_compute_index (const octave_idx_type *idx) const
  {
    octave_idx_type k = idx[0];

    for (int i = 1; i < ndims (); i++)
      k += rep[i-1] * idx[i];

    return k;
  }

  friend bool operator == (const dim_vector& a, const dim_vector& b);
};

inline bool
operator == (const dim_vector& a, const dim_vector& b)
{

  if (a.rep == b.rep)
    return true;

  bool retval = true;

  int a_len = a.ndims ();
  int b_len = b.ndims ();

  if (a_len != b_len)
    retval = false;
  else
    {
      for (int i = 0; i < a_len; i++)
        {
          if (a(i) != b(i))
            {
              retval = false;
              break;
            }
        }
    }

  return retval;
}

inline bool
operator != (const dim_vector& a, const dim_vector& b)
{
  return ! operator == (a, b);
}
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 1 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 3

# 1 "C:\\Octave\\Octave-4.2.1\\include\\assert.h" 1 3
# 44 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 2 3
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h" 2
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstring" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstring" 3


# 1 "C:\\Octave\\Octave-4.2.1\\include\\string.h" 1 3
# 12 "C:\\Octave\\Octave-4.2.1\\include\\string.h" 3
extern "C" {
# 36 "C:\\Octave\\Octave-4.2.1\\include\\string.h" 3
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
                void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);

  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
                char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
                char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
                char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
                char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;


  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);


  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);







  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;
# 177 "C:\\Octave\\Octave-4.2.1\\include\\string.h" 3
}



# 1 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/string_s.h" 1 3








# 1 "C:\\Octave\\Octave-4.2.1\\include\\string.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/string_s.h" 2 3
# 181 "C:\\Octave\\Octave-4.2.1\\include\\string.h" 2 3
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstring" 2 3
# 71 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstring" 3
namespace std
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;


  inline void*
  memchr(void* __s, int __c, size_t __n)
  { return __builtin_memchr(__s, __c, __n); }

  inline char*
  strchr(char* __s, int __n)
  { return __builtin_strchr(__s, __n); }

  inline char*
  strpbrk(char* __s1, const char* __s2)
  { return __builtin_strpbrk(__s1, __s2); }

  inline char*
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }



}
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h" 2



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 1 3
# 47 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 3
# 67 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_raw_storage_iter.h" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_raw_storage_iter.h" 3
namespace std
{






  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>
      operator++(int)
      {
 raw_storage_iterator<_OutputIterator, _Tp> __tmp = *this;
 ++_M_iter;
 return __tmp;
      }
    };


}
# 68 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 2 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\typeinfo" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\typeinfo" 3






#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 72 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 2 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/concurrence.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/concurrence.h" 3







namespace __gnu_cxx
{







  enum _Lock_policy { _S_single, _S_mutex, _S_atomic };



  static const _Lock_policy __default_lock_policy =



  _S_atomic;
# 67 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/concurrence.h" 3
  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_lock_error"; }
  };

  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_unlock_error"; }
  };

  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };

  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_wait_error"; }
  };


  inline void
  __throw_concurrence_lock_error()
  { (throw (__concurrence_lock_error())); }

  inline void
  __throw_concurrence_unlock_error()
  { (throw (__concurrence_unlock_error())); }
# 118 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/concurrence.h" 3
  class __mutex
  {
  private:



    __gthread_mutex_t _M_mutex;


    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex()
    {

      if (__gthread_active_p())
 __gthread_mutex_init_function(&_M_mutex);

    }


    ~__mutex()
    {
      if (__gthread_active_p())
 __gthread_mutex_destroy(&_M_mutex);
    }


    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_mutex_t* gthread_mutex(void)
      { return &_M_mutex; }
  };

  class __recursive_mutex
  {
  private:



    __gthread_recursive_mutex_t _M_mutex;


    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex()
    {

      if (__gthread_active_p())
 __gthread_recursive_mutex_init_function(&_M_mutex);

    }


    ~__recursive_mutex()
    {
      if (__gthread_active_p())
 __gthread_recursive_mutex_destroy(&_M_mutex);
    }


    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)
    { return &_M_mutex; }
  };




  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;

    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)
    { _M_device.lock(); }

    ~__scoped_lock() throw()
    { _M_device.unlock(); }
  };
# 316 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/concurrence.h" 3
}
# 75 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 2 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/uses_allocator.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/uses_allocator.h" 3
namespace std
{



  struct allocator_arg_t { };

  constexpr allocator_arg_t allocator_arg = allocator_arg_t();

template<typename _Tp> class __has_allocator_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::allocator_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_allocator_type : public __has_allocator_type_helper <typename remove_cv<_Tp>::type>::type { };

  template<typename _Tp, typename _Alloc,
    bool = __has_allocator_type<_Tp>::value>
    struct __uses_allocator_helper
    : public false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc, true>
    : public integral_constant<bool, is_convertible<_Alloc,
         typename _Tp::allocator_type>::value>
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : public integral_constant<bool,
          __uses_allocator_helper<_Tp, _Alloc>::value>
    { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_allocator_arg
    : is_constructible<_Tp, _Alloc, _Args...>
    { static_assert( uses_allocator<_Tp, _Alloc>::value, "uses allocator" ); };

  struct __uses_alloc_base { };
  struct __uses_alloc0 : __uses_alloc_base
  { struct _Anything { _Anything(...) { } } _M_a; };
  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };
  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc_impl
    : __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>
    { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    __uses_alloc_impl<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_impl<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = &__a;
      return __ret;
    }


}
# 78 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 1 3
# 47 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3








# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\tuple" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\tuple" 3






# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\array" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\array" 3





# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\stdexcept" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\stdexcept" 3




namespace std
{
# 55 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\stdexcept" 3
  class logic_error : public exception
  {
    string _M_msg;

  public:

    explicit
    logic_error(const string& __arg);

    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;
  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg);
    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg);
    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg);
    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg);
    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg);

    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;
  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg);
    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg);
    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg);
    virtual ~underflow_error() noexcept;
  };




}
# 39 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\array" 2 3



namespace std
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 88 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))
      { std::swap_ranges(begin(), end(), __other.begin()); }


      iterator
      begin() noexcept
      { return iterator(data()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

      constexpr bool
      empty() const noexcept { return size() == 0; }


      reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

      reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

      reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };


  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }


  template<typename _Tp, std::size_t _Nm>
    inline void
    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::move(get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }


}

namespace std
{





  template<typename _Tp>
    class tuple_size;

  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    class tuple_element;

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };


}
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\tuple" 2 3


namespace std
{
# 52 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\tuple" 3
  template<typename _Tp>
    struct __add_c_ref
    { typedef const _Tp& type; };

  template<typename _Tp>
    struct __add_c_ref<_Tp&>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct __add_ref
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_ref<_Tp&>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct __add_r_ref
    { typedef _Tp&& type; };

  template<typename _Tp>
    struct __add_r_ref<_Tp&>
    { typedef _Tp& type; };

  template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 185 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;





  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      _Tuple_impl() = default;

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t, const _Alloc&) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t, const _Alloc&, const _Tuple_impl&) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t, const _Alloc&, _Tuple_impl&&) { }

    protected:
      void _M_swap(_Tuple_impl&) noexcept { }
    };

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename... _UElements>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 _M_tail(*this) = _M_tail(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
               is_nothrow_move_assignable<_Inherited>>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 _M_tail(*this) = std::move(_M_tail(__in));
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this) = std::move
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(noexcept(swap(std::declval<_Head&>(),
        std::declval<_Head&>()))
        && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
     _Elements>...>::value>::type>
 explicit
        constexpr tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<const _UElements&,
     _Elements>...>::value>::type>
        constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
     _Elements>...>::value>::type>
        constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
        tuple&
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
        tuple&
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };


  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1, const _T2& __a2)
      : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        explicit
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2, typename = typename
 enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
        constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename = typename
 enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
        constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2>
        tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2>
        tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };



  template<std::size_t __i, typename _Tp>
    struct tuple_element;





  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename
      add_const<typename tuple_element<__i, _Tp>::type>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename
      add_volatile<typename tuple_element<__i, _Tp>::type>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename
      add_cv<typename tuple_element<__i, _Tp>::type>::type type;
    };







  template<typename _Tp>
    struct tuple_size;



  template<typename _Tp>
    struct tuple_size<const _Tp>
    : public integral_constant<size_t, tuple_size<_Tp>::value> { };

  template<typename _Tp>
    struct tuple_size<volatile _Tp>
    : public integral_constant<size_t, tuple_size<_Tp>::value> { };

  template<typename _Tp>
    struct tuple_size<const volatile _Tp>
    : public integral_constant<size_t, tuple_size<_Tp>::value> { };


  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_r_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>&& __t) noexcept
    { return std::forward<typename tuple_element<__i,
 tuple<_Elements...>>::type&&>(get<__i>(__t)); }
# 813 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\tuple" 3
  template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,
    typename _Tp, typename _Up>
    struct __tuple_compare;

  template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __j, _Tp, _Up>
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return (get<__i>(__t) == get<__i>(__u) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u));
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return ((get<__i>(__t) < get<__i>(__u))
  || !(get<__i>(__u) < get<__i>(__t)) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__less(__t, __u));
      }
    };

  template<std::size_t __i, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __i, _Tp, _Up>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return bool(__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return bool(__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }

  template<typename... _Elements>
    tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };

  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type
    { };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<array<_Tp, _Nm>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename std::remove_cv
            <typename std::remove_reference<_Tp>::type>::type>::type
    { };

  template<std::size_t, typename, typename, std::size_t>
    struct __make_tuple_impl;

  template<std::size_t _Idx, typename _Tuple, typename... _Tp,
           std::size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef typename __make_tuple_impl<_Idx + 1, tuple<_Tp...,
 typename std::tuple_element<_Idx, _Tuple>::type>, _Tuple, _Nm>::__type
      __type;
    };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : public __make_tuple_impl<0, tuple<>, _Tuple,
                               std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<typename std::remove_cv
            <typename std::remove_reference<_Tuple>::type>::type>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }


  template<typename... _Elements>
    inline tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
    inline void
    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }



  struct _Swallow_assign
  {
    template<class _Tp>
      const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };

  const _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };


  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }




}
# 56 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 2 3




namespace std
{


  template<typename _MemberPointer>
    class _Mem_fn;
  template<typename _Tp, typename _Class>
    _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::*) noexcept;

template<typename _Tp> class __has_result_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::result_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_result_type : public __has_result_type_helper <typename remove_cv<_Tp>::type>::type { };


  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<true, _Functor>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<__has_result_type<_Functor>::value, _Functor>
    { };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile>
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };





  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (!is_member_pointer<_Functor>::value
       && !is_function<_Functor>::value
       && !is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor&(_Args&&...)>::type
    >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }

  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
             (is_member_pointer<_Functor>::value
              && !is_function<_Functor>::value
              && !is_function<typename remove_pointer<_Functor>::type>::value),
             typename result_of<_Functor(_Args&&...)>::type
           >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return std::mem_fn(__f)(std::forward<_Args>(__args)...);
    }


  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (is_pointer<_Functor>::value
       && is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }






  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
    : _Weak_result_type<_Tp>
    { };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, false, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };


   template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };

  template<typename _Tp> class __has_argument_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::argument_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_argument_type : public __has_argument_type_helper <typename remove_cv<_Tp>::type>::type { };
  template<typename _Tp> class __has_first_argument_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::first_argument_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_first_argument_type : public __has_first_argument_type_helper <typename remove_cv<_Tp>::type>::type { };
  template<typename _Tp> class __has_second_argument_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::second_argument_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_second_argument_type : public __has_second_argument_type_helper <typename remove_cv<_Tp>::type>::type { };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Reference_wrapper_base_impl<
      __has_argument_type<_Tp>::value,
      __has_first_argument_type<_Tp>::value
      && __has_second_argument_type<_Tp>::value,
      _Tp>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1)>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(*)(_T1)>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)()>
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2)>
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const>
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const>
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile>
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile>
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile>
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile>
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref) noexcept
      : _M_data(__inref._M_data)
      { }

      reference_wrapper&
      operator=(const reference_wrapper<_Tp>& __inref) noexcept
      {
 _M_data = __inref._M_data;
 return *this;
      }

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return __invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return cref(__t.get()); }



  template<typename... _Types>
    struct _Pack : integral_constant<size_t, sizeof...(_Types)>
    { };

  template<typename _From, typename _To, bool = _From::value == _To::value>
    struct _AllConvertible : false_type
    { };

  template<typename... _From, typename... _To>
    struct _AllConvertible<_Pack<_From...>, _Pack<_To...>, true>
    : __and_<is_convertible<_From, _To>...>
    { };

  template<typename _Tp1, typename _Tp2>
    using _NotSame = __not_<is_same<typename std::decay<_Tp1>::type,
        typename std::decay<_Tp2>::type>>;






  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...);

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*__pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_Args>(__args)...); }


      template<typename... _Args>
 using _RequireValidArgs
   = _Require<_AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;



      template<typename _Tp, typename... _Args>
 using _RequireValidArgs2
   = _Require<_NotSame<_Class, _Tp>, _NotSame<_Class*, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;



      template<typename _Tp, typename... _Args>
 using _RequireValidArgs3
   = _Require<is_base_of<_Class, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(_Class& __object, _Args&&... __args) const
 { return (__object.*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(_Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*__pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(_Class* __object, _Args&&... __args) const
 { return (__object->*__pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs2<_Tp, _Args...>>
 _Res
 operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs3<_Tp, _Args...>>
 _Res
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const>
    : public _Maybe_unary_or_binary_function<_Res, const _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const;

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*__pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args>
 using _RequireValidArgs
   = _Require<_AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs2
   = _Require<_NotSame<_Class, _Tp>, _NotSame<const _Class*, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs3
   = _Require<is_base_of<_Class, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const _Class& __object, _Args&&... __args) const
 { return (__object.*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const _Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*__pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const _Class* __object, _Args&&... __args) const
 { return (__object->*__pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs2<_Tp, _Args...>>
 _Res operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs3<_Tp, _Args...>>
 _Res
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) volatile>
    : public _Maybe_unary_or_binary_function<_Res, volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) volatile;

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*__pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args>
 using _RequireValidArgs
   = _Require<_AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs2
   = _Require<_NotSame<_Class, _Tp>, _NotSame<volatile _Class*, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs3
   = _Require<is_base_of<_Class, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(volatile _Class& __object, _Args&&... __args) const
 { return (__object.*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(volatile _Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*__pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(volatile _Class* __object, _Args&&... __args) const
 { return (__object->*__pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs2<_Tp, _Args...>>
 _Res
 operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs3<_Tp, _Args...>>
 _Res
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const volatile>
    : public _Maybe_unary_or_binary_function<_Res, const volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const volatile;

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*__pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args>
 using _RequireValidArgs
   = _Require<_AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs2
   = _Require<_NotSame<_Class, _Tp>,
       _NotSame<const volatile _Class*, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs3
   = _Require<is_base_of<_Class, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const volatile _Class& __object, _Args&&... __args) const
 { return (__object.*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const volatile _Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*__pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const volatile _Class* __object, _Args&&... __args) const
 { return (__object->*__pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs2<_Tp, _Args...>>
 _Res operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs3<_Tp, _Args...>>
 _Res
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      _Functor __pmf;
    };


  template<typename _Tp, bool>
    struct _Mem_fn_const_or_non
    {
      typedef const _Tp& type;
    };

  template<typename _Tp>
    struct _Mem_fn_const_or_non<_Tp, false>
    {
      typedef _Tp& type;
    };

  template<typename _Res, typename _Class>
    class _Mem_fn<_Res _Class::*>
    {
      using __pm_type = _Res _Class::*;




      template<typename _Tp>
 auto
 _M_call(_Tp&& __object, const _Class *) const noexcept
 -> decltype(std::forward<_Tp>(__object).*std::declval<__pm_type&>())
 { return std::forward<_Tp>(__object).*__pm; }

      template<typename _Tp, typename _Up>
 auto
 _M_call(_Tp&& __object, _Up * const *) const noexcept
 -> decltype((*std::forward<_Tp>(__object)).*std::declval<__pm_type&>())
 { return (*std::forward<_Tp>(__object)).*__pm; }

      template<typename _Tp>
 auto
 _M_call(_Tp&& __ptr, const volatile void*) const
 noexcept(noexcept((*__ptr).*std::declval<__pm_type&>()))
 -> decltype((*__ptr).*std::declval<__pm_type&>())
 { return (*__ptr).*__pm; }

    public:
      explicit
      _Mem_fn(_Res _Class::*__pm) noexcept : __pm(__pm) { }


      _Res&
      operator()(_Class& __object) const noexcept
      { return __object.*__pm; }

      const _Res&
      operator()(const _Class& __object) const noexcept
      { return __object.*__pm; }

      _Res&&
      operator()(_Class&& __object) const noexcept
      { return std::forward<_Class>(__object).*__pm; }

      const _Res&&
      operator()(const _Class&& __object) const noexcept
      { return std::forward<const _Class>(__object).*__pm; }


      _Res&
      operator()(_Class* __object) const noexcept
      { return __object->*__pm; }

      const _Res&
      operator()(const _Class* __object) const noexcept
      { return __object->*__pm; }


      template<typename _Tp, typename _Req = _Require<_NotSame<_Class*, _Tp>>>
 auto
 operator()(_Tp&& __unknown) const
 noexcept(noexcept(std::declval<_Mem_fn*>()->_M_call
     (std::forward<_Tp>(__unknown), &__unknown)))
 -> decltype(this->_M_call(std::forward<_Tp>(__unknown), &__unknown))
 { return _M_call(std::forward<_Tp>(__unknown), &__unknown); }

      template<typename _Tp, typename _Req = _Require<is_base_of<_Class, _Tp>>>
 auto
 operator()(reference_wrapper<_Tp> __ref) const
 noexcept(noexcept(std::declval<_Mem_fn&>()(__ref.get())))
 -> decltype((*this)(__ref.get()))
 { return (*this)(__ref.get()); }

    private:
      _Res _Class::*__pm;
    };
# 927 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm) noexcept
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }







  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };






  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };




  template<int _Num> struct _Placeholder { };







  namespace placeholders
  {





    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;

  }
# 1011 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };

  template<int _Num>
    struct is_placeholder<const _Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };





  struct _No_tuple_element;






  template<std::size_t __i, typename _Tuple, bool _IsSafe>
    struct _Safe_tuple_element_impl
    : tuple_element<__i, _Tuple> { };






  template<std::size_t __i, typename _Tuple>
    struct _Safe_tuple_element_impl<__i, _Tuple, false>
    {
      typedef _No_tuple_element type;
    };





 template<std::size_t __i, typename _Tuple>
   struct _Safe_tuple_element
   : _Safe_tuple_element_impl<__i, _Tuple,
         (__i < tuple_size<_Tuple>::value)>
   { };
# 1068 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;





  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:
      typedef _Tp& result_type;





      template<typename _CVRef, typename _Tuple>
 result_type
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };






  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>
 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, std::size_t... _Indexes>
 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::forward<_Args>(get<_Indexes>(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Signature> class result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 class result<_CVMu(_CVArg, _Tuple)>
 {



   typedef typename _Safe_tuple_element<(is_placeholder<_Arg>::value
      - 1), _Tuple>::type
     __base_type;

 public:
   typedef typename add_rvalue_reference<__base_type>::type type;
 };

      template<typename _Tuple>
 typename result<_Mu(_Arg, _Tuple)>::type
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return std::forward<typename result<_Mu(_Arg, _Tuple)>::type>(
       ::std::get<(is_placeholder<_Arg>::value - 1)>(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _Signature> struct result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 struct result<_CVMu(_CVArg, _Tuple)>
 {
   typedef typename add_lvalue_reference<_CVArg>::type type;
 };


      template<typename _CVArg, typename _Tuple>
 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };






  template<typename _Tp>
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
      { return static_cast<_Tp&&>(__x); }
    };






  template<typename _Tp, typename _Class>
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
      { return type(__pm); }
    };





  template<>
    struct _Maybe_wrap_member_pointer<void>
    {
      typedef void type;
    };


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef _Bind __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

     public:
      template<typename... _Args>
 explicit _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args, typename _Result
 = decltype( std::declval<_Functor&>()(
       _Mu<_Bound_args>()( std::declval<_Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
         typename add_const<_Functor>::type&>::type>()(
       _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_volatile<_Functor>::type&>::type>()(
       _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_cv<_Functor>::type&>::type>()(
       _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef _Bind_result __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res>
 struct __enable_if_void : enable_if<is_void<_Res>::value, int> { };
      template<typename _Res>
 struct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0)
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;

      _Bind_result(_Bind_result&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };





  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<volatile _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const volatile _Bind<_Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<volatile _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>>
    : public true_type { };




  template<typename _Tp, typename _Tp2 = typename decay<_Tp>::type>
    using __is_socketlike = __or_<is_integral<_Tp2>, is_enum<_Tp2>>;

  template<bool _SocketLike, typename _Func, typename... _BoundArgs>
    struct _Bind_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
 __maybe_type;
      typedef typename __maybe_type::type __func_type;
      typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;
    };




  template<typename _Func, typename... _BoundArgs>
    struct _Bind_helper<true, _Func, _BoundArgs...>
    { };





  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),
      std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Result, typename _Func, typename... _BoundArgs>
    struct _Bindres_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_BoundArgs>::type...)>
 type;
    };





  template<typename _Result, typename _Func, typename... _BoundArgs>
    inline
    typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),
      std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Signature>
    struct _Bind_simple;

  template<typename _Callable, typename... _Args>
    struct _Bind_simple<_Callable(_Args...)>
    {
      typedef typename result_of<_Callable(_Args...)>::type result_type;

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(const _Callable& __callable, _Args2&&... __args)
        : _M_bound(__callable, std::forward<_Args2>(__args)...)
        { }

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
        { }

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
      }

    private:

      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {


          return std::forward<_Callable>(std::get<0>(_M_bound))(
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
        }

      std::tuple<_Callable, _Args...> _M_bound;
    };

  template<typename _Func, typename... _BoundArgs>
    struct _Bind_simple_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
        __maybe_type;
      typedef typename __maybe_type::type __func_type;
      typedef _Bind_simple<__func_type(typename decay<_BoundArgs>::type...)>
        __type;
    };



  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
          std::forward<_Args>(__args)...);
    }






  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() noexcept;

    const char* what() const noexcept;
  };






  template<typename _Tp>
    struct __is_location_invariant
    : integral_constant<bool, (is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value)>
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };



  template<typename _Tp>
    struct _Simple_type_wrapper
    {
      _Simple_type_wrapper(_Tp __value) : __value(__value) { }

      _Tp __value;
    };

  template<typename _Tp>
    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
    : __is_location_invariant<_Tp>
    { };



  template<typename _Functor>
    inline _Functor&
    __callable_functor(_Functor& __f)
    { return __f; }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* volatile &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const volatile &__p)
    { return std::mem_fn(__p); }

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const std::size_t _M_max_size = sizeof(_Nocopy_types);
    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   const _Functor* __ptr =
     __stored_locally? std::__addressof(__source._M_access<_Functor>())
                                 : __source._M_access<_Functor*>();
   return const_cast<_Functor*>(__ptr);
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<_Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(_Tp* const& __fp)
   { return __fp; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* const& __mp)
   { return __mp; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    template<typename _Functor>
      class _Ref_manager : public _Base_manager<_Functor*>
      {
 typedef _Function_base::_Base_manager<_Functor*> _Base;

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);
       return is_const<_Functor>::value;
       break;

     default:
       _Base::_M_manager(__dest, __source, __op);
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, reference_wrapper<_Functor> __f)
 {
   _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
 }
      };

    _Function_base() : _M_manager(0) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return std::__callable_functor(**_Base::_M_get_pointer(__functor))(
       std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 std::__callable_functor(**_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename _Res,
    typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
    {
      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return std::mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Member _Class::*>
    : public _Function_base::_Base_manager<
   _Simple_type_wrapper< _Member _Class::* > >
    {
      typedef _Member _Class::* _Functor;
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() =
       &_Base::_M_get_pointer(__source)->__value;
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 std::mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _From, typename _To>
    using __check_func_return_type
      = __or_<is_void<_To>, is_convertible<_From, _To>>;







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      typedef _Res _Signature_type(_ArgTypes...);

      template<typename _Functor>
 using _Invoke
   = decltype(std::__callable_functor(std::declval<_Functor&>())
       (std::declval<_ArgTypes>()...) );



      template<typename _Tp>
 using _NotSelf = __not_<is_same<_Tp, function>>;

      template<typename _Functor>
 using _Callable
   = __and_<_NotSelf<_Functor>,
     __check_func_return_type<_Invoke<_Functor>, _Res>>;

      template<typename _Cond, typename _Tp>
 using _Requires = typename enable_if<_Cond::value, _Tp>::type;

    public:
      typedef _Res result_type;







      function() noexcept
      : _Function_base() { }





      function(nullptr_t) noexcept
      : _Function_base() { }
# 2193 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      function(const function& __x);
# 2202 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      function(function&& __x) : _Function_base()
      {
 __x.swap(*this);
      }
# 2225 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      template<typename _Functor,
        typename = _Requires<_Callable<_Functor>, void>>
 function(_Functor);
# 2241 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 2259 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      function&
      operator=(function&& __x)
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 2273 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      function&
      operator=(nullptr_t)
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = 0;
     _M_invoker = 0;
   }
 return *this;
      }
# 2301 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      template<typename _Functor>
 _Requires<_Callable<typename decay<_Functor>::type>, function&>
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 function&
 operator=(reference_wrapper<_Functor> __f) noexcept
 {
   function(__f).swap(*this);
   return *this;
 }
# 2327 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      void swap(function& __x)
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 2355 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      explicit operator bool() const noexcept
      { return !_M_empty(); }
# 2368 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      _Res operator()(_ArgTypes... __args) const;
# 2381 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      const type_info& target_type() const noexcept;
# 2392 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
      template<typename _Functor> _Functor* target() noexcept;


      template<typename _Functor> const _Functor* target() const noexcept;


    private:
      typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);
      _Invoker_type _M_invoker;
  };


  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
      {
 typedef _Function_handler<_Signature_type, _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const noexcept
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target() noexcept
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     if (_M_manager(__ptr, _M_functor, __get_functor_ptr)
  && !is_const<_Functor>::value)
       return 0;
     else
       return __ptr._M_access<_Functor*>();
   }
 else
   return 0;
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const noexcept
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return 0;
      }
# 2504 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return !static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return !static_cast<bool>(__f); }
# 2522 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return static_cast<bool>(__f); }
# 2540 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\functional" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)
    { __x.swap(__y); }


}
# 80 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 1 3
# 39 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
namespace std
{
# 49 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
  template<typename> class auto_ptr;



  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };




  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    private:
      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

    public:

      constexpr default_delete() noexcept = default;
# 109 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      template<typename _Up, typename = typename
        enable_if<!__is_derived_Tp<_Up>::value>::type>
        default_delete(const default_delete<_Up[]>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete [] __ptr;
      }

      template<typename _Up>
 typename enable_if<__is_derived_Tp<_Up>::value>::type
 operator()(_Up*) const = delete;
    };


  template <typename _Tp, typename _Dp = default_delete<_Tp> >
    class unique_ptr
    {

      class _Pointer
      {
 template<typename _Up>
   static typename _Up::pointer __test(typename _Up::pointer*);

 template<typename _Up>
   static _Tp* __test(...);

 typedef typename remove_reference<_Dp>::type _Del;

      public:
 typedef decltype(__test<_Del>(0)) type;
      };

      typedef std::tuple<typename _Pointer::type, _Dp> __tuple_type;
      __tuple_type _M_t;

    public:
      typedef typename _Pointer::type pointer;
      typedef _Tp element_type;
      typedef _Dp deleter_type;




      constexpr unique_ptr() noexcept
      : _M_t()
      { static_assert(!is_pointer<deleter_type>::value,
       "constructed with null function pointer deleter"); }







      explicit
      unique_ptr(pointer __p) noexcept
      : _M_t(__p, deleter_type())
      { static_assert(!is_pointer<deleter_type>::value,
       "constructed with null function pointer deleter"); }
# 181 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename conditional<is_reference<deleter_type>::value,
     deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 193 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!std::is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }




      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }







      template<typename _Up, typename _Ep, typename = _Require<
        is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
        __not_<is_array<_Up>>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }



      template<typename _Up, typename = _Require<
        is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;



      ~unique_ptr() noexcept
      {
 auto& __ptr = std::get<0>(_M_t);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 248 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 263 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename enable_if< __and_<
   is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
   __not_<is_array<_Up>>
   >::value,
   unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename add_lvalue_reference<element_type>::type
      operator*() const
      {
                                          ;
 return *get();
      }


      pointer
      operator->() const noexcept
      {
                                          ;
 return get();
      }


      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }


      deleter_type&
      get_deleter() noexcept
      { return std::get<1>(_M_t); }


      const deleter_type&
      get_deleter() const noexcept
      { return std::get<1>(_M_t); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 std::get<0>(_M_t) = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 using std::swap;
 swap(std::get<0>(_M_t), __p);
 if (__p != pointer())
   get_deleter()(__p);
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
  };





  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {

      class _Pointer
      {
 template<typename _Up>
   static typename _Up::pointer __test(typename _Up::pointer*);

 template<typename _Up>
   static _Tp* __test(...);

 typedef typename remove_reference<_Dp>::type _Del;

      public:
 typedef decltype(__test<_Del>(0)) type;
      };

      typedef std::tuple<typename _Pointer::type, _Dp> __tuple_type;
      __tuple_type _M_t;

      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

      template<typename _Up, typename _Ep,
        typename _Tp_pointer = typename _Pointer::type,
        typename _Up_pointer = typename unique_ptr<_Up, _Ep>::pointer>
 using __safe_conversion = __and_<
     is_convertible<_Up_pointer, _Tp_pointer>,
     is_array<_Up>,
     __or_<__not_<is_pointer<_Up_pointer>>,
    __not_<is_pointer<_Tp_pointer>>,
    __not_<__is_derived_Tp<typename remove_extent<_Up>::type>>
     >
   >;

    public:
      typedef typename _Pointer::type pointer;
      typedef _Tp element_type;
      typedef _Dp deleter_type;




      constexpr unique_ptr() noexcept
      : _M_t()
      { static_assert(!std::is_pointer<deleter_type>::value,
        "constructed with null function pointer deleter"); }







      explicit
      unique_ptr(pointer __p) noexcept
      : _M_t(__p, deleter_type())
      { static_assert(!is_pointer<deleter_type>::value,
        "constructed with null function pointer deleter"); }


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 explicit
 unique_ptr(_Up* __p) = delete;
# 444 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename conditional<is_reference<deleter_type>::value,
       deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 456 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      unique_ptr(pointer __p, typename
   remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }


      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }

      template<typename _Up, typename _Ep,
        typename = _Require<__safe_conversion<_Up, _Ep>,
   typename conditional<is_reference<_Dp>::value,
          is_same<_Ep, _Dp>,
          is_convertible<_Ep, _Dp>>::type
        >>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


      ~unique_ptr()
      {
 auto& __ptr = std::get<0>(_M_t);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 496 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 511 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename
 enable_if<__safe_conversion<_Up, _Ep>::value, unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
                                          ;
 return get()[__i];
      }


      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }


      deleter_type&
      get_deleter() noexcept
      { return std::get<1>(_M_t); }


      const deleter_type&
      get_deleter() const noexcept
      { return std::get<1>(_M_t); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 std::get<0>(_M_t) = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 using std::swap;
 swap(std::get<0>(_M_t), __p);
 if (__p != nullptr)
   get_deleter()(__p);
      }


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 void reset(_Up*) = delete;


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 unique_ptr(_Up*, typename
     conditional<is_reference<deleter_type>::value,
     deleter_type, const deleter_type&>::type) = delete;


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 unique_ptr(_Up*, typename
     remove_reference<deleter_type>::type&&) = delete;
    };

  template<typename _Tp, typename _Dp>
    inline void
    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>
    {
      size_t
      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
      {
 typedef unique_ptr<_Tp, _Dp> _UP;
 return std::hash<typename _UP::pointer>()(__u.get());
      }
    };
# 782 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/unique_ptr.h" 3
}
# 82 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 1 3
# 52 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr_base.h" 1 3
# 52 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr_base.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/aligned_buffer.h" 1 3
# 33 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ext/aligned_buffer.h" 3







namespace __gnu_cxx
{
  template<typename _Tp>
    struct __aligned_buffer
    : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>
    {
      typename
 std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>::type
 _M_storage;

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };

}
# 53 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr_base.h" 2 3

namespace std
{



  template<typename> class auto_ptr;






  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const*
    what() const noexcept;

    virtual ~bad_weak_ptr() noexcept;
  };


  inline void
  __throw_bad_weak_ptr()
  { (throw (bad_weak_ptr())); }

  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_S_single;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;


  template<_Lock_policy _Lp>
    class _Mutex_base
    {
    protected:

      enum { _S_need_barriers = 0 };
    };

  template<>
    class _Mutex_base<_S_mutex>
    : public __gnu_cxx::__mutex
    {
    protected:



      enum { _S_need_barriers = 1 };
    };

  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }

      virtual
      ~_Sp_counted_base() noexcept
      { }



      virtual void
      _M_dispose() noexcept = 0;


      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept = 0;

      void
      _M_add_ref_copy()
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }

      void
      _M_add_ref_lock();

      bool
      _M_add_ref_lock_nothrow();

      void
      _M_release() noexcept
      {

                                                              ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   {
                                                                 ;
     _M_dispose();




     if (_Mutex_base<_Lp>::_S_need_barriers)
       {
         __asm __volatile ("":::"memory");
         __asm __volatile ("":::"memory");
       }


                                                                   ;
     if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
             -1) == 1)
              {
                                                                      ;
         _M_destroy();
              }
   }
      }

      void
      _M_weak_add_ref() noexcept
      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }

      void
      _M_weak_release() noexcept
      {

                                                               ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
   {
                                                                  ;
     if (_Mutex_base<_Lp>::_S_need_barriers)
       {


         __asm __volatile ("":::"memory");
         __asm __volatile ("":::"memory");
       }
     _M_destroy();
   }
      }

      long
      _M_get_use_count() const noexcept
      {


        return __atomic_load_n(&_M_use_count, 0);
      }

    private:
      _Sp_counted_base(_Sp_counted_base const&) = delete;
      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;

      _Atomic_word _M_use_count;
      _Atomic_word _M_weak_count;
    };

  template<>
    inline void
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock()
    {
      if (_M_use_count == 0)
 __throw_bad_weak_ptr();
      ++_M_use_count;
    }

  template<>
    inline void
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   __throw_bad_weak_ptr();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     __throw_bad_weak_ptr();


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
    }

  template<>
    inline bool
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock_nothrow()
    {
      if (_M_use_count == 0)
 return false;
      ++_M_use_count;
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock_nothrow()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   return false;
 }
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock_nothrow()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     return false;


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
      return true;
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
        }
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
    { ++_M_weak_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_release() noexcept
    {
      if (--_M_weak_count == 0)
        _M_destroy();
    }

  template<>
    inline long
    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
    { return _M_use_count; }



  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __shared_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __enable_shared_from_this;

  template<typename _Tp>
    class shared_ptr;

  template<typename _Tp>
    class weak_ptr;

  template<typename _Tp>
    struct owner_less;

  template<typename _Tp>
    class enable_shared_from_this;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __weak_count;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __shared_count;



  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }

      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

    private:
      _Ptr _M_ptr;
    };

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }

  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Sp_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, false>
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };


  template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
 typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

      public:
 _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 : _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 { }

 _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }

 _Ptr _M_ptr;
      };

    public:

      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }


      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }

      virtual void
      _M_destroy() noexcept
      {
 typedef typename allocator_traits<_Alloc>::template
   rebind_traits<_Sp_counted_deleter> _Alloc_traits;
 typename _Alloc_traits::allocator_type __a(_M_impl._M_alloc());
 _Alloc_traits::destroy(__a, this);
 _Alloc_traits::deallocate(__a, this, 1);
      }

      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {

        return __ti == typeid(_Deleter) ? &_M_impl._M_del() : nullptr;



      }

    private:
      _Impl _M_impl;
    };



  struct _Sp_make_shared_tag { };

  template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Alloc> _A_base;

      public:
 explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }

 _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }

 __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
      };

    public:
      template<typename... _Args>
 _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 : _M_impl(__a)
 {


   allocator_traits<_Alloc>::construct(__a, _M_ptr(),
       std::forward<_Args>(__args)...);
 }

      ~_Sp_counted_ptr_inplace() noexcept { }

      virtual void
      _M_dispose() noexcept
      {
 allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }


      virtual void
      _M_destroy() noexcept
      {
 typedef typename allocator_traits<_Alloc>::template
   rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;
 typename _Alloc_traits::allocator_type __a(_M_impl._M_alloc());
 _Alloc_traits::destroy(__a, this);
 _Alloc_traits::deallocate(__a, this, 1);
      }


      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {

 if (__ti == typeid(_Sp_make_shared_tag))
   return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());

 return nullptr;
      }

    private:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }

      _Impl _M_impl;
    };


  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
 __shared_count(_Ptr __p) : _M_pi(0)
 {
   try
     {
       _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
     }
   catch(...)
     {
       delete __p;
       throw;
     }
 }

      template<typename _Ptr, typename _Deleter>
 __shared_count(_Ptr __p, _Deleter __d)
 : __shared_count(__p, std::move(__d), allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
 __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 {
   typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
   typedef typename allocator_traits<_Alloc>::template
     rebind_traits<_Sp_cd_type> _Alloc_traits;
   typename _Alloc_traits::allocator_type __a2(__a);
   _Sp_cd_type* __mem = 0;
   try
     {
       __mem = _Alloc_traits::allocate(__a2, 1);
       _Alloc_traits::construct(__a2, __mem,
    __p, std::move(__d), std::move(__a));
       _M_pi = __mem;
     }
   catch(...)
     {
       __d(__p);
       if (__mem)
         _Alloc_traits::deallocate(__a2, __mem, 1);
       throw;
     }
 }

      template<typename _Tp, typename _Alloc, typename... _Args>
 __shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
         _Args&&... __args)
 : _M_pi(0)
 {
   typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
   typedef typename allocator_traits<_Alloc>::template
     rebind_traits<_Sp_cp_type> _Alloc_traits;
   typename _Alloc_traits::allocator_type __a2(__a);
   _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
   try
     {
       _Alloc_traits::construct(__a2, __mem, std::move(__a),
      std::forward<_Args>(__args)...);
       _M_pi = __mem;
     }
   catch(...)
     {
       _Alloc_traits::deallocate(__a2, __mem, 1);
       throw;
     }
 }



      template<typename _Tp>
        explicit
 __shared_count(std::auto_ptr<_Tp>&& __r);



      template<typename _Tp, typename _Del>
        explicit
 __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 {
   using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
   using _Del2 = typename conditional<is_reference<_Del>::value,
       reference_wrapper<typename remove_reference<_Del>::type>,
       _Del>::type;
   using _Sp_cd_type
     = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
   using _Alloc = allocator<_Sp_cd_type>;
   using _Alloc_traits = allocator_traits<_Alloc>;
   _Alloc __a;
   _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
   _Alloc_traits::construct(__a, __mem, __r.release(),
       __r.get_deleter());
   _M_pi = __mem;
 }


      explicit __shared_count(const __weak_count<_Lp>& __r);


      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != _M_pi)
   {
     if (__tmp != 0)
       __tmp->_M_add_ref_copy();
     if (_M_pi != 0)
       _M_pi->_M_release();
     _M_pi = __tmp;
   }
 return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }

      bool
      _M_less(const __shared_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __weak_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __shared_count& __a, const __shared_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __weak_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    class __weak_count
    {
    public:
      constexpr __weak_count() noexcept : _M_pi(0)
      { }

      __weak_count(const __shared_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(const __weak_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_weak_add_ref();
      }

      ~__weak_count() noexcept
      {
 if (_M_pi != 0)
   _M_pi->_M_weak_release();
      }

      __weak_count<_Lp>&
      operator=(const __shared_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != 0)
   __tmp->_M_weak_add_ref();
 if (_M_pi != 0)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count<_Lp>&
      operator=(const __weak_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != 0)
   __tmp->_M_weak_add_ref();
 if (_M_pi != 0)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      void
      _M_swap(__weak_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_less(const __weak_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __shared_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __weak_count& __a, const __weak_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __shared_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 _M_pi->_M_add_ref_lock();
      else
 __throw_bad_weak_ptr();
    }


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::
    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 if (!_M_pi->_M_add_ref_lock_nothrow())
   _M_pi = nullptr;
    }




  template<_Lock_policy _Lp, typename _Tp1, typename _Tp2>
    void
    __enable_shared_from_this_helper(const __shared_count<_Lp>&,
         const __enable_shared_from_this<_Tp1,
         _Lp>*, const _Tp2*) noexcept;


  template<typename _Tp1, typename _Tp2>
    void
    __enable_shared_from_this_helper(const __shared_count<>&,
         const enable_shared_from_this<_Tp1>*,
         const _Tp2*) noexcept;

  template<_Lock_policy _Lp>
    inline void
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
    {
    public:
      typedef _Tp element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
 explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 {

   static_assert( !is_void<_Tp1>::value, "incomplete type" );
   static_assert( sizeof(_Tp1) > 0, "incomplete type" );
   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Tp1, typename _Deleter>
 __shared_ptr(_Tp1* __p, _Deleter __d)
 : _M_ptr(__p), _M_refcount(__p, __d)
 {


   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
 __shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
 : _M_ptr(__p), _M_refcount(__p, __d, std::move(__a))
 {


   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Deleter>
 __shared_ptr(nullptr_t __p, _Deleter __d)
 : _M_ptr(0), _M_refcount(__p, __d)
 { }

      template<typename _Deleter, typename _Alloc>
        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : _M_ptr(0), _M_refcount(__p, __d, std::move(__a))
 { }

      template<typename _Tp1>
 __shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
 : _M_ptr(__p), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 __shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
 _M_refcount._M_swap(__r._M_refcount);
 __r._M_ptr = 0;
      }

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 __shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = 0;
 }

      template<typename _Tp1>
 explicit __shared_ptr(const __weak_ptr<_Tp1, _Lp>& __r)
 : _M_refcount(__r._M_refcount)
 {




   _M_ptr = __r._M_ptr;
 }


      template<typename _Tp1, typename _Del>
 __shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)
 : _M_ptr(__r.get()), _M_refcount()
 {

   auto __raw = _S_raw_ptr(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   __enable_shared_from_this_helper(_M_refcount, __raw, __raw);
 }



      template<typename _Tp1>
 __shared_ptr(std::auto_ptr<_Tp1>&& __r);



      constexpr __shared_ptr(nullptr_t) noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
 __shared_ptr&
 operator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }


      template<typename _Tp1>
 __shared_ptr&
 operator=(std::auto_ptr<_Tp1>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }


      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
 __shared_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<class _Tp1>
 __shared_ptr&
 operator=(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      template<typename _Tp1, typename _Del>
 __shared_ptr&
 operator=(std::unique_ptr<_Tp1, _Del>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      void
      reset() noexcept
      { __shared_ptr().swap(*this); }

      template<typename _Tp1>
 void
 reset(_Tp1* __p)
 {

                                                   ;
   __shared_ptr(__p).swap(*this);
 }

      template<typename _Tp1, typename _Deleter>
 void
 reset(_Tp1* __p, _Deleter __d)
 { __shared_ptr(__p, __d).swap(*this); }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
 void
        reset(_Tp1* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, __d, std::move(__a)).swap(*this); }


      typename std::add_lvalue_reference<_Tp>::type
      operator*() const noexcept
      {
                                   ;
 return *_M_ptr;
      }

      _Tp*
      operator->() const noexcept
      {
                                   ;
 return _M_ptr;
      }

      _Tp*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const
      { return _M_ptr == 0 ? false : true; }

      bool
      unique() const noexcept
      { return _M_refcount._M_unique(); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
      {
 std::swap(_M_ptr, __other._M_ptr);
 _M_refcount._M_swap(__other._M_refcount);
      }

      template<typename _Tp1>
 bool
 owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }


    protected:

      template<typename _Alloc, typename... _Args>
 __shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
       _Args&&... __args)
 : _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
    std::forward<_Args>(__args)...)
 {


   void* __p = _M_refcount._M_get_deleter(typeid(__tag));
   _M_ptr = static_cast<_Tp*>(__p);
   __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
 }
# 1138 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr_base.h" 3
      template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
        typename... _Args>
 friend __shared_ptr<_Tp1, _Lp1>
 __allocate_shared(const _Alloc& __a, _Args&&... __args);



      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)
      : _M_refcount(__r._M_refcount, std::nothrow)
      {
 _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
      }

      friend class __weak_ptr<_Tp, _Lp>;

    private:
      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_refcount._M_get_deleter(__ti); }

      template<typename _Tp1>
 static _Tp1*
 _S_raw_ptr(_Tp1* __ptr)
 { return __ptr; }

      template<typename _Tp1>
 static auto
 _S_raw_ptr(_Tp1 __ptr) -> decltype(std::__addressof(*__ptr))
 { return std::__addressof(*__ptr); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
 friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;

      _Tp* _M_ptr;
      __shared_count<_Lp> _M_refcount;
    };



  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    {
      typedef typename std::common_type<_Tp1*, _Tp2*>::type _CT;
      return std::less<_CT>()(__a.get(), __b.get());
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Sp>
    struct _Sp_less : public binary_function<_Sp, _Sp, bool>
    {
      bool
      operator()(const _Sp& __lhs, const _Sp& __rhs) const noexcept
      {
 typedef typename _Sp::element_type element_type;
 return std::less<element_type*>()(__lhs.get(), __rhs.get());
      }
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_less<__shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }
# 1308 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr_base.h" 3
  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    { return __shared_ptr<_Tp, _Lp>(__r, static_cast<_Tp*>(__r.get())); }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    { return __shared_ptr<_Tp, _Lp>(__r, const_cast<_Tp*>(__r.get())); }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      if (_Tp* __p = dynamic_cast<_Tp*>(__r.get()))
 return __shared_ptr<_Tp, _Lp>(__r, __p);
      return __shared_ptr<_Tp, _Lp>();
    }


  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr
    {
    public:
      typedef _Tp element_type;

      constexpr __weak_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;
      __weak_ptr& operator=(const __weak_ptr&) noexcept = default;
      ~__weak_ptr() = default;
# 1366 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr_base.h" 3
      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 __weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_refcount(__r._M_refcount)
        { _M_ptr = __r.lock().get(); }

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 __weak_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      template<typename _Tp1>
 __weak_ptr&
 operator=(const __weak_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = __r._M_refcount;
   return *this;
 }

      template<typename _Tp1>
 __weak_ptr&
 operator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }

      __shared_ptr<_Tp, _Lp>
      lock() const noexcept
      { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      bool
      expired() const noexcept
      { return _M_refcount._M_get_use_count() == 0; }

      template<typename _Tp1>
 bool
 owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      void
      reset() noexcept
      { __weak_ptr().swap(*this); }

      void
      swap(__weak_ptr& __s) noexcept
      {
 std::swap(_M_ptr, __s._M_ptr);
 _M_refcount._M_swap(__s._M_refcount);
      }

    private:

      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
      {
 _M_ptr = __ptr;
 _M_refcount = __refcount;
      }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;

      _Tp* _M_ptr;
      __weak_count<_Lp> _M_refcount;
    };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }

  template<typename _Tp, typename _Tp1>
    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __lhs, const _Tp& __rhs) const
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp& __lhs, const _Tp1& __rhs) const
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp1& __lhs, const _Tp& __rhs) const
      { return __lhs.owner_before(__rhs); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
    { };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__weak_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    class __enable_shared_from_this
    {
    protected:
      constexpr __enable_shared_from_this() noexcept { }

      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }

      __enable_shared_from_this&
      operator=(const __enable_shared_from_this&) noexcept
      { return *this; }

      ~__enable_shared_from_this() { }

    public:
      __shared_ptr<_Tp, _Lp>
      shared_from_this()
      { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }

      __shared_ptr<const _Tp, _Lp>
      shared_from_this() const
      { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }

    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      template<_Lock_policy _Lp1, typename _Tp1, typename _Tp2>
 friend void
 __enable_shared_from_this_helper(const __shared_count<_Lp1>&,
      const __enable_shared_from_this<_Tp1,
      _Lp1>*, const _Tp2*) noexcept;

      mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
    };

  template<_Lock_policy _Lp1, typename _Tp1, typename _Tp2>
    inline void
    __enable_shared_from_this_helper(const __shared_count<_Lp1>& __pn,
         const __enable_shared_from_this<_Tp1,
         _Lp1>* __pe,
         const _Tp2* __px) noexcept
    {
      if (__pe != nullptr)
 __pe->_M_weak_assign(const_cast<_Tp2*>(__px), __pn);
    }

  template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }

  template<typename _Tp, _Lock_policy _Lp, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp, _Lock_policy _Lp>
    struct hash<__shared_ptr<_Tp, _Lp>>
    : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
    {
      size_t
      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
      { return std::hash<_Tp*>()(__s.get()); }
    };


}
# 53 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 2 3

namespace std
{
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
  template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
    inline std::basic_ostream<_Ch, _Tr>&
    operator<<(std::basic_ostream<_Ch, _Tr>& __os,
        const __shared_ptr<_Tp, _Lp>& __p)
    {
      __os << __p.get();
      return __os;
    }


  template<typename _Del, typename _Tp, _Lock_policy _Lp>
    inline _Del*
    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }
# 92 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
    public:




      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;







      template<typename _Tp1>
 explicit shared_ptr(_Tp1* __p)
        : __shared_ptr<_Tp>(__p) { }
# 128 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
      template<typename _Tp1, typename _Deleter>
 shared_ptr(_Tp1* __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, __d) { }
# 145 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
      template<typename _Deleter>
 shared_ptr(nullptr_t __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, __d) { }
# 164 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
      template<typename _Tp1, typename _Deleter, typename _Alloc>
 shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }
# 183 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
      template<typename _Deleter, typename _Alloc>
 shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }
# 205 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
      template<typename _Tp1>
 shared_ptr(const shared_ptr<_Tp1>& __r, _Tp* __p) noexcept
 : __shared_ptr<_Tp>(__r, __p) { }
# 216 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 shared_ptr(const shared_ptr<_Tp1>& __r) noexcept
        : __shared_ptr<_Tp>(__r) { }






      shared_ptr(shared_ptr&& __r) noexcept
      : __shared_ptr<_Tp>(std::move(__r)) { }






      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 247 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
      template<typename _Tp1>
 explicit shared_ptr(const weak_ptr<_Tp1>& __r)
 : __shared_ptr<_Tp>(__r) { }


      template<typename _Tp1>
 shared_ptr(std::auto_ptr<_Tp1>&& __r);


      template<typename _Tp1, typename _Del>
 shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r)) { }






      constexpr shared_ptr(nullptr_t __p) noexcept
      : __shared_ptr<_Tp>(__p) { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template<typename _Tp1>
 shared_ptr&
 operator=(const shared_ptr<_Tp1>& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(__r);
   return *this;
 }


      template<typename _Tp1>
 shared_ptr&
 operator=(std::auto_ptr<_Tp1>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }


      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
 this->__shared_ptr<_Tp>::operator=(std::move(__r));
 return *this;
      }

      template<class _Tp1>
 shared_ptr&
 operator=(shared_ptr<_Tp1>&& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      template<typename _Tp1, typename _Del>
 shared_ptr&
 operator=(std::unique_ptr<_Tp1, _Del>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

    private:

      template<typename _Alloc, typename... _Args>
 shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
     _Args&&... __args)
 : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 { }

      template<typename _Tp1, typename _Alloc, typename... _Args>
 friend shared_ptr<_Tp1>
 allocate_shared(const _Alloc& __a, _Args&&... __args);


      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)
      : __shared_ptr<_Tp>(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };


  template<typename _Tp1, typename _Tp2>
    inline bool
    operator==(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp>
    inline bool
    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator!=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp>
    inline bool
    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator<(const shared_ptr<_Tp1>& __a,
       const shared_ptr<_Tp2>& __b) noexcept
    {
      typedef typename std::common_type<_Tp1*, _Tp2*>::type _CT;
      return std::less<_CT>()(__a.get(), __b.get());
    }

  template<typename _Tp>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp>
    inline bool
    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator<=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    inline bool
    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator>(const shared_ptr<_Tp1>& __a,
       const shared_ptr<_Tp2>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp>
    inline bool
    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator>=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp>
    inline bool
    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    struct less<shared_ptr<_Tp>> : public _Sp_less<shared_ptr<_Tp>>
    { };


  template<typename _Tp>
    inline void
    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }


  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    static_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    { return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get())); }

  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    const_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    { return shared_ptr<_Tp>(__r, const_cast<_Tp*>(__r.get())); }

  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    dynamic_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    {
      if (_Tp* __p = dynamic_cast<_Tp*>(__r.get()))
 return shared_ptr<_Tp>(__r, __p);
      return shared_ptr<_Tp>();
    }







  template<typename _Tp>
    class weak_ptr : public __weak_ptr<_Tp>
    {
    public:
      constexpr weak_ptr() noexcept
      : __weak_ptr<_Tp>() { }

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 weak_ptr(const weak_ptr<_Tp1>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 weak_ptr(const shared_ptr<_Tp1>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      template<typename _Tp1>
 weak_ptr&
 operator=(const weak_ptr<_Tp1>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      template<typename _Tp1>
 weak_ptr&
 operator=(const shared_ptr<_Tp1>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      shared_ptr<_Tp>
      lock() const noexcept
      { return shared_ptr<_Tp>(*this, std::nothrow); }
    };


  template<typename _Tp>
    inline void
    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }



  template<typename _Tp>
    struct owner_less;


  template<typename _Tp>
    struct owner_less<shared_ptr<_Tp>>
    : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
    { };


  template<typename _Tp>
    struct owner_less<weak_ptr<_Tp>>
    : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
    { };




  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }

    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      template<typename _Tp1, typename _Tp2>
 friend void
 __enable_shared_from_this_helper(const __shared_count<>&,
      const enable_shared_from_this<_Tp1>*,
      const _Tp2*) noexcept;

      mutable weak_ptr<_Tp> _M_weak_this;
    };

  template<typename _Tp1, typename _Tp2>
    inline void
    __enable_shared_from_this_helper(const __shared_count<>& __pn,
         const enable_shared_from_this<_Tp1>*
         __pe, const _Tp2* __px) noexcept
    {
      if (__pe != nullptr)
 __pe->_M_weak_assign(const_cast<_Tp2*>(__px), __pn);
    }
# 589 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }
# 604 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/shared_ptr.h" 3
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp>
    struct hash<shared_ptr<_Tp>>
    : public __hash_base<size_t, shared_ptr<_Tp>>
    {
      size_t
      operator()(const shared_ptr<_Tp>& __s) const noexcept
      { return std::hash<_Tp*>()(__s.get()); }
    };




}
# 83 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 1 3
# 36 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
namespace std
{
# 47 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } __attribute__ ((__deprecated__));
# 86 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 112 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 124 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 135 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 152 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 170 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 180 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
                                   ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
                                   ;
 return _M_ptr;
      }
# 210 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 224 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 239 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 260 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } __attribute__ ((__deprecated__));



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } __attribute__ ((__deprecated__));


  template<_Lock_policy _Lp>
  template<typename _Tp>
    inline
    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)
    : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
    { __r.release(); }

  template<typename _Tp, _Lock_policy _Lp>
  template<typename _Tp1>
    inline
    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : _M_ptr(__r.get()), _M_refcount()
    {

      static_assert( sizeof(_Tp1) > 0, "incomplete type" );
      _Tp1* __tmp = __r.get();
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      __enable_shared_from_this_helper(_M_refcount, __tmp, __tmp);
    }

  template<typename _Tp>
  template<typename _Tp1>
    inline
    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : __shared_ptr<_Tp>(std::move(__r)) { }

  template<typename _Tp, typename _Dp>
  template<typename _Up, typename>
    inline
    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept
    : _M_t(__u.release(), deleter_type()) { }



}
# 85 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\memory" 2 3
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h" 2


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes-fwd.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes-fwd.h"
template <typename T> class octave_int;

typedef octave_int<int8_t> octave_int8;
typedef octave_int<int16_t> octave_int16;
typedef octave_int<int32_t> octave_int32;
typedef octave_int<int64_t> octave_int64;

typedef octave_int<uint8_t> octave_uint8;
typedef octave_int<uint16_t> octave_uint16;
typedef octave_int<uint32_t> octave_uint32;
typedef octave_int<uint64_t> octave_uint64;
# 39 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h" 2


template <typename T> class Array;
template <typename T> class Sparse;
class Range;
# 52 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
class

idx_vector
{
public:

  enum idx_class_type
  {
    class_invalid = -1,
    class_colon = 0,
    class_range,
    class_scalar,
    class_vector,
    class_mask
  };

  template <typename T, typename D> friend class std::unique_ptr;

private:

  class idx_base_rep
  {
  public:
    idx_base_rep (void) : count (1), err (false) { }

    virtual ~idx_base_rep (void) { }


    virtual octave_idx_type xelem (octave_idx_type i) const = 0;


    virtual octave_idx_type checkelem (octave_idx_type i) const = 0;


    virtual octave_idx_type length (octave_idx_type n) const = 0;


    virtual octave_idx_type extent (octave_idx_type n) const = 0;


    virtual idx_class_type idx_class (void) const { return class_invalid; }


    virtual idx_base_rep *sort_uniq_clone (bool uniq = false) = 0;

    virtual idx_base_rep *sort_idx (Array<octave_idx_type>&) = 0;


    virtual bool is_colon_equiv (octave_idx_type) const { return false; }


    virtual dim_vector orig_dimensions (void) const { return dim_vector (); }


    virtual std::ostream& print (std::ostream& os) const = 0;

    virtual Array<octave_idx_type> as_array (void);

    octave_refcount<int> count;

    bool err;

  private:


    idx_base_rep (const idx_base_rep&);
    idx_base_rep& operator = (const idx_base_rep&);
  };


  class idx_colon_rep : public idx_base_rep
  {
  public:
    idx_colon_rep (void) { }

    idx_colon_rep (char c);

    octave_idx_type xelem (octave_idx_type i) const { return i; }

    octave_idx_type checkelem (octave_idx_type i) const;

    octave_idx_type length (octave_idx_type n) const { return n; }

    octave_idx_type extent (octave_idx_type n) const { return n; }

    idx_class_type idx_class (void) const { return class_colon; }

    idx_base_rep *sort_uniq_clone (bool = false)
    { count++; return this; }

    __attribute__ ((__noreturn__)) idx_base_rep *sort_idx (Array<octave_idx_type>&);

    bool is_colon_equiv (octave_idx_type) const { return true; }

    std::ostream& print (std::ostream& os) const;

  private:


    idx_colon_rep (const idx_colon_rep& idx);
    idx_colon_rep& operator = (const idx_colon_rep& idx);
  };


  enum direct { DIRECT };


  class idx_range_rep : public idx_base_rep
  {
  public:
    idx_range_rep (octave_idx_type _start, octave_idx_type _len,
                   octave_idx_type _step, direct)
      : idx_base_rep (), start(_start), len(_len), step(_step) { }

    idx_range_rep (void)
      : start(0), len(0), step(1) { }


    idx_range_rep (octave_idx_type _start, octave_idx_type _limit,
                   octave_idx_type _step);

    idx_range_rep (const Range&);

    octave_idx_type xelem (octave_idx_type i) const
    { return start + i * step; }

    octave_idx_type checkelem (octave_idx_type i) const;

    octave_idx_type length (octave_idx_type) const { return len; }

    octave_idx_type extent (octave_idx_type n) const
    {
      return len ? std::max (n, start + 1 + (step < 0 ? 0 : step * (len - 1)))
                 : n;
    }

    idx_class_type idx_class (void) const { return class_range; }

    idx_base_rep *sort_uniq_clone (bool uniq = false);

    idx_base_rep *sort_idx (Array<octave_idx_type>&);

    bool is_colon_equiv (octave_idx_type n) const
    { return start == 0 && step == 1 && len == n; }

    dim_vector orig_dimensions (void) const
    { return dim_vector (1, len); }

    octave_idx_type get_start (void) const { return start; }

    octave_idx_type get_step (void) const { return step; }

    std::ostream& print (std::ostream& os) const;

    Range unconvert (void) const;

    Array<octave_idx_type> as_array (void);

  private:


    idx_range_rep (const idx_range_rep& idx);
    idx_range_rep& operator = (const idx_range_rep& idx);

    octave_idx_type start, len, step;

  };


  class idx_scalar_rep : public idx_base_rep
  {
  public:
    idx_scalar_rep (octave_idx_type i, direct)
      : data (i) { }

    idx_scalar_rep (void)
      : data (0) { }


    idx_scalar_rep (octave_idx_type i);

    template <typename T>
    idx_scalar_rep (T x);

    octave_idx_type xelem (octave_idx_type) const { return data; }

    octave_idx_type checkelem (octave_idx_type i) const;

    octave_idx_type length (octave_idx_type) const { return 1; }

    octave_idx_type extent (octave_idx_type n) const
    { return std::max (n, data + 1); }

    idx_class_type idx_class (void) const { return class_scalar; }

    idx_base_rep *sort_uniq_clone (bool = false)
    { count++; return this; }

    idx_base_rep *sort_idx (Array<octave_idx_type>&);

    bool is_colon_equiv (octave_idx_type n) const
    { return n == 1 && data == 0; }

    dim_vector orig_dimensions (void) const { return dim_vector (1, 1); }

    octave_idx_type get_data (void) const { return data; }

    std::ostream& print (std::ostream& os) const;

    double unconvert (void) const;

    Array<octave_idx_type> as_array (void);

  private:


    idx_scalar_rep (const idx_scalar_rep& idx);
    idx_scalar_rep& operator = (const idx_scalar_rep& idx);

    octave_idx_type data;

  };


  class idx_vector_rep : public idx_base_rep
  {
  public:

    idx_vector_rep (octave_idx_type *_data, octave_idx_type _len,
                    octave_idx_type _ext, const dim_vector& od, direct)
      : data (_data), len (_len), ext (_ext), aowner (0), orig_dims (od) { }

    idx_vector_rep (void)
      : data (0), len (0), ext (0), aowner (0), orig_dims ()
    { }


    idx_vector_rep (const Array<octave_idx_type>& inda);

    idx_vector_rep (const Array<octave_idx_type>& inda,
                    octave_idx_type _ext, direct);

    template <typename T>
    idx_vector_rep (const Array<T>&);

    idx_vector_rep (bool);

    idx_vector_rep (const Array<bool>&, octave_idx_type = -1);

    idx_vector_rep (const Sparse<bool>&);

    ~idx_vector_rep (void);

    octave_idx_type xelem (octave_idx_type i) const { return data[i]; }

    octave_idx_type checkelem (octave_idx_type i) const;

    octave_idx_type length (octave_idx_type) const { return len; }

    octave_idx_type extent (octave_idx_type n) const
    { return std::max (n, ext); }

    idx_class_type idx_class (void) const { return class_vector; }

    idx_base_rep *sort_uniq_clone (bool uniq = false);

    idx_base_rep *sort_idx (Array<octave_idx_type>&);

    dim_vector orig_dimensions (void) const { return orig_dims; }

    const octave_idx_type *get_data (void) const { return data; }

    std::ostream& print (std::ostream& os) const;

    Array<double> unconvert (void) const;

    Array<octave_idx_type> as_array (void);

  private:


    idx_vector_rep (const idx_vector_rep& idx);
    idx_vector_rep& operator = (const idx_vector_rep& idx);

    const octave_idx_type *data;
    octave_idx_type len;
    octave_idx_type ext;
# 347 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
    Array<octave_idx_type> *aowner;

    dim_vector orig_dims;
  };


  class idx_mask_rep : public idx_base_rep
  {
  public:

    idx_mask_rep (bool *_data, octave_idx_type _len,
                  octave_idx_type _ext, const dim_vector& od, direct)
      : data (_data), len (_len), ext (_ext), lsti (-1), lste (-1),
        aowner (0), orig_dims (od) { }

    idx_mask_rep (void)
      : data (0), len (0), ext (0), lsti (-1), lste (-1), aowner (0),
        orig_dims ()
    { }

    idx_mask_rep (bool);

    idx_mask_rep (const Array<bool>&, octave_idx_type = -1);

    ~idx_mask_rep (void);

    octave_idx_type xelem (octave_idx_type i) const;

    octave_idx_type checkelem (octave_idx_type i) const;

    octave_idx_type length (octave_idx_type) const { return len; }

    octave_idx_type extent (octave_idx_type n) const
    { return std::max (n, ext); }

    idx_class_type idx_class (void) const { return class_mask; }

    idx_base_rep *sort_uniq_clone (bool = false)
    { count++; return this; }

    idx_base_rep *sort_idx (Array<octave_idx_type>&);

    dim_vector orig_dimensions (void) const { return orig_dims; }

    bool is_colon_equiv (octave_idx_type n) const
    { return len == n && ext == n; }

    const bool *get_data (void) const { return data; }

    std::ostream& print (std::ostream& os) const;

    Array<bool> unconvert (void) const;

    Array<octave_idx_type> as_array (void);

  private:


    idx_mask_rep (const idx_mask_rep& idx);
    idx_mask_rep& operator = (const idx_mask_rep& idx);

    const bool *data;
    octave_idx_type len;
    octave_idx_type ext;



    mutable octave_idx_type lsti;
    mutable octave_idx_type lste;
# 424 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
    Array<bool> *aowner;

    dim_vector orig_dims;
  };

  idx_vector (idx_base_rep *r) : rep (r) { }



  static idx_vector_rep *nil_rep (void);


  static idx_vector_rep *err_rep (void);



  void chkerr (void)
  {
    if (rep->err)
      {
        if (--rep->count == 0)
          delete rep;
        rep = err_rep ();
        rep->count++;
      }
  }

public:


  idx_vector (void) : rep (nil_rep ()) { rep->count++; }


  idx_vector (octave_idx_type i) : rep (new idx_scalar_rep (i))
  { chkerr (); }

  idx_vector (octave_idx_type start, octave_idx_type limit,
              octave_idx_type step = 1)
    : rep (new idx_range_rep (start, limit, step))
  { chkerr (); }

  static idx_vector
  make_range (octave_idx_type start, octave_idx_type step,
              octave_idx_type len)
  {
    return idx_vector (new idx_range_rep (start, len, step, DIRECT));
  }

  idx_vector (const Array<octave_idx_type>& inda)
    : rep (new idx_vector_rep (inda))
  { chkerr (); }


  idx_vector (const Array<octave_idx_type>& inda, octave_idx_type ext)
    : rep (new idx_vector_rep (inda, ext, DIRECT))
  { }


  static const idx_vector colon;


  idx_vector (char c) : rep (new idx_colon_rep (c)) { chkerr (); }



  template <typename T>
  idx_vector (octave_int<T> x) : rep (new idx_scalar_rep (x)) { chkerr (); }

  idx_vector (double x) : rep (new idx_scalar_rep (x)) { chkerr (); }

  idx_vector (float x) : rep (new idx_scalar_rep (x)) { chkerr (); }


  idx_vector (bool x) : rep (new idx_mask_rep (x)) { chkerr (); }

  template <typename T>
  idx_vector (const Array<octave_int<T> >& nda) : rep (new idx_vector_rep (nda))
  { chkerr (); }

  idx_vector (const Array<double>& nda) : rep (new idx_vector_rep (nda))
  { chkerr (); }

  idx_vector (const Array<float>& nda) : rep (new idx_vector_rep (nda))
  { chkerr (); }

  idx_vector (const Array<bool>& nda);

  idx_vector (const Range& r)
    : rep (new idx_range_rep (r))
  { chkerr (); }

  idx_vector (const Sparse<bool>& nda) : rep (new idx_vector_rep (nda))
  { chkerr (); }

  idx_vector (const idx_vector& a) : rep (a.rep) { rep->count++; }

  ~idx_vector (void)
  {
    if (--rep->count == 0)
      delete rep;
  }

  idx_vector& operator = (const idx_vector& a)
  {
    if (this != &a)
      {
        if (--rep->count == 0)
          delete rep;

        rep = a.rep;
        rep->count++;
      }
    return *this;
  }

  idx_class_type idx_class (void) const { return rep->idx_class (); }

  octave_idx_type length (octave_idx_type n = 0) const
  { return rep->length (n); }

  octave_idx_type extent (octave_idx_type n) const
  { return rep->extent (n); }

  octave_idx_type xelem (octave_idx_type n) const
  { return rep->xelem (n); }

  octave_idx_type checkelem (octave_idx_type n) const
  { return rep->checkelem (n); }

  octave_idx_type operator () (octave_idx_type n) const
  {



    return rep->xelem (n);

  }

  operator bool (void) const
  { return ! rep->err; }

  bool is_colon (void) const
  { return rep->idx_class () == class_colon; }

  bool is_scalar (void) const
  { return rep->idx_class () == class_scalar; }

  bool is_range (void) const
  { return rep->idx_class () == class_range; }

  bool is_colon_equiv (octave_idx_type n) const
  { return rep->is_colon_equiv (n); }

  idx_vector sorted (bool uniq = false) const
  { return idx_vector (rep->sort_uniq_clone (uniq)); }

  idx_vector sorted (Array<octave_idx_type>& sidx) const
  { return idx_vector (rep->sort_idx (sidx)); }

  dim_vector orig_dimensions (void) const { return rep->orig_dimensions (); }

  octave_idx_type orig_rows (void) const
  { return orig_dimensions () (0); }

  octave_idx_type orig_columns (void) const
  { return orig_dimensions () (1); }

  int orig_empty (void) const
  { return (! is_colon () && orig_dimensions ().any_zero ()); }



  std::ostream& print (std::ostream& os) const { return rep->print (os); }

  friend std::ostream& operator << (std::ostream& os, const idx_vector& a)
  { return a.print (os); }
# 609 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
  template <typename T>
  octave_idx_type
  index (const T *src, octave_idx_type n, T *dest) const
  {
    octave_idx_type len = rep->length (n);

    switch (rep->idx_class ())
      {
      case class_colon:
        std::copy (src, src + len, dest);
        break;

      case class_range:
        {
          idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
          octave_idx_type start = r->get_start ();
          octave_idx_type step = r->get_step ();
          const T *ssrc = src + start;
          if (step == 1)
            std::copy (ssrc, ssrc + len, dest);
          else if (step == -1)
            std::reverse_copy (ssrc - len + 1, ssrc + 1, dest);
          else if (step == 0)
            std::fill_n (dest, len, *ssrc);
          else
            {
              for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                dest[i] = ssrc[j];
            }
        }
        break;

      case class_scalar:
        {
          idx_scalar_rep * r = dynamic_cast<idx_scalar_rep *> (rep);
          dest[0] = src[r->get_data ()];
        }
        break;

      case class_vector:
        {
          idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
          const octave_idx_type *data = r->get_data ();
          for (octave_idx_type i = 0; i < len; i++)
            dest[i] = src[data[i]];
        }
        break;

      case class_mask:
        {
          idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
          const bool *data = r->get_data ();
          octave_idx_type ext = r->extent (0);
          for (octave_idx_type i = 0; i < ext; i++)
            if (data[i]) *dest++ = src[i];
        }
        break;

      default:
        (void) ((!!(false)) || (_assert("false","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h",668),0));
        break;
      }

    return len;
  }
# 683 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
  template <typename T>
  octave_idx_type
  assign (const T *src, octave_idx_type n, T *dest) const
  {
    octave_idx_type len = rep->length (n);

    switch (rep->idx_class ())
      {
      case class_colon:
        std::copy (src, src + len, dest);
        break;

      case class_range:
        {
          idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
          octave_idx_type start = r->get_start ();
          octave_idx_type step = r->get_step ();
          T *sdest = dest + start;
          if (step == 1)
            std::copy (src, src + len, sdest);
          else if (step == -1)
            std::reverse_copy (src, src + len, sdest - len + 1);
          else
            {
              for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                sdest[j] = src[i];
            }
        }
        break;

      case class_scalar:
        {
          idx_scalar_rep * r = dynamic_cast<idx_scalar_rep *> (rep);
          dest[r->get_data ()] = src[0];
        }
        break;

      case class_vector:
        {
          idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
          const octave_idx_type *data = r->get_data ();
          for (octave_idx_type i = 0; i < len; i++)
            dest[data[i]] = src[i];
        }
        break;

      case class_mask:
        {
          idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
          const bool *data = r->get_data ();
          octave_idx_type ext = r->extent (0);
          for (octave_idx_type i = 0; i < ext; i++)
            if (data[i]) dest[i] = *src++;
        }
        break;

      default:
        (void) ((!!(false)) || (_assert("false","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h",740),0));
        break;
      }

    return len;
  }
# 755 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
  template <typename T>
  octave_idx_type
  fill (const T& val, octave_idx_type n, T *dest) const
  {
    octave_idx_type len = rep->length (n);

    switch (rep->idx_class ())
      {
      case class_colon:
        std::fill (dest, dest + len, val);
        break;

      case class_range:
        {
          idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
          octave_idx_type start = r->get_start ();
          octave_idx_type step = r->get_step ();
          T *sdest = dest + start;
          if (step == 1)
            std::fill (sdest, sdest + len, val);
          else if (step == -1)
            std::fill (sdest - len + 1, sdest + 1, val);
          else
            {
              for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                sdest[j] = val;
            }
        }
        break;

      case class_scalar:
        {
          idx_scalar_rep * r = dynamic_cast<idx_scalar_rep *> (rep);
          dest[r->get_data ()] = val;
        }
        break;

      case class_vector:
        {
          idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
          const octave_idx_type *data = r->get_data ();
          for (octave_idx_type i = 0; i < len; i++)
            dest[data[i]] = val;
        }
        break;

      case class_mask:
        {
          idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
          const bool *data = r->get_data ();
          octave_idx_type ext = r->extent (0);
          for (octave_idx_type i = 0; i < ext; i++)
            if (data[i]) dest[i] = val;
        }
        break;

      default:
        (void) ((!!(false)) || (_assert("false","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h",812),0));
        break;
      }

    return len;
  }







  template <typename Functor>
  void
  loop (octave_idx_type n, Functor body) const
  {
    octave_idx_type len = rep->length (n);

    switch (rep->idx_class ())
      {
      case class_colon:
        for (octave_idx_type i = 0; i < len; i++) body (i);
        break;

      case class_range:
        {
          idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
          octave_idx_type start = r->get_start ();
          octave_idx_type step = r->get_step ();
          octave_idx_type i, j;
          if (step == 1)
            for (i = start, j = start + len; i < j; i++) body (i);
          else if (step == -1)
            for (i = start, j = start - len; i > j; i--) body (i);
          else
            for (i = 0, j = start; i < len; i++, j += step) body (j);
        }
        break;

      case class_scalar:
        {
          idx_scalar_rep * r = dynamic_cast<idx_scalar_rep *> (rep);
          body (r->get_data ());
        }
        break;

      case class_vector:
        {
          idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
          const octave_idx_type *data = r->get_data ();
          for (octave_idx_type i = 0; i < len; i++) body (data[i]);
        }
        break;

      case class_mask:
        {
          idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
          const bool *data = r->get_data ();
          octave_idx_type ext = r->extent (0);
          for (octave_idx_type i = 0; i < ext; i++)
            if (data[i]) body (i);
        }
        break;

      default:
        (void) ((!!(false)) || (_assert("false","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h",878),0));
        break;
      }

  }
# 893 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
  template <typename Functor>
  octave_idx_type
  bloop (octave_idx_type n, Functor body) const
  {
    octave_idx_type len = rep->length (n), ret;

    switch (rep->idx_class ())
      {
      case class_colon:
        {
          octave_idx_type i;
          for (i = 0; i < len && body (i); i++) ;
          ret = i;
        }
        break;

      case class_range:
        {
          idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
          octave_idx_type start = r->get_start ();
          octave_idx_type step = r->get_step ();
          octave_idx_type i, j;
          if (step == 1)
            for (i = start, j = start + len; i < j && body (i); i++) ;
          else if (step == -1)
            for (i = start, j = start - len; i > j && body (i); i--) ;
          else
            for (i = 0, j = start; i < len && body (j); i++, j += step) ;
          ret = i;
        }
        break;

      case class_scalar:
        {
          idx_scalar_rep * r = dynamic_cast<idx_scalar_rep *> (rep);
          ret = body (r->get_data ()) ? 1 : 0;
        }
        break;

      case class_vector:
        {
          idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
          const octave_idx_type *data = r->get_data ();
          octave_idx_type i;
          for (i = 0; i < len && body (data[i]); i++) ;
          ret = i;
        }
        break;

      case class_mask:
        {
          idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
          const bool *data = r->get_data ();
          octave_idx_type ext = r->extent (0);
          octave_idx_type j = 0;
          for (octave_idx_type i = 0; i < ext; i++)
            {
              if (data[i])
                {
                  if (body (i))
                    break;
                  else
                    j++;
                }
            }

          ret = j;
        }
        break;

      default:
        (void) ((!!(false)) || (_assert("false","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h",964),0));
        break;
      }

    return ret;
  }
# 978 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/idx-vector.h"
  bool maybe_reduce (octave_idx_type n, const idx_vector& j,
                     octave_idx_type nj);

  bool is_cont_range (octave_idx_type n,
                      octave_idx_type& l, octave_idx_type& u) const;



  octave_idx_type increment (void) const;

  idx_vector
  complement (octave_idx_type n) const;

  bool is_permutation (octave_idx_type n) const;



  idx_vector inverse_permutation (octave_idx_type n) const;


  void copy_data (octave_idx_type *data) const;


  idx_vector unmask (void) const;


  void unconvert (idx_class_type& iclass,
                  double& scalar, Range& range,
                  Array<double>& array, Array<bool>& mask) const;

  Array<octave_idx_type> as_array (void) const;



  const octave_idx_type *raw (void);

  bool is_vector (void) const;




  octave_idx_type elem (octave_idx_type n) const
  { return (*this) (n); }

  bool is_colon_equiv (octave_idx_type n, int) const
  { return is_colon_equiv (n); }

  octave_idx_type
  freeze (octave_idx_type z_len, const char *tag, bool resize_ok = false);

  void sort (bool uniq = false)
  { *this = sorted (uniq); }

  octave_idx_type ones_count (void) const;

  octave_idx_type max (void) const { return extent (1) - 1; }

private:

  idx_base_rep *rep;

};
# 39 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-traits.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-traits.h"
template <bool cond, typename T1, typename T2>
class if_then_else;

template <typename T1, typename T2>
class if_then_else<true, T1, T2>
{
public:

  typedef T1 result;
};

template <typename T1, typename T2>
class if_then_else<false, T1, T2>
{
public:

  typedef T2 result;
};


template <typename T1, typename T2>
class equal_types
{
public:

  static const bool value = false;
};

template <typename T>
class equal_types <T, T>
{
public:

  static const bool value = true;
};



template <template <typename> class Template, typename T>
class is_instance
{
public:

  static const bool value = false;
};

template <template <typename> class Template, typename T>
class is_instance <Template, Template<T> >
{
public:

  static const bool value = true;
};



template <typename T1>
class is_class_type
{
private:

  typedef char one;
  typedef struct { char c[2]; } two;


  template <typename T2> static one is_class_type_test (int T2::*);


  template <typename T2> static two is_class_type_test (...);

public:

  enum { yes = sizeof (is_class_type_test<T1> (0)) == 1 };
  enum { no = ! yes };
};




template <typename T>
class ref_param
{
public:

  typedef typename if_then_else<is_class_type<T>::no, T, T const&>::result type;
};




template <template <typename> class TemplatedClass, typename T>
class strip_template_param
{
public:
  typedef T type;
};

template <template <typename> class TemplatedClass, typename T>
class strip_template_param<TemplatedClass, TemplatedClass<T> >
{
public:
  typedef T type;
};




template <template <typename> class TemplatedClass, typename T, typename S>
class subst_template_param
{
public:
  typedef S type;
};

template <template <typename> class TemplatedClass, typename T, typename S>
class subst_template_param<TemplatedClass, TemplatedClass<T>, S>
{
public:
  typedef TemplatedClass<S> type;
};
# 41 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-utils.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-utils.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdio" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdio" 3
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-utils.h" 2

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\iostream" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\iostream" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ios" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ios" 3





# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3





namespace std
{
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    locale() throw();
# 126 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 164 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 177 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 191 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 206 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 225 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 253 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 269 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 304 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 0 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 338 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 369 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 436 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 583 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 610 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 624 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 641 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 660 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 674 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 703 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 717 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 730 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.tcc" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.tcc" 3

namespace std
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 788 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_classes.h" 2 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 2 3

namespace std
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 199 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 255 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 330 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 361 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 393 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 419 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 436 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 448 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 561 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 577 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 594 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 620 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 671 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 683 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 694 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 705 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 724 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    static int
    xalloc() throw();
# 740 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 761 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 778 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ios" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3








namespace std
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 119 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 208 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 225 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 238 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 250 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 262 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 283 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 297 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 315 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 337 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 356 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 371 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 396 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 423 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 449 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 463 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 481 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 497 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 508 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 528 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 544 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 554 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 575 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual void
      imbue(const locale& __loc)
      { }
# 590 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 601 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 613 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 626 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual int
      sync() { return 0; }
# 648 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 664 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 686 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 699 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 723 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual int_type
      pbackfail(int_type __c = traits_type::eof())
      { return traits_type::eof(); }
# 741 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 767 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      virtual int_type
      overflow(int_type __c = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 782 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const basic_streambuf& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      basic_streambuf&
      operator=(const basic_streambuf&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/streambuf.tcc" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/streambuf.tcc" 3

namespace std
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 829 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\streambuf" 2 3
# 44 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ios" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwctype" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwctype" 3
# 50 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwctype" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\wctype.h" 1 3
# 15 "C:\\Octave\\Octave-4.2.1\\include\\wctype.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 166 "C:\\Octave\\Octave-4.2.1\\include\\wctype.h" 3
  typedef wchar_t wctrans_t;
  wint_t __attribute__((__cdecl__)) towctrans(wint_t,wctrans_t);
  wctrans_t __attribute__((__cdecl__)) wctrans(const char *);
  wctype_t __attribute__((__cdecl__)) wctype(const char *);


}


#pragma pack(pop)
# 51 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwctype" 2 3
# 80 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cctype" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cctype" 3
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/ctype_base.h" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/ctype_base.h" 3
namespace std
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = 1 << 0;
    static const mask lower = 1 << 1;
    static const mask alpha = 1 << 2;
    static const mask digit = 1 << 3;
    static const mask xdigit = 1 << 4;
    static const mask space = 1 << 5;
    static const mask print = 1 << 6;
    static const mask graph = (1 << 2) | (1 << 3) | (1 << 9);
    static const mask cntrl = 1 << 8;
    static const mask punct = 1 << 9;
    static const mask alnum = (1 << 2) | (1 << 3);
  };


}
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 2 3






# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/streambuf_iterator.h" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/streambuf_iterator.h" 3




namespace std
{
# 49 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
                      _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 49 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 2 3

namespace std
{
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 142 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 462 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 495 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 535 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 556 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 581 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 604 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1021 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1054 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const
      { return __c; }
# 1149 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1242 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1331 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1364 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1406 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1429 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1455 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/ctype_inline.h" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\x86_64-w64-mingw32\\bits/ctype_inline.h" 3
namespace std
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }


  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && !this->is(__m, *__low))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && this->is(__m, *__low) != 0)
      ++__low;
    return __low;
  }


}
# 1512 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 2 3

namespace std
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1640 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1678 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1692 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1706 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1719 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1750 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1763 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1776 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1793 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1805 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1818 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1831 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1844 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1914 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1935 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1961 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1998 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2058 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2101 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2172 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2235 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2253 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2274 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2292 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2334 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2397 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2422 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2470 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2528 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.tcc" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.tcc" 3

namespace std
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 136 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 730 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 966 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1027 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1152 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1189 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2609 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/locale_facets.h" 2 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 2 3


namespace std
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 65 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 130 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 141 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 194 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 215 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 250 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 288 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 300 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 340 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 354 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 383 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 403 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 423 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 442 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.tcc" 1 3
# 34 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.tcc" 3

namespace std
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 476 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/basic_ios.h" 2 3
# 45 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ios" 2 3
# 39 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 2 3


namespace std
{
# 57 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      flush();
# 357 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      pos_type
      tellp();
# 368 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 399 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 418 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 428 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 447 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 469 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 511 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 562 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 574 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 600 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
    {
      __os << __x;
      return __os;
    }



}


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ostream.tcc" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/ostream.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 613 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ostream" 2 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\iostream" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3




namespace std
{
# 57 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      int_type
      get();
# 315 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      int_type
      peek();
# 485 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      unget();
# 555 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      int
      sync();
# 570 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      pos_type
      tellg();
# 585 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 656 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 692 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 703 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 721 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 763 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 794 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 854 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 870 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)
    {
      __is >> __x;
      return __is;
    }



}


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/istream.tcc" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/istream.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 513 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 883 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\istream" 2 3
# 41 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\iostream" 2 3

namespace std
{
# 60 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-utils.h" 2




# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-cutils.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-cutils.h"
# 1 "C:\\Octave\\Octave-4.2.1\\include\\sys/types.h" 1 3
# 62 "C:\\Octave\\Octave-4.2.1\\include\\sys/types.h" 3
__extension__
typedef long long _pid_t;




typedef _pid_t pid_t;





typedef unsigned short _mode_t;


typedef _mode_t mode_t;






typedef unsigned int useconds_t;




struct timespec {
  time_t tv_sec;
  long tv_nsec;
};

struct itimerspec {
  struct timespec it_interval;
  struct timespec it_value;
};





__extension__
typedef unsigned long long _sigset_t;
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-cutils.h" 2


extern "C" {


           void
octave_qsort (void *base, size_t n, size_t size,
              int (*cmp) (const void *, const void *));

           int
octave_strcasecmp (const char *s1, const char *s2);

           int
octave_strncasecmp (const char *s1, const char *s2, size_t n);


}
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-utils.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-cmplx.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-cmplx.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3




# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
# 45 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 1 3
# 37 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3




namespace std
{
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 97 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 110 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
      { _M_stringbuf_init(__mode); }
# 125 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      __string_type
      str() const
      {
 __string_type __ret;
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret = __string_type(this->pbase(), this->pptr());
     else
        __ret = __string_type(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 149 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      void
      str(const __string_type& __s)
      {

 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 201 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);
    };
# 271 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 307 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 325 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }
# 347 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 386 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 422 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 440 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }
# 462 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 501 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 536 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 552 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }
# 574 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };


}


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/sstream.tcc" 1 3
# 38 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/sstream.tcc" 3

namespace std
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();
      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 110 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp;
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}
# 601 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\sstream" 2 3
# 46 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 2 3




namespace std
{
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp> class complex;
  template<> class complex<float>;
  template<> class complex<double>;
  template<> class complex<long double>;


  template<typename _Tp> _Tp abs(const complex<_Tp>&);

  template<typename _Tp> _Tp arg(const complex<_Tp>&);

  template<typename _Tp> _Tp norm(const complex<_Tp>&);


  template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp& = 0);



  template<typename _Tp> complex<_Tp> cos(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> cosh(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> exp(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);

  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);

  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&,
                                          const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> pow(const _Tp&, const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sin(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sinh(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sqrt(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> tan(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> tanh(const complex<_Tp>&);
# 121 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    struct complex
    {

      typedef _Tp value_type;



      constexpr complex(const _Tp& __r = _Tp(), const _Tp& __i = _Tp())
      : _M_real(__r), _M_imag(__i) { }




      template<typename _Up>
        constexpr complex(const complex<_Up>& __z)
 : _M_real(__z.real()), _M_imag(__z.imag()) { }




      __attribute ((__abi_tag__ ("cxx11")))
      constexpr _Tp
      real() { return _M_real; }

      __attribute ((__abi_tag__ ("cxx11")))
      constexpr _Tp
      imag() { return _M_imag; }
# 169 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
      void
      real(_Tp __val) { _M_real = __val; }

      void
      imag(_Tp __val) { _M_imag = __val; }


      complex<_Tp>& operator=(const _Tp&);



      complex<_Tp>&
      operator+=(const _Tp& __t)
      {
 _M_real += __t;
 return *this;
      }



      complex<_Tp>&
      operator-=(const _Tp& __t)
      {
 _M_real -= __t;
 return *this;
      }


      complex<_Tp>& operator*=(const _Tp&);

      complex<_Tp>& operator/=(const _Tp&);





      template<typename _Up>
        complex<_Tp>& operator=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator+=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator-=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator*=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator/=(const complex<_Up>&);

      constexpr complex __rep() const
      { return *this; }

    private:
      _Tp _M_real;
      _Tp _M_imag;
    };

  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator=(const _Tp& __t)
    {
     _M_real = __t;
     _M_imag = _Tp();
     return *this;
    }


  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator*=(const _Tp& __t)
    {
      _M_real *= __t;
      _M_imag *= __t;
      return *this;
    }


  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator/=(const _Tp& __t)
    {
      _M_real /= __t;
      _M_imag /= __t;
      return *this;
    }

  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator=(const complex<_Up>& __z)
    {
      _M_real = __z.real();
      _M_imag = __z.imag();
      return *this;
    }


  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator+=(const complex<_Up>& __z)
    {
      _M_real += __z.real();
      _M_imag += __z.imag();
      return *this;
    }


  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator-=(const complex<_Up>& __z)
    {
      _M_real -= __z.real();
      _M_imag -= __z.imag();
      return *this;
    }



  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator*=(const complex<_Up>& __z)
    {
      const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
      _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
      _M_real = __r;
      return *this;
    }



  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator/=(const complex<_Up>& __z)
    {
      const _Tp __r = _M_real * __z.real() + _M_imag * __z.imag();
      const _Tp __n = std::norm(__z);
      _M_imag = (_M_imag * __z.real() - _M_real * __z.imag()) / __n;
      _M_real = __r / __n;
      return *this;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r += __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r += __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator+(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __y;
      __r += __x;
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r -= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r -= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator-(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r(__x, -__y.imag());
      __r -= __y.real();
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r *= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator*(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r *= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator*(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __y;
      __r *= __x;
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator/(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator/(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }



  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x)
    { return __x; }


  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x)
    { return complex<_Tp>(-__x.real(), -__x.imag()); }



  template<typename _Tp>
    inline constexpr bool
    operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x.real() == __y.real() && __x.imag() == __y.imag(); }

  template<typename _Tp>
    inline constexpr bool
    operator==(const complex<_Tp>& __x, const _Tp& __y)
    { return __x.real() == __y && __x.imag() == _Tp(); }

  template<typename _Tp>
    inline constexpr bool
    operator==(const _Tp& __x, const complex<_Tp>& __y)
    { return __x == __y.real() && _Tp() == __y.imag(); }




  template<typename _Tp>
    inline constexpr bool
    operator!=(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x.real() != __y.real() || __x.imag() != __y.imag(); }

  template<typename _Tp>
    inline constexpr bool
    operator!=(const complex<_Tp>& __x, const _Tp& __y)
    { return __x.real() != __y || __x.imag() != _Tp(); }

  template<typename _Tp>
    inline constexpr bool
    operator!=(const _Tp& __x, const complex<_Tp>& __y)
    { return __x != __y.real() || _Tp() != __y.imag(); }



  template<typename _Tp, typename _CharT, class _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)
    {
      _Tp __re_x, __im_x;
      _CharT __ch;
      __is >> __ch;
      if (__ch == '(')
 {
   __is >> __re_x >> __ch;
   if (__ch == ',')
     {
       __is >> __im_x >> __ch;
       if (__ch == ')')
  __x = complex<_Tp>(__re_x, __im_x);
       else
  __is.setstate(ios_base::failbit);
     }
   else if (__ch == ')')
     __x = __re_x;
   else
     __is.setstate(ios_base::failbit);
 }
      else
 {
   __is.putback(__ch);
   __is >> __re_x;
   __x = __re_x;
 }
      return __is;
    }


  template<typename _Tp, typename _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
    {
      basic_ostringstream<_CharT, _Traits> __s;
      __s.flags(__os.flags());
      __s.imbue(__os.getloc());
      __s.precision(__os.precision());
      __s << '(' << __x.real() << ',' << __x.imag() << ')';
      return __os << __s.str();
    }



  template<typename _Tp>
    constexpr _Tp
    real(const complex<_Tp>& __z)
    { return __z.real(); }

  template<typename _Tp>
    constexpr _Tp
    imag(const complex<_Tp>& __z)
    { return __z.imag(); }
# 565 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    inline _Tp
    __complex_abs(const complex<_Tp>& __z)
    {
      _Tp __x = __z.real();
      _Tp __y = __z.imag();
      const _Tp __s = std::max(abs(__x), abs(__y));
      if (__s == _Tp())
        return __s;
      __x /= __s;
      __y /= __s;
      return __s * sqrt(__x * __x + __y * __y);
    }


  inline float
  __complex_abs(__complex__ float __z) { return __builtin_cabsf(__z); }

  inline double
  __complex_abs(__complex__ double __z) { return __builtin_cabs(__z); }

  inline long double
  __complex_abs(const __complex__ long double& __z)
  { return __builtin_cabsl(__z); }

  template<typename _Tp>
    inline _Tp
    abs(const complex<_Tp>& __z) { return __complex_abs(__z.__rep()); }
# 601 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    inline _Tp
    __complex_arg(const complex<_Tp>& __z)
    { return atan2(__z.imag(), __z.real()); }


  inline float
  __complex_arg(__complex__ float __z) { return __builtin_cargf(__z); }

  inline double
  __complex_arg(__complex__ double __z) { return __builtin_carg(__z); }

  inline long double
  __complex_arg(const __complex__ long double& __z)
  { return __builtin_cargl(__z); }

  template<typename _Tp>
    inline _Tp
    arg(const complex<_Tp>& __z) { return __complex_arg(__z.__rep()); }
# 631 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<bool>
    struct _Norm_helper
    {
      template<typename _Tp>
        static inline _Tp _S_do_it(const complex<_Tp>& __z)
        {
          const _Tp __x = __z.real();
          const _Tp __y = __z.imag();
          return __x * __x + __y * __y;
        }
    };

  template<>
    struct _Norm_helper<true>
    {
      template<typename _Tp>
        static inline _Tp _S_do_it(const complex<_Tp>& __z)
        {
          _Tp __res = std::abs(__z);
          return __res * __res;
        }
    };

  template<typename _Tp>
    inline _Tp
    norm(const complex<_Tp>& __z)
    {
      return _Norm_helper<__is_floating<_Tp>::__value
 && !0>::_S_do_it(__z);
    }

  template<typename _Tp>
    inline complex<_Tp>
    polar(const _Tp& __rho, const _Tp& __theta)
    { return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta)); }

  template<typename _Tp>
    inline complex<_Tp>
    conj(const complex<_Tp>& __z)
    { return complex<_Tp>(__z.real(), -__z.imag()); }




  template<typename _Tp>
    inline complex<_Tp>
    __complex_cos(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(cos(__x) * cosh(__y), -sin(__x) * sinh(__y));
    }


  inline __complex__ float
  __complex_cos(__complex__ float __z) { return __builtin_ccosf(__z); }

  inline __complex__ double
  __complex_cos(__complex__ double __z) { return __builtin_ccos(__z); }

  inline __complex__ long double
  __complex_cos(const __complex__ long double& __z)
  { return __builtin_ccosl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    cos(const complex<_Tp>& __z) { return __complex_cos(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_cosh(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));
    }


  inline __complex__ float
  __complex_cosh(__complex__ float __z) { return __builtin_ccoshf(__z); }

  inline __complex__ double
  __complex_cosh(__complex__ double __z) { return __builtin_ccosh(__z); }

  inline __complex__ long double
  __complex_cosh(const __complex__ long double& __z)
  { return __builtin_ccoshl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    cosh(const complex<_Tp>& __z) { return __complex_cosh(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_exp(const complex<_Tp>& __z)
    { return std::polar(exp(__z.real()), __z.imag()); }


  inline __complex__ float
  __complex_exp(__complex__ float __z) { return __builtin_cexpf(__z); }

  inline __complex__ double
  __complex_exp(__complex__ double __z) { return __builtin_cexp(__z); }

  inline __complex__ long double
  __complex_exp(const __complex__ long double& __z)
  { return __builtin_cexpl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    exp(const complex<_Tp>& __z) { return __complex_exp(__z.__rep()); }
# 762 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_log(const complex<_Tp>& __z)
    { return complex<_Tp>(log(std::abs(__z)), std::arg(__z)); }


  inline __complex__ float
  __complex_log(__complex__ float __z) { return __builtin_clogf(__z); }

  inline __complex__ double
  __complex_log(__complex__ double __z) { return __builtin_clog(__z); }

  inline __complex__ long double
  __complex_log(const __complex__ long double& __z)
  { return __builtin_clogl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    log(const complex<_Tp>& __z) { return __complex_log(__z.__rep()); }






  template<typename _Tp>
    inline complex<_Tp>
    log10(const complex<_Tp>& __z)
    { return std::log(__z) / log(_Tp(10.0)); }


  template<typename _Tp>
    inline complex<_Tp>
    __complex_sin(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y));
    }


  inline __complex__ float
  __complex_sin(__complex__ float __z) { return __builtin_csinf(__z); }

  inline __complex__ double
  __complex_sin(__complex__ double __z) { return __builtin_csin(__z); }

  inline __complex__ long double
  __complex_sin(const __complex__ long double& __z)
  { return __builtin_csinl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sin(const complex<_Tp>& __z) { return __complex_sin(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_sinh(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));
    }


  inline __complex__ float
  __complex_sinh(__complex__ float __z) { return __builtin_csinhf(__z); }

  inline __complex__ double
  __complex_sinh(__complex__ double __z) { return __builtin_csinh(__z); }

  inline __complex__ long double
  __complex_sinh(const __complex__ long double& __z)
  { return __builtin_csinhl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sinh(const complex<_Tp>& __z) { return __complex_sinh(__z.__rep()); }
# 854 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    complex<_Tp>
    __complex_sqrt(const complex<_Tp>& __z)
    {
      _Tp __x = __z.real();
      _Tp __y = __z.imag();

      if (__x == _Tp())
        {
          _Tp __t = sqrt(abs(__y) / 2);
          return complex<_Tp>(__t, __y < _Tp() ? -__t : __t);
        }
      else
        {
          _Tp __t = sqrt(2 * (std::abs(__z) + abs(__x)));
          _Tp __u = __t / 2;
          return __x > _Tp()
            ? complex<_Tp>(__u, __y / __t)
            : complex<_Tp>(abs(__y) / __t, __y < _Tp() ? -__u : __u);
        }
    }


  inline __complex__ float
  __complex_sqrt(__complex__ float __z) { return __builtin_csqrtf(__z); }

  inline __complex__ double
  __complex_sqrt(__complex__ double __z) { return __builtin_csqrt(__z); }

  inline __complex__ long double
  __complex_sqrt(const __complex__ long double& __z)
  { return __builtin_csqrtl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sqrt(const complex<_Tp>& __z) { return __complex_sqrt(__z.__rep()); }
# 898 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_tan(const complex<_Tp>& __z)
    { return std::sin(__z) / std::cos(__z); }


  inline __complex__ float
  __complex_tan(__complex__ float __z) { return __builtin_ctanf(__z); }

  inline __complex__ double
  __complex_tan(__complex__ double __z) { return __builtin_ctan(__z); }

  inline __complex__ long double
  __complex_tan(const __complex__ long double& __z)
  { return __builtin_ctanl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    tan(const complex<_Tp>& __z) { return __complex_tan(__z.__rep()); }
# 926 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_tanh(const complex<_Tp>& __z)
    { return std::sinh(__z) / std::cosh(__z); }


  inline __complex__ float
  __complex_tanh(__complex__ float __z) { return __builtin_ctanhf(__z); }

  inline __complex__ double
  __complex_tanh(__complex__ double __z) { return __builtin_ctanh(__z); }

  inline __complex__ long double
  __complex_tanh(const __complex__ long double& __z)
  { return __builtin_ctanhl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    tanh(const complex<_Tp>& __z) { return __complex_tanh(__z.__rep()); }
# 955 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    complex<_Tp>
    __complex_pow_unsigned(complex<_Tp> __x, unsigned __n)
    {
      complex<_Tp> __y = __n % 2 ? __x : complex<_Tp>(1);

      while (__n >>= 1)
        {
          __x *= __x;
          if (__n % 2)
            __y *= __x;
        }

      return __y;
    }







  template<typename _Tp>
    inline complex<_Tp>
    pow(const complex<_Tp>& __z, int __n)
    {
      return __n < 0
 ? complex<_Tp>(1) / std::__complex_pow_unsigned(__z, -(unsigned)__n)
        : std::__complex_pow_unsigned(__z, __n);
    }

  template<typename _Tp>
    complex<_Tp>
    pow(const complex<_Tp>& __x, const _Tp& __y)
    {




      if (__x.imag() == _Tp() && __x.real() > _Tp())
        return pow(__x.real(), __y);

      complex<_Tp> __t = std::log(__x);
      return std::polar(exp(__y * __t.real()), __y * __t.imag());
    }

  template<typename _Tp>
    inline complex<_Tp>
    __complex_pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x == _Tp() ? _Tp() : std::exp(__y * std::log(__x)); }


  inline __complex__ float
  __complex_pow(__complex__ float __x, __complex__ float __y)
  { return __builtin_cpowf(__x, __y); }

  inline __complex__ double
  __complex_pow(__complex__ double __x, __complex__ double __y)
  { return __builtin_cpow(__x, __y); }

  inline __complex__ long double
  __complex_pow(const __complex__ long double& __x,
  const __complex__ long double& __y)
  { return __builtin_cpowl(__x, __y); }

  template<typename _Tp>
    inline complex<_Tp>
    pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __complex_pow(__x.__rep(), __y.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    pow(const _Tp& __x, const complex<_Tp>& __y)
    {
      return __x > _Tp() ? std::polar(pow(__x, __y.real()),
          __y.imag() * log(__x))
                  : std::pow(complex<_Tp>(__x), __y);
    }



  template<>
    struct complex<float>
    {
      typedef float value_type;
      typedef __complex__ float _ComplexT;

      constexpr complex(_ComplexT __z) : _M_value(__z) { }

      constexpr complex(float __r = 0.0f, float __i = 0.0f)

      : _M_value{ __r, __i } { }







      explicit constexpr complex(const complex<double>&);
      explicit constexpr complex(const complex<long double>&);




      __attribute ((__abi_tag__ ("cxx11")))
      constexpr float
      real() const { return __real__ _M_value; }

      __attribute ((__abi_tag__ ("cxx11")))
      constexpr float
      imag() const { return __imag__ _M_value; }
# 1089 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
      void
      real(float __val) { __real__ _M_value = __val; }

      void
      imag(float __val) { __imag__ _M_value = __val; }

      complex&
      operator=(float __f)
      {
 _M_value = __f;
 return *this;
      }

      complex&
      operator+=(float __f)
      {
 _M_value += __f;
 return *this;
      }

      complex&
      operator-=(float __f)
      {
 _M_value -= __f;
 return *this;
      }

      complex&
      operator*=(float __f)
      {
 _M_value *= __f;
 return *this;
      }

      complex&
      operator/=(float __f)
      {
 _M_value /= __f;
 return *this;
      }





      template<typename _Tp>
        complex&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
        operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<class _Tp>
        complex&
        operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<class _Tp>
        complex&
        operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<class _Tp>
        complex&
        operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      constexpr _ComplexT __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  template<>
    struct complex<double>
    {
      typedef double value_type;
      typedef __complex__ double _ComplexT;

      constexpr complex(_ComplexT __z) : _M_value(__z) { }

      constexpr complex(double __r = 0.0, double __i = 0.0)

      : _M_value{ __r, __i } { }







      constexpr complex(const complex<float>& __z)
      : _M_value(__z.__rep()) { }

      explicit constexpr complex(const complex<long double>&);




      __attribute ((__abi_tag__ ("cxx11")))
      constexpr double
      real() const { return __real__ _M_value; }

      __attribute ((__abi_tag__ ("cxx11")))
      constexpr double
      imag() const { return __imag__ _M_value; }
# 1240 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
      void
      real(double __val) { __real__ _M_value = __val; }

      void
      imag(double __val) { __imag__ _M_value = __val; }

      complex&
      operator=(double __d)
      {
 _M_value = __d;
 return *this;
      }

      complex&
      operator+=(double __d)
      {
 _M_value += __d;
 return *this;
      }

      complex&
      operator-=(double __d)
      {
 _M_value -= __d;
 return *this;
      }

      complex&
      operator*=(double __d)
      {
 _M_value *= __d;
 return *this;
      }

      complex&
      operator/=(double __d)
      {
 _M_value /= __d;
 return *this;
      }




      template<typename _Tp>
        complex&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
        operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
        operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
        operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<typename _Tp>
        complex&
        operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      constexpr _ComplexT __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  template<>
    struct complex<long double>
    {
      typedef long double value_type;
      typedef __complex__ long double _ComplexT;

      constexpr complex(_ComplexT __z) : _M_value(__z) { }

      constexpr complex(long double __r = 0.0L,
     long double __i = 0.0L)

      : _M_value{ __r, __i } { }







      constexpr complex(const complex<float>& __z)
      : _M_value(__z.__rep()) { }

      constexpr complex(const complex<double>& __z)
      : _M_value(__z.__rep()) { }




      __attribute ((__abi_tag__ ("cxx11")))
      constexpr long double
      real() const { return __real__ _M_value; }

      __attribute ((__abi_tag__ ("cxx11")))
      constexpr long double
      imag() const { return __imag__ _M_value; }
# 1392 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
      void
      real(long double __val) { __real__ _M_value = __val; }

      void
      imag(long double __val) { __imag__ _M_value = __val; }

      complex&
      operator=(long double __r)
      {
 _M_value = __r;
 return *this;
      }

      complex&
      operator+=(long double __r)
      {
 _M_value += __r;
 return *this;
      }

      complex&
      operator-=(long double __r)
      {
 _M_value -= __r;
 return *this;
      }

      complex&
      operator*=(long double __r)
      {
 _M_value *= __r;
 return *this;
      }

      complex&
      operator/=(long double __r)
      {
 _M_value /= __r;
 return *this;
      }




      template<typename _Tp>
        complex&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
 operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
 operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
 operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<typename _Tp>
        complex&
 operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      constexpr _ComplexT __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  inline constexpr
  complex<float>::complex(const complex<double>& __z)
  : _M_value(__z.__rep()) { }

  inline constexpr
  complex<float>::complex(const complex<long double>& __z)
  : _M_value(__z.__rep()) { }

  inline constexpr
  complex<double>::complex(const complex<long double>& __z)
  : _M_value(__z.__rep()) { }





  extern template istream& operator>>(istream&, complex<float>&);
  extern template ostream& operator<<(ostream&, const complex<float>&);
  extern template istream& operator>>(istream&, complex<double>&);
  extern template ostream& operator<<(ostream&, const complex<double>&);
  extern template istream& operator>>(istream&, complex<long double>&);
  extern template ostream& operator<<(ostream&, const complex<long double>&);


  extern template wistream& operator>>(wistream&, complex<float>&);
  extern template wostream& operator<<(wostream&, const complex<float>&);
  extern template wistream& operator>>(wistream&, complex<double>&);
  extern template wostream& operator<<(wostream&, const complex<double>&);
  extern template wistream& operator>>(wistream&, complex<long double>&);
  extern template wostream& operator<<(wostream&, const complex<long double>&);






}

namespace __gnu_cxx
{



  template<typename _Tp, typename _Up>
    struct __promote_2<std::complex<_Tp>, _Up>
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };

  template<typename _Tp, typename _Up>
    struct __promote_2<_Tp, std::complex<_Up> >
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };

  template<typename _Tp, typename _Up>
    struct __promote_2<std::complex<_Tp>, std::complex<_Up> >
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };


}



namespace std
{



  template<typename _Tp> std::complex<_Tp> acos(const std::complex<_Tp>&);
  template<typename _Tp> std::complex<_Tp> asin(const std::complex<_Tp>&);
  template<typename _Tp> std::complex<_Tp> atan(const std::complex<_Tp>&);

  template<typename _Tp> std::complex<_Tp> acosh(const std::complex<_Tp>&);
  template<typename _Tp> std::complex<_Tp> asinh(const std::complex<_Tp>&);
  template<typename _Tp> std::complex<_Tp> atanh(const std::complex<_Tp>&);

  template<typename _Tp> _Tp fabs(const std::complex<_Tp>&);

  template<typename _Tp>
    inline std::complex<_Tp>
    __complex_acos(const std::complex<_Tp>& __z)
    {
      const std::complex<_Tp> __t = std::asin(__z);
      const _Tp __pi_2 = 1.5707963267948966192313216916397514L;
      return std::complex<_Tp>(__pi_2 - __t.real(), -__t.imag());
    }


  inline __complex__ float
  __complex_acos(__complex__ float __z)
  { return __builtin_cacosf(__z); }

  inline __complex__ double
  __complex_acos(__complex__ double __z)
  { return __builtin_cacos(__z); }

  inline __complex__ long double
  __complex_acos(const __complex__ long double& __z)
  { return __builtin_cacosl(__z); }

  template<typename _Tp>
    inline std::complex<_Tp>
    acos(const std::complex<_Tp>& __z)
    { return __complex_acos(__z.__rep()); }
# 1613 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    inline std::complex<_Tp>
    __complex_asin(const std::complex<_Tp>& __z)
    {
      std::complex<_Tp> __t(-__z.imag(), __z.real());
      __t = std::asinh(__t);
      return std::complex<_Tp>(__t.imag(), -__t.real());
    }


  inline __complex__ float
  __complex_asin(__complex__ float __z)
  { return __builtin_casinf(__z); }

  inline __complex__ double
  __complex_asin(__complex__ double __z)
  { return __builtin_casin(__z); }

  inline __complex__ long double
  __complex_asin(const __complex__ long double& __z)
  { return __builtin_casinl(__z); }

  template<typename _Tp>
    inline std::complex<_Tp>
    asin(const std::complex<_Tp>& __z)
    { return __complex_asin(__z.__rep()); }
# 1649 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    std::complex<_Tp>
    __complex_atan(const std::complex<_Tp>& __z)
    {
      const _Tp __r2 = __z.real() * __z.real();
      const _Tp __x = _Tp(1.0) - __r2 - __z.imag() * __z.imag();

      _Tp __num = __z.imag() + _Tp(1.0);
      _Tp __den = __z.imag() - _Tp(1.0);

      __num = __r2 + __num * __num;
      __den = __r2 + __den * __den;

      return std::complex<_Tp>(_Tp(0.5) * atan2(_Tp(2.0) * __z.real(), __x),
          _Tp(0.25) * log(__num / __den));
    }


  inline __complex__ float
  __complex_atan(__complex__ float __z)
  { return __builtin_catanf(__z); }

  inline __complex__ double
  __complex_atan(__complex__ double __z)
  { return __builtin_catan(__z); }

  inline __complex__ long double
  __complex_atan(const __complex__ long double& __z)
  { return __builtin_catanl(__z); }

  template<typename _Tp>
    inline std::complex<_Tp>
    atan(const std::complex<_Tp>& __z)
    { return __complex_atan(__z.__rep()); }
# 1693 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    std::complex<_Tp>
    __complex_acosh(const std::complex<_Tp>& __z)
    {

      return _Tp(2.0) * std::log(std::sqrt(_Tp(0.5) * (__z + _Tp(1.0)))
     + std::sqrt(_Tp(0.5) * (__z - _Tp(1.0))));
    }


  inline __complex__ float
  __complex_acosh(__complex__ float __z)
  { return __builtin_cacoshf(__z); }

  inline __complex__ double
  __complex_acosh(__complex__ double __z)
  { return __builtin_cacosh(__z); }

  inline __complex__ long double
  __complex_acosh(const __complex__ long double& __z)
  { return __builtin_cacoshl(__z); }

  template<typename _Tp>
    inline std::complex<_Tp>
    acosh(const std::complex<_Tp>& __z)
    { return __complex_acosh(__z.__rep()); }
# 1729 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    std::complex<_Tp>
    __complex_asinh(const std::complex<_Tp>& __z)
    {
      std::complex<_Tp> __t((__z.real() - __z.imag())
       * (__z.real() + __z.imag()) + _Tp(1.0),
       _Tp(2.0) * __z.real() * __z.imag());
      __t = std::sqrt(__t);

      return std::log(__t + __z);
    }


  inline __complex__ float
  __complex_asinh(__complex__ float __z)
  { return __builtin_casinhf(__z); }

  inline __complex__ double
  __complex_asinh(__complex__ double __z)
  { return __builtin_casinh(__z); }

  inline __complex__ long double
  __complex_asinh(const __complex__ long double& __z)
  { return __builtin_casinhl(__z); }

  template<typename _Tp>
    inline std::complex<_Tp>
    asinh(const std::complex<_Tp>& __z)
    { return __complex_asinh(__z.__rep()); }
# 1768 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    std::complex<_Tp>
    __complex_atanh(const std::complex<_Tp>& __z)
    {
      const _Tp __i2 = __z.imag() * __z.imag();
      const _Tp __x = _Tp(1.0) - __i2 - __z.real() * __z.real();

      _Tp __num = _Tp(1.0) + __z.real();
      _Tp __den = _Tp(1.0) - __z.real();

      __num = __i2 + __num * __num;
      __den = __i2 + __den * __den;

      return std::complex<_Tp>(_Tp(0.25) * (log(__num) - log(__den)),
          _Tp(0.5) * atan2(_Tp(2.0) * __z.imag(), __x));
    }


  inline __complex__ float
  __complex_atanh(__complex__ float __z)
  { return __builtin_catanhf(__z); }

  inline __complex__ double
  __complex_atanh(__complex__ double __z)
  { return __builtin_catanh(__z); }

  inline __complex__ long double
  __complex_atanh(const __complex__ long double& __z)
  { return __builtin_catanhl(__z); }

  template<typename _Tp>
    inline std::complex<_Tp>
    atanh(const std::complex<_Tp>& __z)
    { return __complex_atanh(__z.__rep()); }
# 1812 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    inline _Tp



    fabs(const std::complex<_Tp>& __z)
    { return std::abs(__z); }


  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    arg(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;

      return std::signbit(__x) ? __type(3.1415926535897932384626433832795029L)
                        : __type();



    }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    imag(_Tp)
    { return _Tp(); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    norm(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __type(__x) * __type(__x);
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    real(_Tp __x)
    { return __x; }

  template<typename _Tp, typename _Up>
    inline std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type>
    pow(const std::complex<_Tp>& __x, const _Up& __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return std::pow(std::complex<__type>(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    inline std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type>
    pow(const _Tp& __x, const std::complex<_Up>& __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return std::pow(__type(__x), std::complex<__type>(__y));
    }

  template<typename _Tp, typename _Up>
    inline std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type>
    pow(const std::complex<_Tp>& __x, const std::complex<_Up>& __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return std::pow(std::complex<__type>(__x),
        std::complex<__type>(__y));
    }



  template<typename _Tp> std::complex<_Tp> proj(const std::complex<_Tp>&);

  template<typename _Tp>
    std::complex<_Tp>
    __complex_proj(const std::complex<_Tp>& __z)
    {
      const _Tp __den = (__z.real() * __z.real()
    + __z.imag() * __z.imag() + _Tp(1.0));

      return std::complex<_Tp>((_Tp(2.0) * __z.real()) / __den,
          (_Tp(2.0) * __z.imag()) / __den);
    }


  inline __complex__ float
  __complex_proj(__complex__ float __z)
  { return __builtin_cprojf(__z); }

  inline __complex__ double
  __complex_proj(__complex__ double __z)
  { return __builtin_cproj(__z); }

  inline __complex__ long double
  __complex_proj(const __complex__ long double& __z)
  { return __builtin_cprojl(__z); }

  template<typename _Tp>
    inline std::complex<_Tp>
    proj(const std::complex<_Tp>& __z)
    { return __complex_proj(__z.__rep()); }
# 1917 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    proj(_Tp __x)
    { return __x; }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    conj(_Tp __x)
    { return __x; }
# 1964 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\complex" 3
}
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-cmplx.h" 2

typedef std::complex<double> Complex;
typedef std::complex<float> FloatComplex;
# 100 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-cmplx.h"
template <typename T> inline bool operator > (const std::complex<T>& a, const std::complex<T>& b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T ay = std::arg (a); volatile const T by = std::arg (b); if (ay == static_cast<T> (-3.14159265358979323846)) { if (by != static_cast<T> (-3.14159265358979323846)) return static_cast<T> (3.14159265358979323846) > by; } else if (by == static_cast<T> (-3.14159265358979323846)) { return ay > static_cast<T> (3.14159265358979323846); } return ay > by; } else return ax > bx; } template <typename T> inline bool operator > (const std::complex<T>& a, T b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T ay = std::arg (a); if (ay == static_cast<T> (-3.14159265358979323846)) return static_cast<T> (3.14159265358979323846) > 0; return ay > 0; } else return ax > bx; } template <typename T> inline bool operator > (T a, const std::complex<T>& b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T by = std::arg (b); if (by == static_cast<T> (-3.14159265358979323846)) return 0 > static_cast<T> (3.14159265358979323846); return 0 > by; } else return ax > bx; }
template <typename T> inline bool operator < (const std::complex<T>& a, const std::complex<T>& b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T ay = std::arg (a); volatile const T by = std::arg (b); if (ay == static_cast<T> (-3.14159265358979323846)) { if (by != static_cast<T> (-3.14159265358979323846)) return static_cast<T> (3.14159265358979323846) < by; } else if (by == static_cast<T> (-3.14159265358979323846)) { return ay < static_cast<T> (3.14159265358979323846); } return ay < by; } else return ax < bx; } template <typename T> inline bool operator < (const std::complex<T>& a, T b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T ay = std::arg (a); if (ay == static_cast<T> (-3.14159265358979323846)) return static_cast<T> (3.14159265358979323846) < 0; return ay < 0; } else return ax < bx; } template <typename T> inline bool operator < (T a, const std::complex<T>& b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T by = std::arg (b); if (by == static_cast<T> (-3.14159265358979323846)) return 0 < static_cast<T> (3.14159265358979323846); return 0 < by; } else return ax < bx; }
template <typename T> inline bool operator <= (const std::complex<T>& a, const std::complex<T>& b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T ay = std::arg (a); volatile const T by = std::arg (b); if (ay == static_cast<T> (-3.14159265358979323846)) { if (by != static_cast<T> (-3.14159265358979323846)) return static_cast<T> (3.14159265358979323846) <= by; } else if (by == static_cast<T> (-3.14159265358979323846)) { return ay <= static_cast<T> (3.14159265358979323846); } return ay <= by; } else return ax < bx; } template <typename T> inline bool operator <= (const std::complex<T>& a, T b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T ay = std::arg (a); if (ay == static_cast<T> (-3.14159265358979323846)) return static_cast<T> (3.14159265358979323846) <= 0; return ay <= 0; } else return ax < bx; } template <typename T> inline bool operator <= (T a, const std::complex<T>& b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T by = std::arg (b); if (by == static_cast<T> (-3.14159265358979323846)) return 0 <= static_cast<T> (3.14159265358979323846); return 0 <= by; } else return ax < bx; }
template <typename T> inline bool operator >= (const std::complex<T>& a, const std::complex<T>& b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T ay = std::arg (a); volatile const T by = std::arg (b); if (ay == static_cast<T> (-3.14159265358979323846)) { if (by != static_cast<T> (-3.14159265358979323846)) return static_cast<T> (3.14159265358979323846) >= by; } else if (by == static_cast<T> (-3.14159265358979323846)) { return ay >= static_cast<T> (3.14159265358979323846); } return ay >= by; } else return ax > bx; } template <typename T> inline bool operator >= (const std::complex<T>& a, T b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T ay = std::arg (a); if (ay == static_cast<T> (-3.14159265358979323846)) return static_cast<T> (3.14159265358979323846) >= 0; return ay >= 0; } else return ax > bx; } template <typename T> inline bool operator >= (T a, const std::complex<T>& b) { volatile const T ax = std::abs (a); volatile const T bx = std::abs (b); if (ax == bx) { volatile const T by = std::arg (b); if (by == static_cast<T> (-3.14159265358979323846)) return 0 >= static_cast<T> (3.14159265358979323846); return 0 >= by; } else return ax > bx; }
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-utils.h" 2



template <typename F, typename T, bool zero>
bool
any_all_test (F fcn, const T *m, octave_idx_type len)
{
  octave_idx_type i;

  for (i = 0; i < len - 3; i += 4)
    {
      octave_quit ();

      if (fcn (m[i]) != zero
          || fcn (m[i+1]) != zero
          || fcn (m[i+2]) != zero
          || fcn (m[i+3]) != zero)
        return ! zero;
    }

  octave_quit ();

  for (; i < len; i++)
    if (fcn (m[i]) != zero)
      return ! zero;

  return zero;
}

extern bool xis_int_or_inf_or_nan (double x);
extern bool xis_one_or_zero (double x);
extern bool xis_zero (double x);
extern bool xtoo_large_for_float (double x);

extern bool xtoo_large_for_float (const Complex& x);

extern bool xis_int_or_inf_or_nan (float x);
extern bool xis_one_or_zero (float x);
extern bool xis_zero (float x);
extern bool xtoo_large_for_float (float x);

extern char *strsave (const char *);

extern void
octave_putenv (const std::string&, const std::string&);

extern std::string octave_fgets (std::FILE *);
extern std::string octave_fgetl (std::FILE *);

extern std::string octave_fgets (std::FILE *, bool& eof);
extern std::string octave_fgetl (std::FILE *, bool& eof);

template <typename T>
T
octave_read_value (std::istream& is)
{
  T retval;
  is >> retval;
  return retval;
}

template <> double octave_read_value (std::istream& is);
template <> Complex octave_read_value (std::istream& is);
template <> float octave_read_value (std::istream& is);
template <> FloatComplex octave_read_value (std::istream& is);


inline double
octave_read_double (std::istream& is)
{
  return octave_read_value<double> (is);
}

inline Complex
octave_read_complex (std::istream& is)
{
  return octave_read_value<Complex> (is);
}

inline float
octave_read_float (std::istream& is)
{
  return octave_read_value<float> (is);
}

inline FloatComplex
octave_read_float_complex (std::istream& is)
{
  return octave_read_value<FloatComplex> (is);
}

extern void
octave_write_double (std::ostream& os, double dval);

extern void
octave_write_complex (std::ostream& os, const Complex& cval);

extern void
octave_write_float (std::ostream& os, float dval);

extern void
octave_write_float_complex (std::ostream& os, const FloatComplex& cval);
# 42 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-sort.h" 1
# 105 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-sort.h"
enum sortmode { UNSORTED = 0, ASCENDING, DESCENDING };

template <typename T>
class
octave_sort
{
public:

  typedef bool (*compare_fcn_type) (typename ref_param<T>::type,
                                    typename ref_param<T>::type);

  octave_sort (void);

  octave_sort (compare_fcn_type);

  ~octave_sort (void);

  void set_compare (compare_fcn_type comp) { compare = comp; }

  void set_compare (sortmode mode);


  void sort (T *data, octave_idx_type nel);


  void sort (T *data, octave_idx_type *idx, octave_idx_type nel);


  bool is_sorted (const T *data, octave_idx_type nel);



  void sort_rows (const T *data, octave_idx_type *idx,
                  octave_idx_type rows, octave_idx_type cols);


  bool is_sorted_rows (const T *data,
                       octave_idx_type rows, octave_idx_type cols);


  octave_idx_type lookup (const T *data, octave_idx_type nel,
                          const T& value);


  void lookup (const T *data, octave_idx_type nel,
               const T* values, octave_idx_type nvalues,
               octave_idx_type *idx);



  void lookup_sorted (const T *data, octave_idx_type nel,
                      const T* values, octave_idx_type nvalues,
                      octave_idx_type *idx, bool rev = false);



  void nth_element (T *data, octave_idx_type nel,
                    octave_idx_type lo, octave_idx_type up = -1);

  static bool ascending_compare (typename ref_param<T>::type,
                                 typename ref_param<T>::type);

  static bool descending_compare (typename ref_param<T>::type,
                                  typename ref_param<T>::type);

private:
# 180 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-sort.h"
  struct s_slice
  {
    octave_idx_type base, len;
  };

  struct MergeState
  {
    MergeState (void)
      : min_gallop (), a (0), ia (0), alloced (0), n (0)
    { reset (); }

    ~MergeState (void)
    { delete [] a; delete [] ia; }

    void reset (void)
    { min_gallop = 7; n = 0; }

    void getmem (octave_idx_type need);

    void getmemi (octave_idx_type need);





    octave_idx_type min_gallop;



    T *a;
    octave_idx_type *ia;
    octave_idx_type alloced;
# 221 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-sort.h"
    octave_idx_type n;
    struct s_slice pending[85];



    MergeState (const MergeState&);

    MergeState& operator = (const MergeState&);
  };

  compare_fcn_type compare;

  MergeState *ms;

  template <typename Comp>
  void binarysort (T *data, octave_idx_type nel,
                   octave_idx_type start, Comp comp);

  template <typename Comp>
  void binarysort (T *data, octave_idx_type *idx, octave_idx_type nel,
                   octave_idx_type start, Comp comp);

  template <typename Comp>
  octave_idx_type count_run (T *lo, octave_idx_type n, bool& descending,
                             Comp comp);

  template <typename Comp>
  octave_idx_type gallop_left (T key, T *a, octave_idx_type n,
                               octave_idx_type hint, Comp comp);

  template <typename Comp>
  octave_idx_type gallop_right (T key, T *a, octave_idx_type n,
                                octave_idx_type hint, Comp comp);

  template <typename Comp>
  int merge_lo (T *pa, octave_idx_type na,
                T *pb, octave_idx_type nb,
                Comp comp);

  template <typename Comp>
  int merge_lo (T *pa, octave_idx_type *ipa, octave_idx_type na,
                T *pb, octave_idx_type *ipb, octave_idx_type nb,
                Comp comp);

  template <typename Comp>
  int merge_hi (T *pa, octave_idx_type na,
                T *pb, octave_idx_type nb,
                Comp comp);

  template <typename Comp>
  int merge_hi (T *pa, octave_idx_type *ipa, octave_idx_type na,
                T *pb, octave_idx_type *ipb, octave_idx_type nb,
                Comp comp);

  template <typename Comp>
  int merge_at (octave_idx_type i, T *data, Comp comp);

  template <typename Comp>
  int merge_at (octave_idx_type i, T *data, octave_idx_type *idx, Comp comp);

  template <typename Comp>
  int merge_collapse (T *data, Comp comp);

  template <typename Comp>
  int merge_collapse (T *data, octave_idx_type *idx, Comp comp);

  template <typename Comp>
  int merge_force_collapse (T *data, Comp comp);

  template <typename Comp>
  int merge_force_collapse (T *data, octave_idx_type *idx, Comp comp);

  octave_idx_type merge_compute_minrun (octave_idx_type n);

  template <typename Comp>
  void sort (T *data, octave_idx_type nel, Comp comp);

  template <typename Comp>
  void sort (T *data, octave_idx_type *idx, octave_idx_type nel, Comp comp);

  template <typename Comp>
  bool is_sorted (const T *data, octave_idx_type nel, Comp comp);

  template <typename Comp>
  void sort_rows (const T *data, octave_idx_type *idx,
                  octave_idx_type rows, octave_idx_type cols,
                  Comp comp);

  template <typename Comp>
  bool is_sorted_rows (const T *data, octave_idx_type rows,
                       octave_idx_type cols, Comp comp);

  template <typename Comp>
  octave_idx_type lookup (const T *data, octave_idx_type nel,
                          const T& value, Comp comp);

  template <typename Comp>
  void lookup (const T *data, octave_idx_type nel,
               const T* values, octave_idx_type nvalues,
               octave_idx_type *idx, Comp comp);

  template <typename Comp>
  void lookup_sorted (const T *data, octave_idx_type nel,
                      const T* values, octave_idx_type nvalues,
                      octave_idx_type *idx, bool rev, Comp comp);

  template <typename Comp>
  void nth_element (T *data, octave_idx_type nel,
                    octave_idx_type lo, octave_idx_type up,
                    Comp comp);



  octave_sort (const octave_sort&);

  octave_sort& operator = (const octave_sort&);
};

template <typename T>
class
vec_index
{
public:
  T vec;
  octave_idx_type indx;
};
# 43 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h" 2
# 125 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h"
template <typename T>
class
Array
{
protected:


  class ArrayRep
  {
  public:

    T *data;
    octave_idx_type len;
    octave_refcount<int> count;

    ArrayRep (T *d, octave_idx_type l)
      : data (new T [l]), len (l), count (1)
    {
      std::copy (d, d+l, data);
    }

    template <typename U>
    ArrayRep (U *d, octave_idx_type l)
      : data (new T [l]), len (l), count (1)
    {
      std::copy (d, d+l, data);
    }

    ArrayRep (void) : data (0), len (0), count (1) { }

    explicit ArrayRep (octave_idx_type n)
      : data (new T [n]), len (n), count (1) { }

    explicit ArrayRep (octave_idx_type n, const T& val)
      : data (new T [n]), len (n), count (1)
    {
      std::fill_n (data, n, val);
    }

    ArrayRep (const ArrayRep& a)
      : data (new T [a.len]), len (a.len), count (1)
    {
      std::copy (a.data, a.data + a.len, data);
    }

    ~ArrayRep (void) { delete [] data; }

    octave_idx_type numel (void) const { return len; }

  private:



    ArrayRep& operator = (const ArrayRep& a);
  };



public:

  void make_unique (void)
  {
    if (rep->count > 1)
      {
        ArrayRep *r = new ArrayRep (slice_data, slice_len);

        if (--rep->count == 0)
          delete rep;

        rep = r;
        slice_data = rep->data;
      }
  }

  typedef T element_type;

  typedef T value_type;



  typedef octave_idx_type size_type;

  typedef typename ref_param<T>::type crefT;

  typedef bool (*compare_fcn_type) (typename ref_param<T>::type,
                                    typename ref_param<T>::type);

protected:

  dim_vector dimensions;

  typename Array<T>::ArrayRep *rep;
# 225 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h"
  T* slice_data;
  octave_idx_type slice_len;


  Array (const Array<T>& a, const dim_vector& dv,
         octave_idx_type l, octave_idx_type u)
    : dimensions (dv), rep(a.rep), slice_data (a.slice_data+l), slice_len (u-l)
  {
    rep->count++;
    dimensions.chop_trailing_singletons ();
  }

private:

  static typename Array<T>::ArrayRep *nil_rep (void);

protected:


  Array (T *sdata, octave_idx_type slen, octave_idx_type *adims, void *arep)
    : dimensions (adims),
      rep (reinterpret_cast<typename Array<T>::ArrayRep *> (arep)),
      slice_data (sdata), slice_len (slen) { }

public:


  Array (void)
    : dimensions (), rep (nil_rep ()), slice_data (rep->data),
      slice_len (rep->len)
  {
    rep->count++;
  }


  explicit Array (const dim_vector& dv)
    : dimensions (dv),
      rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
      slice_data (rep->data), slice_len (rep->len)
  {
    dimensions.chop_trailing_singletons ();
  }


  explicit Array (const dim_vector& dv, const T& val)
    : dimensions (dv),
      rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
      slice_data (rep->data), slice_len (rep->len)
  {
    fill (val);
    dimensions.chop_trailing_singletons ();
  }


  Array (const Array<T>& a, const dim_vector& dv);


  template<template <typename...> class Container>
  Array (const Container<T>& a, const dim_vector& dv);


  template <typename U>
  Array (const Array<U>& a)
    : dimensions (a.dims ()),
      rep (new typename Array<T>::ArrayRep (a.data (), a.numel ())),
      slice_data (rep->data), slice_len (rep->len)
  { }


  Array (const Array<T>& a)
    : dimensions (a.dimensions), rep (a.rep), slice_data (a.slice_data),
      slice_len (a.slice_len)
  {
    rep->count++;
  }

public:

  virtual ~Array (void)
  {
    if (--rep->count == 0)
      delete rep;
  }

  Array<T>& operator = (const Array<T>& a)
  {
    if (this != &a)
      {
        if (--rep->count == 0)
          delete rep;

        rep = a.rep;
        rep->count++;

        dimensions = a.dimensions;
        slice_data = a.slice_data;
        slice_len = a.slice_len;
      }

    return *this;
  }

  void fill (const T& val);

  void clear (void);
  void clear (const dim_vector& dv);

  void clear (octave_idx_type r, octave_idx_type c)
  { clear (dim_vector (r, c)); }






  __attribute__ ((__deprecated__))
  octave_idx_type capacity (void) const { return numel (); }
# 353 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h"
  __attribute__ ((__deprecated__))
  octave_idx_type length (void) const { return numel (); }




  __attribute__ ((__deprecated__))
  octave_idx_type nelem (void) const { return numel (); }


  octave_idx_type numel (void) const { return slice_len; }



  Array<T> as_column (void) const
  {
    Array<T> retval (*this);
    if (dimensions.ndims () != 2 || dimensions(1) != 1)
      retval.dimensions = dim_vector (numel (), 1);

    return retval;
  }


  Array<T> as_row (void) const
  {
    Array<T> retval (*this);
    if (dimensions.ndims () != 2 || dimensions(0) != 1)
      retval.dimensions = dim_vector (1, numel ());

    return retval;
  }


  Array<T> as_matrix (void) const
  {
    Array<T> retval (*this);
    if (dimensions.ndims () != 2)
      retval.dimensions = dimensions.redim (2);

    return retval;
  }





  octave_idx_type dim1 (void) const { return dimensions(0); }
  octave_idx_type rows (void) const { return dim1 (); }






  octave_idx_type dim2 (void) const { return dimensions(1); }
  octave_idx_type cols (void) const { return dim2 (); }
  octave_idx_type columns (void) const { return dim2 (); }






  octave_idx_type dim3 (void) const { return dimensions(2); }
  octave_idx_type pages (void) const { return dim3 (); }
# 428 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h"
  size_type size (const size_type d) const
  {


    return d >= ndims () ? 1 : dimensions(d);
  }

  size_t byte_size (void) const
  { return static_cast<size_t> (numel ()) * sizeof (T); }


  const dim_vector& dims (void) const { return dimensions; }


  Array<T> squeeze (void) const;

  octave_idx_type compute_index (octave_idx_type i, octave_idx_type j) const;
  octave_idx_type compute_index (octave_idx_type i, octave_idx_type j,
                                 octave_idx_type k) const;
  octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;

  octave_idx_type compute_index_unchecked (const Array<octave_idx_type>& ra_idx)
  const
  { return dimensions.compute_index (ra_idx.data (), ra_idx.numel ()); }



  T& xelem (octave_idx_type n) { return slice_data[n]; }
  crefT xelem (octave_idx_type n) const { return slice_data[n]; }

  T& xelem (octave_idx_type i, octave_idx_type j)
  { return xelem (dim1 ()*j+i); }
  crefT xelem (octave_idx_type i, octave_idx_type j) const
  { return xelem (dim1 ()*j+i); }

  T& xelem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
  { return xelem (i, dim2 ()*k+j); }
  crefT xelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
  { return xelem (i, dim2 ()*k+j); }

  T& xelem (const Array<octave_idx_type>& ra_idx)
  { return xelem (compute_index_unchecked (ra_idx)); }

  crefT xelem (const Array<octave_idx_type>& ra_idx) const
  { return xelem (compute_index_unchecked (ra_idx)); }




  T& checkelem (octave_idx_type n);
  T& checkelem (octave_idx_type i, octave_idx_type j);
  T& checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k);
  T& checkelem (const Array<octave_idx_type>& ra_idx);

  T& elem (octave_idx_type n)
  {
    make_unique ();
    return xelem (n);
  }

  T& elem (octave_idx_type i, octave_idx_type j) { return elem (dim1 ()*j+i); }

  T& elem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
  { return elem (i, dim2 ()*k+j); }

  T& elem (const Array<octave_idx_type>& ra_idx)
  { return Array<T>::elem (compute_index_unchecked (ra_idx)); }
# 505 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h"
  T& operator () (octave_idx_type n) { return elem (n); }
  T& operator () (octave_idx_type i, octave_idx_type j) { return elem (i, j); }
  T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k)
  { return elem (i, j, k); }
  T& operator () (const Array<octave_idx_type>& ra_idx)
  { return elem (ra_idx); }


  crefT checkelem (octave_idx_type n) const;
  crefT checkelem (octave_idx_type i, octave_idx_type j) const;
  crefT checkelem (octave_idx_type i, octave_idx_type j,
                   octave_idx_type k) const;
  crefT checkelem (const Array<octave_idx_type>& ra_idx) const;

  crefT elem (octave_idx_type n) const { return xelem (n); }

  crefT elem (octave_idx_type i, octave_idx_type j) const
  { return xelem (i, j); }

  crefT elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
  { return xelem (i, j, k); }

  crefT elem (const Array<octave_idx_type>& ra_idx) const
  { return Array<T>::xelem (compute_index_unchecked (ra_idx)); }
# 540 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h"
  crefT operator () (octave_idx_type n) const { return elem (n); }
  crefT operator () (octave_idx_type i, octave_idx_type j) const
  { return elem (i, j); }
  crefT operator () (octave_idx_type i, octave_idx_type j,
                     octave_idx_type k) const
  { return elem (i, j, k); }
  crefT operator () (const Array<octave_idx_type>& ra_idx) const
  { return elem (ra_idx); }







  Array<T> column (octave_idx_type k) const;

  Array<T> page (octave_idx_type k) const;



  Array<T> linear_slice (octave_idx_type lo, octave_idx_type up) const;

  Array<T> reshape (octave_idx_type nr, octave_idx_type nc) const
  { return Array<T> (*this, dim_vector (nr, nc)); }

  Array<T> reshape (const dim_vector& new_dims) const
  { return Array<T> (*this, new_dims); }

  Array<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const;
  Array<T> ipermute (const Array<octave_idx_type>& vec) const
  { return permute (vec, true); }

  bool is_square (void) const { return (dim1 () == dim2 ()); }

  bool is_empty (void) const { return numel () == 0; }

  bool is_vector (void) const { return dimensions.is_vector (); }

  Array<T> transpose (void) const;
  Array<T> hermitian (T (*fcn) (const T&) = 0) const;

  const T *data (void) const { return slice_data; }

  const T *fortran_vec (void) const { return data (); }

  T *fortran_vec (void);

  bool is_shared (void) { return rep->count > 1; }

  int ndims (void) const { return dimensions.ndims (); }



  Array<T> index (const idx_vector& i) const;

  Array<T> index (const idx_vector& i, const idx_vector& j) const;

  Array<T> index (const Array<idx_vector>& ia) const;


  virtual T resize_fill_value (void) const;



  void resize2 (octave_idx_type nr, octave_idx_type nc, const T& rfv);
  void resize2 (octave_idx_type nr, octave_idx_type nc)
  {
    resize2 (nr, nc, resize_fill_value ());
  }

  void resize1 (octave_idx_type n, const T& rfv);
  void resize1 (octave_idx_type n) { resize1 (n, resize_fill_value ()); }

  void resize (const dim_vector& dv, const T& rfv);
  void resize (const dim_vector& dv) { resize (dv, resize_fill_value ()); }
# 624 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array.h"
  Array<T> index (const idx_vector& i, bool resize_ok, const T& rfv) const;
  Array<T> index (const idx_vector& i, bool resize_ok) const
  {
    return index (i, resize_ok, resize_fill_value ());
  }

  Array<T> index (const idx_vector& i, const idx_vector& j, bool resize_ok,
                  const T& rfv) const;
  Array<T> index (const idx_vector& i, const idx_vector& j,
                  bool resize_ok) const
  {
    return index (i, j, resize_ok, resize_fill_value ());
  }

  Array<T> index (const Array<idx_vector>& ia, bool resize_ok,
                  const T& rfv) const;
  Array<T> index (const Array<idx_vector>& ia, bool resize_ok) const
  {
    return index (ia, resize_ok, resize_fill_value ());
  }




  void assign (const idx_vector& i, const Array<T>& rhs, const T& rfv);
  void assign (const idx_vector& i, const Array<T>& rhs)
  {
    assign (i, rhs, resize_fill_value ());
  }

  void assign (const idx_vector& i, const idx_vector& j, const Array<T>& rhs,
               const T& rfv);
  void assign (const idx_vector& i, const idx_vector& j, const Array<T>& rhs)
  {
    assign (i, j, rhs, resize_fill_value ());
  }

  void assign (const Array<idx_vector>& ia, const Array<T>& rhs, const T& rfv);
  void assign (const Array<idx_vector>& ia, const Array<T>& rhs)
  {
    assign (ia, rhs, resize_fill_value ());
  }






  void delete_elements (const idx_vector& i);


  void delete_elements (int dim, const idx_vector& i);


  void delete_elements (const Array<idx_vector>& ia);






  Array<T>& insert (const Array<T>& a, const Array<octave_idx_type>& idx);


  Array<T>& insert (const Array<T>& a, octave_idx_type r, octave_idx_type c);

  void maybe_economize (void)
  {
    if (rep->count == 1 && slice_len != rep->len)
      {
        ArrayRep *new_rep = new ArrayRep (slice_data, slice_len);
        delete rep;
        rep = new_rep;
        slice_data = rep->data;
      }
  }

  void print_info (std::ostream& os, const std::string& prefix) const;




  void *mex_get_data (void) const { return const_cast<T *> (data ()); }

  Array<T> sort (int dim = 0, sortmode mode = ASCENDING) const;
  Array<T> sort (Array<octave_idx_type> &sidx, int dim = 0,
                 sortmode mode = ASCENDING) const;


  sortmode is_sorted (sortmode mode = UNSORTED) const;


  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;


  sortmode is_sorted_rows (sortmode mode = UNSORTED) const;



  octave_idx_type lookup (const T& value, sortmode mode = UNSORTED) const;



  Array<octave_idx_type> lookup (const Array<T>& values,
                                 sortmode mode = UNSORTED) const;


  octave_idx_type nnz (void) const;



  Array<octave_idx_type> find (octave_idx_type n = -1,
                               bool backward = false) const;




  Array<T> nth_element (const idx_vector& n, int dim = 0) const;



  Array<T> diag (octave_idx_type k = 0) const;

  Array<T> diag (octave_idx_type m, octave_idx_type n) const;





  static Array<T>
  cat (int dim, octave_idx_type n, const Array<T> *array_list);



  template <typename U, typename F>
  Array<U>
  map (F fcn) const
  {
    octave_idx_type len = numel ();

    const T *m = data ();

    Array<U> result (dims ());
    U *p = result.fortran_vec ();

    octave_idx_type i;
    for (i = 0; i < len - 3; i += 4)
      {
        octave_quit ();

        p[i] = fcn (m[i]);
        p[i+1] = fcn (m[i+1]);
        p[i+2] = fcn (m[i+2]);
        p[i+3] = fcn (m[i+3]);
      }

    octave_quit ();

    for (; i < len; i++)
      p[i] = fcn (m[i]);

    return result;
  }



  template <typename U>
  Array<U>
  map (U (&fcn) (T)) const
  { return map<U, U (&) (T)> (fcn); }

  template <typename U>
  Array<U>
  map (U (&fcn) (const T&)) const
  { return map<U, U (&) (const T&)> (fcn); }



  template <typename F, bool zero>
  bool test (F fcn) const
  {
    return any_all_test<F, T, zero> (fcn, data (), numel ());
  }



  template <typename F>
  bool test_any (F fcn) const
  { return test<F, false> (fcn); }

  template <typename F>
  bool test_all (F fcn) const
  { return test<F, true> (fcn); }




  bool test_any (bool (&fcn) (T)) const
  { return test<bool (&) (T), false> (fcn); }

  bool test_any (bool (&fcn) (const T&)) const
  { return test<bool (&) (const T&), false> (fcn); }

  bool test_all (bool (&fcn) (T)) const
  { return test<bool (&) (T), true> (fcn); }

  bool test_all (bool (&fcn) (const T&)) const
  { return test<bool (&) (const T&), true> (fcn); }


  template <typename U> friend class Array;




  bool optimize_dimensions (const dim_vector& dv);




  int *jit_ref_count (void) { return rep->count.get (); }

  T *jit_slice_data (void) const { return slice_data; }

  octave_idx_type *jit_dimensions (void) const { return dimensions.to_jit (); }

  void *jit_array_rep (void) const { return rep; }


private:
  static void instantiation_guard ();
};




template<typename T>
template<template <typename...> class Container>
Array<T>::Array (const Container<T>& a, const dim_vector& dv)
  : dimensions (dv), rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
    slice_data (rep->data), slice_len (rep->len)
{
  if (dimensions.safe_numel () != octave_idx_type (a.size ()))
    {
      std::string new_dims_str = dimensions.str ();

      (*current_liboctave_error_handler)
        ("reshape: can't reshape %i elements into %s array",
         a.size (), new_dims_str.c_str ());
    }

  octave_idx_type i = 0;
  for (const T& x : a)
    slice_data[i++] = x;

  dimensions.chop_trailing_singletons ();
}






template <typename ArrayClass>
class NoAlias : public ArrayClass
{
  typedef typename ArrayClass::element_type T;
public:
  NoAlias () : ArrayClass () { }


  template <typename X>
    explicit NoAlias (X x) : ArrayClass (x) { }

  template <typename X, typename Y>
    explicit NoAlias (X x, Y y) : ArrayClass (x, y) { }

  template <typename X, typename Y, typename Z>
    explicit NoAlias (X x, Y y, Z z) : ArrayClass (x, y, z) { }

  T& operator () (octave_idx_type n)
  { return ArrayClass::xelem (n); }
  T& operator () (octave_idx_type i, octave_idx_type j)
  { return ArrayClass::xelem (i, j); }
  T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k)
  { return ArrayClass::xelem (i, j, k); }
  T& operator () (const Array<octave_idx_type>& ra_idx)
  { return ArrayClass::xelem (ra_idx); }
};

template <typename T>
std::ostream&
operator << (std::ostream& os, const Array<T>& a);
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse.h" 2






class idx_vector;
class PermMatrix;




template <typename T>
class
Sparse
{
public:

  typedef T element_type;

protected:




  class SparseRep
  {
  public:

    T *d;
    octave_idx_type *r;
    octave_idx_type *c;
    octave_idx_type nzmx;
    octave_idx_type nrows;
    octave_idx_type ncols;
    octave_refcount<int> count;

    SparseRep (void)
      : d (0), r (0), c (new octave_idx_type [1]), nzmx (0), nrows (0),
        ncols (0), count (1)
    {
      c[0] = 0;
    }

    SparseRep (octave_idx_type n)
      : d (0), r (0), c (new octave_idx_type [n+1]), nzmx (0), nrows (n),
        ncols (n), count (1)
    {
      for (octave_idx_type i = 0; i < n + 1; i++)
        c[i] = 0;
    }

    SparseRep (octave_idx_type nr, octave_idx_type nc, octave_idx_type nz = 0)
      : d (nz > 0 ? new T [nz] : 0),
        r (nz > 0 ? new octave_idx_type [nz] : 0),
        c (new octave_idx_type [nc+1]), nzmx (nz), nrows (nr),
        ncols (nc), count (1)
    {
      for (octave_idx_type i = 0; i < nc + 1; i++)
        c[i] = 0;
    }

    SparseRep (const SparseRep& a)
      : d (new T [a.nzmx]), r (new octave_idx_type [a.nzmx]),
        c (new octave_idx_type [a.ncols + 1]),
        nzmx (a.nzmx), nrows (a.nrows), ncols (a.ncols), count (1)
    {
      octave_idx_type nz = a.nnz ();
      std::copy (a.d, a.d + nz, d);
      std::copy (a.r, a.r + nz, r);
      std::copy (a.c, a.c + ncols + 1, c);
    }

    ~SparseRep (void) { delete [] d; delete [] r; delete [] c; }

    octave_idx_type length (void) const { return nzmx; }

    octave_idx_type nnz (void) const { return c[ncols]; }

    T& elem (octave_idx_type _r, octave_idx_type _c);

    T celem (octave_idx_type _r, octave_idx_type _c) const;

    T& data (octave_idx_type i) { return d[i]; }

    T cdata (octave_idx_type i) const { return d[i]; }

    octave_idx_type& ridx (octave_idx_type i) { return r[i]; }

    octave_idx_type cridx (octave_idx_type i) const { return r[i]; }

    octave_idx_type& cidx (octave_idx_type i) { return c[i]; }

    octave_idx_type ccidx (octave_idx_type i) const { return c[i]; }

    void maybe_compress (bool remove_zeros);

    void change_length (octave_idx_type nz);

    bool indices_ok (void) const;

    bool any_element_is_nan (void) const;

  private:



    SparseRep& operator = (const SparseRep& a);
  };



  void make_unique (void)
  {
    if (rep->count > 1)
      {
        SparseRep *r = new SparseRep (*rep);

        if (--rep->count == 0)
          delete rep;

        rep = r;
      }
  }

public:




  typename Sparse<T>::SparseRep *rep;

  dim_vector dimensions;

private:

  static typename Sparse<T>::SparseRep *nil_rep (void);

public:

  Sparse (void)
    : rep (nil_rep ()), dimensions (dim_vector(0,0))
  {
    rep->count++;
  }

  explicit Sparse (octave_idx_type n)
    : rep (new typename Sparse<T>::SparseRep (n)),
      dimensions (dim_vector (n, n)) { }

  explicit Sparse (octave_idx_type nr, octave_idx_type nc)
    : rep (new typename Sparse<T>::SparseRep (nr, nc)),
      dimensions (dim_vector (nr, nc)) { }

  explicit Sparse (octave_idx_type nr, octave_idx_type nc, T val);

  Sparse (const dim_vector& dv, octave_idx_type nz)
    : rep (new typename Sparse<T>::SparseRep (dv(0), dv(1), nz)),
      dimensions (dv) { }

  Sparse (octave_idx_type nr, octave_idx_type nc, octave_idx_type nz)
    : rep (new typename Sparse<T>::SparseRep (nr, nc, nz)),
      dimensions (dim_vector (nr, nc)) { }



  explicit Sparse (const PermMatrix& a);


  template <typename U>
  Sparse (const Sparse<U>& a)
    : rep (new typename Sparse<T>::SparseRep (a.rep->nrows, a.rep->ncols,
           a.rep->nzmx)),
    dimensions (a.dimensions)
  {
    octave_idx_type nz = a.nnz ();
    std::copy (a.rep->d, a.rep->d + nz, rep->d);
    std::copy (a.rep->r, a.rep->r + nz, rep->r);
    std::copy (a.rep->c, a.rep->c + rep->ncols + 1, rep->c);
  }


  Sparse (const Sparse<T>& a)
    : rep (a.rep), dimensions (a.dimensions)
  {
    rep->count++;
  }

public:

  Sparse (const dim_vector& dv);

  Sparse (const Sparse<T>& a, const dim_vector& dv);

  Sparse (const Array<T>& a, const idx_vector& r, const idx_vector& c,
          octave_idx_type nr = -1, octave_idx_type nc = -1,
          bool sum_terms = true, octave_idx_type nzm = -1);


  Sparse (const Array<T>& a);

  virtual ~Sparse (void);

  Sparse<T>& operator = (const Sparse<T>& a);



  octave_idx_type nzmax (void) const { return rep->length (); }



  __attribute__ ((__deprecated__))
  octave_idx_type capacity (void) const { return nzmax (); }


  octave_idx_type nnz (void) const { return rep->nnz (); }



  octave_idx_type numel (void) const
  {
    return dimensions.safe_numel ();
  }

  __attribute__ ((__deprecated__))
  octave_idx_type nelem (void) const { return nzmax (); }

  __attribute__ ((__deprecated__))
  octave_idx_type length (void) const { return numel (); }

  octave_idx_type dim1 (void) const { return dimensions(0); }
  octave_idx_type dim2 (void) const { return dimensions(1); }

  octave_idx_type rows (void) const { return dim1 (); }
  octave_idx_type cols (void) const { return dim2 (); }
  octave_idx_type columns (void) const { return dim2 (); }

  octave_idx_type get_row_index (octave_idx_type k) { return ridx (k); }
  octave_idx_type get_col_index (octave_idx_type k)
  {
    octave_idx_type ret = 0;
    while (cidx (ret+1) < k)
      ret++;
    return ret;
  }

  size_t byte_size (void) const
  {
    return (static_cast<size_t>(cols () + 1) * sizeof (octave_idx_type)
            + static_cast<size_t> (nzmax ())
            * (sizeof (T) + sizeof (octave_idx_type)));
  }

  dim_vector dims (void) const { return dimensions; }

  Sparse<T> squeeze (void) const { return *this; }

  octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;

  __attribute__ ((__noreturn__)) T range_error (const char *fcn, octave_idx_type n) const;
  __attribute__ ((__noreturn__)) T& range_error (const char *fcn, octave_idx_type n);

  __attribute__ ((__noreturn__)) T range_error (const char *fcn,
                                 octave_idx_type i, octave_idx_type j) const;
  __attribute__ ((__noreturn__)) T& range_error (const char *fcn,
                                  octave_idx_type i, octave_idx_type j);

  __attribute__ ((__noreturn__)) T range_error (const char *fcn,
                                 const Array<octave_idx_type>& ra_idx) const;
  __attribute__ ((__noreturn__)) T& range_error (const char *fcn,
                                  const Array<octave_idx_type>& ra_idx);



  T& xelem (octave_idx_type n)
  {
    octave_idx_type i = n % rows ();
    octave_idx_type j = n / rows ();
    return xelem (i, j);
  }

  T xelem (octave_idx_type n) const
  {
    octave_idx_type i = n % rows ();
    octave_idx_type j = n / rows ();
    return xelem (i, j);
  }

  T& xelem (octave_idx_type i, octave_idx_type j) { return rep->elem (i, j); }
  T xelem (octave_idx_type i, octave_idx_type j) const
  {
    return rep->celem (i, j);
  }

  T& xelem (const Array<octave_idx_type>& ra_idx)
  { return xelem (compute_index (ra_idx)); }

  T xelem (const Array<octave_idx_type>& ra_idx) const
  { return xelem (compute_index (ra_idx)); }





  T& checkelem (octave_idx_type n)
  {
    if (n < 0 || n >= numel ())
      return range_error ("T& Sparse<T>::checkelem", n);
    else
      {
        make_unique ();
        return xelem (n);
      }
  }

  T& checkelem (octave_idx_type i, octave_idx_type j)
  {
    if (i < 0 || j < 0 || i >= dim1 () || j >= dim2 ())
      return range_error ("T& Sparse<T>::checkelem", i, j);
    else
      {
        make_unique ();
        return xelem (i, j);
      }
  }

  T& checkelem (const Array<octave_idx_type>& ra_idx)
  {
    octave_idx_type i = compute_index (ra_idx);

    if (i < 0)
      return range_error ("T& Sparse<T>::checkelem", ra_idx);
    else
      return elem (i);
  }

  T& elem (octave_idx_type n)
  {
    make_unique ();
    return xelem (n);
  }

  T& elem (octave_idx_type i, octave_idx_type j)
  {
    make_unique ();
    return xelem (i, j);
  }

  T& elem (const Array<octave_idx_type>& ra_idx)
  { return Sparse<T>::elem (compute_index (ra_idx)); }
# 406 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse.h"
  T& operator () (octave_idx_type n)
  {
    return elem (n);
  }

  T& operator () (octave_idx_type i, octave_idx_type j)
  {
    return elem (i, j);
  }

  T& operator () (const Array<octave_idx_type>& ra_idx)
  {
    return elem (ra_idx);
  }



  T checkelem (octave_idx_type n) const
  {
    if (n < 0 || n >= numel ())
      return range_error ("T Sparse<T>::checkelem", n);
    else
      return xelem (n);
  }

  T checkelem (octave_idx_type i, octave_idx_type j) const
  {
    if (i < 0 || j < 0 || i >= dim1 () || j >= dim2 ())
      return range_error ("T Sparse<T>::checkelem", i, j);
    else
      return xelem (i, j);
  }

  T checkelem (const Array<octave_idx_type>& ra_idx) const
  {
    octave_idx_type i = compute_index (ra_idx);

    if (i < 0)
      return range_error ("T Sparse<T>::checkelem", ra_idx);
    else
      return Sparse<T>::elem (i);
  }

  T elem (octave_idx_type n) const { return xelem (n); }

  T elem (octave_idx_type i, octave_idx_type j) const { return xelem (i, j); }

  T elem (const Array<octave_idx_type>& ra_idx) const
  { return Sparse<T>::elem (compute_index (ra_idx)); }
# 469 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse.h"
  T operator () (octave_idx_type n) const { return elem (n); }
  T operator () (octave_idx_type i, octave_idx_type j) const
  {
    return elem (i, j);
  }

  T operator () (const Array<octave_idx_type>& ra_idx) const
  {
    return elem (ra_idx);
  }


  Sparse<T> maybe_compress (bool remove_zeros = false)
  {
    if (remove_zeros)
      make_unique ();

    rep->maybe_compress (remove_zeros);
    return (*this);
  }

  Sparse<T> reshape (const dim_vector& new_dims) const;

  Sparse<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const;

  Sparse<T> ipermute (const Array<octave_idx_type>& vec) const
  {
    return permute (vec, true);
  }

  void resize1 (octave_idx_type n);

  void resize (octave_idx_type r, octave_idx_type c);

  void resize (const dim_vector& dv);

  void change_capacity (octave_idx_type nz)
  {
    if (nz < nnz ())
      make_unique ();
    rep->change_length (nz);
  }

  Sparse<T>& insert (const Sparse<T>& a, octave_idx_type r, octave_idx_type c);
  Sparse<T>& insert (const Sparse<T>& a, const Array<octave_idx_type>& idx);

  bool is_square (void) const { return (dim1 () == dim2 ()); }

  bool is_empty (void) const { return (rows () < 1 && cols () < 1); }

  Sparse<T> transpose (void) const;

  T* data (void) { make_unique (); return rep->d; }
  T& data (octave_idx_type i) { make_unique (); return rep->data (i); }
  T* xdata (void) { return rep->d; }
  T& xdata (octave_idx_type i) { return rep->data (i); }

  T data (octave_idx_type i) const { return rep->data (i); }

  T* data (void) const { return rep->d; }

  octave_idx_type* ridx (void) { make_unique (); return rep->r; }
  octave_idx_type& ridx (octave_idx_type i)
  {
    make_unique (); return rep->ridx (i);
  }

  octave_idx_type* xridx (void) { return rep->r; }
  octave_idx_type& xridx (octave_idx_type i) { return rep->ridx (i); }

  octave_idx_type ridx (octave_idx_type i) const { return rep->cridx (i); }

  octave_idx_type* ridx (void) const { return rep->r; }

  octave_idx_type* cidx (void) { make_unique (); return rep->c; }
  octave_idx_type& cidx (octave_idx_type i)
  {
    make_unique (); return rep->cidx (i);
  }

  octave_idx_type* xcidx (void) { return rep->c; }
  octave_idx_type& xcidx (octave_idx_type i) { return rep->cidx (i); }

  octave_idx_type cidx (octave_idx_type i) const { return rep->ccidx (i); }

  octave_idx_type* cidx (void) const { return rep->c; }

  octave_idx_type ndims (void) const { return dimensions.ndims (); }

  void delete_elements (const idx_vector& i);

  void delete_elements (int dim, const idx_vector& i);

  void delete_elements (const idx_vector& i, const idx_vector& j);

  Sparse<T> index (const idx_vector& i, bool resize_ok = false) const;

  Sparse<T> index (const idx_vector& i, const idx_vector& j,
                   bool resize_ok = false) const;

  void assign (const idx_vector& i, const Sparse<T>& rhs);

  void assign (const idx_vector& i, const idx_vector& j, const Sparse<T>& rhs);

  void print_info (std::ostream& os, const std::string& prefix) const;



  void *mex_get_data (void) const { return const_cast<T *> (data ()); }

  octave_idx_type *mex_get_ir (void) const
  {
    return const_cast<octave_idx_type *> (ridx ());
  }

  octave_idx_type *mex_get_jc (void) const
  {
    return const_cast<octave_idx_type *> (cidx ());
  }

  Sparse<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
  Sparse<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                  sortmode mode = ASCENDING) const;

  Sparse<T> diag (octave_idx_type k = 0) const;


  static Sparse<T>
  cat (int dim, octave_idx_type n, const Sparse<T> *sparse_list);

  Array<T> array_value (void) const;


  template <typename F, bool zero>
  bool test (F fcn) const
  {
    return any_all_test<F, T, zero> (fcn, data (), nnz ());
  }


  template <typename F>
  bool test_any (F fcn) const
  { return test<F, false> (fcn); }

  template <typename F>
  bool test_all (F fcn) const
  { return test<F, true> (fcn); }


  bool test_any (bool (&fcn) (T)) const
  { return test<bool (&) (T), false> (fcn); }

  bool test_any (bool (&fcn) (const T&)) const
  { return test<bool (&) (const T&), false> (fcn); }

  bool test_all (bool (&fcn) (T)) const
  { return test<bool (&) (T), true> (fcn); }

  bool test_all (bool (&fcn) (const T&)) const
  { return test<bool (&) (const T&), true> (fcn); }

  template <typename U, typename F>
  Sparse<U>
  map (F fcn) const
  {
    Sparse<U> result;
    U f_zero = fcn (0.);

    if (f_zero != 0.)
      {
        octave_idx_type nr = rows ();
        octave_idx_type nc = cols ();

        result = Sparse<U> (nr, nc, f_zero);

        for (octave_idx_type j = 0; j < nc; j++)
          for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
            {
              octave_quit ();

              result.data (ridx (i) + j * nr) = fcn (data (i));
            }

        result.maybe_compress (true);
      }
    else
      {
        octave_idx_type nz = nnz ();
        octave_idx_type nr = rows ();
        octave_idx_type nc = cols ();

        result = Sparse<U> (nr, nc, nz);
        octave_idx_type ii = 0;
        result.cidx (ii) = 0;

        for (octave_idx_type j = 0; j < nc; j++)
          {
            for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
              {
                U val = fcn (data (i));
                if (val != 0.0)
                  {
                    result.data (ii) = val;
                    result.ridx (ii++) = ridx (i);
                  }
                octave_quit ();
              }
            result.cidx (j+1) = ii;
          }

        result.maybe_compress (false);
      }

    return result;
  }


  template <typename U>
  Sparse<U>
  map (U (&fcn) (T)) const
  { return map<U, U (&) (T)> (fcn); }

  template <typename U>
  Sparse<U>
  map (U (&fcn) (const T&)) const
  { return map<U, U (&) (const T&)> (fcn); }

  bool indices_ok (void) const { return rep->indices_ok (); }

  bool any_element_is_nan (void) const
  { return rep->any_element_is_nan (); }
};

template <typename T>
std::istream&
read_sparse_matrix (std::istream& is, Sparse<T>& a,
                    T (*read_fcn) (std::istream&));
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MArray.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MArray.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc" 2
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstring" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstring" 3
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc" 2





# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-locbuf.h" 1
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-locbuf.h"
template <typename T>
class octave_local_buffer
{
public:
  octave_local_buffer (size_t size)
    : data (0)
  {
    if (size)
      data = new T [size];
  }

  ~octave_local_buffer (void) { delete [] data; }

  operator T *() const { return data; }

private:
  T *data;


  octave_local_buffer (const octave_local_buffer&);
  octave_local_buffer& operator = (const octave_local_buffer&);
};
# 71 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-locbuf.h"
class octave_chunk_buffer
{
public:

             octave_chunk_buffer (size_t size);

             virtual ~octave_chunk_buffer (void);

  char *data (void) const { return dat; }

  static void clear (void);

private:



  static const size_t chunk_size;


  static char *top;


  static char *chunk;


  static size_t left;


  static size_t active;


  char *cnk;


  char *dat;


  octave_chunk_buffer (const octave_chunk_buffer&);
  octave_chunk_buffer& operator = (const octave_chunk_buffer&);
};
# 128 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-locbuf.h"
template <> class octave_local_buffer<bool> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (bool)) { } operator bool *() const { return reinterpret_cast<bool *> (this->data ()); } };
template <> class octave_local_buffer<char> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (char)) { } operator char *() const { return reinterpret_cast<char *> (this->data ()); } };
template <> class octave_local_buffer<unsigned short> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (unsigned short)) { } operator unsigned short *() const { return reinterpret_cast<unsigned short *> (this->data ()); } };
template <> class octave_local_buffer<short> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (short)) { } operator short *() const { return reinterpret_cast<short *> (this->data ()); } };
template <> class octave_local_buffer<int> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (int)) { } operator int *() const { return reinterpret_cast<int *> (this->data ()); } };
template <> class octave_local_buffer<unsigned int> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (unsigned int)) { } operator unsigned int *() const { return reinterpret_cast<unsigned int *> (this->data ()); } };
template <> class octave_local_buffer<long> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (long)) { } operator long *() const { return reinterpret_cast<long *> (this->data ()); } };
template <> class octave_local_buffer<unsigned long> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (unsigned long)) { } operator unsigned long *() const { return reinterpret_cast<unsigned long *> (this->data ()); } };
template <> class octave_local_buffer<float> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (float)) { } operator float *() const { return reinterpret_cast<float *> (this->data ()); } };
template <> class octave_local_buffer<double> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (double)) { } operator double *() const { return reinterpret_cast<double *> (this->data ()); } };

template <> class octave_local_buffer<Complex> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (Complex)) { } operator Complex *() const { return reinterpret_cast<Complex *> (this->data ()); } };
template <> class octave_local_buffer<FloatComplex> : private octave_chunk_buffer { public: octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (FloatComplex)) { } operator FloatComplex *() const { return reinterpret_cast<FloatComplex *> (this->data ()); } };



template <typename T>
class octave_local_buffer<T *> : private octave_chunk_buffer
{
public:
  octave_local_buffer (size_t size)
    : octave_chunk_buffer (size * sizeof (T *))
  { }

  operator T **() const { return reinterpret_cast<T **> (this->data ()); }
};

template <typename T>
class octave_local_buffer<const T *> : private octave_chunk_buffer
{
public:
  octave_local_buffer (size_t size)
    : octave_chunk_buffer (size * sizeof (const T *))
  { }

  operator const T **() const
  {
    return reinterpret_cast<const T **> (this->data ());
  }
};
# 41 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h" 2




# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-math.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-math.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-math.h" 2
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-mappers.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-mappers.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-ieee.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-ieee.h"
extern "C" {
# 53 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-ieee.h"
typedef union
{
  double value;
  unsigned int word[2];
} lo_ieee_double;

typedef union
{
  float value;
  unsigned int word;
} lo_ieee_float;







extern void octave_ieee_init (void);

extern int __lo_ieee_isnan (double x);
extern int __lo_ieee_finite (double x);
extern int __lo_ieee_isinf (double x);

extern int __lo_ieee_is_NA (double);
extern int __lo_ieee_is_old_NA (double);
extern double __lo_ieee_replace_old_NA (double);

extern double lo_ieee_inf_value (void);
extern double lo_ieee_na_value (void);
extern double lo_ieee_nan_value (void);

extern int __lo_ieee_signbit (double);

extern int __lo_ieee_float_isnan (float x);
extern int __lo_ieee_float_finite (float x);
extern int __lo_ieee_float_isinf (float x);

extern int __lo_ieee_float_is_NA (float);

extern float lo_ieee_float_inf_value (void);
extern float lo_ieee_float_na_value (void);
extern float lo_ieee_float_nan_value (void);

extern int __lo_ieee_float_signbit (float);


}
# 129 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-ieee.h"
namespace octave
{
  template <typename T>
  struct numeric_limits
  {
    static T NA (void) { return static_cast<T> (0); }
    static T NaN (void) { return static_cast<T> (0); }
    static T Inf (void) { return static_cast<T> (0); }
  };

  template <>
  struct numeric_limits<double>
  {
    static double NA (void) { return (lo_ieee_na_value ()); }
    static double NaN (void) { return (lo_ieee_nan_value ()); }
    static double Inf (void) { return (lo_ieee_inf_value ()); }
  };

  template <>
  struct numeric_limits<float>
  {
    static float NA (void) { return (lo_ieee_float_na_value ()); }
    static float NaN (void) { return (lo_ieee_float_nan_value ()); }
    static float Inf (void) { return (lo_ieee_float_inf_value ()); }
  };
}
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-mappers.h" 2

namespace octave
{
  namespace math
  {
    extern bool is_NA (double x);
    extern bool is_NA (float x);

    extern bool is_NA (const Complex& x);
    extern bool is_NA (const FloatComplex& x);

    extern bool is_NaN_or_NA (const Complex& x);
    extern bool is_NaN_or_NA (const FloatComplex& x);

    extern double copysign (double x, double y);
    extern float copysign (float x, float y);

    extern double signbit (double x);
    extern float signbit (float x);


    extern bool negative_sign (double x);
    extern bool negative_sign (float x);


    inline bool positive_sign (double x) { return ! negative_sign (x); }
    inline bool positive_sign (float x) { return ! negative_sign (x); }

    extern Complex acos (const Complex& x);
    extern FloatComplex acos (const FloatComplex& x);

    using std::acos;

    extern Complex asin (const Complex& x);
    extern FloatComplex asin (const FloatComplex& x);

    using std::asin;

    extern Complex atan (const Complex& x);
    extern FloatComplex atan (const FloatComplex& x);

    using std::atan;






    inline double arg (double x) { return signbit (x) ? 3.14159265358979323846 : 0; }
    inline float arg (float x) { return signbit (x) ? 3.14159265358979323846 : 0; }

    template <typename T>
    T
    arg (const std::complex<T>& x)
    {
      return std::arg (x);
    }

    inline double conj (double x) { return x; }
    inline float conj (float x) { return x; }

    template <typename T>
    std::complex<T>
    conj (const std::complex<T>& x)
    {
      return std::conj (x);
    }

    inline double imag (double) { return 0; }
    inline float imag (float) { return 0; }

    template <typename T>
    T
    imag (const std::complex<T>& x)
    {
      return std::imag (x);
    }

    inline double real (double x) { return x; }
    inline float real (float x) { return x; }

    template <typename T>
    T
    real (const std::complex<T>& x)
    {
      return std::real (x);
    }

    extern double log2 (double x);
    extern float log2 (float x);

    extern Complex log2 (const Complex& x);
    extern FloatComplex log2 (const FloatComplex& x);

    extern double log2 (double x, int& exp);
    extern float log2 (float x, int& exp);

    extern Complex log2 (const Complex& x, int& exp);
    extern FloatComplex log2 (const FloatComplex& x, int& exp);

    extern double exp2 (double x);
    extern float exp2 (float x);

    inline double ceil (double x) { return ::ceil (x); }
    inline float ceil (float x) { return ::ceilf (x); }

    template <typename T>
    std::complex<T>
    ceil (const std::complex<T>& x)
    {
      return std::complex<T> (ceil (std::real (x)), ceil (std::imag (x)));
    }

    extern double trunc (double x);
    extern float trunc (float x);

    template <typename T>
    std::complex<T>
    trunc (const std::complex<T>& x)
    {
      return std::complex<T> (trunc (std::real (x)), trunc (std::imag (x)));
    }

    inline double fix (double x) { return trunc (x); }
    inline float fix (float x) { return trunc (x); }

    template <typename T>
    std::complex<T>
    fix (const std::complex<T>& x)
    {
      return trunc (x);
    }

    extern double floor (double x);
    extern float floor (float x);

    template <typename T>
    std::complex<T>
    floor (const std::complex<T>& x)
    {
      return std::complex<T> (floor (std::real (x)), floor (std::imag (x)));
    }

    extern double round (double x);
    extern float round (float x);

    template <typename T>
    std::complex<T>
    round (const std::complex<T>& x)
    {
      return std::complex<T> (round (std::real (x)), round (std::imag (x)));
    }

    inline double
    roundb (double x)
    {
      double t = round (x);

      if (fabs (x - t) == 0.5)
        t = 2 * trunc (0.5 * t);

      return t;
    }

    inline float
    roundb (float x)
    {
      float t = round (x);

      if (fabsf (x - t) == 0.5f)
        t = 2 * trunc (0.5f * t);

      return t;
    }

    template <typename T>
    std::complex<T>
    roundb (const std::complex<T>& x)
    {
      return std::complex<T> (roundb (std::real (x)), roundb (std::imag (x)));
    }

    extern double frexp (double x, int *expptr);
    extern float frexp (float x, int *expptr);

    inline bool isnan (bool) { return false; }
    inline bool isnan (char) { return false; }
    extern bool isnan (double x);
    extern bool isnan (float x);

    template <typename T>
    bool
    isnan (const std::complex<T>& x)
    {
      return (isnan (std::real (x)) || isnan (std::imag (x)));
    }

    extern bool finite (double x);
    extern bool finite (float x);

    template <typename T>
    bool
    finite (const std::complex<T>& x)
    {
      return (finite (std::real (x)) && finite (std::imag (x)));
    }

    extern bool isinf (double x);
    extern bool isinf (float x);

    template <typename T>
    bool
    isinf (const std::complex<T>& x)
    {
      return (isinf (std::real (x)) || isinf (std::imag (x)));
    }




    inline bool isinteger (double x) { return finite (x) && x == round (x); }
    inline bool isinteger (float x) { return finite (x) && x == round (x); }

    inline double
    signum (double x)
    {
      double tmp = 0.0;

      if (x < 0.0)
        tmp = -1.0;
      else if (x > 0.0)
        tmp = 1.0;

      return isnan (x) ? octave::numeric_limits<double>::NaN () : tmp;
    }

    inline float
    signum (float x)
    {
      float tmp = 0.0f;

      if (x < 0.0f)
        tmp = -1.0f;
      else if (x > 0.0f)
        tmp = 1.0f;

      return isnan (x) ? octave::numeric_limits<float>::NaN () : tmp;
    }

    template <typename T>
    std::complex<T>
    signum (const std::complex<T>& x)
    {
      T tmp = abs (x);

      return tmp == 0 ? 0.0 : x / tmp;
    }





    template <typename T>
    T
    x_nint (T x)
    {
      return x;
    }

    template <>
    inline double x_nint (double x) { return (finite (x) ? floor (x + 0.5) : x); }
    template <>
    inline float x_nint (float x) { return (finite (x) ? floor (x + 0.5f) : x); }

    extern octave_idx_type nint_big (double x);
    extern octave_idx_type nint_big (float x);

    extern int nint (double x);
    extern int nint (float x);

    template <typename T>
    T
    mod (T x, T y)
    {
      T retval;

      if (y == 0)
        retval = x;
      else
        {
          T q = x / y;

          if (x_nint (y) != y
              && (std::abs ((q - x_nint (q)) / x_nint (q))
                  < std::numeric_limits<T>::epsilon ()))
            retval = 0;
          else
            {
              T n = floor (q);


              volatile T tmp = y * n;

              retval = x - tmp;
            }
        }

      if (x != y && y != 0)
        retval = copysign (retval, y);

      return retval;
    }

    template <typename T>
    T
    rem (T x, T y)
    {
      T retval;

      if (y == 0)
        retval = octave::numeric_limits<T>::NaN ();
      else
        {
          T q = x / y;

          if (x_nint (y) != y
              && (std::abs ((q - x_nint (q)) / x_nint (q))
                  < std::numeric_limits<T>::epsilon ()))
            retval = 0;
          else
            {
              T n = trunc (q);


              volatile T tmp = y * n;

              retval = x - tmp;
            }
        }

      if (x != y && y != 0)
        retval = copysign (retval, x);

      return retval;
    }


    template <typename T>
    T
    min (T x, T y)
    {
      return x <= y ? x : y;
    }

    template <typename T>
    T
    max (T x, T y)
    {
      return x >= y ? x : y;
    }





    inline double
    min (double x, double y)
    {
      return isnan (y) ? x : (x <= y ? x : y);
    }

    inline double
    max (double x, double y)
    {
      return isnan (y) ? x : (x >= y ? x : y);
    }

    inline float
    min (float x, float y)
    {
      return isnan (y) ? x : (x <= y ? x : y);
    }

    inline float
    max (float x, float y)
    {
      return isnan (y) ? x : (x >= y ? x : y);
    }

    inline std::complex<double>
    min (const std::complex<double>& x, const std::complex<double>& y)
    {
      return abs (x) <= abs (y) ? x : (isnan (x) ? x : y);
    }

    inline std::complex<float>
    min (const std::complex<float>& x, const std::complex<float>& y)
    {
      return abs (x) <= abs (y) ? x : (isnan (x) ? x : y);
    }

    inline std::complex<double>
    max (const std::complex<double>& x, const std::complex<double>& y)
    {
      return abs (x) >= abs (y) ? x : (isnan (x) ? x : y);
    }

    inline std::complex<float>
    max (const std::complex<float>& x, const std::complex<float>& y)
    {
      return abs (x) >= abs (y) ? x : (isnan (x) ? x : y);
    }

    template <typename T>
    inline octave_int<T>
    min (const octave_int<T>& x, const octave_int<T>& y)
    {
      return xmin (x, y);
    }

    template <typename T>
    inline octave_int<T>
    max (const octave_int<T>& x, const octave_int<T>& y)
    {
      return xmax (x, y);
    }



    extern Complex rc_acos (double);
    extern FloatComplex rc_acos (float);

    extern Complex rc_acosh (double);
    extern FloatComplex rc_acosh (float);

    extern Complex rc_asin (double);
    extern FloatComplex rc_asin (float);

    extern Complex rc_atanh (double);
    extern FloatComplex rc_atanh (float);

    extern Complex rc_log (double);
    extern FloatComplex rc_log (float);

    extern Complex rc_log2 (double);
    extern FloatComplex rc_log2 (float);

    extern Complex rc_log10 (double);
    extern FloatComplex rc_log10 (float);

    extern Complex rc_sqrt (double);
    extern FloatComplex rc_sqrt (float);
  }
}



__attribute__ ((__deprecated__))
inline bool octave_is_NA (double x) { return octave::math::is_NA (x); }
__attribute__ ((__deprecated__))
inline bool octave_is_NA (float x) { return octave::math::is_NA (x); }
__attribute__ ((__deprecated__))
inline bool octave_is_NA (const Complex& x) { return octave::math::is_NA (x); }
__attribute__ ((__deprecated__))
inline bool octave_is_NA (const FloatComplex& x) { return octave::math::is_NA (x); }

__attribute__ ((__deprecated__))
inline bool octave_is_NaN_or_NA (const Complex& x) { return octave::math::is_NaN_or_NA (x); }
__attribute__ ((__deprecated__))
inline bool octave_is_NaN_or_NA (const FloatComplex& x) { return octave::math::is_NaN_or_NA (x); }

__attribute__ ((__deprecated__))
inline Complex acos (const Complex& x) { return octave::math::acos (x); }
__attribute__ ((__deprecated__))
inline FloatComplex acos (const FloatComplex& x) { return octave::math::acos (x); }

__attribute__ ((__deprecated__))
inline Complex asin (const Complex& x) { return octave::math::asin (x); }
__attribute__ ((__deprecated__))
inline FloatComplex asin (const FloatComplex& x) { return octave::math::asin (x); }

__attribute__ ((__deprecated__))
inline Complex atan (const Complex& x) { return octave::math::atan (x); }
__attribute__ ((__deprecated__))
inline FloatComplex atan (const FloatComplex& x) { return octave::math::atan (x); }

__attribute__ ((__deprecated__))
inline double arg (double x) { return octave::math::arg (x); }
__attribute__ ((__deprecated__))
inline float arg (float x) { return octave::math::arg (x); }

__attribute__ ((__deprecated__))
inline double conj (double x) { return x; }
__attribute__ ((__deprecated__))
inline float conj (float x) { return x; }

__attribute__ ((__deprecated__))
inline double imag (double x) { return octave::math::imag (x); }
__attribute__ ((__deprecated__))
inline float imag (float x) { return octave::math::imag (x); }

__attribute__ ((__deprecated__))
inline double real (double x) { return octave::math::real (x); }
__attribute__ ((__deprecated__))
inline float real (float x) { return octave::math::real (x); }

__attribute__ ((__deprecated__))
inline double xlog2 (double x) { return octave::math::log2 (x); }
__attribute__ ((__deprecated__))
inline float xlog2 (float x) { return octave::math::log2 (x); }

__attribute__ ((__deprecated__))
inline Complex xlog2 (const Complex& x) { return octave::math::log2 (x); }
__attribute__ ((__deprecated__))
inline FloatComplex xlog2 (const FloatComplex& x) { return octave::math::log2 (x); }

__attribute__ ((__deprecated__))
inline double xlog2 (double x, int& exp) { return octave::math::log2 (x, exp); }
__attribute__ ((__deprecated__))
inline float xlog2 (float x, int& exp) { return octave::math::log2 (x, exp); }

__attribute__ ((__deprecated__))
inline Complex xlog2 (const Complex& x, int& exp) { return octave::math::log2 (x, exp); }
__attribute__ ((__deprecated__))
inline FloatComplex xlog2 (const FloatComplex& x, int& exp) { return octave::math::log2 (x, exp); }

__attribute__ ((__deprecated__))
inline double xexp2 (double x) { return octave::math::exp2 (x); }
__attribute__ ((__deprecated__))
inline float xexp2 (float x) { return octave::math::exp2 (x); }

__attribute__ ((__deprecated__))
inline double xceil (double x) { return octave::math::ceil (x); }
__attribute__ ((__deprecated__))
inline float xceil (float x) { return octave::math::ceil (x); }

template <typename T>
__attribute__ ((__deprecated__))
std::complex<T>
ceil (const std::complex<T>& x)
{
  return octave::math::ceil (x);
}

__attribute__ ((__deprecated__))
inline double xcopysign (double x, double y) { return octave::math::copysign (x, y); }
__attribute__ ((__deprecated__))
inline float xcopysign (float x, float y) { return octave::math::copysign (x, y); }

template <typename T>
__attribute__ ((__deprecated__))
T
xsignbit (T x)
{
  return octave::math::signbit (x);
}

__attribute__ ((__deprecated__))
inline bool xnegative_sign (double x) { return octave::math::negative_sign (x); }
__attribute__ ((__deprecated__))
inline bool xnegative_sign (float x) { return octave::math::negative_sign (x); }

__attribute__ ((__deprecated__))
inline bool xpositive_sign (double x) { return octave::math::positive_sign (x); }
__attribute__ ((__deprecated__))
inline bool xpositive_sign (float x) { return octave::math::positive_sign (x); }

__attribute__ ((__deprecated__))
inline double signum (double x) { return octave::math::signum (x); }
__attribute__ ((__deprecated__))
inline float signum (float x) { return octave::math::signum (x); }

template <typename T>
__attribute__ ((__deprecated__))
std::complex<T>
signum (const std::complex<T>& x)
{
  return octave::math::signum (x);
}

__attribute__ ((__deprecated__))
inline double xtrunc (double x) { return octave::math::trunc (x); }
__attribute__ ((__deprecated__))
inline float xtrunc (float x) { return octave::math::trunc (x); }

template <typename T>
__attribute__ ((__deprecated__))
std::complex<T>
xtrunc (const std::complex<T>& x)
{
  return octave::math::trunc (x);
}

__attribute__ ((__deprecated__))
inline double fix (double x) { return octave::math::fix (x); }
__attribute__ ((__deprecated__))
inline float fix (float x) { return octave::math::fix (x); }

template <typename T>
__attribute__ ((__deprecated__))
std::complex<T>
fix (const std::complex<T>& x)
{
  return octave::math::fix (x);
}

__attribute__ ((__deprecated__))
inline double xfloor (double x) { return octave::math::floor (x); }
__attribute__ ((__deprecated__))
inline float xfloor (float x) { return octave::math::floor (x); }

template <typename T>
__attribute__ ((__deprecated__))
std::complex<T>
floor (const std::complex<T>& x)
{
  return octave::math::floor (x);
}

__attribute__ ((__deprecated__))
inline double xround (double x) { return octave::math::round (x); }
__attribute__ ((__deprecated__))
inline float xround (float x) { return octave::math::round (x); }

template <typename T>
__attribute__ ((__deprecated__))
std::complex<T>
xround (const std::complex<T>& x)
{
  return octave::math::round (x);
}

__attribute__ ((__deprecated__))
inline double xroundb (double x) { return octave::math::roundb (x); }
__attribute__ ((__deprecated__))
inline float xroundb (float x) { return octave::math::roundb (x); }

template <typename T>
__attribute__ ((__deprecated__))
std::complex<T>
xroundb (const std::complex<T>& x)
{
  return octave::math::roundb (x);
}

__attribute__ ((__deprecated__))
inline bool xisnan (bool x) { return octave::math::isnan (x); }
__attribute__ ((__deprecated__))
inline bool xisnan (char x) { return octave::math::isnan (x); }
__attribute__ ((__deprecated__))
inline bool xisnan (double x) { return octave::math::isnan (x); }
__attribute__ ((__deprecated__))
inline bool xisnan (float x) { return octave::math::isnan (x); }

template <typename T>
__attribute__ ((__deprecated__))
bool
xisnan (const std::complex<T>& x)
{
  return octave::math::isnan (x);
}

__attribute__ ((__deprecated__))
inline bool xfinite (double x) { return octave::math::finite (x); }
__attribute__ ((__deprecated__))
inline bool xfinite (float x) { return octave::math::finite (x); }

template <typename T>
__attribute__ ((__deprecated__))
bool
xfinite (const std::complex<T>& x)
{
  return octave::math::finite (x);
}

__attribute__ ((__deprecated__))
inline bool xisinf (double x) { return octave::math::isinf (x); }
__attribute__ ((__deprecated__))
inline bool xisinf (float x) { return octave::math::isinf (x); }

template <typename T>
__attribute__ ((__deprecated__))
bool
xisinf (const std::complex<T>& x)
{
  return octave::math::isinf (x);
}




__attribute__ ((__deprecated__))
inline bool
xisinteger (double x)
{
  return octave::math::isinteger (x);
}

__attribute__ ((__deprecated__))
inline bool
xisinteger (float x)
{
  return octave::math::isinteger (x);
}

template <typename T>
__attribute__ ((__deprecated__))
T
X_NINT (T x)
{
  return octave::math::x_nint (x);
}

__attribute__ ((__deprecated__))
inline double D_NINT (double x) { return octave::math::x_nint (x); }
__attribute__ ((__deprecated__))
inline float F_NINT (float x) { return octave::math::x_nint (x); }

__attribute__ ((__deprecated__))
inline octave_idx_type NINTbig (double x) { return octave::math::nint_big (x); }
__attribute__ ((__deprecated__))
inline octave_idx_type NINTbig (float x) { return octave::math::nint_big (x); }

__attribute__ ((__deprecated__))
inline int NINT (double x) { return octave::math::nint (x); }
__attribute__ ((__deprecated__))
inline int NINT (float x) { return octave::math::nint (x); }

template <typename T>
__attribute__ ((__deprecated__))
T
xmod (T x, T y)
{
  return octave::math::mod (x, y);
}

template <typename T>
__attribute__ ((__deprecated__))
T
xrem (T x, T y)
{
  return octave::math::rem (x, y);
}

template <typename T>
__attribute__ ((__deprecated__))
T
xmin (T x, T y)
{
  return octave::math::min (x, y);
}

template <typename T>
__attribute__ ((__deprecated__))
T
xmax (T x, T y)
{
  return octave::math::max (x, y);
}

__attribute__ ((__deprecated__))
inline double
xmin (double x, double y)
{
  return octave::math::min (x, y);
}

__attribute__ ((__deprecated__))
inline double
xmax (double x, double y)
{
  return octave::math::max (x, y);
}

__attribute__ ((__deprecated__))
inline float
xmin (float x, float y)
{
  return octave::math::min (x, y);
}

__attribute__ ((__deprecated__))
inline float
xmax (float x, float y)
{
  return octave::math::max (x, y);
}

__attribute__ ((__deprecated__))
inline Complex
xmin (const Complex& x, const Complex& y)
{
  return octave::math::min (x, y);
}

__attribute__ ((__deprecated__))
inline Complex
xmax (const Complex& x, const Complex& y)
{
  return octave::math::max (x, y);
}

__attribute__ ((__deprecated__))
inline FloatComplex
xmin (const FloatComplex& x, const FloatComplex& y)
{
  return octave::math::min (x, y);
}

__attribute__ ((__deprecated__))
inline FloatComplex
xmax (const FloatComplex& x, const FloatComplex& y)
{
  return octave::math::max (x, y);
}

__attribute__ ((__deprecated__))
inline Complex rc_acos (double x) { return octave::math::rc_acos (x); }
__attribute__ ((__deprecated__))
inline FloatComplex rc_acos (float x) { return octave::math::rc_acos (x); }

__attribute__ ((__deprecated__))
inline Complex rc_acosh (double x) { return octave::math::rc_acosh (x); }
__attribute__ ((__deprecated__))
inline FloatComplex rc_acosh (float x) { return octave::math::rc_acosh (x); }

__attribute__ ((__deprecated__))
inline Complex rc_asin (double x) { return octave::math::rc_asin (x); }
__attribute__ ((__deprecated__))
inline FloatComplex rc_asin (float x) { return octave::math::rc_asin (x); }

__attribute__ ((__deprecated__))
inline Complex rc_atanh (double x) { return octave::math::rc_atanh (x); }
__attribute__ ((__deprecated__))
inline FloatComplex rc_atanh (float x) { return octave::math::rc_atanh (x); }

__attribute__ ((__deprecated__))
inline Complex rc_log (double x) { return octave::math::rc_log (x); }
__attribute__ ((__deprecated__))
inline FloatComplex rc_log (float x) { return octave::math::rc_log (x); }

__attribute__ ((__deprecated__))
inline Complex rc_log2 (double x) { return octave::math::rc_log2 (x); }
__attribute__ ((__deprecated__))
inline FloatComplex rc_log2 (float x) { return octave::math::rc_log2 (x); }

__attribute__ ((__deprecated__))
inline Complex rc_log10 (double x) { return octave::math::rc_log10 (x); }
__attribute__ ((__deprecated__))
inline FloatComplex rc_log10 (float x) { return octave::math::rc_log10 (x); }

__attribute__ ((__deprecated__))
inline Complex rc_sqrt (double x) { return octave::math::rc_sqrt (x); }
__attribute__ ((__deprecated__))
inline FloatComplex rc_sqrt (float x) { return octave::math::rc_sqrt (x); }
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h" 2


template <typename T> class octave_int;

typedef octave_int<int8_t> octave_int8;
typedef octave_int<int16_t> octave_int16;
typedef octave_int<int32_t> octave_int32;
typedef octave_int<int64_t> octave_int64;

typedef octave_int<uint8_t> octave_uint8;
typedef octave_int<uint16_t> octave_uint16;
typedef octave_int<uint32_t> octave_uint32;
typedef octave_int<uint64_t> octave_uint64;



namespace octave
{
  namespace math
  {
    inline long double round (long double x) { return roundl (x); }

    inline long double isnan (long double x) { return isnan (static_cast<double> (x)); }
  }
}



__attribute__ ((__deprecated__))
inline long double xround (long double x) { return octave::math::round (x); }

__attribute__ ((__deprecated__))
inline bool xisnan (long double x) { return octave::math::isnan (x); }
# 77 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T>
inline T octave_int_abs (T x) { return x >= 0 ? x : -x; }


template <int qsize, bool qsigned>
struct query_integer_type
{
public:
  static const bool registered = false;
  typedef void type;

};
# 100 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <> class query_integer_type<sizeof (int8_t), std::numeric_limits<int8_t>::is_signed> { public: static const bool registered = true; typedef int8_t type; };
template <> class query_integer_type<sizeof (uint8_t), std::numeric_limits<uint8_t>::is_signed> { public: static const bool registered = true; typedef uint8_t type; };
template <> class query_integer_type<sizeof (int16_t), std::numeric_limits<int16_t>::is_signed> { public: static const bool registered = true; typedef int16_t type; };
template <> class query_integer_type<sizeof (uint16_t), std::numeric_limits<uint16_t>::is_signed> { public: static const bool registered = true; typedef uint16_t type; };
template <> class query_integer_type<sizeof (int32_t), std::numeric_limits<int32_t>::is_signed> { public: static const bool registered = true; typedef int32_t type; };
template <> class query_integer_type<sizeof (uint32_t), std::numeric_limits<uint32_t>::is_signed> { public: static const bool registered = true; typedef uint32_t type; };
template <> class query_integer_type<sizeof (int64_t), std::numeric_limits<int64_t>::is_signed> { public: static const bool registered = true; typedef int64_t type; };
template <> class query_integer_type<sizeof (uint64_t), std::numeric_limits<uint64_t>::is_signed> { public: static const bool registered = true; typedef uint64_t type; };
# 135 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
class octave_int_cmp_op
{






  template <typename T1, typename T2>
  class prom
  {

    static const bool pint = (sizeof (T1) < sizeof (int)
                              && sizeof (T2) < sizeof (int));
    static const bool t1sig = std::numeric_limits<T1>::is_signed;
    static const bool t2sig = std::numeric_limits<T2>::is_signed;
    static const bool psig =
      (pint || (sizeof (T2) > sizeof (T1) && t2sig) || t1sig);
    static const int psize =
      (pint ? sizeof (int) : (sizeof (T2) > sizeof (T1)
                              ? sizeof (T2) : sizeof (T1)));
  public:
    typedef typename query_integer_type<psize, psig>::type type;
  };



  template <typename xop, int size>
  class uiop
  {
    typedef typename query_integer_type<size, false>::type utype;
    typedef typename query_integer_type<size, true>::type stype;
  public:
    static bool op (utype x, utype y)
    { return xop::op (x, y); }
    static bool op (stype x, stype y)
    { return xop::op (x, y); }
    static bool op (stype x, utype y)
    { return (x < 0) ? xop::ltval : xop::op (static_cast<utype> (x), y); }
    static bool op (utype x, stype y)
    { return (y < 0) ? xop::gtval : xop::op (x, static_cast<utype> (y)); }
  };

public:
  class lt { public: static const bool ltval = (0 < 1); static const bool gtval = (1 < 0); template <typename T> static bool op (T x, T y) { return x < y; } };
  class le { public: static const bool ltval = (0 <= 1); static const bool gtval = (1 <= 0); template <typename T> static bool op (T x, T y) { return x <= y; } };
  class gt { public: static const bool ltval = (0 > 1); static const bool gtval = (1 > 0); template <typename T> static bool op (T x, T y) { return x > y; } };
  class ge { public: static const bool ltval = (0 >= 1); static const bool gtval = (1 >= 0); template <typename T> static bool op (T x, T y) { return x >= y; } };
  class eq { public: static const bool ltval = (0 == 1); static const bool gtval = (1 == 0); template <typename T> static bool op (T x, T y) { return x == y; } };
  class ne { public: static const bool ltval = (0 != 1); static const bool gtval = (1 != 0); template <typename T> static bool op (T x, T y) { return x != y; } };
  class ct { public: static const bool ltval = true; static const bool gtval = true; template <typename T> static bool op (T, T) { return true; } };
  class cf { public: static const bool ltval = false; static const bool gtval = false; template <typename T> static bool op (T, T) { return false; } };


  template <typename xop, typename T1, typename T2>
  static bool
  op (T1 x, T2 y)
  {
    typedef typename prom<T1, T2>::type PT1;
    typedef typename prom<T2, T1>::type PT2;
    return uiop<xop, sizeof (PT1)>::op (static_cast<PT1> (x),
                                        static_cast<PT2> (y));
  }

public:


  template <typename xop, typename T>
  static bool
  mop (T x, double y)
  { return xop::op (static_cast<double> (x), y); }

  template <typename xop, typename T>
  static bool
  mop (double x, T y)
  { return xop::op (x, static_cast<double> (y)); }
# 283 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
  template <typename xop> static bool mop (double x, int64_t y) { return xop::op (static_cast<long double> (x), static_cast<long double> (y)); } template <typename xop> static bool mop (int64_t x, double y) { return xop::op (static_cast<long double> (x), static_cast<long double> (y)); }
  template <typename xop> static bool mop (double x, uint64_t y) { return xop::op (static_cast<long double> (x), static_cast<long double> (y)); } template <typename xop> static bool mop (uint64_t x, double y) { return xop::op (static_cast<long double> (x), static_cast<long double> (y)); }


};


template <typename T>
class octave_int_base
{
public:

  static T min_val () { return std::numeric_limits<T>:: min (); }
  static T max_val () { return std::numeric_limits<T>:: max (); }


  template <typename S>
  static T
  truncate_int (const S& value)
  {

    static const bool t_is_signed = std::numeric_limits<T>::is_signed;
    static const bool s_is_signed = std::numeric_limits<S>::is_signed;
    static const int t_size = sizeof (T);
    static const int s_size = sizeof (S);

    static const bool omit_chk_min =
      (! s_is_signed || (t_is_signed && t_size >= s_size));
    static const bool omit_chk_max =
      (t_size > s_size || (t_size == s_size
                           && (! t_is_signed || s_is_signed)));

    typedef octave_int_cmp_op::cf cf;
    typedef octave_int_cmp_op::lt lt;
    typedef octave_int_cmp_op::gt gt;
    typedef typename if_then_else<omit_chk_min, cf, lt>::result chk_min;
    typedef typename if_then_else<omit_chk_max, cf, gt>::result chk_max;



    if (chk_min::op (value, static_cast<S> (min_val ())))
      {
        return min_val ();
      }
    else if (chk_max::op (value, static_cast<S> (max_val ())))
      {
        return max_val ();
      }
    else
      return static_cast<T> (value);
  }

private:


  template <typename S>
  static S
  compute_threshold (S val, T orig_val)
  {
    val = octave::math::round (val);

    if (orig_val % 2 && val / 2 == octave::math::round (val / 2))

      val *= (static_cast<S> (1) - (std::numeric_limits<S>::epsilon () / 2));
    return val;
  }

public:


  template <typename S>
  static T
  convert_real (const S& value);
};






template <typename T, bool is_signed>
class octave_int_arith_base
{ };



template <typename T>
class octave_int_arith_base<T, false> : octave_int_base<T>
{
public:

  static T
  abs (T x) { return x; }

  static T
  signum (T x) { return x ? static_cast<T> (1) : static_cast<T> (0); }


  static T
  rshift (T x, int n) { return x >> n; }

  static T
  lshift (T x, int n) { return x << n; }

  static T
  minus (T)
  {
    return static_cast<T> (0);
  }



  static T
  add (T x, T y)
  {
    T u = x + y;
    if (u < x)
      {
        u = octave_int_base<T>::max_val ();
      }
    return u;
  }

  static T
  sub (T x, T y)
  {
    T u = x - y;
    if (u > x)
      {
        u = 0;
      }
    return u;
  }



  static T mul (T x, T y) { return mul_internal (x, y); }

  static T
  mul_internal (T x, T y)
  {

    typedef typename query_integer_type<2*sizeof (T), false>::type mptype;
    return octave_int_base<T>::truncate_int (static_cast<mptype> (x)
           * static_cast<mptype> (y));
  }



  static T
  div (T x, T y)
  {
    if (y != 0)
      {
        T z = x / y;
        T w = x % y;
        if (w >= y-w) z += 1;
        return z;
      }
    else
      {
        return x ? octave_int_base<T>::max_val () : 0;
      }
  }


  static T
  rem (T x, T y)
  {
    return y != 0 ? x % y : 0;
  }


  static T
  mod (T x, T y)
  {
    return y != 0 ? x % y : x;
  }
};
# 474 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <>
inline uint64_t
octave_int_arith_base<uint64_t, false>::mul_internal (uint64_t x, uint64_t y)
{
  uint64_t retval;

  long double p = static_cast<long double> (x) * static_cast<long double> (y);

  if (p > static_cast<long double> (octave_int_base<uint64_t>::max_val ()))
    retval = octave_int_base<uint64_t>::max_val ();
  else
    retval = static_cast<uint64_t> (p);

  return retval;
}

template <>
inline uint64_t
octave_int_arith_base<uint64_t, false>::mul (uint64_t x, uint64_t y)
{



  return mul_internal (x, y);

}
# 536 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T>
class octave_int_arith_base<T, true> : octave_int_base<T>
{

  typedef typename query_integer_type<sizeof (T), false>::type UT;
public:


  static T
  __signbit (T x)
  {

    return static_cast<UT> (x) >> std::numeric_limits<T>::digits;



  }

  static T
  abs (T x)
  {




    T m = x >> std::numeric_limits<T>::digits;
    T y = (x ^ m) - m;
    if (y < 0)
      {
        y = octave_int_base<T>::max_val ();
      }
    return y;
# 583 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
  }

  static T
  signum (T x)
  {

    return ((x > 0) ? 1 : 0) - __signbit (x);
  }





  static T
  rshift (T x, int n) { return x >> n; }

  static T
  lshift (T x, int n) { return x << n; }


  static T
  minus (T x)
  {

    T y = -x;
    if (y == octave_int_base<T>::min_val ())
      {
        --y;
      }
    return y;
# 624 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
  }

  static T
  add (T x, T y)
  {




    T u = static_cast<UT> (x) + static_cast<UT> (y);
    T ux = u ^ x;
    T uy = u ^ y;
    if ((ux & uy) < 0)
      {
        u = octave_int_base<T>::max_val () + __signbit (~u);
      }
    return u;
# 665 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
  }


  static T
  sub (T x, T y)
  {




    T u = static_cast<UT> (x) - static_cast<UT> (y);
    T ux = u ^ x;
    T uy = u ^ ~y;
    if ((ux & uy) < 0)
      {
        u = octave_int_base<T>::max_val () + __signbit (~u);
      }
    return u;
# 707 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
  }



  static T mul (T x, T y) { return mul_internal (x, y); }

  static T
  mul_internal (T x, T y)
  {

    typedef typename query_integer_type<2*sizeof (T), true>::type mptype;
    return octave_int_base<T>::truncate_int (static_cast<mptype> (x)
           * static_cast<mptype> (y));
  }


  static T
  div (T x, T y)
  {
    T z;
    if (y == 0)
      {
        if (x < 0)
          z = octave_int_base<T>::min_val ();
        else if (x != 0)
          z = octave_int_base<T>::max_val ();
        else
          z = 0;
      }
    else if (y < 0)
      {

        if (y == -1 && x == octave_int_base<T>::min_val ())
          {
            z = octave_int_base<T>::max_val ();
          }
        else
          {
            z = x / y;

            T w = -octave_int_abs (x % y);
            if (w <= y - w)
              z -= 1 - (__signbit (x) << 1);
          }
      }
    else
      {
        z = x / y;



        T w = octave_int_abs (x % y);

        if (w >= y - w)
          z += 1 - (__signbit (x) << 1);
      }
    return z;
  }


  static T
  rem (T x, T y)
  {
    return y != 0 ? x % y : 0;
  }


  static T
  mod (T x, T y)
  {
    if (y != 0)
      {
        T r = x % y;
        return ((r < 0) != (y < 0)) ? r + y : r;
      }
    else
      return x;
  }
};
# 798 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <>
inline int64_t
octave_int_arith_base<int64_t, true>::mul_internal (int64_t x, int64_t y)
{
  int64_t retval;

  long double p = static_cast<long double> (x) * static_cast<long double> (y);




  if (p > static_cast<long double> (octave_int_base<int64_t>::max_val ()))
    retval = octave_int_base<int64_t>::max_val ();
  else if (p < static_cast<long double> (octave_int_base<int64_t>::min_val ()))
    retval = octave_int_base<int64_t>::min_val ();
  else
    retval = static_cast<int64_t> (p);

  return retval;
}

template <>
inline int64_t
octave_int_arith_base<int64_t, true>::mul (int64_t x, int64_t y)
{



  return mul_internal (x, y);

}
# 840 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T>
class octave_int_arith
: public octave_int_arith_base<T, std::numeric_limits<T>::is_signed>
{ };

template <typename T>
class
octave_int : public octave_int_base<T>
{
public:
  typedef T val_type;

  octave_int (void) : ival () { }

  octave_int (T i) : ival (i) { }



  octave_int (char c)
    : ival (octave_int_base<T>::truncate_int (static_cast<unsigned char> (c)))
  { }


  octave_int (double d) : ival (octave_int_base<T>::convert_real (d)) { }

  octave_int (float d) : ival (octave_int_base<T>::convert_real (d)) { }


  octave_int (long double d) : ival (octave_int_base<T>::convert_real (d)) { }


  octave_int (bool b) : ival (b) { }

  template <typename U>
  octave_int (const U& i) : ival(octave_int_base<T>::truncate_int (i)) { }

  template <typename U>
  octave_int (const octave_int<U>& i)
    : ival (octave_int_base<T>::truncate_int (i.value ())) { }

  octave_int (const octave_int<T>& i) : ival (i.ival) { }

  octave_int& operator = (const octave_int<T>& i)
  {
    ival = i.ival;
    return *this;
  }

  T value (void) const { return ival; }

  const unsigned char * iptr (void) const
  { return reinterpret_cast<const unsigned char *> (& ival); }

  bool operator ! (void) const { return ! ival; }

  bool bool_value (void) const { return static_cast<bool> (value ()); }

  char char_value (void) const { return static_cast<char> (value ()); }

  double double_value (void) const { return static_cast<double> (value ()); }

  float float_value (void) const { return static_cast<float> (value ()); }

  operator T (void) const { return value (); }

  octave_int<T>
  operator + () const
  { return *this; }
# 917 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
  inline octave_int<T> operator - () const { return octave_int_arith<T>::minus (ival); }
  inline octave_int<T> abs () const { return octave_int_arith<T>::abs (ival); }
  inline octave_int<T> signum () const { return octave_int_arith<T>::signum (ival); }
# 937 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
  inline octave_int<T> operator + (const octave_int<T>& y) const { return octave_int_arith<T>::add (ival, y); } inline octave_int<T>& operator += (const octave_int<T>& y) { ival = octave_int_arith<T>::add (ival, y); return *this; }
  inline octave_int<T> operator - (const octave_int<T>& y) const { return octave_int_arith<T>::sub (ival, y); } inline octave_int<T>& operator -= (const octave_int<T>& y) { ival = octave_int_arith<T>::sub (ival, y); return *this; }
  inline octave_int<T> operator * (const octave_int<T>& y) const { return octave_int_arith<T>::mul (ival, y); } inline octave_int<T>& operator *= (const octave_int<T>& y) { ival = octave_int_arith<T>::mul (ival, y); return *this; }
  inline octave_int<T> operator / (const octave_int<T>& y) const { return octave_int_arith<T>::div (ival, y); } inline octave_int<T>& operator /= (const octave_int<T>& y) { ival = octave_int_arith<T>::div (ival, y); return *this; }
  inline octave_int<T> operator % (const octave_int<T>& y) const { return octave_int_arith<T>::rem (ival, y); } inline octave_int<T>& operator %= (const octave_int<T>& y) { ival = octave_int_arith<T>::rem (ival, y); return *this; }
  inline octave_int<T> operator << (const int& y) const { return octave_int_arith<T>::lshift (ival, y); } inline octave_int<T>& operator <<= (const int& y) { ival = octave_int_arith<T>::lshift (ival, y); return *this; }
  inline octave_int<T> operator >> (const int& y) const { return octave_int_arith<T>::rshift (ival, y); } inline octave_int<T>& operator >>= (const int& y) { ival = octave_int_arith<T>::rshift (ival, y); return *this; }



  static octave_int<T> min (void) { return std::numeric_limits<T>::min (); }
  static octave_int<T> max (void) { return std::numeric_limits<T>::max (); }

  static int nbits (void) { return std::numeric_limits<T>::digits; }

  static int byte_size (void) { return sizeof (T); }

  static const char *type_name ();


  static const octave_int zero, one;



  void *mex_get_data (void) const { return const_cast<T *> (&ival); }

private:

  T ival;
};

template <typename T>
inline octave_int<T>
rem (const octave_int<T>& x, const octave_int<T>& y)
{
  return octave_int_arith<T>::rem (x.value (), y.value ());
}

template <typename T>
inline octave_int<T>
mod (const octave_int<T>& x, const octave_int<T>& y)
{
  return octave_int_arith<T>::mod (x.value (), y.value ());
}



namespace octave
{
  namespace math
  {
    template <typename T>
    bool
    isnan (const octave_int<T>&)
    {
      return false;
    }
  }
}



template <typename T>
__attribute__ ((__deprecated__))
bool
xisnan (const octave_int<T>& x)
{
  return octave::math::isnan (x);
}





template <typename T>
extern octave_int<T>
pow (const octave_int<T>&, const octave_int<T>&);

template <typename T>
extern octave_int<T>
pow (const double& a, const octave_int<T>& b);

template <typename T>
extern octave_int<T>
pow (const octave_int<T>& a, const double& b);

template <typename T>
extern octave_int<T>
pow (const float& a, const octave_int<T>& b);

template <typename T>
extern octave_int<T>
pow (const octave_int<T>& a, const float& b);




template <typename T>
extern octave_int<T>
powf (const float& a, const octave_int<T>& b);

template <typename T>
extern octave_int<T>
powf (const octave_int<T>& a, const float& b);
# 1052 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T1, typename T2> inline bool operator < (const octave_int<T1>& x, const octave_int<T2>& y) { return octave_int_cmp_op::op<octave_int_cmp_op::lt, T1, T2> (x.value (), y.value ()); }
template <typename T1, typename T2> inline bool operator <= (const octave_int<T1>& x, const octave_int<T2>& y) { return octave_int_cmp_op::op<octave_int_cmp_op::le, T1, T2> (x.value (), y.value ()); }
template <typename T1, typename T2> inline bool operator > (const octave_int<T1>& x, const octave_int<T2>& y) { return octave_int_cmp_op::op<octave_int_cmp_op::gt, T1, T2> (x.value (), y.value ()); }
template <typename T1, typename T2> inline bool operator >= (const octave_int<T1>& x, const octave_int<T2>& y) { return octave_int_cmp_op::op<octave_int_cmp_op::ge, T1, T2> (x.value (), y.value ()); }
template <typename T1, typename T2> inline bool operator == (const octave_int<T1>& x, const octave_int<T2>& y) { return octave_int_cmp_op::op<octave_int_cmp_op::eq, T1, T2> (x.value (), y.value ()); }
template <typename T1, typename T2> inline bool operator != (const octave_int<T1>& x, const octave_int<T2>& y) { return octave_int_cmp_op::op<octave_int_cmp_op::ne, T1, T2> (x.value (), y.value ()); }



template <typename T>
inline std::ostream&
operator << (std::ostream& os, const octave_int<T>& ival)
{
  os << ival.value ();
  return os;
}

template <typename T>
inline std::istream&
operator >> (std::istream& is, octave_int<T>& ival)
{
  T tmp = 0;
  is >> tmp;
  ival = tmp;
  return is;
}







template <>
inline std::ostream&
operator << (std::ostream& os, const octave_int<int8_t>& ival)
{
  os << static_cast<int> (ival.value ());
  return os;
}

template <>
inline std::ostream&
operator << (std::ostream& os, const octave_int<uint8_t>& ival)
{
  os << static_cast<unsigned int> (ival.value ());
  return os;
}

template <>
inline std::istream&
operator >> (std::istream& is, octave_int<int8_t>& ival)
{
  int tmp = 0;
  is >> tmp;
  ival = static_cast<int8_t> (tmp);
  return is;
}

template <>
inline std::istream&
operator >> (std::istream& is, octave_int<uint8_t>& ival)
{
  unsigned int tmp = 0;
  is >> tmp;
  ival = static_cast<uint8_t> (tmp);
  return is;
}
# 1131 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T> octave_int<T> operator & (const octave_int<T>& x, const octave_int<T>& y) { return x.value () & y.value (); }
template <typename T> octave_int<T> operator | (const octave_int<T>& x, const octave_int<T>& y) { return x.value () | y.value (); }
template <typename T> octave_int<T> operator ^ (const octave_int<T>& x, const octave_int<T>& y) { return x.value () ^ y.value (); }




template <typename T>
octave_int<T>
bitshift (const octave_int<T>& a, int n,
          const octave_int<T>& mask = std::numeric_limits<T>::max ())
{
  if (n > 0)
    return (a << n) & mask;
  else if (n < 0)
    return (a >> -n) & mask;
  else
    return a & mask;
}
# 1260 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T> inline octave_int<T> operator + (const octave_int<T>& x, const double& y) { return octave_int<T> (static_cast<double> (x) + y); } template <typename T> inline octave_int<T> operator + (const double& x, const octave_int<T>& y) { return octave_int<T> (x + static_cast<double> (y)); } template <> inline octave_int64 operator + (const double& x, const octave_int64& y) { return octave_int64 (x + static_cast<long double> (y.value ())); } template <> inline octave_uint64 operator + (const double& x, const octave_uint64& y) { return octave_uint64 (x + static_cast<long double> (y.value ())); } template <> inline octave_int64 operator + (const octave_int64& x, const double& y) { return octave_int64 (static_cast<long double> (x.value ()) + y); } template <> inline octave_uint64 operator + (const octave_uint64& x, const double& y) { return octave_uint64 (static_cast<long double> (x.value ()) + y); }
template <typename T> inline octave_int<T> operator - (const octave_int<T>& x, const double& y) { return octave_int<T> (static_cast<double> (x) - y); } template <typename T> inline octave_int<T> operator - (const double& x, const octave_int<T>& y) { return octave_int<T> (x - static_cast<double> (y)); } template <> inline octave_int64 operator - (const double& x, const octave_int64& y) { return octave_int64 (x - static_cast<long double> (y.value ())); } template <> inline octave_uint64 operator - (const double& x, const octave_uint64& y) { return octave_uint64 (x - static_cast<long double> (y.value ())); } template <> inline octave_int64 operator - (const octave_int64& x, const double& y) { return octave_int64 (static_cast<long double> (x.value ()) - y); } template <> inline octave_uint64 operator - (const octave_uint64& x, const double& y) { return octave_uint64 (static_cast<long double> (x.value ()) - y); }
template <typename T> inline octave_int<T> operator * (const octave_int<T>& x, const double& y) { return octave_int<T> (static_cast<double> (x) * y); } template <typename T> inline octave_int<T> operator * (const double& x, const octave_int<T>& y) { return octave_int<T> (x * static_cast<double> (y)); } template <> inline octave_int64 operator * (const double& x, const octave_int64& y) { return octave_int64 (x * static_cast<long double> (y.value ())); } template <> inline octave_uint64 operator * (const double& x, const octave_uint64& y) { return octave_uint64 (x * static_cast<long double> (y.value ())); } template <> inline octave_int64 operator * (const octave_int64& x, const double& y) { return octave_int64 (static_cast<long double> (x.value ()) * y); } template <> inline octave_uint64 operator * (const octave_uint64& x, const double& y) { return octave_uint64 (static_cast<long double> (x.value ()) * y); }
template <typename T> inline octave_int<T> operator / (const octave_int<T>& x, const double& y) { return octave_int<T> (static_cast<double> (x) / y); } template <typename T> inline octave_int<T> operator / (const double& x, const octave_int<T>& y) { return octave_int<T> (x / static_cast<double> (y)); } template <> inline octave_int64 operator / (const double& x, const octave_int64& y) { return octave_int64 (x / static_cast<long double> (y.value ())); } template <> inline octave_uint64 operator / (const double& x, const octave_uint64& y) { return octave_uint64 (x / static_cast<long double> (y.value ())); } template <> inline octave_int64 operator / (const octave_int64& x, const double& y) { return octave_int64 (static_cast<long double> (x.value ()) / y); } template <> inline octave_uint64 operator / (const octave_uint64& x, const double& y) { return octave_uint64 (static_cast<long double> (x.value ()) / y); }
# 1284 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T> inline bool operator < (const octave_int<T>& x, const double& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::lt> (x.value (), y); } template <typename T> inline bool operator < (const double& x, const octave_int<T>& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::lt> (x, y.value ()); }
template <typename T> inline bool operator <= (const octave_int<T>& x, const double& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::le> (x.value (), y); } template <typename T> inline bool operator <= (const double& x, const octave_int<T>& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::le> (x, y.value ()); }
template <typename T> inline bool operator >= (const octave_int<T>& x, const double& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::ge> (x.value (), y); } template <typename T> inline bool operator >= (const double& x, const octave_int<T>& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::ge> (x, y.value ()); }
template <typename T> inline bool operator > (const octave_int<T>& x, const double& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::gt> (x.value (), y); } template <typename T> inline bool operator > (const double& x, const octave_int<T>& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::gt> (x, y.value ()); }
template <typename T> inline bool operator == (const octave_int<T>& x, const double& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::eq> (x.value (), y); } template <typename T> inline bool operator == (const double& x, const octave_int<T>& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::eq> (x, y.value ()); }
template <typename T> inline bool operator != (const octave_int<T>& x, const double& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::ne> (x.value (), y); } template <typename T> inline bool operator != (const double& x, const octave_int<T>& y) { return octave_int_cmp_op::mop<octave_int_cmp_op::ne> (x, y.value ()); }
# 1309 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T> inline octave_int<T> operator + (const octave_int<T>& x, float y) { return x + static_cast<double> (y); } template <typename T> inline octave_int<T> operator + (float x, const octave_int<T>& y) { return static_cast<double> (x) + y; }
template <typename T> inline octave_int<T> operator - (const octave_int<T>& x, float y) { return x - static_cast<double> (y); } template <typename T> inline octave_int<T> operator - (float x, const octave_int<T>& y) { return static_cast<double> (x) - y; }
template <typename T> inline octave_int<T> operator * (const octave_int<T>& x, float y) { return x * static_cast<double> (y); } template <typename T> inline octave_int<T> operator * (float x, const octave_int<T>& y) { return static_cast<double> (x) * y; }
template <typename T> inline octave_int<T> operator / (const octave_int<T>& x, float y) { return x / static_cast<double> (y); } template <typename T> inline octave_int<T> operator / (float x, const octave_int<T>& y) { return static_cast<double> (x) / y; }
# 1330 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-inttypes.h"
template <typename T> inline bool operator < (const octave_int<T>& x, const float& y) { return x < static_cast<double> (y); } template <typename T> bool operator < (const float& x, const octave_int<T>& y) { return static_cast<double> (x) < y; }
template <typename T> inline bool operator <= (const octave_int<T>& x, const float& y) { return x <= static_cast<double> (y); } template <typename T> bool operator <= (const float& x, const octave_int<T>& y) { return static_cast<double> (x) <= y; }
template <typename T> inline bool operator >= (const octave_int<T>& x, const float& y) { return x >= static_cast<double> (y); } template <typename T> bool operator >= (const float& x, const octave_int<T>& y) { return static_cast<double> (x) >= y; }
template <typename T> inline bool operator > (const octave_int<T>& x, const float& y) { return x > static_cast<double> (y); } template <typename T> bool operator > (const float& x, const octave_int<T>& y) { return static_cast<double> (x) > y; }
template <typename T> inline bool operator == (const octave_int<T>& x, const float& y) { return x == static_cast<double> (y); } template <typename T> bool operator == (const float& x, const octave_int<T>& y) { return static_cast<double> (x) == y; }
template <typename T> inline bool operator != (const octave_int<T>& x, const float& y) { return x != static_cast<double> (y); } template <typename T> bool operator != (const float& x, const octave_int<T>& y) { return static_cast<double> (x) != y; }



template <typename T>
octave_int<T>
xmax (const octave_int<T>& x, const octave_int<T>& y)
{
  const T xv = x.value ();
  const T yv = y.value ();
  return octave_int<T> (xv >= yv ? xv : yv);
}

template <typename T>
octave_int<T>
xmin (const octave_int<T>& x, const octave_int<T>& y)
{
  const T xv = x.value ();
  const T yv = y.value ();
  return octave_int<T> (xv <= yv ? xv : yv);
}
# 42 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array-util.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array-util.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-array-errwarn.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-array-errwarn.h"
namespace octave
{
# 41 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-array-errwarn.h"
  class index_exception : public execution_exception
  {
  public:

    index_exception (const std::string& index_arg, octave_idx_type nd_arg = 0,
                     octave_idx_type dim_arg = -1, const char *var_arg = "")
      : index (index_arg), nd (nd_arg), dim (dim_arg), var (var_arg)
    { }

    ~index_exception (void) { }



    std::string idx (void) const { return index; }


    virtual std::string details (void) const = 0;


    virtual const char *err_id (void) const = 0;

    virtual std::string message (void) const;


    void set_pos (octave_idx_type nd_arg, octave_idx_type dim_arg)
    {
      nd = nd_arg;
      dim = dim_arg;
    }

    void set_pos_if_unset (octave_idx_type nd_arg, octave_idx_type dim_arg)
    {
      if (nd == 0)
        {
          nd = nd_arg;
          dim = dim_arg;
        }
    }


    void set_var (const std::string& var_arg = "")
    {
      var = var_arg;
    }

  private:


    std::string index;

  protected:


    std::string expression (void) const;


    octave_idx_type nd;


    octave_idx_type dim;


    std::string var;

  };

  __attribute__ ((__noreturn__)) extern void
  err_nan_to_logical_conversion (void);

  __attribute__ ((__noreturn__)) extern void
  err_nan_to_character_conversion (void);

  __attribute__ ((__noreturn__)) extern void
  err_nonconformant (const char *op, octave_idx_type op1_len,
                     octave_idx_type op2_len);

  __attribute__ ((__noreturn__)) extern void
  err_nonconformant (const char *op,
                     octave_idx_type op1_nr, octave_idx_type op1_nc,
                     octave_idx_type op2_nr, octave_idx_type op2_nc);

  __attribute__ ((__noreturn__)) extern void
  err_nonconformant (const char *op,
                     const dim_vector& op1_dims, const dim_vector& op2_dims);

  __attribute__ ((__noreturn__)) extern void
  err_index_out_of_range (int nd, int dim, octave_idx_type iext,
                          octave_idx_type ext, const dim_vector& d);

  __attribute__ ((__noreturn__)) extern void
  err_index_out_of_range (int nd, int dim, octave_idx_type iext,
                          octave_idx_type ext);

  __attribute__ ((__noreturn__)) extern void
  err_del_index_out_of_range (bool is1d, octave_idx_type iext,
                              octave_idx_type ext);

  __attribute__ ((__noreturn__)) extern void
  err_invalid_index (double n, octave_idx_type nd = 0,
                     octave_idx_type dim = 0,
                     const std::string& var = "");

  __attribute__ ((__noreturn__)) extern void
  err_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                     octave_idx_type dim = 0,
                     const std::string& var = "");

  __attribute__ ((__noreturn__)) extern void
  err_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                     octave_idx_type dim = 0,
                     const std::string& var = "");

  __attribute__ ((__noreturn__)) extern void
  err_invalid_resize (void);

             extern void
  warn_singular_matrix (double rcond = 0.0);
}



__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_nan_to_logical_conversion (void)
{
  octave::err_nan_to_logical_conversion ();
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_nan_to_character_conversion (void)
{
  octave::err_nan_to_character_conversion ();
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_nonconformant (const char *op, octave_idx_type op1_len,
                   octave_idx_type op2_len)
{
  octave::err_nonconformant (op, op1_len, op2_len);
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_nonconformant (const char *op,
                   octave_idx_type op1_nr, octave_idx_type op1_nc,
                   octave_idx_type op2_nr, octave_idx_type op2_nc)
{
  octave::err_nonconformant (op, op1_nr, op1_nc, op2_nr, op2_nc);
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_nonconformant (const char *op,
                   const dim_vector& op1_dims, const dim_vector& op2_dims)
{
  octave::err_nonconformant (op, op1_dims, op2_dims);
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_index_out_of_range (int nd, int dim, octave_idx_type iext,
                        octave_idx_type ext, const dim_vector& d)
{
  octave::err_index_out_of_range (nd, dim, iext, ext, d);
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_index_out_of_range (int nd, int dim, octave_idx_type iext,
                        octave_idx_type ext)
{
  octave::err_index_out_of_range (nd, dim, iext, ext);
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_del_index_out_of_range (bool is1d, octave_idx_type iext,
                            octave_idx_type ext)
{
  octave::err_del_index_out_of_range (is1d, iext, ext);
}

__attribute__ ((__noreturn__)) inline void
err_invalid_index (double n, octave_idx_type nd = 0,
                   octave_idx_type dim = 0,
                   const std::string& var = "")
{
  octave::err_invalid_index (n, nd, dim, var);
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                   octave_idx_type dim = 0,
                   const std::string& var = "")
{
  octave::err_invalid_index (n, nd, dim, var);
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                   octave_idx_type dim = 0,
                   const std::string& var = "")
{
  octave::err_invalid_index (idx, nd, dim, var);
}

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) inline void
err_invalid_resize (void)
{
  octave::err_invalid_resize ();
}

__attribute__ ((__deprecated__))
inline void
warn_singular_matrix (double rcond = 0.0)
{
  return octave::warn_singular_matrix (rcond);
}
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Array-util.h" 2

extern bool index_in_bounds (const Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions);

extern void increment_index (Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions,
                                        int start_dimension = 0);

extern octave_idx_type get_scalar_idx (Array<octave_idx_type>& idx,
                                                  dim_vector& dims);

extern octave_idx_type num_ones (const Array<octave_idx_type>&
                                            ra_idx);

extern bool is_scalar (const dim_vector& dim);

extern bool is_vector (const dim_vector& dim);

extern bool any_ones (const Array<octave_idx_type>& arr);



extern octave_idx_type
compute_index (octave_idx_type n, const dim_vector& dims);

extern octave_idx_type
compute_index (octave_idx_type i, octave_idx_type j, const dim_vector& dims);

extern octave_idx_type
compute_index (octave_idx_type i, octave_idx_type j, octave_idx_type k,
               const dim_vector& dims);

extern octave_idx_type
compute_index (const Array<octave_idx_type>& ra_idx, const dim_vector& dims);

extern Array<octave_idx_type>
conv_to_int_array (const Array<idx_vector>& a);

extern Array<idx_vector> conv_to_array (const idx_vector *tmp,
                                                   const octave_idx_type len);

extern dim_vector freeze (Array<idx_vector>& ra_idx,
                                     const dim_vector& dimensions,
                                     int resize_ok);

extern bool vector_equivalent (const dim_vector& dv);

extern bool all_ok (const Array<idx_vector>& ra_idx);

extern bool any_orig_empty (const Array<idx_vector>& ra_idx);

extern bool all_colon_equiv (const Array<idx_vector>& ra_idx,
                                        const dim_vector& frozen_lengths);

extern bool all_ones (const Array<octave_idx_type>& arr);

extern Array<octave_idx_type>
get_elt_idx (const Array<idx_vector>& ra_idx,
             const Array<octave_idx_type>& result_idx);

extern Array<octave_idx_type> get_ra_idx (octave_idx_type idx,
                                                     const dim_vector& dims);

extern dim_vector zero_dims_inquire (const Array<idx_vector>& ia,
                                                const dim_vector& rhdv);

extern dim_vector zero_dims_inquire (const idx_vector& i,
                                                const idx_vector& j,
                                                const dim_vector& rhdv);

extern idx_vector sub2ind (const dim_vector& dv,
                                      const Array<idx_vector>& idxa);

extern Array<idx_vector> ind2sub (const dim_vector& dv,
                                             const idx_vector& idx);

struct
permute_vector
{
  octave_idx_type pidx;
  octave_idx_type iidx;
};

extern int permute_vector_compare (const void *a, const void *b);
# 44 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/bsxfun.h" 1
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/bsxfun.h"
inline
bool
is_valid_bsxfun (const std::string& name, const dim_vector& dx,
                 const dim_vector& dy)
{
  for (int i = 0; i < std::min (dx.ndims (), dy.ndims ()); i++)
    {
      octave_idx_type xk = dx(i);
      octave_idx_type yk = dy(i);

      if (! ((xk == yk) || (xk == 1 && yk != 1) || (xk != 1 && yk == 1)))
        return false;
    }

  (*current_liboctave_warning_with_id_handler)
    ("Octave:language-extension", "performing `%s' automatic broadcasting",
     name.c_str ());

  return true;
}




inline
bool
is_valid_inplace_bsxfun (const std::string& name, const dim_vector& dr,
                         const dim_vector& dx)
{
  octave_idx_type drl = dr.ndims ();
  octave_idx_type dxl = dx.ndims ();
  if (drl < dxl)
    return false;

  for (int i = 0; i < drl; i++)
    {
      octave_idx_type rk = dr(i);
      octave_idx_type xk = dx(i);


      if (! ((rk == xk) || (rk != 1 && xk == 1)))
        return false;
    }

  (*current_liboctave_warning_with_id_handler)
    ("Octave:language-extension", "performing `%s' automatic broadcasting",
     name.c_str ());

  return true;
}


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/bsxfun-defs.cc" 1
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/bsxfun-defs.cc"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc" 1
# 39 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/bsxfun-defs.cc" 2

template <typename R, typename X, typename Y>
Array<R>
do_bsxfun_op (const Array<X>& x, const Array<Y>& y,
              void (*op_vv) (size_t, R *, const X *, const Y *),
              void (*op_sv) (size_t, R *, X, const Y *),
              void (*op_vs) (size_t, R *, const X *, Y))
{
  int nd = std::max (x.ndims (), y.ndims ());
  dim_vector dvx = x.dims ().redim (nd);
  dim_vector dvy = y.dims ().redim (nd);


  dim_vector dvr;
  dvr.resize (nd);
  for (int i = 0; i < nd; i++)
    {
      octave_idx_type xk = dvx(i);
      octave_idx_type yk = dvy(i);
      if (xk == 1)
        dvr(i) = yk;
      else if (yk == 1 || xk == yk)
        dvr(i) = xk;
      else
        (*current_liboctave_error_handler)
          ("bsxfun: nonconformant dimensions: %s and %s",
           x.dims ().str ().c_str (), y.dims ().str ().c_str ());
    }

  Array<R> retval (dvr);

  const X *xvec = x.fortran_vec ();
  const Y *yvec = y.fortran_vec ();
  R *rvec = retval.fortran_vec ();


  octave_idx_type start, ldr = 1;
  for (start = 0; start < nd; start++)
    {
      if (dvx(start) != dvy(start))
        break;
      ldr *= dvr(start);
    }

  if (retval.is_empty ())
    ;
  else if (start == nd)
    op_vv (retval.numel (), rvec, xvec, yvec);
  else
    {

      bool xsing = false;
      bool ysing = false;
      if (ldr == 1)
        {
          xsing = dvx(start) == 1;
          ysing = dvy(start) == 1;
          if (xsing || ysing)
            {
              ldr *= dvx(start) * dvy(start);
              start++;
            }
        }
      dim_vector cdvx = dvx.cumulative ();
      dim_vector cdvy = dvy.cumulative ();

      for (int i = std::max (start, octave_idx_type (1)); i < nd; i++)
        {
          if (dvx(i) == 1)
            cdvx(i-1) = 0;
          if (dvy(i) == 1)
            cdvy(i-1) = 0;
        }

      octave_idx_type niter = dvr.numel (start);

      octave_local_buffer<octave_idx_type> _buffer_idx (nd); octave_idx_type *idx = _buffer_idx; for (size_t _buf_iter = 0, _buf_size = nd; _buf_iter < _buf_size; _buf_iter++) idx[_buf_iter] = 0;
      for (octave_idx_type iter = 0; iter < niter; iter++)
        {
          octave_quit ();



          octave_idx_type xidx = cdvx.cum_compute_index (idx);
          octave_idx_type yidx = cdvy.cum_compute_index (idx);
          octave_idx_type ridx = dvr.compute_index (idx);


          if (xsing)
            op_sv (ldr, rvec + ridx, xvec[xidx], yvec + yidx);
          else if (ysing)
            op_vs (ldr, rvec + ridx, xvec + xidx, yvec[yidx]);
          else
            op_vv (ldr, rvec + ridx, xvec + xidx, yvec + yidx);

          dvr.increment_index (idx + start, start);
        }
    }

  return retval;
}

template <typename R, typename X>
void
do_inplace_bsxfun_op (Array<R>& r, const Array<X>& x,
                      void (*op_vv) (size_t, R *, const X *),
                      void (*op_vs) (size_t, R *, X))
{
  dim_vector dvr = r.dims ();
  dim_vector dvx = x.dims ();
  octave_idx_type nd = r.ndims ();
  dvx.redim (nd);

  const X* xvec = x.fortran_vec ();
  R* rvec = r.fortran_vec ();


  octave_idx_type start, ldr = 1;
  for (start = 0; start < nd; start++)
    {
      if (dvr(start) != dvx(start))
        break;
      ldr *= dvr(start);
    }

  if (r.is_empty ())
    ;
  else if (start == nd)
    op_vv (r.numel (), rvec, xvec);
  else
    {

      bool xsing = false;
      if (ldr == 1)
        {
          xsing = dvx(start) == 1;
          if (xsing)
            {
              ldr *= dvr(start) * dvx(start);
              start++;
            }
        }

      dim_vector cdvx = dvx.cumulative ();

      for (int i = std::max (start, octave_idx_type (1)); i < nd; i++)
        {
          if (dvx(i) == 1)
            cdvx(i-1) = 0;
        }

      octave_idx_type niter = dvr.numel (start);

      octave_local_buffer<octave_idx_type> _buffer_idx (nd); octave_idx_type *idx = _buffer_idx; for (size_t _buf_iter = 0, _buf_size = nd; _buf_iter < _buf_size; _buf_iter++) idx[_buf_iter] = 0;
      for (octave_idx_type iter = 0; iter < niter; iter++)
        {
          octave_quit ();



          octave_idx_type xidx = cdvx.cum_compute_index (idx);
          octave_idx_type ridx = dvr.compute_index (idx);


          if (xsing)
            op_vs (ldr, rvec + ridx, xvec[xidx]);
          else
            op_vv (ldr, rvec + ridx, xvec + xidx);

          dvr.increment_index (idx + start, start);
        }
    }
}
# 88 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/bsxfun.h" 2
# 46 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc" 2



template <typename R, typename S>
inline void mx_inline_fill (size_t n, R *r, S s) throw ()
{
  for (size_t i = 0; i < n; i++)
    r[i] = s;
}
# 64 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename R, typename X> inline void mx_inline_uminus (size_t n, R *r, const X *x) throw () { for (size_t i = 0; i < n; i++) r[i] = - x[i]; }
# 74 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename R> inline void mx_inline_uminus2 (size_t n, R *r) throw () { for (size_t i = 0; i < n; i++) r[i] = - r[i]; }
# 85 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename X> inline void mx_inline_iszero (size_t n, bool *r, const X *x) throw () { const X zero = X (); for (size_t i = 0; i < n; i++) r[i] = x[i] == zero; }
template <typename X> inline void mx_inline_notzero (size_t n, bool *r, const X *x) throw () { const X zero = X (); for (size_t i = 0; i < n; i++) r[i] = x[i] != zero; }
# 108 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename R, typename X, typename Y> inline void mx_inline_add (size_t n, R *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] + y[i]; } template <typename R, typename X, typename Y> inline void mx_inline_add (size_t n, R *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] + y; } template <typename R, typename X, typename Y> inline void mx_inline_add (size_t n, R *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x + y[i]; }
template <typename R, typename X, typename Y> inline void mx_inline_sub (size_t n, R *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] - y[i]; } template <typename R, typename X, typename Y> inline void mx_inline_sub (size_t n, R *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] - y; } template <typename R, typename X, typename Y> inline void mx_inline_sub (size_t n, R *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x - y[i]; }
template <typename R, typename X, typename Y> inline void mx_inline_mul (size_t n, R *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] * y[i]; } template <typename R, typename X, typename Y> inline void mx_inline_mul (size_t n, R *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] * y; } template <typename R, typename X, typename Y> inline void mx_inline_mul (size_t n, R *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x * y[i]; }
template <typename R, typename X, typename Y> inline void mx_inline_div (size_t n, R *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] / y[i]; } template <typename R, typename X, typename Y> inline void mx_inline_div (size_t n, R *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] / y; } template <typename R, typename X, typename Y> inline void mx_inline_div (size_t n, R *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x / y[i]; }
# 127 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename R, typename X> inline void mx_inline_add2 (size_t n, R *r, const X *x) throw () { for (size_t i = 0; i < n; i++) r[i] += x[i]; } template <typename R, typename X> inline void mx_inline_add2 (size_t n, R *r, X x) throw () { for (size_t i = 0; i < n; i++) r[i] += x; }
template <typename R, typename X> inline void mx_inline_sub2 (size_t n, R *r, const X *x) throw () { for (size_t i = 0; i < n; i++) r[i] -= x[i]; } template <typename R, typename X> inline void mx_inline_sub2 (size_t n, R *r, X x) throw () { for (size_t i = 0; i < n; i++) r[i] -= x; }
template <typename R, typename X> inline void mx_inline_mul2 (size_t n, R *r, const X *x) throw () { for (size_t i = 0; i < n; i++) r[i] *= x[i]; } template <typename R, typename X> inline void mx_inline_mul2 (size_t n, R *r, X x) throw () { for (size_t i = 0; i < n; i++) r[i] *= x; }
template <typename R, typename X> inline void mx_inline_div2 (size_t n, R *r, const X *x) throw () { for (size_t i = 0; i < n; i++) r[i] /= x[i]; } template <typename R, typename X> inline void mx_inline_div2 (size_t n, R *r, X x) throw () { for (size_t i = 0; i < n; i++) r[i] /= x; }
# 152 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename X, typename Y> inline void mx_inline_lt (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] < y[i]; } template <typename X, typename Y> inline void mx_inline_lt (size_t n, bool *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] < y; } template <typename X, typename Y> inline void mx_inline_lt (size_t n, bool *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x < y[i]; }
template <typename X, typename Y> inline void mx_inline_le (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] <= y[i]; } template <typename X, typename Y> inline void mx_inline_le (size_t n, bool *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] <= y; } template <typename X, typename Y> inline void mx_inline_le (size_t n, bool *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x <= y[i]; }
template <typename X, typename Y> inline void mx_inline_gt (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] > y[i]; } template <typename X, typename Y> inline void mx_inline_gt (size_t n, bool *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] > y; } template <typename X, typename Y> inline void mx_inline_gt (size_t n, bool *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x > y[i]; }
template <typename X, typename Y> inline void mx_inline_ge (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] >= y[i]; } template <typename X, typename Y> inline void mx_inline_ge (size_t n, bool *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] >= y; } template <typename X, typename Y> inline void mx_inline_ge (size_t n, bool *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x >= y[i]; }
template <typename X, typename Y> inline void mx_inline_eq (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] == y[i]; } template <typename X, typename Y> inline void mx_inline_eq (size_t n, bool *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] == y; } template <typename X, typename Y> inline void mx_inline_eq (size_t n, bool *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x == y[i]; }
template <typename X, typename Y> inline void mx_inline_ne (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] != y[i]; } template <typename X, typename Y> inline void mx_inline_ne (size_t n, bool *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = x[i] != y; } template <typename X, typename Y> inline void mx_inline_ne (size_t n, bool *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = x != y[i]; }


template <typename T>
inline bool
logical_value (T x)
{
  return x;
}

template <typename T>
inline bool
logical_value (const std::complex<T>& x)
{
  return x.real () != 0 || x.imag () != 0;
}

template <typename T>
inline bool
logical_value (const octave_int<T>& x)
{
  return x.value ();
}

template <typename X>
void mx_inline_not (size_t n, bool *r, const X* x) throw ()
{
  for (size_t i = 0; i < n; i++)
    r[i] = ! logical_value (x[i]);
}

inline void mx_inline_not2 (size_t n, bool *r) throw ()
{
  for (size_t i = 0; i < n; i++)
    r[i] = ! r[i];
}
# 217 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename X, typename Y> inline void mx_inline_and (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = (( logical_value (x[i])) & ( logical_value (y[i]))); } template <typename X, typename Y> inline void mx_inline_and (size_t n, bool *r, const X *x, Y y) throw () { const bool yy = ( logical_value (y)); for (size_t i = 0; i < n; i++) r[i] = ( logical_value (x[i])) & yy; } template <typename X, typename Y> inline void mx_inline_and (size_t n, bool *r, X x, const Y *y) throw () { const bool xx = ( logical_value (x)); for (size_t i = 0; i < n; i++) r[i] = xx & ( logical_value (y[i])); }
template <typename X, typename Y> inline void mx_inline_or (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = (( logical_value (x[i])) | ( logical_value (y[i]))); } template <typename X, typename Y> inline void mx_inline_or (size_t n, bool *r, const X *x, Y y) throw () { const bool yy = ( logical_value (y)); for (size_t i = 0; i < n; i++) r[i] = ( logical_value (x[i])) | yy; } template <typename X, typename Y> inline void mx_inline_or (size_t n, bool *r, X x, const Y *y) throw () { const bool xx = ( logical_value (x)); for (size_t i = 0; i < n; i++) r[i] = xx | ( logical_value (y[i])); }
template <typename X, typename Y> inline void mx_inline_not_and (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = ((! logical_value (x[i])) & ( logical_value (y[i]))); } template <typename X, typename Y> inline void mx_inline_not_and (size_t n, bool *r, const X *x, Y y) throw () { const bool yy = ( logical_value (y)); for (size_t i = 0; i < n; i++) r[i] = (! logical_value (x[i])) & yy; } template <typename X, typename Y> inline void mx_inline_not_and (size_t n, bool *r, X x, const Y *y) throw () { const bool xx = (! logical_value (x)); for (size_t i = 0; i < n; i++) r[i] = xx & ( logical_value (y[i])); }
template <typename X, typename Y> inline void mx_inline_not_or (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = ((! logical_value (x[i])) | ( logical_value (y[i]))); } template <typename X, typename Y> inline void mx_inline_not_or (size_t n, bool *r, const X *x, Y y) throw () { const bool yy = ( logical_value (y)); for (size_t i = 0; i < n; i++) r[i] = (! logical_value (x[i])) | yy; } template <typename X, typename Y> inline void mx_inline_not_or (size_t n, bool *r, X x, const Y *y) throw () { const bool xx = (! logical_value (x)); for (size_t i = 0; i < n; i++) r[i] = xx | ( logical_value (y[i])); }
template <typename X, typename Y> inline void mx_inline_and_not (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = (( logical_value (x[i])) & (! logical_value (y[i]))); } template <typename X, typename Y> inline void mx_inline_and_not (size_t n, bool *r, const X *x, Y y) throw () { const bool yy = (! logical_value (y)); for (size_t i = 0; i < n; i++) r[i] = ( logical_value (x[i])) & yy; } template <typename X, typename Y> inline void mx_inline_and_not (size_t n, bool *r, X x, const Y *y) throw () { const bool xx = ( logical_value (x)); for (size_t i = 0; i < n; i++) r[i] = xx & (! logical_value (y[i])); }
template <typename X, typename Y> inline void mx_inline_or_not (size_t n, bool *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = (( logical_value (x[i])) | (! logical_value (y[i]))); } template <typename X, typename Y> inline void mx_inline_or_not (size_t n, bool *r, const X *x, Y y) throw () { const bool yy = (! logical_value (y)); for (size_t i = 0; i < n; i++) r[i] = ( logical_value (x[i])) | yy; } template <typename X, typename Y> inline void mx_inline_or_not (size_t n, bool *r, X x, const Y *y) throw () { const bool xx = ( logical_value (x)); for (size_t i = 0; i < n; i++) r[i] = xx | (! logical_value (y[i])); }
# 238 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename X> inline void mx_inline_and2 (size_t n, bool *r, const X *x) throw () { for (size_t i = 0; i < n; i++) r[i] &= logical_value (x[i]); } template <typename X> inline void mx_inline_and2 (size_t n, bool *r, X x) throw () { for (size_t i = 0; i < n; i++) r[i] &= x; }
template <typename X> inline void mx_inline_or2 (size_t n, bool *r, const X *x) throw () { for (size_t i = 0; i < n; i++) r[i] |= logical_value (x[i]); } template <typename X> inline void mx_inline_or2 (size_t n, bool *r, X x) throw () { for (size_t i = 0; i < n; i++) r[i] |= x; }

template <typename T>
inline bool
mx_inline_any_nan (size_t n, const T* x) throw ()
{
  for (size_t i = 0; i < n; i++)
    {
      if (octave::math::isnan (x[i]))
        return true;
    }

  return false;
}

template <typename T>
inline bool
mx_inline_all_finite (size_t n, const T* x) throw ()
{
  for (size_t i = 0; i < n; i++)
    {
      if (! octave::math::finite (x[i]))
        return false;
    }

  return true;
}

template <typename T>
inline bool
mx_inline_any_negative (size_t n, const T* x) throw ()
{
  for (size_t i = 0; i < n; i++)
    {
      if (x[i] < 0)
        return true;
    }

  return false;
}

template <typename T>
inline bool
mx_inline_any_positive (size_t n, const T* x) throw ()
{
  for (size_t i = 0; i < n; i++)
    {
      if (x[i] > 0)
        return true;
    }

  return false;
}

template <typename T>
inline bool
mx_inline_all_real (size_t n, const std::complex<T>* x) throw ()
{
  for (size_t i = 0; i < n; i++)
    {
      if (x[i].imag () != 0)
        return false;
    }

  return true;
}
# 314 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T>
inline void mx_inline_real (size_t n, T *r, const std::complex<T>* x) throw ()
{
  for (size_t i = 0; i < n; i++)
    r[i] = x[i].real ();
}

template <typename T>
inline void mx_inline_imag (size_t n, T *r, const std::complex<T>* x) throw ()
{
  for (size_t i = 0; i < n; i++)
    r[i] = x[i].imag ();
}
# 349 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_xmin (size_t n, T *r, const T *x, const T *y) throw () { for (size_t i = 0; i < n; i++) r[i] = octave::math::min (x[i], y[i]); } template <typename T> inline void mx_inline_xmin (size_t n, T *r, const T *x, T y) throw () { for (size_t i = 0; i < n; i++) r[i] = octave::math::min (x[i], y); } template <typename T> inline void mx_inline_xmin (size_t n, T *r, T x, const T *y) throw () { for (size_t i = 0; i < n; i++) r[i] = octave::math::min (x, y[i]); }
template <typename T> inline void mx_inline_xmax (size_t n, T *r, const T *x, const T *y) throw () { for (size_t i = 0; i < n; i++) r[i] = octave::math::max (x[i], y[i]); } template <typename T> inline void mx_inline_xmax (size_t n, T *r, const T *x, T y) throw () { for (size_t i = 0; i < n; i++) r[i] = octave::math::max (x[i], y); } template <typename T> inline void mx_inline_xmax (size_t n, T *r, T x, const T *y) throw () { for (size_t i = 0; i < n; i++) r[i] = octave::math::max (x, y[i]); }
# 373 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <> inline void mx_inline_xmin<double> (size_t n, double *r, const double *x, double y) throw () { if (octave::math::isnan (y)) std::memcpy (r, x, n * sizeof (double)); else for (size_t i = 0; i < n; i++) r[i] = (x[i] <= y) ? x[i] : y; } template <> inline void mx_inline_xmin<double> (size_t n, double *r, double x, const double *y) throw () { if (octave::math::isnan (x)) std::memcpy (r, y, n * sizeof (double)); else for (size_t i = 0; i < n; i++) r[i] = (y[i] <= x) ? y[i] : x; }
template <> inline void mx_inline_xmax<double> (size_t n, double *r, const double *x, double y) throw () { if (octave::math::isnan (y)) std::memcpy (r, x, n * sizeof (double)); else for (size_t i = 0; i < n; i++) r[i] = (x[i] >= y) ? x[i] : y; } template <> inline void mx_inline_xmax<double> (size_t n, double *r, double x, const double *y) throw () { if (octave::math::isnan (x)) std::memcpy (r, y, n * sizeof (double)); else for (size_t i = 0; i < n; i++) r[i] = (y[i] >= x) ? y[i] : x; }
template <> inline void mx_inline_xmin<float> (size_t n, float *r, const float *x, float y) throw () { if (octave::math::isnan (y)) std::memcpy (r, x, n * sizeof (float)); else for (size_t i = 0; i < n; i++) r[i] = (x[i] <= y) ? x[i] : y; } template <> inline void mx_inline_xmin<float> (size_t n, float *r, float x, const float *y) throw () { if (octave::math::isnan (x)) std::memcpy (r, y, n * sizeof (float)); else for (size_t i = 0; i < n; i++) r[i] = (y[i] <= x) ? y[i] : x; }
template <> inline void mx_inline_xmax<float> (size_t n, float *r, const float *x, float y) throw () { if (octave::math::isnan (y)) std::memcpy (r, x, n * sizeof (float)); else for (size_t i = 0; i < n; i++) r[i] = (x[i] >= y) ? x[i] : y; } template <> inline void mx_inline_xmax<float> (size_t n, float *r, float x, const float *y) throw () { if (octave::math::isnan (x)) std::memcpy (r, y, n * sizeof (float)); else for (size_t i = 0; i < n; i++) r[i] = (y[i] >= x) ? y[i] : x; }
# 401 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
using std::pow;
template <typename R, typename X, typename Y> inline void mx_inline_pow (size_t n, R *r, const X *x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = pow (x[i], y[i]); } template <typename R, typename X, typename Y> inline void mx_inline_pow (size_t n, R *r, const X *x, Y y) throw () { for (size_t i = 0; i < n; i++) r[i] = pow (x[i], y); } template <typename R, typename X, typename Y> inline void mx_inline_pow (size_t n, R *r, X x, const Y *y) throw () { for (size_t i = 0; i < n; i++) r[i] = pow (x, y[i]); }



template <typename R, typename X, R fun (X x)>
inline void mx_inline_map (size_t n, R *r, const X *x) throw ()
{
  for (size_t i = 0; i < n; i++)
    r[i] = fun (x[i]);
}

template <typename R, typename X, R fun (const X& x)>
inline void mx_inline_map (size_t n, R *r, const X *x) throw ()
{
  for (size_t i = 0; i < n; i++)
    r[i] = fun (x[i]);
}




template <typename R, typename X>
inline Array<R>
do_mx_unary_op (const Array<X>& x,
                void (*op) (size_t, R *, const X *) throw ())
{
  Array<R> r (x.dims ());
  op (r.numel (), r.fortran_vec (), x.data ());
  return r;
}



template <typename R, typename X, R fun (X)>
inline Array<R>
do_mx_unary_map (const Array<X>& x)
{
  return do_mx_unary_op<R, X> (x, mx_inline_map<R, X, fun>);
}

template <typename R, typename X, R fun (const X&)>
inline Array<R>
do_mx_unary_map (const Array<X>& x)
{
  return do_mx_unary_op<R, X> (x, mx_inline_map<R, X, fun>);
}

template <typename R>
inline Array<R>&
do_mx_inplace_op (Array<R>& r,
                  void (*op) (size_t, R *) throw ())
{
  op (r.numel (), r.fortran_vec ());
  return r;
}

template <typename R, typename X, typename Y>
inline Array<R>
do_mm_binary_op (const Array<X>& x, const Array<Y>& y,
                 void (*op) (size_t, R *, const X *, const Y *) throw (),
                 void (*op1) (size_t, R *, X, const Y *) throw (),
                 void (*op2) (size_t, R *, const X *, Y) throw (),
                 const char *opname)
{
  dim_vector dx = x.dims ();
  dim_vector dy = y.dims ();
  if (dx == dy)
    {
      Array<R> r (dx);
      op (r.numel (), r.fortran_vec (), x.data (), y.data ());
      return r;
    }
  else if (is_valid_bsxfun (opname, dx, dy))
    {
      return do_bsxfun_op (x, y, op, op1, op2);
    }
  else
    octave::err_nonconformant (opname, dx, dy);
}

template <typename R, typename X, typename Y>
inline Array<R>
do_ms_binary_op (const Array<X>& x, const Y& y,
                 void (*op) (size_t, R *, const X *, Y) throw ())
{
  Array<R> r (x.dims ());
  op (r.numel (), r.fortran_vec (), x.data (), y);
  return r;
}

template <typename R, typename X, typename Y>
inline Array<R>
do_sm_binary_op (const X& x, const Array<Y>& y,
                 void (*op) (size_t, R *, X, const Y *) throw ())
{
  Array<R> r (y.dims ());
  op (r.numel (), r.fortran_vec (), x, y.data ());
  return r;
}

template <typename R, typename X>
inline Array<R>&
do_mm_inplace_op (Array<R>& r, const Array<X>& x,
                  void (*op) (size_t, R *, const X *) throw (),
                  void (*op1) (size_t, R *, X) throw (),
                  const char *opname)
{
  dim_vector dr = r.dims ();
  dim_vector dx = x.dims ();
  if (dr == dx)
    op (r.numel (), r.fortran_vec (), x.data ());
  else if (is_valid_inplace_bsxfun (opname, dr, dx))
    do_inplace_bsxfun_op (r, x, op, op1);
  else
    octave::err_nonconformant (opname, dr, dx);

  return r;
}

template <typename R, typename X>
inline Array<R>&
do_ms_inplace_op (Array<R>& r, const X& x,
                  void (*op) (size_t, R *, X) throw ())
{
  op (r.numel (), r.fortran_vec (), x);
  return r;
}

template <typename T1, typename T2>
inline bool
mx_inline_equal (size_t n, const T1 *x, const T2 *y) throw ()
{
  for (size_t i = 0; i < n; i++)
    if (x[i] != y[i])
      return false;
  return true;
}

template <typename T>
inline bool
do_mx_check (const Array<T>& a,
             bool (*op) (size_t, const T *) throw ())
{
  return op (a.numel (), a.data ());
}



template <typename T>
inline T cabsq (const std::complex<T>& c)
{
  return c.real () * c.real () + c.imag () * c.imag ();
}


template <typename T>
inline bool
xis_true (T x)
{
  return x;
}

template <typename T>
inline bool
xis_false (T x)
{
  return ! x;
}


template <typename T>
inline bool
xis_true (const octave_int<T>& x)
{
  return x.value ();
}

template <typename T>
inline bool
xis_false (const octave_int<T>& x)
{
  return ! x.value ();
}


inline bool
xis_true (double x)
{
  return ! octave::math::isnan (x) && x != 0.0;
}

inline bool
xis_false (double x)
{
  return x == 0.0;
}

inline bool
xis_true (float x)
{
  return ! octave::math::isnan (x) && x != 0.0f;
}

inline bool
xis_false (float x)
{
  return x == 0.0f;
}


inline bool
xis_true (const Complex& x)
{
  return ! octave::math::isnan (x) && x != 0.0;
}

inline bool
xis_false (const Complex& x)
{
  return x == 0.0;
}

inline bool
xis_true (const FloatComplex& x)
{
  return ! octave::math::isnan (x) && x != 0.0f;
}

inline bool
xis_false (const FloatComplex& x)
{
  return x == 0.0f;
}






inline void
op_dble_prod (double& ac, float el)
{
  ac *= el;
}


inline void
op_dble_prod (Complex& ac, const FloatComplex& el)
{
  ac *= el;
}

template <typename T>
inline void
op_dble_prod (double& ac, const octave_int<T>& el)
{
  ac *= el.double_value ();
}

inline void
op_dble_sum (double& ac, float el)
{
  ac += el;
}


inline void
op_dble_sum (Complex& ac, const FloatComplex& el)
{
  ac += el;
}

template <typename T>
inline void
op_dble_sum (double& ac, const octave_int<T>& el)
{
  ac += el.double_value ();
}
# 714 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline T mx_inline_sum (const T* v, octave_idx_type n) { T ac = 0; for (octave_idx_type i = 0; i < n; i++) ac += v[i]; return ac; }
template <typename T> inline typename subst_template_param<std::complex, T, double>::type mx_inline_dsum (const T* v, octave_idx_type n) { typename subst_template_param<std::complex, T, double>::type ac = 0.0; for (octave_idx_type i = 0; i < n; i++) op_dble_sum(ac, v[i]); return ac; }
template <typename T> inline T mx_inline_count (const bool* v, octave_idx_type n) { T ac = 0; for (octave_idx_type i = 0; i < n; i++) ac += v[i]; return ac; }
template <typename T> inline T mx_inline_prod (const T* v, octave_idx_type n) { T ac = 1; for (octave_idx_type i = 0; i < n; i++) ac *= v[i]; return ac; }
template <typename T> inline typename subst_template_param<std::complex, T, double>::type mx_inline_dprod (const T* v, octave_idx_type n) { typename subst_template_param<std::complex, T, double>::type ac = 1; for (octave_idx_type i = 0; i < n; i++) op_dble_prod(ac, v[i]); return ac; }
template <typename T> inline T mx_inline_sumsq (const T* v, octave_idx_type n) { T ac = 0; for (octave_idx_type i = 0; i < n; i++) ac += v[i]*v[i]; return ac; }
template <typename T> inline T mx_inline_sumsq (const std::complex<T>* v, octave_idx_type n) { T ac = 0; for (octave_idx_type i = 0; i < n; i++) ac += cabsq (v[i]); return ac; }
template <typename T> inline bool mx_inline_any (const T* v, octave_idx_type n) { bool ac = false; for (octave_idx_type i = 0; i < n; i++) if (xis_true (v[i])) { ac = true; break; } else continue; return ac; }
template <typename T> inline bool mx_inline_all (const T* v, octave_idx_type n) { bool ac = true; for (octave_idx_type i = 0; i < n; i++) if (xis_false (v[i])) { ac = false; break; } else continue; return ac; }
# 739 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_sum (const T* v, T *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = 0; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) r[i] += v[i]; v += m; } }
template <typename T> inline void mx_inline_dsum (const T* v, typename subst_template_param<std::complex, T, double>::type *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = 0.0; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) op_dble_sum(r[i], v[i]); v += m; } }
template <typename T> inline void mx_inline_count (const bool* v, T *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = 0; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) r[i] += v[i]; v += m; } }
template <typename T> inline void mx_inline_prod (const T* v, T *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = 1; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) r[i] *= v[i]; v += m; } }
template <typename T> inline void mx_inline_dprod (const T* v, typename subst_template_param<std::complex, T, double>::type *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = 0.0; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) op_dble_prod(r[i], v[i]); v += m; } }
template <typename T> inline void mx_inline_sumsq (const T* v, T *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = 0; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) r[i] += v[i]*v[i]; v += m; } }
template <typename T> inline void mx_inline_sumsq (const std::complex<T>* v, T *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = 0; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) r[i] += cabsq (v[i]); v += m; } }




template <typename T> inline void mx_inline_any_r (const T* v, bool *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = false; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) r[i] |= xis_true (v[i]); v += m; } }
template <typename T> inline void mx_inline_all_r (const T* v, bool *r, octave_idx_type m, octave_idx_type n) { for (octave_idx_type i = 0; i < m; i++) r[i] = true; for (octave_idx_type j = 0; j < n; j++) { for (octave_idx_type i = 0; i < m; i++) r[i] &= xis_true (v[i]); v += m; } }
# 786 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_any (const T* v, bool *r, octave_idx_type m, octave_idx_type n) { if (n <= 8) return mx_inline_any_r (v, r, m, n); octave_local_buffer<octave_idx_type> _buffer_iact (m); octave_idx_type *iact = _buffer_iact; for (octave_idx_type i = 0; i < m; i++) iact[i] = i; octave_idx_type nact = m; for (octave_idx_type j = 0; j < n; j++) { octave_idx_type k = 0; for (octave_idx_type i = 0; i < nact; i++) { octave_idx_type ia = iact[i]; if (! xis_true (v[ia])) iact[k++] = ia; } nact = k; v += m; } for (octave_idx_type i = 0; i < m; i++) r[i] = ! false; for (octave_idx_type i = 0; i < nact; i++) r[iact[i]] = false; }
template <typename T> inline void mx_inline_all (const T* v, bool *r, octave_idx_type m, octave_idx_type n) { if (n <= 8) return mx_inline_all_r (v, r, m, n); octave_local_buffer<octave_idx_type> _buffer_iact (m); octave_idx_type *iact = _buffer_iact; for (octave_idx_type i = 0; i < m; i++) iact[i] = i; octave_idx_type nact = m; for (octave_idx_type j = 0; j < n; j++) { octave_idx_type k = 0; for (octave_idx_type i = 0; i < nact; i++) { octave_idx_type ia = iact[i]; if (! xis_false (v[ia])) iact[k++] = ia; } nact = k; v += m; } for (octave_idx_type i = 0; i < m; i++) r[i] = ! true; for (octave_idx_type i = 0; i < nact; i++) r[iact[i]] = true; }
# 814 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_sum (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_sum<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_sum (v, r, l, n); v += l*n; r += l; } } }
template <typename T> inline void mx_inline_dsum (const T *v, typename subst_template_param<std::complex, T, double>::type *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_dsum<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_dsum (v, r, l, n); v += l*n; r += l; } } }
template <typename T> inline void mx_inline_count (const bool *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_count<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_count (v, r, l, n); v += l*n; r += l; } } }
template <typename T> inline void mx_inline_prod (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_prod<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_prod (v, r, l, n); v += l*n; r += l; } } }
template <typename T> inline void mx_inline_dprod (const T *v, typename subst_template_param<std::complex, T, double>::type *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_dprod<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_dprod (v, r, l, n); v += l*n; r += l; } } }
template <typename T> inline void mx_inline_sumsq (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_sumsq<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_sumsq (v, r, l, n); v += l*n; r += l; } } }
template <typename T> inline void mx_inline_sumsq (const std::complex<T> *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_sumsq<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_sumsq (v, r, l, n); v += l*n; r += l; } } }
template <typename T> inline void mx_inline_any (const T *v, bool *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_any<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_any (v, r, l, n); v += l*n; r += l; } } }
template <typename T> inline void mx_inline_all (const T *v, bool *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_all<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_all (v, r, l, n); v += l*n; r += l; } } }
# 837 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_cumsum (const T *v, T *r, octave_idx_type n) { if (n) { T t = r[0] = v[0]; for (octave_idx_type i = 1; i < n; i++) r[i] = t = t + v[i]; } }
template <typename T> inline void mx_inline_cumprod (const T *v, T *r, octave_idx_type n) { if (n) { T t = r[0] = v[0]; for (octave_idx_type i = 1; i < n; i++) r[i] = t = t * v[i]; } }
template <typename T> inline void mx_inline_cumcount (const bool *v, T *r, octave_idx_type n) { if (n) { T t = r[0] = v[0]; for (octave_idx_type i = 1; i < n; i++) r[i] = t = t + v[i]; } }
# 861 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_cumsum (const T *v, T *r, octave_idx_type m, octave_idx_type n) { if (n) { for (octave_idx_type i = 0; i < m; i++) r[i] = v[i]; const T *r0 = r; for (octave_idx_type j = 1; j < n; j++) { r += m; v += m; for (octave_idx_type i = 0; i < m; i++) r[i] = r0[i] + v[i]; r0 += m; } } }
template <typename T> inline void mx_inline_cumprod (const T *v, T *r, octave_idx_type m, octave_idx_type n) { if (n) { for (octave_idx_type i = 0; i < m; i++) r[i] = v[i]; const T *r0 = r; for (octave_idx_type j = 1; j < n; j++) { r += m; v += m; for (octave_idx_type i = 0; i < m; i++) r[i] = r0[i] * v[i]; r0 += m; } } }
template <typename T> inline void mx_inline_cumcount (const bool *v, T *r, octave_idx_type m, octave_idx_type n) { if (n) { for (octave_idx_type i = 0; i < m; i++) r[i] = v[i]; const T *r0 = r; for (octave_idx_type j = 1; j < n; j++) { r += m; v += m; for (octave_idx_type i = 0; i < m; i++) r[i] = r0[i] + v[i]; r0 += m; } } }
# 891 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_cumsum (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cumsum (v, r, n); v += n; r += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cumsum (v, r, l, n); v += l*n; r += l*n; } } }
template <typename T> inline void mx_inline_cumprod (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cumprod (v, r, n); v += n; r += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cumprod (v, r, l, n); v += l*n; r += l*n; } } }
template <typename T> inline void mx_inline_cumcount (const bool *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cumcount (v, r, n); v += n; r += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cumcount (v, r, l, n); v += l*n; r += l*n; } } }
# 941 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> void mx_inline_min (const T *v, T *r, octave_idx_type n) { if (! n) return; T tmp = v[0]; octave_idx_type i = 1; if (octave::math::isnan (tmp)) { for (; i < n && octave::math::isnan (v[i]); i++) ; if (i < n) tmp = v[i]; } for (; i < n; i++) if (v[i] < tmp) tmp = v[i]; *r = tmp; } template <typename T> void mx_inline_min (const T *v, T *r, octave_idx_type *ri, octave_idx_type n) { if (! n) return; T tmp = v[0]; octave_idx_type tmpi = 0; octave_idx_type i = 1; if (octave::math::isnan (tmp)) { for (; i < n && octave::math::isnan (v[i]); i++) ; if (i < n) { tmp = v[i]; tmpi = i; } } for (; i < n; i++) if (v[i] < tmp) { tmp = v[i]; tmpi = i; } *r = tmp; *ri = tmpi; }
template <typename T> void mx_inline_max (const T *v, T *r, octave_idx_type n) { if (! n) return; T tmp = v[0]; octave_idx_type i = 1; if (octave::math::isnan (tmp)) { for (; i < n && octave::math::isnan (v[i]); i++) ; if (i < n) tmp = v[i]; } for (; i < n; i++) if (v[i] > tmp) tmp = v[i]; *r = tmp; } template <typename T> void mx_inline_max (const T *v, T *r, octave_idx_type *ri, octave_idx_type n) { if (! n) return; T tmp = v[0]; octave_idx_type tmpi = 0; octave_idx_type i = 1; if (octave::math::isnan (tmp)) { for (; i < n && octave::math::isnan (v[i]); i++) ; if (i < n) { tmp = v[i]; tmpi = i; } } for (; i < n; i++) if (v[i] > tmp) { tmp = v[i]; tmpi = i; } *r = tmp; *ri = tmpi; }
# 1034 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_min (const T *v, T *r, octave_idx_type m, octave_idx_type n) { if (! n) return; bool nan = false; octave_idx_type j = 0; for (octave_idx_type i = 0; i < m; i++) { r[i] = v[i]; if (octave::math::isnan (v[i])) nan = true; } j++; v += m; while (nan && j < n) { nan = false; for (octave_idx_type i = 0; i < m; i++) { if (octave::math::isnan (v[i])) nan = true; else if (octave::math::isnan (r[i]) || v[i] < r[i]) r[i] = v[i]; } j++; v += m; } while (j < n) { for (octave_idx_type i = 0; i < m; i++) if (v[i] < r[i]) r[i] = v[i]; j++; v += m; } } template <typename T> inline void mx_inline_min (const T *v, T *r, octave_idx_type *ri, octave_idx_type m, octave_idx_type n) { if (! n) return; bool nan = false; octave_idx_type j = 0; for (octave_idx_type i = 0; i < m; i++) { r[i] = v[i]; ri[i] = j; if (octave::math::isnan (v[i])) nan = true; } j++; v += m; while (nan && j < n) { nan = false; for (octave_idx_type i = 0; i < m; i++) { if (octave::math::isnan (v[i])) nan = true; else if (octave::math::isnan (r[i]) || v[i] < r[i]) { r[i] = v[i]; ri[i] = j; } } j++; v += m; } while (j < n) { for (octave_idx_type i = 0; i < m; i++) if (v[i] < r[i]) { r[i] = v[i]; ri[i] = j; } j++; v += m; } }
template <typename T> inline void mx_inline_max (const T *v, T *r, octave_idx_type m, octave_idx_type n) { if (! n) return; bool nan = false; octave_idx_type j = 0; for (octave_idx_type i = 0; i < m; i++) { r[i] = v[i]; if (octave::math::isnan (v[i])) nan = true; } j++; v += m; while (nan && j < n) { nan = false; for (octave_idx_type i = 0; i < m; i++) { if (octave::math::isnan (v[i])) nan = true; else if (octave::math::isnan (r[i]) || v[i] > r[i]) r[i] = v[i]; } j++; v += m; } while (j < n) { for (octave_idx_type i = 0; i < m; i++) if (v[i] > r[i]) r[i] = v[i]; j++; v += m; } } template <typename T> inline void mx_inline_max (const T *v, T *r, octave_idx_type *ri, octave_idx_type m, octave_idx_type n) { if (! n) return; bool nan = false; octave_idx_type j = 0; for (octave_idx_type i = 0; i < m; i++) { r[i] = v[i]; ri[i] = j; if (octave::math::isnan (v[i])) nan = true; } j++; v += m; while (nan && j < n) { nan = false; for (octave_idx_type i = 0; i < m; i++) { if (octave::math::isnan (v[i])) nan = true; else if (octave::math::isnan (r[i]) || v[i] > r[i]) { r[i] = v[i]; ri[i] = j; } } j++; v += m; } while (j < n) { for (octave_idx_type i = 0; i < m; i++) if (v[i] > r[i]) { r[i] = v[i]; ri[i] = j; } j++; v += m; } }
# 1092 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_min (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (! n) return; if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_min (v, r, n); v += n; r++; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_min (v, r, l, n); v += l*n; r += l; } } } template <typename T> inline void mx_inline_min (const T *v, T *r, octave_idx_type *ri, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (! n) return; if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_min (v, r, ri, n); v += n; r++; ri++; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_min (v, r, ri, l, n); v += l*n; r += l; ri += l; } } }
template <typename T> inline void mx_inline_max (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (! n) return; if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_max (v, r, n); v += n; r++; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_max (v, r, l, n); v += l*n; r += l; } } } template <typename T> inline void mx_inline_max (const T *v, T *r, octave_idx_type *ri, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (! n) return; if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_max (v, r, ri, n); v += n; r++; ri++; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_max (v, r, ri, l, n); v += l*n; r += l; ri += l; } } }
# 1163 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> void mx_inline_cummin (const T *v, T *r, octave_idx_type n) { if (! n) return; T tmp = v[0]; octave_idx_type i = 1; octave_idx_type j = 0; if (octave::math::isnan (tmp)) { for (; i < n && octave::math::isnan (v[i]); i++) ; for (; j < i; j++) r[j] = tmp; if (i < n) tmp = v[i]; } for (; i < n; i++) if (v[i] < tmp) { for (; j < i; j++) r[j] = tmp; tmp = v[i]; } for (; j < i; j++) r[j] = tmp; } template <typename T> void mx_inline_cummin (const T *v, T *r, octave_idx_type *ri, octave_idx_type n) { if (! n) return; T tmp = v[0]; octave_idx_type tmpi = 0; octave_idx_type i = 1; octave_idx_type j = 0; if (octave::math::isnan (tmp)) { for (; i < n && octave::math::isnan (v[i]); i++) ; for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } if (i < n) { tmp = v[i]; tmpi = i; } } for (; i < n; i++) if (v[i] < tmp) { for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } tmp = v[i]; tmpi = i; } for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } }
template <typename T> void mx_inline_cummax (const T *v, T *r, octave_idx_type n) { if (! n) return; T tmp = v[0]; octave_idx_type i = 1; octave_idx_type j = 0; if (octave::math::isnan (tmp)) { for (; i < n && octave::math::isnan (v[i]); i++) ; for (; j < i; j++) r[j] = tmp; if (i < n) tmp = v[i]; } for (; i < n; i++) if (v[i] > tmp) { for (; j < i; j++) r[j] = tmp; tmp = v[i]; } for (; j < i; j++) r[j] = tmp; } template <typename T> void mx_inline_cummax (const T *v, T *r, octave_idx_type *ri, octave_idx_type n) { if (! n) return; T tmp = v[0]; octave_idx_type tmpi = 0; octave_idx_type i = 1; octave_idx_type j = 0; if (octave::math::isnan (tmp)) { for (; i < n && octave::math::isnan (v[i]); i++) ; for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } if (i < n) { tmp = v[i]; tmpi = i; } } for (; i < n; i++) if (v[i] > tmp) { for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } tmp = v[i]; tmpi = i; } for (; j < i; j++) { r[j] = tmp; ri[j] = tmpi; } }
# 1297 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_cummin (const T *v, T *r, octave_idx_type m, octave_idx_type n) { if (! n) return; bool nan = false; const T *r0; octave_idx_type j = 0; for (octave_idx_type i = 0; i < m; i++) { r[i] = v[i]; if (octave::math::isnan (v[i])) nan = true; } j++; v += m; r0 = r; r += m; while (nan && j < n) { nan = false; for (octave_idx_type i = 0; i < m; i++) { if (octave::math::isnan (v[i])) { r[i] = r0[i]; nan = true; } else if (octave::math::isnan (r0[i]) || v[i] < r0[i]) r[i] = v[i]; else r[i] = r0[i]; } j++; v += m; r0 = r; r += m; } while (j < n) { for (octave_idx_type i = 0; i < m; i++) if (v[i] < r0[i]) r[i] = v[i]; else r[i] = r0[i]; j++; v += m; r0 = r; r += m; } } template <typename T> inline void mx_inline_cummin (const T *v, T *r, octave_idx_type *ri, octave_idx_type m, octave_idx_type n) { if (! n) return; bool nan = false; const T *r0; const octave_idx_type *r0i; octave_idx_type j = 0; for (octave_idx_type i = 0; i < m; i++) { r[i] = v[i]; ri[i] = 0; if (octave::math::isnan (v[i])) nan = true; } j++; v += m; r0 = r; r += m; r0i = ri; ri += m; while (nan && j < n) { nan = false; for (octave_idx_type i = 0; i < m; i++) { if (octave::math::isnan (v[i])) { r[i] = r0[i]; ri[i] = r0i[i]; nan = true; } else if (octave::math::isnan (r0[i]) || v[i] < r0[i]) { r[i] = v[i]; ri[i] = j; } else { r[i] = r0[i]; ri[i] = r0i[i]; } } j++; v += m; r0 = r; r += m; r0i = ri; ri += m; } while (j < n) { for (octave_idx_type i = 0; i < m; i++) if (v[i] < r0[i]) { r[i] = v[i]; ri[i] = j; } else { r[i] = r0[i]; ri[i] = r0i[i]; } j++; v += m; r0 = r; r += m; r0i = ri; ri += m; } }
template <typename T> inline void mx_inline_cummax (const T *v, T *r, octave_idx_type m, octave_idx_type n) { if (! n) return; bool nan = false; const T *r0; octave_idx_type j = 0; for (octave_idx_type i = 0; i < m; i++) { r[i] = v[i]; if (octave::math::isnan (v[i])) nan = true; } j++; v += m; r0 = r; r += m; while (nan && j < n) { nan = false; for (octave_idx_type i = 0; i < m; i++) { if (octave::math::isnan (v[i])) { r[i] = r0[i]; nan = true; } else if (octave::math::isnan (r0[i]) || v[i] > r0[i]) r[i] = v[i]; else r[i] = r0[i]; } j++; v += m; r0 = r; r += m; } while (j < n) { for (octave_idx_type i = 0; i < m; i++) if (v[i] > r0[i]) r[i] = v[i]; else r[i] = r0[i]; j++; v += m; r0 = r; r += m; } } template <typename T> inline void mx_inline_cummax (const T *v, T *r, octave_idx_type *ri, octave_idx_type m, octave_idx_type n) { if (! n) return; bool nan = false; const T *r0; const octave_idx_type *r0i; octave_idx_type j = 0; for (octave_idx_type i = 0; i < m; i++) { r[i] = v[i]; ri[i] = 0; if (octave::math::isnan (v[i])) nan = true; } j++; v += m; r0 = r; r += m; r0i = ri; ri += m; while (nan && j < n) { nan = false; for (octave_idx_type i = 0; i < m; i++) { if (octave::math::isnan (v[i])) { r[i] = r0[i]; ri[i] = r0i[i]; nan = true; } else if (octave::math::isnan (r0[i]) || v[i] > r0[i]) { r[i] = v[i]; ri[i] = j; } else { r[i] = r0[i]; ri[i] = r0i[i]; } } j++; v += m; r0 = r; r += m; r0i = ri; ri += m; } while (j < n) { for (octave_idx_type i = 0; i < m; i++) if (v[i] > r0[i]) { r[i] = v[i]; ri[i] = j; } else { r[i] = r0[i]; ri[i] = r0i[i]; } j++; v += m; r0 = r; r += m; r0i = ri; ri += m; } }
# 1356 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-inlines.cc"
template <typename T> inline void mx_inline_cummin (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (! n) return; if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cummin (v, r, n); v += n; r += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cummin (v, r, l, n); v += l*n; r += l*n; } } } template <typename T> inline void mx_inline_cummin (const T *v, T *r, octave_idx_type *ri, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (! n) return; if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cummin (v, r, ri, n); v += n; r += n; ri += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cummin (v, r, ri, l, n); v += l*n; r += l*n; ri += l*n; } } }
template <typename T> inline void mx_inline_cummax (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (! n) return; if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cummax (v, r, n); v += n; r += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cummax (v, r, l, n); v += l*n; r += l*n; } } } template <typename T> inline void mx_inline_cummax (const T *v, T *r, octave_idx_type *ri, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (! n) return; if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cummax (v, r, ri, n); v += n; r += n; ri += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_cummax (v, r, ri, l, n); v += l*n; r += l*n; ri += l*n; } } }

template <typename T>
void mx_inline_diff (const T *v, T *r, octave_idx_type n,
                     octave_idx_type order)
{
  switch (order)
    {
    case 1:
      for (octave_idx_type i = 0; i < n-1; i++)
        r[i] = v[i+1] - v[i];
      break;
    case 2:
      if (n > 1)
        {
          T lst = v[1] - v[0];
          for (octave_idx_type i = 0; i < n-2; i++)
            {
              T dif = v[i+2] - v[i+1];
              r[i] = dif - lst;
              lst = dif;
            }
        }
      break;
    default:
      {
        octave_local_buffer<T> _buffer_buf (n-1); T *buf = _buffer_buf;

        for (octave_idx_type i = 0; i < n-1; i++)
          buf[i] = v[i+1] - v[i];

        for (octave_idx_type o = 2; o <= order; o++)
          {
            for (octave_idx_type i = 0; i < n-o; i++)
              buf[i] = buf[i+1] - buf[i];
          }

        for (octave_idx_type i = 0; i < n-order; i++)
          r[i] = buf[i];
      }
    }
}

template <typename T>
void mx_inline_diff (const T *v, T *r,
                     octave_idx_type m, octave_idx_type n,
                     octave_idx_type order)
{
  switch (order)
    {
    case 1:
      for (octave_idx_type i = 0; i < m*(n-1); i++)
        r[i] = v[i+m] - v[i];
      break;
    case 2:
      for (octave_idx_type i = 0; i < n-2; i++)
        {
          for (octave_idx_type j = i*m; j < i*m+m; j++)
            r[j] = (v[j+m+m] - v[j+m]) - (v[j+m] - v[j]);
        }
      break;
    default:
      {
        octave_local_buffer<T> _buffer_buf (n-1); T *buf = _buffer_buf;

        for (octave_idx_type j = 0; j < m; j++)
          {
            for (octave_idx_type i = 0; i < n-1; i++)
              buf[i] = v[i*m+j+m] - v[i*m+j];

            for (octave_idx_type o = 2; o <= order; o++)
              {
                for (octave_idx_type i = 0; i < n-o; i++)
                  buf[i] = buf[i+1] - buf[i];
              }

            for (octave_idx_type i = 0; i < n-order; i++)
              r[i*m+j] = buf[i];
          }
      }
    }
}

template <typename T>
inline void
mx_inline_diff (const T *v, T *r,
                octave_idx_type l, octave_idx_type n, octave_idx_type u,
                octave_idx_type order)
{
  if (! n) return;
  if (l == 1)
    {
      for (octave_idx_type i = 0; i < u; i++)
        {
          mx_inline_diff (v, r, n, order);
          v += n; r += n-order;
        }
    }
  else
    {
      for (octave_idx_type i = 0; i < u; i++)
        {
          mx_inline_diff (v, r, l, n, order);
          v += l*n;
          r += l*(n-order);
        }
    }
}



inline void
get_extent_triplet (const dim_vector& dims, int& dim,
                    octave_idx_type& l, octave_idx_type& n,
                    octave_idx_type& u)
{
  octave_idx_type ndims = dims.ndims ();
  if (dim >= ndims)
    {
      l = dims.numel ();
      n = 1;
      u = 1;
    }
  else
    {
      if (dim < 0)
        dim = dims.first_non_singleton ();


      l = 1, n = dims(dim), u = 1;
      for (octave_idx_type i = 0; i < dim; i++)
        l *= dims(i);
      for (octave_idx_type i = dim + 1; i < ndims; i++)
        u *= dims(i);
    }
}





template <typename R, typename T>
inline Array<R>
do_mx_red_op (const Array<T>& src, int dim,
              void (*mx_red_op) (const T *, R *, octave_idx_type,
                                 octave_idx_type, octave_idx_type))
{
  octave_idx_type l, n, u;
  dim_vector dims = src.dims ();

  if (dims.ndims () == 2 && dims(0) == 0 && dims(1) == 0)
    dims(1) = 1;

  get_extent_triplet (dims, dim, l, n, u);


  if (dim < dims.ndims ()) dims(dim) = 1;
  dims.chop_trailing_singletons ();

  Array<R> ret (dims);
  mx_red_op (src.data (), ret.fortran_vec (), l, n, u);

  return ret;
}

template <typename R, typename T>
inline Array<R>
do_mx_cum_op (const Array<T>& src, int dim,
              void (*mx_cum_op) (const T *, R *, octave_idx_type,
                                 octave_idx_type, octave_idx_type))
{
  octave_idx_type l, n, u;
  dim_vector dims = src.dims ();
  get_extent_triplet (dims, dim, l, n, u);


  Array<R> ret (dims);
  mx_cum_op (src.data (), ret.fortran_vec (), l, n, u);

  return ret;
}

template <typename R>
inline Array<R>
do_mx_minmax_op (const Array<R>& src, int dim,
                 void (*mx_minmax_op) (const R *, R *, octave_idx_type,
                                       octave_idx_type, octave_idx_type))
{
  octave_idx_type l, n, u;
  dim_vector dims = src.dims ();
  get_extent_triplet (dims, dim, l, n, u);


  if (dim < dims.ndims () && dims(dim) != 0) dims(dim) = 1;
  dims.chop_trailing_singletons ();

  Array<R> ret (dims);
  mx_minmax_op (src.data (), ret.fortran_vec (), l, n, u);

  return ret;
}

template <typename R>
inline Array<R>
do_mx_minmax_op (const Array<R>& src, Array<octave_idx_type>& idx, int dim,
                 void (*mx_minmax_op) (const R *, R *, octave_idx_type *,
                                       octave_idx_type, octave_idx_type, octave_idx_type))
{
  octave_idx_type l, n, u;
  dim_vector dims = src.dims ();
  get_extent_triplet (dims, dim, l, n, u);


  if (dim < dims.ndims () && dims(dim) != 0) dims(dim) = 1;
  dims.chop_trailing_singletons ();

  Array<R> ret (dims);
  if (idx.dims () != dims) idx = Array<octave_idx_type> (dims);

  mx_minmax_op (src.data (), ret.fortran_vec (), idx.fortran_vec (),
                l, n, u);

  return ret;
}

template <typename R>
inline Array<R>
do_mx_cumminmax_op (const Array<R>& src, int dim,
                    void (*mx_cumminmax_op) (const R *, R *, octave_idx_type,
                                             octave_idx_type, octave_idx_type))
{
  octave_idx_type l, n, u;
  dim_vector dims = src.dims ();
  get_extent_triplet (dims, dim, l, n, u);

  Array<R> ret (dims);
  mx_cumminmax_op (src.data (), ret.fortran_vec (), l, n, u);

  return ret;
}

template <typename R>
inline Array<R>
do_mx_cumminmax_op (const Array<R>& src, Array<octave_idx_type>& idx, int dim,
                    void (*mx_cumminmax_op) (const R *, R *, octave_idx_type *,
                                             octave_idx_type, octave_idx_type, octave_idx_type))
{
  octave_idx_type l, n, u;
  dim_vector dims = src.dims ();
  get_extent_triplet (dims, dim, l, n, u);

  Array<R> ret (dims);
  if (idx.dims () != dims) idx = Array<octave_idx_type> (dims);

  mx_cumminmax_op (src.data (), ret.fortran_vec (), idx.fortran_vec (),
                   l, n, u);

  return ret;
}

template <typename R>
inline Array<R>
do_mx_diff_op (const Array<R>& src, int dim, octave_idx_type order,
               void (*mx_diff_op) (const R *, R *,
                                   octave_idx_type, octave_idx_type,
                                   octave_idx_type, octave_idx_type))
{
  octave_idx_type l, n, u;
  if (order <= 0)
    return src;

  dim_vector dims = src.dims ();

  get_extent_triplet (dims, dim, l, n, u);
  if (dim >= dims.ndims ())
    dims.resize (dim+1, 1);

  if (dims(dim) <= order)
    {
      dims(dim) = 0;
      return Array<R> (dims);
    }
  else
    {
      dims(dim) -= order;
    }

  Array<R> ret (dims);
  mx_diff_op (src.data (), ret.fortran_vec (), l, n, u, order);

  return ret;
}






template <typename T>
inline void twosum_accum (T& s, T& e,
                          const T& x)
{
  T s1 = s + x;
  T t = s1 - s;
  T e1 = (s - (s1 - t)) + (x - t);
  s = s1;
  e += e1;
}

template <typename T>
inline T
mx_inline_xsum (const T *v, octave_idx_type n)
{
  T s, e;
  s = e = 0;
  for (octave_idx_type i = 0; i < n; i++)
    twosum_accum (s, e, v[i]);

  return s + e;
}

template <typename T>
inline void
mx_inline_xsum (const T *v, T *r,
                octave_idx_type m, octave_idx_type n)
{
  octave_local_buffer<T> _buffer_e (m); T *e = _buffer_e;
  for (octave_idx_type i = 0; i < m; i++)
    e[i] = r[i] = T ();

  for (octave_idx_type j = 0; j < n; j++)
    {
      for (octave_idx_type i = 0; i < m; i++)
        twosum_accum (r[i], e[i], v[i]);

      v += m;
    }

  for (octave_idx_type i = 0; i < m; i++)
    r[i] += e[i];
}

template <typename T> inline void mx_inline_xsum (const T *v, T *r, octave_idx_type l, octave_idx_type n, octave_idx_type u) { if (l == 1) { for (octave_idx_type i = 0; i < u; i++) { r[i] = mx_inline_xsum<T> (v, n); v += n; } } else { for (octave_idx_type i = 0; i < u; i++) { mx_inline_xsum (v, r, l, n); v += l*n; r += l; } } }
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MArray.h" 2

template <typename T> class MArray;

template <typename T> MArray<T>& operator += (MArray<T>&, const T&);
template <typename T> MArray<T>& operator -= (MArray<T>&, const T&);
template <typename T> MArray<T>& operator *= (MArray<T>&, const T&);
template <typename T> MArray<T>& operator /= (MArray<T>&, const T&);
template <typename T> MArray<T>& operator += (MArray<T>&, const MArray<T>&);
template <typename T> MArray<T>& operator -= (MArray<T>&, const MArray<T>&);
template <typename T> MArray<T>& product_eq (MArray<T>&, const MArray<T>&);
template <typename T> MArray<T>& quotient_eq (MArray<T>&, const MArray<T>&);
template <typename T> MArray<T> operator + (const MArray<T>&);
template <typename T> MArray<T> operator - (const MArray<T>&);
template <typename T> MArray<T> operator + (const MArray<T>&, const T&);
template <typename T> MArray<T> operator - (const MArray<T>&, const T&);
template <typename T> MArray<T> operator * (const MArray<T>&, const T&);
template <typename T> MArray<T> operator / (const MArray<T>&, const T&);
template <typename T> MArray<T> operator + (const T&, const MArray<T>&);
template <typename T> MArray<T> operator - (const T&, const MArray<T>&);
template <typename T> MArray<T> operator * (const T&, const MArray<T>&);
template <typename T> MArray<T> operator / (const T&, const MArray<T>&);
template <typename T> MArray<T> operator + (const MArray<T>&, const MArray<T>&);
template <typename T> MArray<T> operator - (const MArray<T>&, const MArray<T>&);
template <typename T> MArray<T> quotient (const MArray<T>&, const MArray<T>&);
template <typename T> MArray<T> product (const MArray<T>&, const MArray<T>&);


template <typename T>
class
MArray : public Array<T>
{
protected:


  MArray (T *sdata, octave_idx_type slen, octave_idx_type *adims, void *arep)
    : Array<T> (sdata, slen, adims, arep) { }

public:

  MArray (void) : Array<T> () { }

  explicit MArray (const dim_vector& dv)
    : Array<T> (dv) { }

  explicit MArray (const dim_vector& dv, const T& val)
    : Array<T> (dv, val) { }

  MArray (const MArray<T>& a) : Array<T> (a) { }

  template <typename U>
  MArray (const Array<U>& a) : Array<T> (a) { }

  ~MArray (void) { }

  MArray<T>& operator = (const MArray<T>& a)
  {
    Array<T>::operator = (a);
    return *this;
  }

  MArray<T> reshape (const dim_vector& new_dims) const
  { return Array<T>::reshape (new_dims); }

  MArray<T> permute (const Array<octave_idx_type>& vec,
                     bool inv = false) const
  { return Array<T>::permute (vec, inv); }

  MArray<T> ipermute (const Array<octave_idx_type>& vec) const
  { return Array<T>::ipermute (vec); }

  MArray squeeze (void) const { return Array<T>::squeeze (); }

  MArray<T> transpose (void) const
  { return Array<T>::transpose (); }

  MArray<T> hermitian (T (*fcn) (const T&) = 0) const
  { return Array<T>::hermitian (fcn); }



  void idx_add (const idx_vector& idx, T val);
  void idx_add (const idx_vector& idx, const MArray<T>& vals);


  void idx_min (const idx_vector& idx, const MArray<T>& vals);

  void idx_max (const idx_vector& idx, const MArray<T>& vals);

  void idx_add_nd (const idx_vector& idx, const MArray<T>& vals, int dim = -1);

  void changesign (void);
};
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.h" 2




template <typename T>
class
MSparse : public Sparse<T>
{
public:

  MSparse (void) : Sparse<T> () { }

  MSparse (octave_idx_type n, octave_idx_type m) : Sparse<T> (n, m) { }

  MSparse (const dim_vector& dv, octave_idx_type nz = 0)
    : Sparse<T> (dv, nz) { }

  MSparse (const MSparse<T>& a) : Sparse<T> (a) { }

  MSparse (const MSparse<T>& a, const dim_vector& dv) : Sparse<T> (a, dv) { }

  MSparse (const Sparse<T>& a) : Sparse<T> (a) { }

  template <typename U>
  MSparse (const Sparse<U>& a) : Sparse<T> (a) { }

  MSparse (const Array<T>& a, const idx_vector& r, const idx_vector& c,
           octave_idx_type nr = -1, octave_idx_type nc = -1,
           bool sum_terms = true, octave_idx_type nzm = -1)
    : Sparse<T> (a, r, c, nr, nc, sum_terms, nzm) { }

  explicit MSparse (octave_idx_type r, octave_idx_type c, T val)
    : Sparse<T> (r, c, val) { }

  explicit MSparse (const PermMatrix& a) : Sparse<T>(a) { }

  MSparse (octave_idx_type r, octave_idx_type c, octave_idx_type num_nz)
    : Sparse<T> (r, c, num_nz) { }

  ~MSparse (void) { }

  MSparse<T>& operator = (const MSparse<T>& a)
  {
    Sparse<T>::operator = (a);
    return *this;
  }

  MSparse<T>& insert (const Sparse<T>& a, octave_idx_type r, octave_idx_type c)
  {
    Sparse<T>::insert (a, r, c);
    return *this;
  }

  MSparse<T>& insert (const Sparse<T>& a, const Array<octave_idx_type>& indx)
  {
    Sparse<T>::insert (a, indx);
    return *this;
  }

  MSparse<T> transpose (void) const { return Sparse<T>::transpose (); }

  MSparse<T> squeeze (void) const { return Sparse<T>::squeeze (); }

  MSparse<T> reshape (const dim_vector& new_dims) const
  { return Sparse<T>::reshape (new_dims); }

  MSparse<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const
  { return Sparse<T>::permute (vec, inv); }

  MSparse<T> ipermute (const Array<octave_idx_type>& vec) const
  { return Sparse<T>::ipermute (vec); }

  MSparse<T> diag (octave_idx_type k = 0) const
  {
    return Sparse<T>::diag (k);
  }


  template <typename U>
  MSparse<U>
  map (U (&fcn) (T)) const
  { return Sparse<T>::template map<U> (fcn); }

  template <typename U>
  MSparse<U>
  map (U (&fcn) (const T&)) const
  { return Sparse<T>::template map<U> (fcn); }
};



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.cc" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.cc"
template <typename T, typename OP>
MSparse<T>&
plus_or_minus (MSparse<T>& a, const MSparse<T>& b, OP op, const char* op_name)
{
  MSparse<T> r;

  octave_idx_type a_nr = a.rows ();
  octave_idx_type a_nc = a.cols ();

  octave_idx_type b_nr = b.rows ();
  octave_idx_type b_nc = b.cols ();

  if (a_nr != b_nr || a_nc != b_nc)
    octave::err_nonconformant (op_name , a_nr, a_nc, b_nr, b_nc);

  r = MSparse<T> (a_nr, a_nc, (a.nnz () + b.nnz ()));

  octave_idx_type jx = 0;
  for (octave_idx_type i = 0 ; i < a_nc ; i++)
    {
      octave_idx_type ja = a.cidx (i);
      octave_idx_type ja_max = a.cidx (i+1);
      bool ja_lt_max = ja < ja_max;

      octave_idx_type jb = b.cidx (i);
      octave_idx_type jb_max = b.cidx (i+1);
      bool jb_lt_max = jb < jb_max;

      while (ja_lt_max || jb_lt_max)
        {
          octave_quit ();
          if ((! jb_lt_max) || (ja_lt_max && (a.ridx (ja) < b.ridx (jb))))
            {
              r.ridx (jx) = a.ridx (ja);
              r.data (jx) = op (a.data (ja), 0.);
              jx++;
              ja++;
              ja_lt_max= ja < ja_max;
            }
          else if ((! ja_lt_max)
                   || (jb_lt_max && (b.ridx (jb) < a.ridx (ja))))
            {
              r.ridx (jx) = b.ridx (jb);
              r.data (jx) = op (0., b.data (jb));
              jx++;
              jb++;
              jb_lt_max= jb < jb_max;
            }
          else
            {
              if (op (a.data (ja), b.data (jb)) != 0.)
                {
                  r.data (jx) = op (a.data (ja), b.data (jb));
                  r.ridx (jx) = a.ridx (ja);
                  jx++;
                }
              ja++;
              ja_lt_max= ja < ja_max;
              jb++;
              jb_lt_max= jb < jb_max;
            }
        }
      r.cidx (i+1) = jx;
    }

  a = r.maybe_compress ();

  return a;
}

template <typename T>
MSparse<T>&
operator += (MSparse<T>& a, const MSparse<T>& b)
{
  return plus_or_minus (a, b, std::plus<T> (), "operator +=");
}

template <typename T>
MSparse<T>&
operator -= (MSparse<T>& a, const MSparse<T>& b)
{
  return plus_or_minus (a, b, std::minus<T> (), "operator -=");
}



template <typename T, typename OP>
MArray<T>
plus_or_minus (const MSparse<T>& a, const T& s, OP op)
{
  octave_idx_type nr = a.rows ();
  octave_idx_type nc = a.cols ();

  MArray<T> r (dim_vector (nr, nc), op (0.0, s));

  for (octave_idx_type j = 0; j < nc; j++)
    for (octave_idx_type i = a.cidx (j); i < a.cidx (j+1); i++)
      r.elem (a.ridx (i), j) = op (a.data (i), s);
  return r;
}

template <typename T>
MArray<T>
operator + (const MSparse<T>& a, const T& s)
{
  return plus_or_minus (a, s, std::plus<T> ());
}

template <typename T>
MArray<T>
operator - (const MSparse<T>& a, const T& s)
{
  return plus_or_minus (a, s, std::minus<T> ());
}

template <typename T, typename OP>
MSparse<T>
times_or_divide (const MSparse<T>& a, const T& s, OP op)
{
  octave_idx_type nr = a.rows ();
  octave_idx_type nc = a.cols ();
  octave_idx_type nz = a.nnz ();

  MSparse<T> r (nr, nc, nz);

  for (octave_idx_type i = 0; i < nz; i++)
    {
      r.data (i) = op (a.data (i), s);
      r.ridx (i) = a.ridx (i);
    }
  for (octave_idx_type i = 0; i < nc + 1; i++)
    r.cidx (i) = a.cidx (i);
  r.maybe_compress (true);
  return r;
}

template <typename T>
MSparse<T>
operator * (const MSparse<T>& a, const T& s)
{
  return times_or_divide (a, s, std::multiplies<T> ());
}

template <typename T>
MSparse<T>
operator / (const MSparse<T>& a, const T& s)
{
  return times_or_divide (a, s, std::divides<T> ());
}



template <typename T, typename OP>
MArray<T>
plus_or_minus (const T& s, const MSparse<T>& a, OP op)
{
  octave_idx_type nr = a.rows ();
  octave_idx_type nc = a.cols ();

  MArray<T> r (dim_vector (nr, nc), op (s, 0.0));

  for (octave_idx_type j = 0; j < nc; j++)
    for (octave_idx_type i = a.cidx (j); i < a.cidx (j+1); i++)
      r.elem (a.ridx (i), j) = op (s, a.data (i));
  return r;
}

template <typename T>
MArray<T>
operator + (const T& s, const MSparse<T>& a)
{
  return plus_or_minus (s, a, std::plus<T> ());
}

template <typename T>
MArray<T>
operator - (const T& s, const MSparse<T>& a)
{
  return plus_or_minus (s, a, std::minus<T> ());
}

template <typename T, typename OP>
MSparse<T>
times_or_divides (const T& s, const MSparse<T>& a, OP op)
{
  octave_idx_type nr = a.rows ();
  octave_idx_type nc = a.cols ();
  octave_idx_type nz = a.nnz ();

  MSparse<T> r (nr, nc, nz);

  for (octave_idx_type i = 0; i < nz; i++)
    {
      r.data (i) = op (s, a.data (i));
      r.ridx (i) = a.ridx (i);
    }
  for (octave_idx_type i = 0; i < nc + 1; i++)
    r.cidx (i) = a.cidx (i);
  r.maybe_compress (true);
  return r;
}

template <typename T>
MSparse<T>
operator * (const T& s, const MSparse<T>& a)
{
  return times_or_divides (s, a, std::multiplies<T> ());
}

template <typename T>
MSparse<T>
operator / (const T& s, const MSparse<T>& a)
{
  return times_or_divides (s, a, std::divides<T> ());
}



template <typename T, typename OP>
MSparse<T>
plus_or_minus (const MSparse<T>& a, const MSparse<T>& b, OP op,
               const char* op_name, bool negate)
{
  MSparse<T> r;

  octave_idx_type a_nr = a.rows ();
  octave_idx_type a_nc = a.cols ();

  octave_idx_type b_nr = b.rows ();
  octave_idx_type b_nc = b.cols ();

  if (a_nr == 1 && a_nc == 1)
    {
      if (a.elem (0,0) == 0.)
        if (negate)
          r = -MSparse<T> (b);
        else
          r = MSparse<T> (b);
      else
        {
          r = MSparse<T> (b_nr, b_nc, op (a.data (0), 0.));

          for (octave_idx_type j = 0 ; j < b_nc ; j++)
            {
              octave_quit ();
              octave_idx_type idxj = j * b_nr;
              for (octave_idx_type i = b.cidx (j) ; i < b.cidx (j+1) ; i++)
                {
                  octave_quit ();
                  r.data (idxj + b.ridx (i)) = op (a.data (0), b.data (i));
                }
            }
          r.maybe_compress ();
        }
    }
  else if (b_nr == 1 && b_nc == 1)
    {
      if (b.elem (0,0) == 0.)
        r = MSparse<T> (a);
      else
        {
          r = MSparse<T> (a_nr, a_nc, op (0.0, b.data (0)));

          for (octave_idx_type j = 0 ; j < a_nc ; j++)
            {
              octave_quit ();
              octave_idx_type idxj = j * a_nr;
              for (octave_idx_type i = a.cidx (j) ; i < a.cidx (j+1) ; i++)
                {
                  octave_quit ();
                  r.data (idxj + a.ridx (i)) = op (a.data (i), b.data (0));
                }
            }
          r.maybe_compress ();
        }
    }
  else if (a_nr != b_nr || a_nc != b_nc)
    octave::err_nonconformant (op_name, a_nr, a_nc, b_nr, b_nc);
  else
    {
      r = MSparse<T> (a_nr, a_nc, (a.nnz () + b.nnz ()));

      octave_idx_type jx = 0;
      r.cidx (0) = 0;
      for (octave_idx_type i = 0 ; i < a_nc ; i++)
        {
          octave_idx_type ja = a.cidx (i);
          octave_idx_type ja_max = a.cidx (i+1);
          bool ja_lt_max = ja < ja_max;

          octave_idx_type jb = b.cidx (i);
          octave_idx_type jb_max = b.cidx (i+1);
          bool jb_lt_max = jb < jb_max;

          while (ja_lt_max || jb_lt_max)
            {
              octave_quit ();
              if ((! jb_lt_max) || (ja_lt_max && (a.ridx (ja) < b.ridx (jb))))
                {
                  r.ridx (jx) = a.ridx (ja);
                  r.data (jx) = op (a.data (ja), 0.);
                  jx++;
                  ja++;
                  ja_lt_max= ja < ja_max;
                }
              else if ((! ja_lt_max)
                       || (jb_lt_max && (b.ridx (jb) < a.ridx (ja))))
                {
                  r.ridx (jx) = b.ridx (jb);
                  r.data (jx) = op (0., b.data (jb));
                  jx++;
                  jb++;
                  jb_lt_max= jb < jb_max;
                }
              else
                {
                  if (op (a.data (ja), b.data (jb)) != 0.)
                    {
                      r.data (jx) = op (a.data (ja), b.data (jb));
                      r.ridx (jx) = a.ridx (ja);
                      jx++;
                    }
                  ja++;
                  ja_lt_max= ja < ja_max;
                  jb++;
                  jb_lt_max= jb < jb_max;
                }
            }
          r.cidx (i+1) = jx;
        }

      r.maybe_compress ();
    }

  return r;
}

template <typename T>
MSparse<T>
operator+ (const MSparse<T>& a, const MSparse<T>& b)
{
  return plus_or_minus (a, b, std::plus<T> (), "operator +", false);
}

template <typename T>
MSparse<T>
operator- (const MSparse<T>& a, const MSparse<T>& b)
{
  return plus_or_minus (a, b, std::minus<T> (), "operator -", true);
}

template <typename T>
MSparse<T>
product (const MSparse<T>& a, const MSparse<T>& b)
{
  MSparse<T> r;

  octave_idx_type a_nr = a.rows ();
  octave_idx_type a_nc = a.cols ();

  octave_idx_type b_nr = b.rows ();
  octave_idx_type b_nc = b.cols ();

  if (a_nr == 1 && a_nc == 1)
    {
      if (a.elem (0,0) == 0.)
        r = MSparse<T> (b_nr, b_nc);
      else
        {
          r = MSparse<T> (b);
          octave_idx_type b_nnz = b.nnz ();

          for (octave_idx_type i = 0 ; i < b_nnz ; i++)
            {
              octave_quit ();
              r.data (i) = a.data (0) * r.data (i);
            }
          r.maybe_compress ();
        }
    }
  else if (b_nr == 1 && b_nc == 1)
    {
      if (b.elem (0,0) == 0.)
        r = MSparse<T> (a_nr, a_nc);
      else
        {
          r = MSparse<T> (a);
          octave_idx_type a_nnz = a.nnz ();

          for (octave_idx_type i = 0 ; i < a_nnz ; i++)
            {
              octave_quit ();
              r.data (i) = r.data (i) * b.data (0);
            }
          r.maybe_compress ();
        }
    }
  else if (a_nr != b_nr || a_nc != b_nc)
    octave::err_nonconformant ("product", a_nr, a_nc, b_nr, b_nc);
  else
    {
      r = MSparse<T> (a_nr, a_nc, (a.nnz () > b.nnz () ? a.nnz () : b.nnz ()));

      octave_idx_type jx = 0;
      r.cidx (0) = 0;
      for (octave_idx_type i = 0 ; i < a_nc ; i++)
        {
          octave_idx_type ja = a.cidx (i);
          octave_idx_type ja_max = a.cidx (i+1);
          bool ja_lt_max = ja < ja_max;

          octave_idx_type jb = b.cidx (i);
          octave_idx_type jb_max = b.cidx (i+1);
          bool jb_lt_max = jb < jb_max;

          while (ja_lt_max || jb_lt_max)
            {
              octave_quit ();
              if ((! jb_lt_max) || (ja_lt_max && (a.ridx (ja) < b.ridx (jb))))
                {
                  ja++; ja_lt_max= ja < ja_max;
                }
              else if ((! ja_lt_max)
                       || (jb_lt_max && (b.ridx (jb) < a.ridx (ja))))
                {
                  jb++; jb_lt_max= jb < jb_max;
                }
              else
                {
                  if ((a.data (ja) * b.data (jb)) != 0.)
                    {
                      r.data (jx) = a.data (ja) * b.data (jb);
                      r.ridx (jx) = a.ridx (ja);
                      jx++;
                    }
                  ja++; ja_lt_max= ja < ja_max;
                  jb++; jb_lt_max= jb < jb_max;
                }
            }
          r.cidx (i+1) = jx;
        }

      r.maybe_compress ();
    }

  return r;
}

template <typename T>
MSparse<T>
quotient (const MSparse<T>& a, const MSparse<T>& b)
{
  MSparse<T> r;
  T Zero = T ();

  octave_idx_type a_nr = a.rows ();
  octave_idx_type a_nc = a.cols ();

  octave_idx_type b_nr = b.rows ();
  octave_idx_type b_nc = b.cols ();

  if (a_nr == 1 && a_nc == 1)
    {
      T val = a.elem (0,0);
      T fill = val / T ();
      if (fill == T ())
        {
          octave_idx_type b_nnz = b.nnz ();
          r = MSparse<T> (b);
          for (octave_idx_type i = 0 ; i < b_nnz ; i++)
            r.data (i) = val / r.data (i);
          r.maybe_compress ();
        }
      else
        {
          r = MSparse<T> (b_nr, b_nc, fill);
          for (octave_idx_type j = 0 ; j < b_nc ; j++)
            {
              octave_quit ();
              octave_idx_type idxj = j * b_nr;
              for (octave_idx_type i = b.cidx (j) ; i < b.cidx (j+1) ; i++)
                {
                  octave_quit ();
                  r.data (idxj + b.ridx (i)) = val / b.data (i);
                }
            }
          r.maybe_compress ();
        }
    }
  else if (b_nr == 1 && b_nc == 1)
    {
      T val = b.elem (0,0);
      T fill = T () / val;
      if (fill == T ())
        {
          octave_idx_type a_nnz = a.nnz ();
          r = MSparse<T> (a);
          for (octave_idx_type i = 0 ; i < a_nnz ; i++)
            r.data (i) = r.data (i) / val;
          r.maybe_compress ();
        }
      else
        {
          r = MSparse<T> (a_nr, a_nc, fill);
          for (octave_idx_type j = 0 ; j < a_nc ; j++)
            {
              octave_quit ();
              octave_idx_type idxj = j * a_nr;
              for (octave_idx_type i = a.cidx (j) ; i < a.cidx (j+1) ; i++)
                {
                  octave_quit ();
                  r.data (idxj + a.ridx (i)) = a.data (i) / val;
                }
            }
          r.maybe_compress ();
        }
    }
  else if (a_nr != b_nr || a_nc != b_nc)
    octave::err_nonconformant ("quotient", a_nr, a_nc, b_nr, b_nc);
  else
    {
      r = MSparse<T> (a_nr, a_nc, (Zero / Zero));

      for (octave_idx_type i = 0 ; i < a_nc ; i++)
        {
          octave_idx_type ja = a.cidx (i);
          octave_idx_type ja_max = a.cidx (i+1);
          bool ja_lt_max = ja < ja_max;

          octave_idx_type jb = b.cidx (i);
          octave_idx_type jb_max = b.cidx (i+1);
          bool jb_lt_max = jb < jb_max;

          while (ja_lt_max || jb_lt_max)
            {
              octave_quit ();
              if ((! jb_lt_max) || (ja_lt_max && (a.ridx (ja) < b.ridx (jb))))
                {
                  r.elem (a.ridx (ja),i) = a.data (ja) / Zero;
                  ja++; ja_lt_max= ja < ja_max;
                }
              else if ((! ja_lt_max)
                       || (jb_lt_max && (b.ridx (jb) < a.ridx (ja))))
                {
                  r.elem (b.ridx (jb),i) = Zero / b.data (jb);
                  jb++; jb_lt_max= jb < jb_max;
                }
              else
                {
                  r.elem (a.ridx (ja),i) = a.data (ja) / b.data (jb);
                  ja++; ja_lt_max= ja < ja_max;
                  jb++; jb_lt_max= jb < jb_max;
                }
            }
        }

      r.maybe_compress (true);
    }

  return r;
}



template <typename T>
MSparse<T>
operator + (const MSparse<T>& a)
{
  return a;
}

template <typename T>
MSparse<T>
operator - (const MSparse<T>& a)
{
  MSparse<T> retval (a);
  octave_idx_type nz = a.nnz ();
  for (octave_idx_type i = 0; i < nz; i++)
    retval.data (i) = - retval.data (i);
  return retval;
}
# 124 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MSparse.h" 2
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MatrixType.h" 2

class Matrix;
class ComplexMatrix;
class FloatMatrix;
class FloatComplexMatrix;
class SparseMatrix;
class SparseComplexMatrix;

class

MatrixType
{
public:
  enum matrix_type
  {
    Unknown = 0,
    Full,
    Diagonal,
    Permuted_Diagonal,
    Upper,
    Lower,
    Permuted_Upper,
    Permuted_Lower,
    Banded,
    Hermitian,
    Banded_Hermitian,
    Tridiagonal,
    Tridiagonal_Hermitian,
    Rectangular
  };

  MatrixType (void);

  MatrixType (const MatrixType &a);

  MatrixType (const Matrix &a);

  MatrixType (const ComplexMatrix &a);

  MatrixType (const FloatMatrix &a);

  MatrixType (const FloatComplexMatrix &a);

  template <typename T>
  MatrixType (const MSparse<T> &a);

  MatrixType (const matrix_type t, bool _full = false);

  MatrixType (const matrix_type t, const octave_idx_type np,
              const octave_idx_type *p, bool _full = false);

  MatrixType (const matrix_type t, const octave_idx_type ku,
              const octave_idx_type kl, bool _full = false);

  ~MatrixType (void);

  MatrixType& operator = (const MatrixType& a);

  int type (bool quiet = true);

  int type (const Matrix &a);

  int type (const ComplexMatrix &a);

  int type (const FloatMatrix &a);

  int type (const FloatComplexMatrix &a);

  int type (const SparseMatrix &a);

  int type (const SparseComplexMatrix &a);

  double band_density (void) const { return bandden; }

  int nupper (void) const { return upper_band; }

  int nlower (void) const { return lower_band; }

  bool is_dense (void) const { return dense; }

  bool is_diagonal (void) const
  { return (typ == Diagonal || typ == Permuted_Diagonal); }

  bool is_upper_triangular (void) const
  { return (typ == Upper || typ == Permuted_Upper); }

  bool is_lower_triangular (void) const
  { return (typ == Lower || typ == Permuted_Lower); }

  bool is_banded (void)
  { return (typ == Banded || typ == Banded_Hermitian); }

  bool is_tridiagonal (void) const
  { return (typ == Tridiagonal || typ == Tridiagonal_Hermitian); }

  bool is_hermitian (void) const
  {
    return (typ == Banded_Hermitian || typ == Tridiagonal_Hermitian
            || typ == Hermitian);
  }

  bool is_rectangular (void) const { return (typ == Rectangular); }

  bool is_known (void) const { return (typ != Unknown); }

  bool is_unknown (void) const { return (typ == Unknown); }

  void info (void) const;

  octave_idx_type * triangular_perm (void) const { return perm; }

  void invalidate_type (void) { typ = Unknown; }

  void mark_as_diagonal (void) { typ = Diagonal; }

  void mark_as_permuted_diagonal (void) { typ = Permuted_Diagonal; }

  void mark_as_upper_triangular (void) { typ = Upper; }

  void mark_as_lower_triangular (void) { typ = Lower; }

  void mark_as_tridiagonal (void) {typ = Tridiagonal; }

  void mark_as_banded (const octave_idx_type ku, const octave_idx_type kl)
  { typ = Banded; upper_band = ku; lower_band = kl; }

  void mark_as_full (void) { typ = Full; }

  void mark_as_rectangular (void) { typ = Rectangular; }

  void mark_as_dense (void) { dense = true; }

  void mark_as_not_dense (void) { dense = false; }

  void mark_as_symmetric (void);

  void mark_as_unsymmetric (void);

  void mark_as_permuted (const octave_idx_type np, const octave_idx_type *p);

  void mark_as_unpermuted (void);

  MatrixType transpose (void) const;

private:
  void type (int new_typ) { typ = static_cast<matrix_type>(new_typ); }

  matrix_type typ;
  double sp_bandden;
  double bandden;
  octave_idx_type upper_band;
  octave_idx_type lower_band;
  bool dense;
  bool full;
  octave_idx_type nperm;
  octave_idx_type *perm;
};
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolMatrix.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolMatrix.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolNDArray.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolNDArray.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-defs.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-defs.h"
class Matrix;
class ComplexMatrix;
class FloatMatrix;
class FloatComplexMatrix;
class boolMatrix;
class charMatrix;

class NDArray;
class ComplexNDArray;
class FloatNDArray;
class FloatComplexNDArray;
class boolNDArray;
class charNDArray;

class ColumnVector;
class ComplexColumnVector;
class FloatColumnVector;
class FloatComplexColumnVector;

class RowVector;
class ComplexRowVector;
class FloatRowVector;
class FloatComplexRowVector;

class DiagMatrix;
class ComplexDiagMatrix;
class FloatDiagMatrix;
class FloatComplexDiagMatrix;

class PermMatrix;

template <typename T> class aepbalance;

template <typename T> class gepbalance;

template <typename T> class chol;

class EIG;

template <typename T> class hess;

template <typename T> class schur;

template <typename T> class svd;

template <typename T> class lu;

template <typename T> class qr;

template <typename T> class qrp;
# 89 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-defs.h"
typedef bool (*b_d_Mapper)(double);
typedef bool (*b_c_Mapper)(const Complex&);

typedef double (*d_d_Mapper)(double);
typedef double (*d_c_Mapper)(const Complex&);
typedef Complex (*c_c_Mapper)(const Complex&);

typedef bool (*b_f_Mapper)(float);
typedef bool (*b_fc_Mapper)(const FloatComplex&);

typedef float (*f_f_Mapper)(float);
typedef float (*f_fc_Mapper)(const FloatComplex&);
typedef FloatComplex (*fc_fc_Mapper)(const FloatComplex&);

enum blas_trans_type
{
  blas_no_trans = 'N',
  blas_trans = 'T',
  blas_conj_trans = 'C'
};

inline char
get_blas_char (blas_trans_type transt)
{
  return static_cast<char> (transt);
}
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolNDArray.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-op-decl.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-op-decl.h"
class boolMatrix;
class boolNDArray;
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolNDArray.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/bsxfun-decl.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolNDArray.h" 2

class

boolNDArray : public Array<bool>
{
public:

  typedef boolMatrix matrix_type;

  boolNDArray (void) : Array<bool> () { }

  boolNDArray (const dim_vector& dv) : Array<bool> (dv) { }

  boolNDArray (const dim_vector& dv, const bool& val)
    : Array<bool> (dv, val) { }

  boolNDArray (const boolNDArray& a) : Array<bool> (a) { }

  boolNDArray (const Array<bool>& a) : Array<bool> (a) { }

  boolNDArray& operator = (const boolNDArray& a)
  {
    Array<bool>::operator = (a);
    return *this;
  }



  boolNDArray operator ! (void) const;

  boolNDArray& invert (void);

  bool any_element_is_nan (void) const { return false; }



  boolNDArray all (int dim = -1) const;
  boolNDArray any (int dim = -1) const;

  NDArray sum (int dim = -1) const;
  NDArray cumsum (int dim = -1) const;

  boolNDArray concat (const boolNDArray& rb,
                      const Array<octave_idx_type>& ra_idx);

  boolNDArray& insert (const boolNDArray& a, octave_idx_type r,
                       octave_idx_type c);
  boolNDArray& insert (const boolNDArray& a,
                       const Array<octave_idx_type>& ra_idx);

  boolNDArray squeeze (void) const { return Array<bool>::squeeze (); }

  static void increment_index (Array<octave_idx_type>& ra_idx,
                               const dim_vector& dimensions,
                               int start_dimension = 0);

  static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions);
# 100 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolNDArray.h"
  boolNDArray diag (octave_idx_type k = 0) const;

  boolNDArray diag (octave_idx_type m, octave_idx_type n) const;
};

extern boolNDArray mx_el_and (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_or (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_and_not (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_or_not (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_not_and (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_not_or (const boolNDArray&, const boolNDArray&);
extern boolNDArray mx_el_lt (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_le (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_ge (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_gt (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_eq (const boolNDArray&, const boolNDArray&); extern boolNDArray mx_el_ne (const boolNDArray&, const boolNDArray&);

extern boolNDArray mx_el_and (const boolNDArray&, const bool&); extern boolNDArray mx_el_or (const boolNDArray&, const bool&); extern boolNDArray mx_el_not_and (const boolNDArray&, const bool&); extern boolNDArray mx_el_not_or (const boolNDArray&, const bool&);
extern boolNDArray mx_el_lt (const boolNDArray&, const bool&); extern boolNDArray mx_el_le (const boolNDArray&, const bool&); extern boolNDArray mx_el_ge (const boolNDArray&, const bool&); extern boolNDArray mx_el_gt (const boolNDArray&, const bool&); extern boolNDArray mx_el_eq (const boolNDArray&, const bool&); extern boolNDArray mx_el_ne (const boolNDArray&, const bool&);

extern boolNDArray mx_el_and (const bool&, const boolNDArray&); extern boolNDArray mx_el_or (const bool&, const boolNDArray&); extern boolNDArray mx_el_and_not (const bool&, const boolNDArray&); extern boolNDArray mx_el_or_not (const bool&, const boolNDArray&);
extern boolNDArray mx_el_lt (const bool&, const boolNDArray&); extern boolNDArray mx_el_le (const bool&, const boolNDArray&); extern boolNDArray mx_el_ge (const bool&, const boolNDArray&); extern boolNDArray mx_el_gt (const bool&, const boolNDArray&); extern boolNDArray mx_el_eq (const bool&, const boolNDArray&); extern boolNDArray mx_el_ne (const bool&, const boolNDArray&);

extern boolNDArray&
mx_el_and_assign (boolNDArray& m, const boolNDArray& a);
extern boolNDArray&
mx_el_or_assign (boolNDArray& m, const boolNDArray& a);

extern boolNDArray bsxfun_and (const boolNDArray&, const boolNDArray&);;
extern boolNDArray bsxfun_or (const boolNDArray&, const boolNDArray&);;
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolMatrix.h" 2




class

boolMatrix : public boolNDArray
{
public:

  boolMatrix (void) : boolNDArray () { }

  boolMatrix (octave_idx_type r, octave_idx_type c)
    : boolNDArray (dim_vector (r, c)) { }

  boolMatrix (octave_idx_type r, octave_idx_type c, bool val)
    : boolNDArray (dim_vector (r, c), val) { }

  boolMatrix (const dim_vector& dv) : boolNDArray (dv.redim (2)) { }

  boolMatrix (const dim_vector& dv, bool val)
    : boolNDArray (dv.redim (2), val) { }

  boolMatrix (const Array<bool>& a) : boolNDArray (a.as_matrix ()) { }

  boolMatrix (const boolMatrix& a) : boolNDArray (a) { }

  bool operator == (const boolMatrix& a) const;
  bool operator != (const boolMatrix& a) const;

  boolMatrix transpose (void) const { return Array<bool>::transpose (); }



  boolMatrix& insert (const boolMatrix& a,
                      octave_idx_type r, octave_idx_type c);



  boolMatrix operator ! (void) const;



  boolMatrix diag (octave_idx_type k = 0) const;
# 83 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolMatrix.h"
  void resize (octave_idx_type nr, octave_idx_type nc, bool rfv = false)
  {
    Array<bool>::resize (dim_vector (nr, nc), rfv);
  }
};

extern boolMatrix mx_el_and (const boolMatrix&, const boolMatrix&); extern boolMatrix mx_el_or (const boolMatrix&, const boolMatrix&);
extern boolMatrix mx_el_and (const boolMatrix&, const bool&); extern boolMatrix mx_el_or (const boolMatrix&, const bool&);
extern boolMatrix mx_el_and (const bool&, const boolMatrix&); extern boolMatrix mx_el_or (const bool&, const boolMatrix&);
extern boolMatrix mx_el_lt (const boolMatrix&, const boolMatrix&); extern boolMatrix mx_el_le (const boolMatrix&, const boolMatrix&); extern boolMatrix mx_el_ge (const boolMatrix&, const boolMatrix&); extern boolMatrix mx_el_gt (const boolMatrix&, const boolMatrix&); extern boolMatrix mx_el_eq (const boolMatrix&, const boolMatrix&); extern boolMatrix mx_el_ne (const boolMatrix&, const boolMatrix&);
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/chMatrix.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/chMatrix.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/chNDArray.h" 1
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/chNDArray.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/str-vec.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/str-vec.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\list" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\list" 3




# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 1 3
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
namespace std
{
  namespace __detail
  {
# 77 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
    struct _List_node_base
    {
      _List_node_base* _M_next;
      _List_node_base* _M_prev;

      static void
      swap(_List_node_base& __x, _List_node_base& __y) noexcept;

      void
      _M_transfer(_List_node_base* const __first,
    _List_node_base* const __last) noexcept;

      void
      _M_reverse() noexcept;

      void
      _M_hook(_List_node_base* const __position) noexcept;

      void
      _M_unhook() noexcept;
    };


  }




  template<typename _Tp>
    struct _List_node : public __detail::_List_node_base
    {

      _Tp _M_data;


      template<typename... _Args>
        _List_node(_Args&&... __args)
 : __detail::_List_node_base(), _M_data(std::forward<_Args>(__args)...)
        { }

    };






  template<typename _Tp>
    struct _List_iterator
    {
      typedef _List_iterator<_Tp> _Self;
      typedef _List_node<_Tp> _Node;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;

      _List_iterator() noexcept
      : _M_node() { }

      explicit
      _List_iterator(__detail::_List_node_base* __x) noexcept
      : _M_node(__x) { }

      _Self
      _M_const_cast() const noexcept
      { return *this; }


      reference
      operator*() const noexcept
      { return static_cast<_Node*>(_M_node)->_M_data; }

      pointer
      operator->() const noexcept
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++() noexcept
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }


      __detail::_List_node_base* _M_node;
    };






  template<typename _Tp>
    struct _List_const_iterator
    {
      typedef _List_const_iterator<_Tp> _Self;
      typedef const _List_node<_Tp> _Node;
      typedef _List_iterator<_Tp> iterator;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;

      _List_const_iterator() noexcept
      : _M_node() { }

      explicit
      _List_const_iterator(const __detail::_List_node_base* __x)
      noexcept
      : _M_node(__x) { }

      _List_const_iterator(const iterator& __x) noexcept
      : _M_node(__x._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }



      reference
      operator*() const noexcept
      { return static_cast<_Node*>(_M_node)->_M_data; }

      pointer
      operator->() const noexcept
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++() noexcept
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }


      const __detail::_List_node_base* _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _List_iterator<_Val>& __x,
        const _List_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _List_iterator<_Val>& __x,
               const _List_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }



  template<typename _Tp, typename _Alloc>
    class _List_base
    {
    protected:
# 314 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      typedef typename _Alloc::template rebind<_List_node<_Tp> >::other
        _Node_alloc_type;

      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _List_impl
      : public _Node_alloc_type
      {
 __detail::_List_node_base _M_node;

 _List_impl()
 : _Node_alloc_type(), _M_node()
 { }

 _List_impl(const _Node_alloc_type& __a) noexcept
 : _Node_alloc_type(__a), _M_node()
 { }


 _List_impl(_Node_alloc_type&& __a) noexcept
 : _Node_alloc_type(std::move(__a)), _M_node()
 { }

      };

      _List_impl _M_impl;

      _List_node<_Tp>*
      _M_get_node()
      { return _M_impl._Node_alloc_type::allocate(1); }

      void
      _M_put_node(_List_node<_Tp>* __p) noexcept
      { _M_impl._Node_alloc_type::deallocate(__p, 1); }

  public:
      typedef _Alloc allocator_type;

      _Node_alloc_type&
      _M_get_Node_allocator() noexcept
      { return *static_cast<_Node_alloc_type*>(&_M_impl); }

      const _Node_alloc_type&
      _M_get_Node_allocator() const noexcept
      { return *static_cast<const _Node_alloc_type*>(&_M_impl); }

      _Tp_alloc_type
      _M_get_Tp_allocator() const noexcept
      { return _Tp_alloc_type(_M_get_Node_allocator()); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

      _List_base()
      : _M_impl()
      { _M_init(); }

      _List_base(const _Node_alloc_type& __a) noexcept
      : _M_impl(__a)
      { _M_init(); }


      _List_base(_List_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Node_allocator()))
      {
 _M_init();
 __detail::_List_node_base::swap(_M_impl._M_node, __x._M_impl._M_node);
      }



      ~_List_base() noexcept
      { _M_clear(); }

      void
      _M_clear() noexcept;

      void
      _M_init() noexcept
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
        this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
      }
    };
# 446 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _List_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef typename _Base::_Node_alloc_type _Node_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef _List_iterator<_Tp> iterator;
      typedef _List_const_iterator<_Tp> const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:


      typedef _List_node<_Tp> _Node;

      using _Base::_M_impl;
      using _Base::_M_put_node;
      using _Base::_M_get_node;
      using _Base::_M_get_Tp_allocator;
      using _Base::_M_get_Node_allocator;
# 507 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename... _Args>
        _Node*
        _M_create_node(_Args&&... __args)
 {
   _Node* __p = this->_M_get_node();
   try
     {
       _M_get_Node_allocator().construct(__p,
      std::forward<_Args>(__args)...);
     }
   catch(...)
     {
       _M_put_node(__p);
       throw;
     }
   return __p;
 }


    public:






      list()

      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)

      : _Base() { }





      explicit
      list(const allocator_type& __a) noexcept
      : _Base(_Node_alloc_type(__a)) { }
# 555 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      explicit
      list(size_type __n)
      : _Base()
      { _M_default_initialize(__n); }
# 568 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      list(size_type __n, const value_type& __value,
    const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_fill_initialize(__n, __value); }
# 595 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      list(const list& __x)
      : _Base(__x._M_get_Node_allocator())
      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }
# 607 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      list(list&& __x) noexcept
      : _Base(std::move(__x)) { }
# 618 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      list(initializer_list<value_type> __l,
           const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }
# 635 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        list(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
 : _Base(_Node_alloc_type(__a))
        { _M_initialize_dispatch(__first, __last, __false_type()); }
# 668 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      list&
      operator=(const list& __x);
# 679 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      list&
      operator=(list&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 696 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      list&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 714 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 731 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        void
        assign(_InputIterator __first, _InputIterator __last)
        { _M_assign_dispatch(__first, __last, __false_type()); }
# 755 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      allocator_type
      get_allocator() const noexcept
      { return _Base::get_allocator(); }






      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_node._M_next); }






      iterator
      end() noexcept
      { return iterator(&this->_M_impl._M_node); }






      const_iterator
      end() const noexcept
      { return const_iterator(&this->_M_impl._M_node); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      cend() const noexcept
      { return const_iterator(&this->_M_impl._M_node); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }







      bool
      empty() const noexcept
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }


      size_type
      size() const noexcept
      { return std::distance(begin(), end()); }


      size_type
      max_size() const noexcept
      { return _M_get_Node_allocator().max_size(); }
# 904 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      resize(size_type __new_size);
# 917 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      resize(size_type __new_size, const value_type& __x);
# 939 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      reference
      front() noexcept
      { return *begin(); }





      const_reference
      front() const noexcept
      { return *begin(); }





      reference
      back() noexcept
      {
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      const_reference
      back() const noexcept
      {
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 986 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      push_front(const value_type& __x)
      { this->_M_insert(begin(), __x); }


      void
      push_front(value_type&& __x)
      { this->_M_insert(begin(), std::move(__x)); }

      template<typename... _Args>
        void
        emplace_front(_Args&&... __args)
        { this->_M_insert(begin(), std::forward<_Args>(__args)...); }
# 1013 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      pop_front() noexcept
      { this->_M_erase(begin()); }
# 1027 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }


      void
      push_back(value_type&& __x)
      { this->_M_insert(end(), std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args)
        { this->_M_insert(end(), std::forward<_Args>(__args)...); }
# 1053 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      pop_back() noexcept
      { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }
# 1070 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename... _Args>
        iterator
        emplace(const_iterator __position, _Args&&... __args);
# 1085 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1115 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1134 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      iterator
      insert(const_iterator __p, initializer_list<value_type> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1154 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x);
# 1193 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last);
# 1237 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      iterator

      erase(const_iterator __position) noexcept;
# 1262 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last) noexcept



      {
 while (__first != __last)
   __first = erase(__first);
 return __last._M_const_cast();
      }
# 1283 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      swap(list& __x)
      {
 __detail::_List_node_base::swap(this->_M_impl._M_node,
     __x._M_impl._M_node);



 std::__alloc_swap<typename _Base::_Node_alloc_type>::
   _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator());
      }







      void
      clear() noexcept
      {
        _Base::_M_clear();
        _Base::_M_init();
      }
# 1320 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void

      splice(const_iterator __position, list&& __x) noexcept



      {
 if (!__x.empty())
   {
     _M_check_equal_allocators(__x);

     this->_M_transfer(__position._M_const_cast(),
         __x.begin(), __x.end());
   }
      }


      void
      splice(const_iterator __position, list& __x) noexcept
      { splice(__position, std::move(__x)); }
# 1353 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept
# 1368 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      {
 iterator __j = __i._M_const_cast();
 ++__j;
 if (__position == __i || __position == __j)
   return;

 if (this != &__x)
   _M_check_equal_allocators(__x);

 this->_M_transfer(__position._M_const_cast(),
     __i._M_const_cast(), __j);
      }
# 1392 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      splice(const_iterator __position, list& __x, const_iterator __i) noexcept
      { splice(__position, std::move(__x), __i); }
# 1411 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      splice(const_iterator __position, list&& __x, const_iterator __first,
      const_iterator __last) noexcept
# 1431 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      {
 if (__first != __last)
   {
     if (this != &__x)
       _M_check_equal_allocators(__x);

     this->_M_transfer(__position._M_const_cast(),
         __first._M_const_cast(),
         __last._M_const_cast());
   }
      }
# 1457 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      splice(const_iterator __position, list& __x, const_iterator __first,
      const_iterator __last) noexcept
      { splice(__position, std::move(__x), __first, __last); }
# 1474 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      remove(const _Tp& __value);
# 1488 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename _Predicate>
        void
        remove_if(_Predicate);
# 1502 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      unique();
# 1517 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename _BinaryPredicate>
        void
        unique(_BinaryPredicate);
# 1531 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      merge(list&& __x);

      void
      merge(list& __x)
      { merge(std::move(__x)); }
# 1556 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename _StrictWeakOrdering>
        void
        merge(list&& __x, _StrictWeakOrdering __comp);

      template<typename _StrictWeakOrdering>
        void
        merge(list& __x, _StrictWeakOrdering __comp)
        { merge(std::move(__x), __comp); }
# 1575 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      void
      reverse() noexcept
      { this->_M_impl._M_node._M_reverse(); }







      void
      sort();







      template<typename _StrictWeakOrdering>
        void
        sort(_StrictWeakOrdering);

    protected:






      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
        { _M_fill_initialize(static_cast<size_type>(__n), __x); }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }



      void
      _M_fill_initialize(size_type __n, const value_type& __x)
      {
 for (; __n; --__n)
   push_back(__x);
      }



      void
      _M_default_initialize(size_type __n)
      {
 for (; __n; --__n)
   emplace_back();
      }


      void
      _M_default_append(size_type __n);
# 1653 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type);



      void
      _M_fill_assign(size_type __n, const value_type& __val);



      void
      _M_transfer(iterator __position, iterator __first, iterator __last)
      { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }
# 1684 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
  _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
  __tmp->_M_hook(__position._M_node);
       }



      void
      _M_erase(iterator __position) noexcept
      {
        __position._M_node->_M_unhook();
        _Node* __n = static_cast<_Node*>(__position._M_node);

        _M_get_Node_allocator().destroy(__n);



        _M_put_node(__n);
      }


      void
      _M_check_equal_allocators(list& __x) noexcept
      {
 if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
     _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
   __builtin_abort();
      }
    };
# 1727 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    {
      typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;
      const_iterator __end1 = __x.end();
      const_iterator __end2 = __y.end();

      const_iterator __i1 = __x.begin();
      const_iterator __i2 = __y.begin();
      while (__i1 != __end1 && __i2 != __end2 && *__i1 == *__i2)
 {
   ++__i1;
   ++__i2;
 }
      return __i1 == __end1 && __i2 == __end2;
    }
# 1756 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\list" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/list.tcc" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/list.tcc" 3
namespace std
{


  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() noexcept
    {
      typedef _List_node<_Tp> _Node;
      _Node* __cur = static_cast<_Node*>(_M_impl._M_node._M_next);
      while (__cur != &_M_impl._M_node)
 {
   _Node* __tmp = __cur;
   __cur = static_cast<_Node*>(__cur->_M_next);

   _M_get_Node_allocator().destroy(__tmp);



   _M_put_node(__tmp);
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 __tmp->_M_hook(__position._M_const_cast()._M_node);
 return iterator(__tmp);
      }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      _Node* __tmp = _M_create_node(__x);
      __tmp->_M_hook(__position._M_const_cast()._M_node);
      return iterator(__tmp);
    }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
    insert(const_iterator __position, size_type __n, const value_type& __x)
    {
      if (__n)
 {
   list __tmp(__n, __x, get_allocator());
   iterator __it = __tmp.begin();
   splice(__position, __tmp);
   return __it;
 }
      return __position._M_const_cast();
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator, typename>
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      insert(const_iterator __position, _InputIterator __first,
      _InputIterator __last)
      {
 list __tmp(__first, __last, get_allocator());
 if (!__tmp.empty())
   {
     iterator __it = __tmp.begin();
     splice(__position, __tmp);
     return __it;
   }
 return __position._M_const_cast();
      }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::

    erase(const_iterator __position) noexcept



    {
      iterator __ret = iterator(__position._M_node->_M_next);
      _M_erase(__position._M_const_cast());
      return __ret;
    }


  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      size_type __i = 0;
      try
 {
   for (; __i < __n; ++__i)
     emplace_back();
 }
      catch(...)
 {
   for (; __i; --__i)
     pop_back();
   throw;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size)
    {
      iterator __i = begin();
      size_type __len = 0;
      for (; __i != end() && __len < __new_size; ++__i, ++__len)
        ;
      if (__len == __new_size)
        erase(__i, end());
      else
 _M_default_append(__new_size - __len);
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size, const value_type& __x)
    {
      iterator __i = begin();
      size_type __len = 0;
      for (; __i != end() && __len < __new_size; ++__i, ++__len)
        ;
      if (__len == __new_size)
        erase(__i, end());
      else
        insert(end(), __new_size - __len, __x);
    }
# 224 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    list<_Tp, _Alloc>&
    list<_Tp, _Alloc>::
    operator=(const list& __x)
    {
      if (this != &__x)
 {
   iterator __first1 = begin();
   iterator __last1 = end();
   const_iterator __first2 = __x.begin();
   const_iterator __last2 = __x.end();
   for (; __first1 != __last1 && __first2 != __last2;
        ++__first1, ++__first2)
     *__first1 = *__first2;
   if (__first2 == __last2)
     erase(__first1, __last1);
   else
     insert(__last1, __first2, __last2);
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_fill_assign(size_type __n, const value_type& __val)
    {
      iterator __i = begin();
      for (; __i != end() && __n > 0; ++__i, --__n)
        *__i = __val;
      if (__n > 0)
        insert(end(), __n, __val);
      else
        erase(__i, end());
    }

  template<typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      list<_Tp, _Alloc>::
      _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2,
    __false_type)
      {
        iterator __first1 = begin();
        iterator __last1 = end();
        for (; __first1 != __last1 && __first2 != __last2;
      ++__first1, ++__first2)
          *__first1 = *__first2;
        if (__first2 == __last2)
          erase(__first1, __last1);
        else
          insert(__last1, __first2, __last2);
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
    {
      iterator __first = begin();
      iterator __last = end();
      iterator __extra = __last;
      while (__first != __last)
 {
   iterator __next = __first;
   ++__next;
   if (*__first == __value)
     {



       if (std::__addressof(*__first) != std::__addressof(__value))
  _M_erase(__first);
       else
  __extra = __first;
     }
   __first = __next;
 }
      if (__extra != __last)
 _M_erase(__extra);
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    unique()
    {
      iterator __first = begin();
      iterator __last = end();
      if (__first == __last)
 return;
      iterator __next = __first;
      while (++__next != __last)
 {
   if (*__first == *__next)
     _M_erase(__next);
   else
     __first = __next;
   __next = __first;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::

    merge(list&& __x)



    {


      if (this != &__x)
 {
   _M_check_equal_allocators(__x);

   iterator __first1 = begin();
   iterator __last1 = end();
   iterator __first2 = __x.begin();
   iterator __last2 = __x.end();
   while (__first1 != __last1 && __first2 != __last2)
     if (*__first2 < *__first1)
       {
  iterator __next = __first2;
  _M_transfer(__first1, __first2, ++__next);
  __first2 = __next;
       }
     else
       ++__first1;
   if (__first2 != __last2)
     _M_transfer(__last1, __first2, __last2);
 }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::

      merge(list&& __x, _StrictWeakOrdering __comp)



      {


 if (this != &__x)
   {
     _M_check_equal_allocators(__x);

     iterator __first1 = begin();
     iterator __last1 = end();
     iterator __first2 = __x.begin();
     iterator __last2 = __x.end();
     while (__first1 != __last1 && __first2 != __last2)
       if (__comp(*__first2, *__first1))
  {
    iterator __next = __first2;
    _M_transfer(__first1, __first2, ++__next);
    __first2 = __next;
  }
       else
  ++__first1;
     if (__first2 != __last2)
       _M_transfer(__last1, __first2, __last2);
   }
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    sort()
    {

      if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
   && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
      {
        list __carry;
        list __tmp[64];
        list * __fill = &__tmp[0];
        list * __counter;

        do
   {
     __carry.splice(__carry.begin(), *this, begin());

     for(__counter = &__tmp[0];
  __counter != __fill && !__counter->empty();
  ++__counter)
       {
  __counter->merge(__carry);
  __carry.swap(*__counter);
       }
     __carry.swap(*__counter);
     if (__counter == __fill)
       ++__fill;
   }
 while ( !empty() );

        for (__counter = &__tmp[1]; __counter != __fill; ++__counter)
          __counter->merge(*(__counter - 1));
        swap( *(__fill - 1) );
      }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _Predicate>
      void
      list<_Tp, _Alloc>::
      remove_if(_Predicate __pred)
      {
        iterator __first = begin();
        iterator __last = end();
        while (__first != __last)
   {
     iterator __next = __first;
     ++__next;
     if (__pred(*__first))
       _M_erase(__first);
     __first = __next;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _BinaryPredicate>
      void
      list<_Tp, _Alloc>::
      unique(_BinaryPredicate __binary_pred)
      {
        iterator __first = begin();
        iterator __last = end();
        if (__first == __last)
   return;
        iterator __next = __first;
        while (++__next != __last)
   {
     if (__binary_pred(*__first, *__next))
       _M_erase(__next);
     else
       __first = __next;
     __next = __first;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::
      sort(_StrictWeakOrdering __comp)
      {

 if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
     && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
   {
     list __carry;
     list __tmp[64];
     list * __fill = &__tmp[0];
     list * __counter;

     do
       {
  __carry.splice(__carry.begin(), *this, begin());

  for(__counter = &__tmp[0];
      __counter != __fill && !__counter->empty();
      ++__counter)
    {
      __counter->merge(__carry, __comp);
      __carry.swap(*__counter);
    }
  __carry.swap(*__counter);
  if (__counter == __fill)
    ++__fill;
       }
     while ( !empty() );

     for (__counter = &__tmp[1]; __counter != __fill; ++__counter)
       __counter->merge(*(__counter - 1), __comp);
     swap(*(__fill - 1));
   }
      }


}
# 65 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\list" 2 3
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/str-vec.h" 2




class

string_vector : public Array<std::string>
{
public:

  string_vector (void) : Array<std::string> () { }

  explicit string_vector (octave_idx_type n)
    : Array<std::string> (dim_vector (n, 1)) { }

  string_vector (const char *s)
    : Array<std::string> (dim_vector (1, 1), s) { }

  string_vector (const std::string& s)
    : Array<std::string> (dim_vector (1, 1), s) { }

  string_vector (const string_vector& s) : Array<std::string> (s) { }







  template<template <typename...> class String_Container, typename... Other>
  string_vector (const String_Container<std::string, Other...>& lst);

  string_vector (const Array<std::string>& s)
    : Array<std::string> (s.as_column ()) { }

  string_vector (const char * const *s);

  string_vector (const char * const *s, octave_idx_type n);

  string_vector& operator = (const string_vector& s)
  {
    if (this != &s)
      Array<std::string>::operator = (s);

    return *this;
  }

  ~string_vector (void) { }

  bool empty (void) const { return numel () == 0; }

  octave_idx_type max_length (void) const
  {
    octave_idx_type n = numel ();
    octave_idx_type longest = 0;

    for (octave_idx_type i = 0; i < n; i++)
      {
        octave_idx_type tmp = elem (i).length ();

        if (tmp > longest)
          longest = tmp;
      }

    return longest;
  }

  void resize (octave_idx_type n, const std::string& rfv = "")
  {
    Array<std::string>::resize (dim_vector (n, 1), rfv);
  }

  std::string& operator[] (octave_idx_type i)
  { return Array<std::string>::elem (i); }

  std::string operator[] (octave_idx_type i) const
  { return Array<std::string>::elem (i); }

  string_vector& sort (bool make_uniq = false);

  string_vector& uniq (void);

  string_vector& append (const std::string& s);

  string_vector& append (const string_vector& sv);

  std::string join (const std::string& sep = "") const;

  char **c_str_vec (void) const;

  std::list<std::string> std_list (void) const;

  static void delete_c_str_vec (const char * const*);

  std::ostream&
  list_in_columns (std::ostream&, int width = 0,
                   const std::string& prefix = "") const;
};


template<template <typename...> class String_Container, typename... Other>
string_vector::string_vector (const String_Container<std::string, Other...>&
                              lst)
  : Array<std::string> ()
{
  resize (lst.size ());

  octave_idx_type i = 0;
  for (const std::string& s : lst)
    elem(i++) = s;
}
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/chNDArray.h" 2

class

charNDArray : public Array<char>
{
public:

  typedef charMatrix matrix_type;

  charNDArray (void) : Array<char> () { }

  charNDArray (const dim_vector& dv) : Array<char> (dv) { }

  charNDArray (const dim_vector& dv, char val) : Array<char> (dv, val) { }

  charNDArray (const charNDArray& a) : Array<char> (a) { }

  charNDArray (const Array<char>& a) : Array<char> (a) { }

  charNDArray (char c);

  charNDArray (const char *s);

  charNDArray (const std::string& s);

  charNDArray (const string_vector& s, char fill_value = '\0');

  charNDArray& operator = (const charNDArray& a)
  {
    Array<char>::operator = (a);
    return *this;
  }

  bool any_element_is_nan (void) const { return false; }



  boolNDArray all (int dim = -1) const;
  boolNDArray any (int dim = -1) const;
  charNDArray concat (const charNDArray& rb,
                      const Array<octave_idx_type>& ra_idx);
  charNDArray concat (const NDArray& rb, const Array<octave_idx_type>& ra_idx);

  charNDArray max (int dim = -1) const;
  charNDArray max (Array<octave_idx_type>& index, int dim = -1) const;
  charNDArray min (int dim = -1) const;
  charNDArray min (Array<octave_idx_type>& index, int dim = -1) const;

  charNDArray& insert (const charNDArray& a,
                       octave_idx_type r, octave_idx_type c);
  charNDArray& insert (const charNDArray& a,
                       const Array<octave_idx_type>& ra_idx);

  charNDArray squeeze (void) const { return Array<char>::squeeze (); }

  static void increment_index (Array<octave_idx_type>& ra_idx,
                               const dim_vector& dimensions,
                               int start_dimension = 0);

  static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions);






  charNDArray diag (octave_idx_type k = 0) const;

  charNDArray diag (octave_idx_type m, octave_idx_type n) const;
};

extern charNDArray min (char d, const charNDArray& m);
extern charNDArray min (const charNDArray& m, char d);
extern charNDArray min (const charNDArray& a, const charNDArray& b);
extern charNDArray max (char d, const charNDArray& m);
extern charNDArray max (const charNDArray& m, char d);
extern charNDArray max (const charNDArray& a, const charNDArray& b);

extern boolNDArray mx_el_lt (const charNDArray&, const char&); extern boolNDArray mx_el_le (const charNDArray&, const char&); extern boolNDArray mx_el_ge (const charNDArray&, const char&); extern boolNDArray mx_el_gt (const charNDArray&, const char&); extern boolNDArray mx_el_eq (const charNDArray&, const char&); extern boolNDArray mx_el_ne (const charNDArray&, const char&);
extern boolNDArray mx_el_and (const charNDArray&, const char&); extern boolNDArray mx_el_or (const charNDArray&, const char&); extern boolNDArray mx_el_not_and (const charNDArray&, const char&); extern boolNDArray mx_el_not_or (const charNDArray&, const char&);

extern boolNDArray mx_el_lt (const char&, const charNDArray&); extern boolNDArray mx_el_le (const char&, const charNDArray&); extern boolNDArray mx_el_ge (const char&, const charNDArray&); extern boolNDArray mx_el_gt (const char&, const charNDArray&); extern boolNDArray mx_el_eq (const char&, const charNDArray&); extern boolNDArray mx_el_ne (const char&, const charNDArray&);
extern boolNDArray mx_el_and (const char&, const charNDArray&); extern boolNDArray mx_el_or (const char&, const charNDArray&); extern boolNDArray mx_el_and_not (const char&, const charNDArray&); extern boolNDArray mx_el_or_not (const char&, const charNDArray&);

extern boolNDArray mx_el_lt (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_le (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_ge (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_gt (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_eq (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_ne (const charNDArray&, const charNDArray&);
extern boolNDArray mx_el_and (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_or (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_and_not (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_or_not (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_not_and (const charNDArray&, const charNDArray&); extern boolNDArray mx_el_not_or (const charNDArray&, const charNDArray&);

extern boolNDArray bsxfun_eq (const charNDArray&, const charNDArray&); extern boolNDArray bsxfun_ne (const charNDArray&, const charNDArray&); extern boolNDArray bsxfun_lt (const charNDArray&, const charNDArray&); extern boolNDArray bsxfun_le (const charNDArray&, const charNDArray&); extern boolNDArray bsxfun_gt (const charNDArray&, const charNDArray&); extern boolNDArray bsxfun_ge (const charNDArray&, const charNDArray&);
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/chMatrix.h" 2





class

charMatrix : public charNDArray
{
  friend class ComplexMatrix;

public:

  charMatrix (void) : charNDArray () { }

  charMatrix (octave_idx_type r, octave_idx_type c)
    : charNDArray (dim_vector (r, c)) { }

  charMatrix (octave_idx_type r, octave_idx_type c, char val)
    : charNDArray (dim_vector (r, c), val) { }

  charMatrix (const dim_vector& dv) : charNDArray (dv.redim (2)) { }

  charMatrix (const dim_vector& dv, char val)
    : charNDArray (dv.redim (2), val) { }

  charMatrix (const Array<char>& a) : charNDArray (a.as_matrix ()) { }

  charMatrix (const charMatrix& a) : charNDArray (a) { }

  charMatrix (char c) : charNDArray (c) { }

  charMatrix (const char *s) : charNDArray (s) { }

  charMatrix (const std::string& s) : charNDArray (s) { }

  charMatrix (const string_vector& s, char fill_value = '\0')
    : charNDArray (s, fill_value) { }

  bool operator == (const charMatrix& a) const;
  bool operator != (const charMatrix& a) const;

  charMatrix transpose (void) const { return Array<char>::transpose (); }



  charMatrix& insert (const char *s, octave_idx_type r, octave_idx_type c);
  charMatrix& insert (const charMatrix& a,
                      octave_idx_type r, octave_idx_type c);

  std::string row_as_string (octave_idx_type, bool strip_ws = false) const;



  charMatrix extract (octave_idx_type r1, octave_idx_type c1,
                      octave_idx_type r2, octave_idx_type c2) const;

  void resize (octave_idx_type nr, octave_idx_type nc, char rfv = 0)
  {
    Array<char>::resize (dim_vector (nr, nc), rfv);
  }







};

extern boolMatrix mx_el_lt (const charMatrix&, const char&); extern boolMatrix mx_el_le (const charMatrix&, const char&); extern boolMatrix mx_el_ge (const charMatrix&, const char&); extern boolMatrix mx_el_gt (const charMatrix&, const char&); extern boolMatrix mx_el_eq (const charMatrix&, const char&); extern boolMatrix mx_el_ne (const charMatrix&, const char&);
extern boolMatrix mx_el_and (const charMatrix&, const char&); extern boolMatrix mx_el_or (const charMatrix&, const char&);

extern boolMatrix mx_el_lt (const char&, const charMatrix&); extern boolMatrix mx_el_le (const char&, const charMatrix&); extern boolMatrix mx_el_ge (const char&, const charMatrix&); extern boolMatrix mx_el_gt (const char&, const charMatrix&); extern boolMatrix mx_el_eq (const char&, const charMatrix&); extern boolMatrix mx_el_ne (const char&, const charMatrix&);
extern boolMatrix mx_el_and (const char&, const charMatrix&); extern boolMatrix mx_el_or (const char&, const charMatrix&);

extern boolMatrix mx_el_lt (const charMatrix&, const charMatrix&); extern boolMatrix mx_el_le (const charMatrix&, const charMatrix&); extern boolMatrix mx_el_ge (const charMatrix&, const charMatrix&); extern boolMatrix mx_el_gt (const charMatrix&, const charMatrix&); extern boolMatrix mx_el_eq (const charMatrix&, const charMatrix&); extern boolMatrix mx_el_ne (const charMatrix&, const charMatrix&);
extern boolMatrix mx_el_and (const charMatrix&, const charMatrix&); extern boolMatrix mx_el_or (const charMatrix&, const charMatrix&);
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dMatrix.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dMatrix.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dNDArray.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dNDArray.h"
template <typename T> class intNDArray;

class

NDArray : public MArray<double>
{
public:

  NDArray (void) : MArray<double> () { }

  NDArray (const dim_vector& dv) : MArray<double> (dv) { }

  NDArray (const dim_vector& dv, double val)
    : MArray<double> (dv, val) { }

  NDArray (const NDArray& a) : MArray<double> (a) { }

  NDArray (const Array<octave_idx_type>& a, bool zero_based = false,
           bool negative_to_nan = false);

  template <typename U>
  NDArray (const MArray<U>& a) : MArray<double> (a) { }

  template <typename U>
  NDArray (const Array<U>& a) : MArray<double> (a) { }

  template <typename U>
  explicit NDArray (const intNDArray<U>& a) : MArray<double> (a) { }

  NDArray (const charNDArray&);


  NDArray (double *sdata, octave_idx_type slen, octave_idx_type *adims,
           void *arep)
    : MArray<double> (sdata, slen, adims, arep) { }

  NDArray& operator = (const NDArray& a)
  {
    MArray<double>::operator = (a);
    return *this;
  }



  boolNDArray operator ! (void) const;

  bool any_element_is_negative (bool = false) const;
  bool any_element_is_positive (bool = false) const;
  bool any_element_is_nan (void) const;
  bool any_element_is_inf_or_nan (void) const;
  bool any_element_not_one_or_zero (void) const;
  bool all_elements_are_zero (void) const;
  bool all_elements_are_int_or_inf_or_nan (void) const;
  bool all_integers (double& max_val, double& min_val) const;
  bool all_integers (void) const;
  bool too_large_for_float (void) const;



  boolNDArray all (int dim = -1) const;
  boolNDArray any (int dim = -1) const;

  NDArray cumprod (int dim = -1) const;
  NDArray cumsum (int dim = -1) const;
  NDArray prod (int dim = -1) const;
  NDArray sum (int dim = -1) const;
  NDArray xsum (int dim = -1) const;
  NDArray sumsq (int dim = -1) const;
  NDArray concat (const NDArray& rb, const Array<octave_idx_type>& ra_idx);
  ComplexNDArray concat (const ComplexNDArray& rb,
                         const Array<octave_idx_type>& ra_idx);
  charNDArray concat (const charNDArray& rb,
                      const Array<octave_idx_type>& ra_idx);

  NDArray max (int dim = -1) const;
  NDArray max (Array<octave_idx_type>& index, int dim = -1) const;
  NDArray min (int dim = -1) const;
  NDArray min (Array<octave_idx_type>& index, int dim = -1) const;

  NDArray cummax (int dim = -1) const;
  NDArray cummax (Array<octave_idx_type>& index, int dim = -1) const;
  NDArray cummin (int dim = -1) const;
  NDArray cummin (Array<octave_idx_type>& index, int dim = -1) const;

  NDArray diff (octave_idx_type order = 1, int dim = -1) const;

  NDArray& insert (const NDArray& a, octave_idx_type r, octave_idx_type c);
  NDArray& insert (const NDArray& a, const Array<octave_idx_type>& ra_idx);

  NDArray abs (void) const;
  boolNDArray isnan (void) const;
  boolNDArray isinf (void) const;
  boolNDArray isfinite (void) const;

  ComplexNDArray fourier (int dim = 1) const;
  ComplexNDArray ifourier (int dim = 1) const;

  ComplexNDArray fourier2d (void) const;
  ComplexNDArray ifourier2d (void) const;

  ComplexNDArray fourierNd (void) const;
  ComplexNDArray ifourierNd (void) const;

  friend NDArray real (const ComplexNDArray& a);
  friend NDArray imag (const ComplexNDArray& a);

  friend class ComplexNDArray;

  NDArray squeeze (void) const { return MArray<double>::squeeze (); }

  static void increment_index (Array<octave_idx_type>& ra_idx,
                               const dim_vector& dimensions,
                               int start_dimension = 0);

  static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions);



  friend std::ostream& operator << (std::ostream& os,
                                               const NDArray& a);
  friend std::istream& operator >> (std::istream& is, NDArray& a);

  NDArray diag (octave_idx_type k = 0) const;

  NDArray diag (octave_idx_type m, octave_idx_type n) const;

  NDArray& changesign (void)
  {
    MArray<double>::changesign ();
    return *this;
  }

};



extern NDArray real (const ComplexNDArray& a);
extern NDArray imag (const ComplexNDArray& a);

extern NDArray min (double d, const NDArray& m); extern NDArray min (const NDArray& m, double d); extern NDArray min (const NDArray& a, const NDArray& b); extern NDArray max (double d, const NDArray& m); extern NDArray max (const NDArray& m, double d); extern NDArray max (const NDArray& a, const NDArray& b);

extern boolNDArray mx_el_lt (const NDArray&, const double&); extern boolNDArray mx_el_le (const NDArray&, const double&); extern boolNDArray mx_el_ge (const NDArray&, const double&); extern boolNDArray mx_el_gt (const NDArray&, const double&); extern boolNDArray mx_el_eq (const NDArray&, const double&); extern boolNDArray mx_el_ne (const NDArray&, const double&);
extern boolNDArray mx_el_and (const NDArray&, const double&); extern boolNDArray mx_el_or (const NDArray&, const double&); extern boolNDArray mx_el_not_and (const NDArray&, const double&); extern boolNDArray mx_el_not_or (const NDArray&, const double&);

extern boolNDArray mx_el_lt (const double&, const NDArray&); extern boolNDArray mx_el_le (const double&, const NDArray&); extern boolNDArray mx_el_ge (const double&, const NDArray&); extern boolNDArray mx_el_gt (const double&, const NDArray&); extern boolNDArray mx_el_eq (const double&, const NDArray&); extern boolNDArray mx_el_ne (const double&, const NDArray&);
extern boolNDArray mx_el_and (const double&, const NDArray&); extern boolNDArray mx_el_or (const double&, const NDArray&); extern boolNDArray mx_el_and_not (const double&, const NDArray&); extern boolNDArray mx_el_or_not (const double&, const NDArray&);

extern boolNDArray mx_el_lt (const NDArray&, const NDArray&); extern boolNDArray mx_el_le (const NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const NDArray&); extern boolNDArray mx_el_or (const NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const NDArray&);

inline NDArray operator += (NDArray& x, const double& y) { return NDArray (operator += (dynamic_cast<MArray<double>&> (x), (y))); } inline NDArray operator -= (NDArray& x, const double& y) { return NDArray (operator -= (dynamic_cast<MArray<double>&> (x), (y))); } inline NDArray operator *= (NDArray& x, const double& y) { return NDArray (operator *= (dynamic_cast<MArray<double>&> (x), (y))); } inline NDArray operator /= (NDArray& x, const double& y) { return NDArray (operator /= (dynamic_cast<MArray<double>&> (x), (y))); } inline NDArray operator += (NDArray& x, const NDArray& y) { return NDArray (operator += (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray operator -= (NDArray& x, const NDArray& y) { return NDArray (operator -= (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray product_eq (NDArray& x, const NDArray& y) { return NDArray (product_eq (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray quotient_eq (NDArray& x, const NDArray& y) { return NDArray (quotient_eq (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray operator + (const NDArray& x) { return NDArray (operator + (dynamic_cast<const MArray<double>&> (x))); } inline NDArray operator - (const NDArray& x) { return NDArray (operator - (dynamic_cast<const MArray<double>&> (x))); } inline NDArray operator + (const NDArray& x, const double& y) { return NDArray (operator + (dynamic_cast<const MArray<double>&> (x), (y))); } inline NDArray operator - (const NDArray& x, const double& y) { return NDArray (operator - (dynamic_cast<const MArray<double>&> (x), (y))); } inline NDArray operator * (const NDArray& x, const double& y) { return NDArray (operator * (dynamic_cast<const MArray<double>&> (x), (y))); } inline NDArray operator / (const NDArray& x, const double& y) { return NDArray (operator / (dynamic_cast<const MArray<double>&> (x), (y))); } inline NDArray operator + (const double& x, const NDArray& y) { return NDArray (operator + ( (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray operator - (const double& x, const NDArray& y) { return NDArray (operator - ( (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray operator * (const double& x, const NDArray& y) { return NDArray (operator * ( (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray operator / (const double& x, const NDArray& y) { return NDArray (operator / ( (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray operator + (const NDArray& x, const NDArray& y) { return NDArray (operator + (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray operator - (const NDArray& x, const NDArray& y) { return NDArray (operator - (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray product (const NDArray& x, const NDArray& y) { return NDArray (product (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline NDArray quotient (const NDArray& x, const NDArray& y) { return NDArray (quotient (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); }

extern NDArray bsxfun_add (const NDArray&, const NDArray&); extern NDArray bsxfun_sub (const NDArray&, const NDArray&); extern NDArray bsxfun_mul (const NDArray&, const NDArray&); extern NDArray bsxfun_div (const NDArray&, const NDArray&); extern NDArray bsxfun_pow (const NDArray&, const NDArray&); extern NDArray bsxfun_min (const NDArray&, const NDArray&); extern NDArray bsxfun_max (const NDArray&, const NDArray&);
extern boolNDArray bsxfun_eq (const NDArray&, const NDArray&); extern boolNDArray bsxfun_ne (const NDArray&, const NDArray&); extern boolNDArray bsxfun_lt (const NDArray&, const NDArray&); extern boolNDArray bsxfun_le (const NDArray&, const NDArray&); extern boolNDArray bsxfun_gt (const NDArray&, const NDArray&); extern boolNDArray bsxfun_ge (const NDArray&, const NDArray&);

extern NDArray bsxfun_pow (const NDArray&, const NDArray&);
extern ComplexNDArray bsxfun_pow (const ComplexNDArray&, const NDArray&);

extern ComplexNDArray bsxfun_pow (const NDArray&, const ComplexNDArray&);
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dMatrix.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MDiagArray2.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MDiagArray2.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/DiagArray2.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/DiagArray2.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 1 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 3

# 1 "C:\\Octave\\Octave-4.2.1\\include\\assert.h" 1 3
# 44 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cassert" 2 3
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/DiagArray2.h" 2
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/DiagArray2.h" 2






template <typename T>
class
DiagArray2 : protected Array<T>
{
protected:
  octave_idx_type d1, d2;

public:

  using typename Array<T>::element_type;

  DiagArray2 (void)
    : Array<T> (), d1 (0), d2 (0) { }

  DiagArray2 (octave_idx_type r, octave_idx_type c)
    : Array<T> (dim_vector (std::min (r, c), 1)), d1 (r), d2 (c) { }

  DiagArray2 (octave_idx_type r, octave_idx_type c, const T& val)
    : Array<T> (dim_vector (std::min (r, c), 1), val), d1 (r), d2 (c) { }

  explicit DiagArray2 (const Array<T>& a)
    : Array<T> (a.as_column ()), d1 (a.numel ()), d2 (a.numel ()) { }

  DiagArray2 (const Array<T>& a, octave_idx_type r, octave_idx_type c);

  DiagArray2 (const DiagArray2<T>& a)
    : Array<T> (a), d1 (a.d1), d2 (a.d2) { }

  template <typename U>
  DiagArray2 (const DiagArray2<U>& a)
    : Array<T> (a.extract_diag ()), d1 (a.dim1 ()), d2 (a.dim2 ()) { }

  ~DiagArray2 (void) { }

  DiagArray2<T>& operator = (const DiagArray2<T>& a)
  {
    if (this != &a)
      {
        Array<T>::operator = (a);
        d1 = a.d1;
        d2 = a.d2;
      }

    return *this;
  }

  octave_idx_type dim1 (void) const { return d1; }
  octave_idx_type dim2 (void) const { return d2; }

  octave_idx_type rows (void) const { return dim1 (); }
  octave_idx_type cols (void) const { return dim2 (); }
  octave_idx_type columns (void) const { return dim2 (); }

  octave_idx_type diag_length (void) const { return Array<T>::numel (); }

  octave_idx_type length (void) const { return Array<T>::numel (); }
  octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
  octave_idx_type numel (void) const { return nelem (); }

  size_t byte_size (void) const { return Array<T>::byte_size (); }

  dim_vector dims (void) const { return dim_vector (d1, d2); }

  __attribute__ ((__deprecated__))
  Array<T> diag (octave_idx_type k = 0) const;

  Array<T> extract_diag (octave_idx_type k = 0) const;
  DiagArray2<T> build_diag_matrix () const
  {
    return DiagArray2<T> (array_value ());
  }




  T elem (octave_idx_type r, octave_idx_type c) const
  {
    return (r == c) ? Array<T>::elem (r) : T (0);
  }

  T& elem (octave_idx_type r, octave_idx_type c);

  T dgelem (octave_idx_type i) const
  { return Array<T>::elem (i); }

  T& dgelem (octave_idx_type i)
  { return Array<T>::elem (i); }

  T checkelem (octave_idx_type r, octave_idx_type c) const
  {
    return check_idx (r, c) ? elem (r, c) : T (0);
  }

  T operator () (octave_idx_type r, octave_idx_type c) const
  {



    return elem (r, c);

  }

  T& checkelem (octave_idx_type r, octave_idx_type c);

  T& operator () (octave_idx_type r, octave_idx_type c)
  {



    return elem (r, c);

  }



  T xelem (octave_idx_type r, octave_idx_type c) const
  {
    return (r == c) ? Array<T>::xelem (r) : T (0);
  }

  T& dgxelem (octave_idx_type i)
  { return Array<T>::xelem (i); }

  T dgxelem (octave_idx_type i) const
  { return Array<T>::xelem (i); }

  void resize (octave_idx_type n, octave_idx_type m, const T& rfv);
  void resize (octave_idx_type n, octave_idx_type m)
  {
    resize (n, m, Array<T>::resize_fill_value ());
  }

  DiagArray2<T> transpose (void) const;
  DiagArray2<T> hermitian (T (*fcn) (const T&) = 0) const;

  Array<T> array_value (void) const;

  const T *data (void) const { return Array<T>::data (); }

  const T *fortran_vec (void) const { return Array<T>::fortran_vec (); }

  T *fortran_vec (void) { return Array<T>::fortran_vec (); }

  void print_info (std::ostream& os, const std::string& prefix) const
  { Array<T>::print_info (os, prefix); }

private:

  bool check_idx (octave_idx_type r, octave_idx_type c) const;
};
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/MDiagArray2.h" 2


template <typename T> class MDiagArray2;

template <typename T> MDiagArray2<T> operator + (const MDiagArray2<T>&);
template <typename T> MDiagArray2<T> operator - (const MDiagArray2<T>&);
template <typename T> MDiagArray2<T> operator * (const MDiagArray2<T>&,
                                                 const T&);
template <typename T> MDiagArray2<T> operator / (const MDiagArray2<T>&,
                                                 const T&);
template <typename T> MDiagArray2<T> operator * (const T&,
                                                 const MDiagArray2<T>&);
template <typename T> MDiagArray2<T> operator + (const MDiagArray2<T>&,
                                                 const MDiagArray2<T>&);
template <typename T> MDiagArray2<T> operator - (const MDiagArray2<T>&,
                                                 const MDiagArray2<T>&);
template <typename T> MDiagArray2<T> product (const MDiagArray2<T>&,
                                              const MDiagArray2<T>&);


template <typename T>
class
MDiagArray2 : public DiagArray2<T>
{
public:

  MDiagArray2 (void) : DiagArray2<T> () { }

  MDiagArray2 (octave_idx_type r, octave_idx_type c) : DiagArray2<T> (r, c) { }

  MDiagArray2 (octave_idx_type r, octave_idx_type c, const T& val)
    : DiagArray2<T> (r, c, val) { }

  MDiagArray2 (const MDiagArray2<T>& a) : DiagArray2<T> (a) { }

  MDiagArray2 (const DiagArray2<T>& a) : DiagArray2<T> (a) { }

  template <typename U>
  MDiagArray2 (const DiagArray2<U>& a) : DiagArray2<T> (a) { }

  explicit MDiagArray2 (const Array<T>& a) : DiagArray2<T> (a) { }

  MDiagArray2 (const Array<T>& a, octave_idx_type r, octave_idx_type c)
    : DiagArray2<T> (a, r, c) { }

  ~MDiagArray2 (void) { }

  MDiagArray2<T>& operator = (const MDiagArray2<T>& a)
  {
    DiagArray2<T>::operator = (a);
    return *this;
  }

  MArray<T> array_value () const
  {
    return DiagArray2<T>::array_value ();
  }

  octave_idx_type nnz (void) const
  {
    octave_idx_type retval = 0;

    const T *d = this->data ();

    octave_idx_type nel = this->length ();

    for (octave_idx_type i = 0; i < nel; i++)
      {
        if (d[i] != T ())
          retval++;
      }

    return retval;
  }

  MArray<T> diag (octave_idx_type k = 0) const
  { return DiagArray2<T>::extract_diag (k); }

  MDiagArray2<T> transpose (void) const { return DiagArray2<T>::transpose (); }
  MDiagArray2<T> hermitian (T (*fcn) (const T&) = 0) const
  { return DiagArray2<T>::hermitian (fcn); }

  bool is_multiple_of_identity (T val) const;




  friend MDiagArray2<T> operator + <> (const MDiagArray2<T>&);
  friend MDiagArray2<T> operator - <> (const MDiagArray2<T>&);
  friend MDiagArray2<T> operator * <> (const MDiagArray2<T>&, const T&);
  friend MDiagArray2<T> operator / <> (const MDiagArray2<T>&, const T&);
  friend MDiagArray2<T> operator * <> (const T&, const MDiagArray2<T>&);
  friend MDiagArray2<T> operator + <> (const MDiagArray2<T>&,
                                       const MDiagArray2<T>&);
  friend MDiagArray2<T> operator - <> (const MDiagArray2<T>&,
                                       const MDiagArray2<T>&);
  friend MDiagArray2<T> product <> (const MDiagArray2<T>&,
                                    const MDiagArray2<T>&);

};
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dMatrix.h" 2




# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/DET.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/DET.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cmath" 3
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/DET.h" 2



template <typename T>
class
base_det
{
public:

  base_det (T c = 1, int e = 0)
    : c2 (), e2 ()
  {
    c2 = octave::math::log2 (c, e2);
    e2 += e;
  }

  base_det (T c, double e, double b)
    : c2 (), e2 ()
  {
    e *= octave::math::log2 (b);
    e2 = e;
    c *= octave::math::exp2 (e - e2);
    int f;
    c2 = octave::math::log2 (c, f);
    e2 += f;
  }

  base_det (const base_det& a) : c2 (a.c2), e2 (a.e2) { }

  base_det& operator = (const base_det& a)
  {
    c2 = a.c2;
    e2 = a.e2;
    return *this;
  }

  T coef (void) const { return c2; }
  int exp (void) const { return e2; }

  T value () const { return c2 * static_cast<T> (std::ldexp (1.0, e2)); }
  operator T () const { return value (); }

  base_det square () const { return base_det (c2*c2, e2+e2); }

  void operator *= (T t)
  {
    int e;
    c2 *= octave::math::log2 (t, e);
    e2 += e;
  }

private:

  T c2;
  int e2;
};


typedef base_det<double> DET;
typedef base_det<float> FloatDET;
typedef base_det<Complex> ComplexDET;
typedef base_det<FloatComplex> FloatComplexDET;
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dMatrix.h" 2

class

Matrix : public NDArray
{
public:

  typedef ColumnVector column_vector_type;
  typedef RowVector row_vector_type;

  typedef ColumnVector real_column_vector_type;
  typedef RowVector real_row_vector_type;

  typedef Matrix real_matrix_type;
  typedef ComplexMatrix complex_matrix_type;

  typedef DiagMatrix real_diag_matrix_type;
  typedef ComplexDiagMatrix complex_diag_matrix_type;

  typedef double real_elt_type;
  typedef Complex complex_elt_type;

  typedef void (*solve_singularity_handler) (double rcon);

  Matrix (void) : NDArray () { }

  Matrix (octave_idx_type r, octave_idx_type c)
    : NDArray (dim_vector (r, c)) { }

  Matrix (octave_idx_type r, octave_idx_type c, double val)
    : NDArray (dim_vector (r, c), val) { }

  Matrix (const dim_vector& dv) : NDArray (dv.redim (2)) { }

  Matrix (const dim_vector& dv, double val)
    : NDArray (dv.redim (2), val) { }

  Matrix (const Matrix& a) : NDArray (a) { }

  template <typename U>
  Matrix (const MArray<U>& a) : NDArray (a.as_matrix ()) { }

  template <typename U>
  Matrix (const Array<U>& a) : NDArray (a.as_matrix ()) { }

  explicit Matrix (const RowVector& rv);

  explicit Matrix (const ColumnVector& cv);

  explicit Matrix (const DiagMatrix& a);

  explicit Matrix (const MDiagArray2<double>& a);

  explicit Matrix (const DiagArray2<double>& a);

  explicit Matrix (const PermMatrix& a);

  explicit Matrix (const boolMatrix& a);

  explicit Matrix (const charMatrix& a);

  bool operator == (const Matrix& a) const;
  bool operator != (const Matrix& a) const;

  bool is_symmetric (void) const;



  Matrix& insert (const Matrix& a, octave_idx_type r, octave_idx_type c);
  Matrix& insert (const RowVector& a, octave_idx_type r, octave_idx_type c);
  Matrix& insert (const ColumnVector& a, octave_idx_type r, octave_idx_type c);
  Matrix& insert (const DiagMatrix& a, octave_idx_type r, octave_idx_type c);

  Matrix& fill (double val);
  Matrix& fill (double val, octave_idx_type r1, octave_idx_type c1,
                octave_idx_type r2, octave_idx_type c2);

  Matrix append (const Matrix& a) const;
  Matrix append (const RowVector& a) const;
  Matrix append (const ColumnVector& a) const;
  Matrix append (const DiagMatrix& a) const;

  Matrix stack (const Matrix& a) const;
  Matrix stack (const RowVector& a) const;
  Matrix stack (const ColumnVector& a) const;
  Matrix stack (const DiagMatrix& a) const;

  friend Matrix real (const ComplexMatrix& a);
  friend Matrix imag (const ComplexMatrix& a);

  friend class ComplexMatrix;

  Matrix hermitian (void) const { return MArray<double>::transpose (); }
  Matrix transpose (void) const { return MArray<double>::transpose (); }



  Matrix extract (octave_idx_type r1, octave_idx_type c1,
                  octave_idx_type r2, octave_idx_type c2) const;

  Matrix extract_n (octave_idx_type r1, octave_idx_type c1,
                    octave_idx_type nr, octave_idx_type nc) const;



  RowVector row (octave_idx_type i) const;

  ColumnVector column (octave_idx_type i) const;

  void resize (octave_idx_type nr, octave_idx_type nc, double rfv = 0)
  {
    MArray<double>::resize (dim_vector (nr, nc), rfv);
  }

private:
  Matrix tinverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
                   bool force, bool calc_cond) const;

  Matrix finverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
                   bool force, bool calc_cond) const;

public:
  Matrix inverse (void) const;
  Matrix inverse (octave_idx_type& info) const;
  Matrix inverse (octave_idx_type& info, double& rcon, bool force = false,
                  bool calc_cond = true) const;

  Matrix inverse (MatrixType &mattype) const;
  Matrix inverse (MatrixType &mattype, octave_idx_type& info) const;
  Matrix inverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
                  bool force = false, bool calc_cond = true) const;

  Matrix pseudo_inverse (double tol = 0.0) const;

  ComplexMatrix fourier (void) const;
  ComplexMatrix ifourier (void) const;

  ComplexMatrix fourier2d (void) const;
  ComplexMatrix ifourier2d (void) const;

  DET determinant (void) const;
  DET determinant (octave_idx_type& info) const;
  DET determinant (octave_idx_type& info, double& rcon,
                   bool calc_cond = true) const;
  DET determinant (MatrixType &mattype, octave_idx_type& info,
                   double& rcon, bool calc_cond = true) const;

  double rcond (void) const;
  double rcond (MatrixType &mattype) const;

private:

  Matrix utsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                  double& rcon, solve_singularity_handler sing_handler,
                  bool calc_cond = false,
                  blas_trans_type transt = blas_no_trans) const;


  Matrix ltsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                  double& rcon, solve_singularity_handler sing_handler,
                  bool calc_cond = false,
                  blas_trans_type transt = blas_no_trans) const;


  Matrix fsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                 double& rcon, solve_singularity_handler sing_handler,
                 bool calc_cond = false) const;

public:

  Matrix solve (MatrixType &typ, const Matrix& b) const;
  Matrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info) const;
  Matrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                double& rcon) const;
  Matrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                double& rcon, solve_singularity_handler sing_handler,
                bool singular_fallback = true,
                blas_trans_type transt = blas_no_trans) const;

  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info, double& rcon) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info, double& rcon,
                       solve_singularity_handler sing_handler,
                       bool singular_fallback = true,
                       blas_trans_type transt = blas_no_trans) const;

  ColumnVector solve (MatrixType &typ, const ColumnVector& b) const;
  ColumnVector solve (MatrixType &typ, const ColumnVector& b,
                      octave_idx_type& info) const;
  ColumnVector solve (MatrixType &typ, const ColumnVector& b,
                      octave_idx_type& info, double& rcon) const;
  ColumnVector solve (MatrixType &typ, const ColumnVector& b,
                      octave_idx_type& info, double& rcon,
                      solve_singularity_handler sing_handler,
                      blas_trans_type transt = blas_no_trans) const;

  ComplexColumnVector solve (MatrixType &typ,
                             const ComplexColumnVector& b) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcon) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcon,
                             solve_singularity_handler sing_handler,
                             blas_trans_type transt = blas_no_trans) const;


  Matrix solve (const Matrix& b) const;
  Matrix solve (const Matrix& b, octave_idx_type& info) const;
  Matrix solve (const Matrix& b, octave_idx_type& info, double& rcon) const;
  Matrix solve (const Matrix& b, octave_idx_type& info, double& rcon,
                solve_singularity_handler sing_handler,
                blas_trans_type transt = blas_no_trans) const;

  ComplexMatrix solve (const ComplexMatrix& b) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
                       double& rcon) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
                       double& rcon,
                       solve_singularity_handler sing_handler,
                       blas_trans_type transt = blas_no_trans) const;

  ColumnVector solve (const ColumnVector& b) const;
  ColumnVector solve (const ColumnVector& b, octave_idx_type& info) const;
  ColumnVector solve (const ColumnVector& b, octave_idx_type& info,
                      double& rcon) const;
  ColumnVector solve (const ColumnVector& b, octave_idx_type& info,
                      double& rcon,
                      solve_singularity_handler sing_handler,
                      blas_trans_type transt = blas_no_trans) const;

  ComplexColumnVector solve (const ComplexColumnVector& b) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcon) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcon,
                             solve_singularity_handler sing_handler,
                             blas_trans_type transt = blas_no_trans) const;


  Matrix lssolve (const Matrix& b) const;
  Matrix lssolve (const Matrix& b, octave_idx_type& info) const;
  Matrix lssolve (const Matrix& b, octave_idx_type& info,
                  octave_idx_type& rank) const;
  Matrix lssolve (const Matrix& b, octave_idx_type& info,
                  octave_idx_type& rank, double& rcon) const;

  ComplexMatrix lssolve (const ComplexMatrix& b) const;
  ComplexMatrix lssolve (const ComplexMatrix& b, octave_idx_type& info) const;
  ComplexMatrix lssolve (const ComplexMatrix& b, octave_idx_type& info,
                         octave_idx_type& rank) const;
  ComplexMatrix lssolve (const ComplexMatrix& b, octave_idx_type& info,
                         octave_idx_type& rank, double &rcon) const;

  ColumnVector lssolve (const ColumnVector& b) const;
  ColumnVector lssolve (const ColumnVector& b, octave_idx_type& info) const;
  ColumnVector lssolve (const ColumnVector& b, octave_idx_type& info,
                        octave_idx_type& rank) const;
  ColumnVector lssolve (const ColumnVector& b, octave_idx_type& info,
                        octave_idx_type& rank, double& rcon) const;

  ComplexColumnVector lssolve (const ComplexColumnVector& b) const;
  ComplexColumnVector lssolve (const ComplexColumnVector& b,
                               octave_idx_type& info) const;
  ComplexColumnVector lssolve (const ComplexColumnVector& b,
                               octave_idx_type& info,
                               octave_idx_type& rank) const;
  ComplexColumnVector lssolve (const ComplexColumnVector& b,
                               octave_idx_type& info,
                               octave_idx_type& rank, double& rcon) const;

  Matrix& operator += (const DiagMatrix& a);
  Matrix& operator -= (const DiagMatrix& a);





  boolMatrix all (int dim = -1) const;
  boolMatrix any (int dim = -1) const;

  Matrix cumprod (int dim = -1) const;
  Matrix cumsum (int dim = -1) const;
  Matrix prod (int dim = -1) const;
  Matrix sum (int dim = -1) const;
  Matrix sumsq (int dim = -1) const;
  Matrix abs (void) const;

  Matrix diag (octave_idx_type k = 0) const;

  DiagMatrix diag (octave_idx_type m, octave_idx_type n) const;

  ColumnVector row_min (void) const;
  ColumnVector row_max (void) const;

  ColumnVector row_min (Array<octave_idx_type>& index) const;
  ColumnVector row_max (Array<octave_idx_type>& index) const;

  RowVector column_min (void) const;
  RowVector column_max (void) const;

  RowVector column_min (Array<octave_idx_type>& index) const;
  RowVector column_max (Array<octave_idx_type>& index) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const Matrix& a);
  friend std::istream& operator >> (std::istream& is, Matrix& a);
};



extern Matrix real (const ComplexMatrix& a);
extern Matrix imag (const ComplexMatrix& a);



extern Matrix operator * (const ColumnVector& a,
                                     const RowVector& b);



extern Matrix Givens (double, double);

extern Matrix Sylvester (const Matrix&, const Matrix&,
                                    const Matrix&);

extern Matrix xgemm (const Matrix& a, const Matrix& b,
                                blas_trans_type transa = blas_no_trans,
                                blas_trans_type transb = blas_no_trans);

extern Matrix operator * (const Matrix& a, const Matrix& b);

extern Matrix min (double d, const Matrix& m);
extern Matrix min (const Matrix& m, double d);
extern Matrix min (const Matrix& a, const Matrix& b);

extern Matrix max (double d, const Matrix& m);
extern Matrix max (const Matrix& m, double d);
extern Matrix max (const Matrix& a, const Matrix& b);

extern Matrix linspace (const ColumnVector& x1,
                                   const ColumnVector& x2,
                                   octave_idx_type n);

extern boolMatrix mx_el_lt (const Matrix&, const double&); extern boolMatrix mx_el_le (const Matrix&, const double&); extern boolMatrix mx_el_ge (const Matrix&, const double&); extern boolMatrix mx_el_gt (const Matrix&, const double&); extern boolMatrix mx_el_eq (const Matrix&, const double&); extern boolMatrix mx_el_ne (const Matrix&, const double&);
extern boolMatrix mx_el_and (const Matrix&, const double&); extern boolMatrix mx_el_or (const Matrix&, const double&);

extern boolMatrix mx_el_lt (const double&, const Matrix&); extern boolMatrix mx_el_le (const double&, const Matrix&); extern boolMatrix mx_el_ge (const double&, const Matrix&); extern boolMatrix mx_el_gt (const double&, const Matrix&); extern boolMatrix mx_el_eq (const double&, const Matrix&); extern boolMatrix mx_el_ne (const double&, const Matrix&);
extern boolMatrix mx_el_and (const double&, const Matrix&); extern boolMatrix mx_el_or (const double&, const Matrix&);

extern boolMatrix mx_el_lt (const Matrix&, const Matrix&); extern boolMatrix mx_el_le (const Matrix&, const Matrix&); extern boolMatrix mx_el_ge (const Matrix&, const Matrix&); extern boolMatrix mx_el_gt (const Matrix&, const Matrix&); extern boolMatrix mx_el_eq (const Matrix&, const Matrix&); extern boolMatrix mx_el_ne (const Matrix&, const Matrix&);
extern boolMatrix mx_el_and (const Matrix&, const Matrix&); extern boolMatrix mx_el_or (const Matrix&, const Matrix&);

inline Matrix operator += (Matrix& x, const double& y) { return Matrix (operator += (dynamic_cast<MArray<double>&> (x), (y))); } inline Matrix operator -= (Matrix& x, const double& y) { return Matrix (operator -= (dynamic_cast<MArray<double>&> (x), (y))); } inline Matrix operator *= (Matrix& x, const double& y) { return Matrix (operator *= (dynamic_cast<MArray<double>&> (x), (y))); } inline Matrix operator /= (Matrix& x, const double& y) { return Matrix (operator /= (dynamic_cast<MArray<double>&> (x), (y))); } inline Matrix operator += (Matrix& x, const Matrix& y) { return Matrix (operator += (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix operator -= (Matrix& x, const Matrix& y) { return Matrix (operator -= (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix product_eq (Matrix& x, const Matrix& y) { return Matrix (product_eq (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix quotient_eq (Matrix& x, const Matrix& y) { return Matrix (quotient_eq (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix operator + (const Matrix& x) { return Matrix (operator + (dynamic_cast<const MArray<double>&> (x))); } inline Matrix operator - (const Matrix& x) { return Matrix (operator - (dynamic_cast<const MArray<double>&> (x))); } inline Matrix operator + (const Matrix& x, const double& y) { return Matrix (operator + (dynamic_cast<const MArray<double>&> (x), (y))); } inline Matrix operator - (const Matrix& x, const double& y) { return Matrix (operator - (dynamic_cast<const MArray<double>&> (x), (y))); } inline Matrix operator * (const Matrix& x, const double& y) { return Matrix (operator * (dynamic_cast<const MArray<double>&> (x), (y))); } inline Matrix operator / (const Matrix& x, const double& y) { return Matrix (operator / (dynamic_cast<const MArray<double>&> (x), (y))); } inline Matrix operator + (const double& x, const Matrix& y) { return Matrix (operator + ( (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix operator - (const double& x, const Matrix& y) { return Matrix (operator - ( (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix operator * (const double& x, const Matrix& y) { return Matrix (operator * ( (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix operator / (const double& x, const Matrix& y) { return Matrix (operator / ( (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix operator + (const Matrix& x, const Matrix& y) { return Matrix (operator + (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix operator - (const Matrix& x, const Matrix& y) { return Matrix (operator - (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix product (const Matrix& x, const Matrix& y) { return Matrix (product (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline Matrix quotient (const Matrix& x, const Matrix& y) { return Matrix (quotient (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); }

template <typename T>
void read_int (std::istream& is, bool swap_bytes, T& val);
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CMatrix.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CMatrix.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CNDArray.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CNDArray.h"
class

ComplexNDArray : public MArray<Complex>
{
public:

  ComplexNDArray (void) : MArray<Complex> () { }

  ComplexNDArray (const dim_vector& dv) : MArray<Complex> (dv) { }

  ComplexNDArray (const dim_vector& dv, const Complex& val)
    : MArray<Complex> (dv, val) { }

  ComplexNDArray (const ComplexNDArray& a) : MArray<Complex> (a) { }

  template <typename U>
  ComplexNDArray (const MArray<U>& a) : MArray<Complex> (a) { }

  template <typename U>
  ComplexNDArray (const Array<U>& a) : MArray<Complex> (a) { }

  ComplexNDArray (const charNDArray&);

  ComplexNDArray& operator = (const ComplexNDArray& a)
  {
    MArray<Complex>::operator = (a);
    return *this;
  }



  boolNDArray operator ! (void) const;



  bool any_element_is_nan (void) const;
  bool any_element_is_inf_or_nan (void) const;
  bool all_elements_are_real (void) const;
  bool all_integers (double& max_val, double& min_val) const;
  bool too_large_for_float (void) const;

  boolNDArray all (int dim = -1) const;
  boolNDArray any (int dim = -1) const;

  ComplexNDArray cumprod (int dim = -1) const;
  ComplexNDArray cumsum (int dim = -1) const;
  ComplexNDArray prod (int dim = -1) const;
  ComplexNDArray sum (int dim = -1) const;
  ComplexNDArray xsum (int dim = -1) const;
  ComplexNDArray sumsq (int dim = -1) const;
  ComplexNDArray concat (const ComplexNDArray& rb,
                         const Array<octave_idx_type>& ra_idx);
  ComplexNDArray concat (const NDArray& rb,
                         const Array<octave_idx_type>& ra_idx);

  ComplexNDArray max (int dim = -1) const;
  ComplexNDArray max (Array<octave_idx_type>& index, int dim = -1) const;
  ComplexNDArray min (int dim = -1) const;
  ComplexNDArray min (Array<octave_idx_type>& index, int dim = -1) const;

  ComplexNDArray cummax (int dim = -1) const;
  ComplexNDArray cummax (Array<octave_idx_type>& index, int dim = -1) const;
  ComplexNDArray cummin (int dim = -1) const;
  ComplexNDArray cummin (Array<octave_idx_type>& index, int dim = -1) const;

  ComplexNDArray diff (octave_idx_type order = 1, int dim = -1) const;

  ComplexNDArray& insert (const NDArray& a,
                          octave_idx_type r, octave_idx_type c);
  ComplexNDArray& insert (const ComplexNDArray& a,
                          octave_idx_type r, octave_idx_type c);
  ComplexNDArray& insert (const ComplexNDArray& a,
                          const Array<octave_idx_type>& ra_idx);

  NDArray abs (void) const;
  boolNDArray isnan (void) const;
  boolNDArray isinf (void) const;
  boolNDArray isfinite (void) const;

  friend ComplexNDArray conj (const ComplexNDArray& a);

  ComplexNDArray fourier (int dim = 1) const;
  ComplexNDArray ifourier (int dim = 1) const;

  ComplexNDArray fourier2d (void) const;
  ComplexNDArray ifourier2d (void) const;

  ComplexNDArray fourierNd (void) const;
  ComplexNDArray ifourierNd (void) const;

  ComplexNDArray squeeze (void) const { return MArray<Complex>::squeeze (); }

  static void increment_index (Array<octave_idx_type>& ra_idx,
                               const dim_vector& dimensions,
                               int start_dimension = 0);

  static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions);



  friend std::ostream& operator << (std::ostream& os,
                                               const ComplexNDArray& a);
  friend std::istream& operator >> (std::istream& is,
                                               ComplexNDArray& a);




  ComplexNDArray diag (octave_idx_type k = 0) const;

  ComplexNDArray diag (octave_idx_type m, octave_idx_type n) const;

  ComplexNDArray& changesign (void)
  {
    MArray<Complex>::changesign ();
    return *this;
  }

};

extern ComplexNDArray conj (const ComplexNDArray& a);

extern ComplexNDArray min (Complex d, const ComplexNDArray& m); extern ComplexNDArray min (const ComplexNDArray& m, Complex d); extern ComplexNDArray min (const ComplexNDArray& a, const ComplexNDArray& b); extern ComplexNDArray max (Complex d, const ComplexNDArray& m); extern ComplexNDArray max (const ComplexNDArray& m, Complex d); extern ComplexNDArray max (const ComplexNDArray& a, const ComplexNDArray& b);

extern boolNDArray mx_el_lt (const ComplexNDArray&, const Complex&); extern boolNDArray mx_el_le (const ComplexNDArray&, const Complex&); extern boolNDArray mx_el_ge (const ComplexNDArray&, const Complex&); extern boolNDArray mx_el_gt (const ComplexNDArray&, const Complex&); extern boolNDArray mx_el_eq (const ComplexNDArray&, const Complex&); extern boolNDArray mx_el_ne (const ComplexNDArray&, const Complex&);
extern boolNDArray mx_el_and (const ComplexNDArray&, const Complex&); extern boolNDArray mx_el_or (const ComplexNDArray&, const Complex&); extern boolNDArray mx_el_not_and (const ComplexNDArray&, const Complex&); extern boolNDArray mx_el_not_or (const ComplexNDArray&, const Complex&);

extern boolNDArray mx_el_lt (const Complex&, const ComplexNDArray&); extern boolNDArray mx_el_le (const Complex&, const ComplexNDArray&); extern boolNDArray mx_el_ge (const Complex&, const ComplexNDArray&); extern boolNDArray mx_el_gt (const Complex&, const ComplexNDArray&); extern boolNDArray mx_el_eq (const Complex&, const ComplexNDArray&); extern boolNDArray mx_el_ne (const Complex&, const ComplexNDArray&);
extern boolNDArray mx_el_and (const Complex&, const ComplexNDArray&); extern boolNDArray mx_el_or (const Complex&, const ComplexNDArray&); extern boolNDArray mx_el_and_not (const Complex&, const ComplexNDArray&); extern boolNDArray mx_el_or_not (const Complex&, const ComplexNDArray&);

extern boolNDArray mx_el_lt (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_le (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_ge (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_gt (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_eq (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_ne (const ComplexNDArray&, const ComplexNDArray&);
extern boolNDArray mx_el_and (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_or (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_and_not (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_or_not (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_not_and (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray mx_el_not_or (const ComplexNDArray&, const ComplexNDArray&);

inline ComplexNDArray operator += (ComplexNDArray& x, const Complex& y) { return ComplexNDArray (operator += (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexNDArray operator -= (ComplexNDArray& x, const Complex& y) { return ComplexNDArray (operator -= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexNDArray operator *= (ComplexNDArray& x, const Complex& y) { return ComplexNDArray (operator *= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexNDArray operator /= (ComplexNDArray& x, const Complex& y) { return ComplexNDArray (operator /= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexNDArray operator += (ComplexNDArray& x, const ComplexNDArray& y) { return ComplexNDArray (operator += (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray operator -= (ComplexNDArray& x, const ComplexNDArray& y) { return ComplexNDArray (operator -= (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray product_eq (ComplexNDArray& x, const ComplexNDArray& y) { return ComplexNDArray (product_eq (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray quotient_eq (ComplexNDArray& x, const ComplexNDArray& y) { return ComplexNDArray (quotient_eq (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray operator + (const ComplexNDArray& x) { return ComplexNDArray (operator + (dynamic_cast<const MArray<Complex>&> (x))); } inline ComplexNDArray operator - (const ComplexNDArray& x) { return ComplexNDArray (operator - (dynamic_cast<const MArray<Complex>&> (x))); } inline ComplexNDArray operator + (const ComplexNDArray& x, const Complex& y) { return ComplexNDArray (operator + (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexNDArray operator - (const ComplexNDArray& x, const Complex& y) { return ComplexNDArray (operator - (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexNDArray operator * (const ComplexNDArray& x, const Complex& y) { return ComplexNDArray (operator * (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexNDArray operator / (const ComplexNDArray& x, const Complex& y) { return ComplexNDArray (operator / (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexNDArray operator + (const Complex& x, const ComplexNDArray& y) { return ComplexNDArray (operator + ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray operator - (const Complex& x, const ComplexNDArray& y) { return ComplexNDArray (operator - ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray operator * (const Complex& x, const ComplexNDArray& y) { return ComplexNDArray (operator * ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray operator / (const Complex& x, const ComplexNDArray& y) { return ComplexNDArray (operator / ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray operator + (const ComplexNDArray& x, const ComplexNDArray& y) { return ComplexNDArray (operator + (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray operator - (const ComplexNDArray& x, const ComplexNDArray& y) { return ComplexNDArray (operator - (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray product (const ComplexNDArray& x, const ComplexNDArray& y) { return ComplexNDArray (product (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexNDArray quotient (const ComplexNDArray& x, const ComplexNDArray& y) { return ComplexNDArray (quotient (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); }

extern ComplexNDArray& operator *= (ComplexNDArray& a, double s);
extern ComplexNDArray& operator /= (ComplexNDArray& a, double s);

extern ComplexNDArray bsxfun_add (const ComplexNDArray&, const ComplexNDArray&); extern ComplexNDArray bsxfun_sub (const ComplexNDArray&, const ComplexNDArray&); extern ComplexNDArray bsxfun_mul (const ComplexNDArray&, const ComplexNDArray&); extern ComplexNDArray bsxfun_div (const ComplexNDArray&, const ComplexNDArray&); extern ComplexNDArray bsxfun_pow (const ComplexNDArray&, const ComplexNDArray&); extern ComplexNDArray bsxfun_min (const ComplexNDArray&, const ComplexNDArray&); extern ComplexNDArray bsxfun_max (const ComplexNDArray&, const ComplexNDArray&);
extern boolNDArray bsxfun_eq (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray bsxfun_ne (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray bsxfun_lt (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray bsxfun_le (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray bsxfun_gt (const ComplexNDArray&, const ComplexNDArray&); extern boolNDArray bsxfun_ge (const ComplexNDArray&, const ComplexNDArray&);

extern ComplexNDArray bsxfun_pow (const ComplexNDArray&, const ComplexNDArray&);
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CMatrix.h" 2






class

ComplexMatrix : public ComplexNDArray
{
public:

  typedef ComplexColumnVector column_vector_type;
  typedef ComplexRowVector row_vector_type;

  typedef ColumnVector real_column_vector_type;
  typedef RowVector real_row_vector_type;

  typedef Matrix real_matrix_type;
  typedef ComplexMatrix complex_matrix_type;

  typedef DiagMatrix real_diag_matrix_type;
  typedef ComplexDiagMatrix complex_diag_matrix_type;

  typedef double real_elt_type;
  typedef Complex complex_elt_type;

  typedef void (*solve_singularity_handler) (double rcon);

  ComplexMatrix (void) : ComplexNDArray () { }

  ComplexMatrix (octave_idx_type r, octave_idx_type c)
    : ComplexNDArray (dim_vector (r, c)) { }

  ComplexMatrix (octave_idx_type r, octave_idx_type c, const Complex& val)
    : ComplexNDArray (dim_vector (r, c), val) { }

  ComplexMatrix (const dim_vector& dv) : ComplexNDArray (dv.redim (2)) { }

  ComplexMatrix (const dim_vector& dv, const Complex& val)
    : ComplexNDArray (dv.redim (2), val) { }

  ComplexMatrix (const ComplexMatrix& a) : ComplexNDArray (a) { }

  template <typename U>
  ComplexMatrix (const MArray<U>& a) : ComplexNDArray (a.as_matrix ()) { }

  template <typename U>
  ComplexMatrix (const Array<U>& a) : ComplexNDArray (a.as_matrix ()) { }

  ComplexMatrix (const Matrix& re, const Matrix& im);

  explicit ComplexMatrix (const Matrix& a);

  explicit ComplexMatrix (const RowVector& rv);

  explicit ComplexMatrix (const ColumnVector& cv);

  explicit ComplexMatrix (const DiagMatrix& a);

  explicit ComplexMatrix (const MDiagArray2<double>& a);

  explicit ComplexMatrix (const DiagArray2<double>& a);

  explicit ComplexMatrix (const ComplexRowVector& rv);

  explicit ComplexMatrix (const ComplexColumnVector& cv);

  explicit ComplexMatrix (const ComplexDiagMatrix& a);

  explicit ComplexMatrix (const MDiagArray2<Complex>& a);

  explicit ComplexMatrix (const DiagArray2<Complex>& a);

  explicit ComplexMatrix (const boolMatrix& a);

  explicit ComplexMatrix (const charMatrix& a);

  bool operator == (const ComplexMatrix& a) const;
  bool operator != (const ComplexMatrix& a) const;

  bool is_hermitian (void) const;



  ComplexMatrix& insert (const Matrix& a, octave_idx_type r, octave_idx_type c);
  ComplexMatrix& insert (const RowVector& a,
                         octave_idx_type r, octave_idx_type c);
  ComplexMatrix& insert (const ColumnVector& a,
                         octave_idx_type r, octave_idx_type c);
  ComplexMatrix& insert (const DiagMatrix& a,
                         octave_idx_type r, octave_idx_type c);

  ComplexMatrix& insert (const ComplexMatrix& a,
                         octave_idx_type r, octave_idx_type c);
  ComplexMatrix& insert (const ComplexRowVector& a,
                         octave_idx_type r, octave_idx_type c);
  ComplexMatrix& insert (const ComplexColumnVector& a,
                         octave_idx_type r, octave_idx_type c);
  ComplexMatrix& insert (const ComplexDiagMatrix& a,
                         octave_idx_type r, octave_idx_type c);

  ComplexMatrix& fill (double val);
  ComplexMatrix& fill (const Complex& val);
  ComplexMatrix& fill (double val,
                       octave_idx_type r1, octave_idx_type c1,
                       octave_idx_type r2, octave_idx_type c2);
  ComplexMatrix& fill (const Complex& val,
                       octave_idx_type r1, octave_idx_type c1,
                       octave_idx_type r2, octave_idx_type c2);

  ComplexMatrix append (const Matrix& a) const;
  ComplexMatrix append (const RowVector& a) const;
  ComplexMatrix append (const ColumnVector& a) const;
  ComplexMatrix append (const DiagMatrix& a) const;

  ComplexMatrix append (const ComplexMatrix& a) const;
  ComplexMatrix append (const ComplexRowVector& a) const;
  ComplexMatrix append (const ComplexColumnVector& a) const;
  ComplexMatrix append (const ComplexDiagMatrix& a) const;

  ComplexMatrix stack (const Matrix& a) const;
  ComplexMatrix stack (const RowVector& a) const;
  ComplexMatrix stack (const ColumnVector& a) const;
  ComplexMatrix stack (const DiagMatrix& a) const;

  ComplexMatrix stack (const ComplexMatrix& a) const;
  ComplexMatrix stack (const ComplexRowVector& a) const;
  ComplexMatrix stack (const ComplexColumnVector& a) const;
  ComplexMatrix stack (const ComplexDiagMatrix& a) const;

  ComplexMatrix hermitian (void) const
  { return MArray<Complex>::hermitian (std::conj); }
  ComplexMatrix transpose (void) const
  { return MArray<Complex>::transpose (); }

  friend ComplexMatrix conj (const ComplexMatrix& a);



  ComplexMatrix extract (octave_idx_type r1, octave_idx_type c1,
                         octave_idx_type r2, octave_idx_type c2) const;

  ComplexMatrix extract_n (octave_idx_type r1, octave_idx_type c1,
                           octave_idx_type nr, octave_idx_type nc) const;



  ComplexRowVector row (octave_idx_type i) const;

  ComplexColumnVector column (octave_idx_type i) const;

  void resize (octave_idx_type nr, octave_idx_type nc,
               const Complex& rfv = Complex (0))
  {
    MArray<Complex>::resize (dim_vector (nr, nc), rfv);
  }

private:
  ComplexMatrix tinverse (MatrixType &mattype, octave_idx_type& info,
                          double& rcon, bool force, bool calc_cond) const;

  ComplexMatrix finverse (MatrixType &mattype, octave_idx_type& info,
                          double& rcon, bool force, bool calc_cond) const;

public:
  ComplexMatrix inverse (void) const;
  ComplexMatrix inverse (octave_idx_type& info) const;
  ComplexMatrix inverse (octave_idx_type& info, double& rcon,
                         bool force = false, bool calc_cond = true) const;

  ComplexMatrix inverse (MatrixType &mattype) const;
  ComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info) const;
  ComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info,
                         double& rcon, bool force = false,
                         bool calc_cond = true) const;

  ComplexMatrix pseudo_inverse (double tol = 0.0) const;

  ComplexMatrix fourier (void) const;
  ComplexMatrix ifourier (void) const;

  ComplexMatrix fourier2d (void) const;
  ComplexMatrix ifourier2d (void) const;

  ComplexDET determinant (void) const;
  ComplexDET determinant (octave_idx_type& info) const;
  ComplexDET determinant (octave_idx_type& info, double& rcon,
                          bool calc_cond = true) const;
  ComplexDET determinant (MatrixType &mattype, octave_idx_type& info,
                          double& rcon, bool calc_cond = true) const;

  double rcond (void) const;
  double rcond (MatrixType &mattype) const;

private:

  ComplexMatrix utsolve (MatrixType &typ, const ComplexMatrix& b,
                         octave_idx_type& info, double& rcon,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false,
                         blas_trans_type transt = blas_no_trans) const;


  ComplexMatrix ltsolve (MatrixType &typ, const ComplexMatrix& b,
                         octave_idx_type& info, double& rcon,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false,
                         blas_trans_type transt = blas_no_trans) const;


  ComplexMatrix fsolve (MatrixType &typ, const ComplexMatrix& b,
                        octave_idx_type& info, double& rcon,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

public:

  ComplexMatrix solve (MatrixType &typ, const Matrix& b) const;
  ComplexMatrix solve (MatrixType &typ, const Matrix& b,
                       octave_idx_type& info) const;
  ComplexMatrix solve (MatrixType &typ, const Matrix& b,
                       octave_idx_type& info, double& rcon) const;
  ComplexMatrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                       double& rcon, solve_singularity_handler sing_handler,
                       bool singular_fallback = true,
                       blas_trans_type transt = blas_no_trans) const;

  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info, double& rcon) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info, double& rcon,
                       solve_singularity_handler sing_handler,
                       bool singular_fallback = true,
                       blas_trans_type transt = blas_no_trans) const;

  ComplexColumnVector solve (MatrixType &typ, const ColumnVector& b) const;
  ComplexColumnVector solve (MatrixType &typ, const ColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (MatrixType &typ, const ColumnVector& b,
                             octave_idx_type& info, double& rcon) const;
  ComplexColumnVector solve (MatrixType &typ, const ColumnVector& b,
                             octave_idx_type& info, double& rcon,
                             solve_singularity_handler sing_handler,
                             blas_trans_type transt = blas_no_trans) const;

  ComplexColumnVector solve (MatrixType &typ,
                             const ComplexColumnVector& b) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcon) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcon,
                             solve_singularity_handler sing_handler,
                             blas_trans_type transt = blas_no_trans) const;


  ComplexMatrix solve (const Matrix& b) const;
  ComplexMatrix solve (const Matrix& b, octave_idx_type& info) const;
  ComplexMatrix solve (const Matrix& b, octave_idx_type& info,
                       double& rcon) const;
  ComplexMatrix solve (const Matrix& b, octave_idx_type& info, double& rcon,
                       solve_singularity_handler sing_handler,
                       blas_trans_type transt = blas_no_trans) const;

  ComplexMatrix solve (const ComplexMatrix& b) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
                       double& rcon) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
                       double& rcon,
                       solve_singularity_handler sing_handler,
                       blas_trans_type transt = blas_no_trans) const;

  ComplexColumnVector solve (const ColumnVector& b) const;
  ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info) const;
  ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info,
                             double& rcon) const;
  ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info,
                             double& rcon,
                             solve_singularity_handler sing_handler,
                             blas_trans_type transt = blas_no_trans) const;

  ComplexColumnVector solve (const ComplexColumnVector& b) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info,
                             double& rcon) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info,
                             double& rcon,
                             solve_singularity_handler sing_handler,
                             blas_trans_type transt = blas_no_trans) const;

  ComplexMatrix lssolve (const Matrix& b) const;
  ComplexMatrix lssolve (const Matrix& b, octave_idx_type& info) const;
  ComplexMatrix lssolve (const Matrix& b, octave_idx_type& info,
                         octave_idx_type& rank) const;
  ComplexMatrix lssolve (const Matrix& b, octave_idx_type& info,
                         octave_idx_type& rank, double& rcon) const;

  ComplexMatrix lssolve (const ComplexMatrix& b) const;
  ComplexMatrix lssolve (const ComplexMatrix& b, octave_idx_type& info) const;
  ComplexMatrix lssolve (const ComplexMatrix& b, octave_idx_type& info,
                         octave_idx_type& rank) const;
  ComplexMatrix lssolve (const ComplexMatrix& b, octave_idx_type& info,
                         octave_idx_type& rank, double& rcon) const;

  ComplexColumnVector lssolve (const ColumnVector& b) const;
  ComplexColumnVector lssolve (const ColumnVector& b,
                               octave_idx_type& info) const;
  ComplexColumnVector lssolve (const ColumnVector& b, octave_idx_type& info,
                               octave_idx_type& rank) const;
  ComplexColumnVector lssolve (const ColumnVector& b, octave_idx_type& info,
                               octave_idx_type& rank, double& rcon) const;

  ComplexColumnVector lssolve (const ComplexColumnVector& b) const;
  ComplexColumnVector lssolve (const ComplexColumnVector& b,
                               octave_idx_type& info) const;
  ComplexColumnVector lssolve (const ComplexColumnVector& b,
                               octave_idx_type& info,
                               octave_idx_type& rank) const;
  ComplexColumnVector lssolve (const ComplexColumnVector& b,
                               octave_idx_type& info,
                               octave_idx_type& rank, double& rcon) const;



  ComplexMatrix& operator += (const DiagMatrix& a);
  ComplexMatrix& operator -= (const DiagMatrix& a);

  ComplexMatrix& operator += (const ComplexDiagMatrix& a);
  ComplexMatrix& operator -= (const ComplexDiagMatrix& a);



  ComplexMatrix& operator += (const Matrix& a);
  ComplexMatrix& operator -= (const Matrix& a);



  boolMatrix all (int dim = -1) const;
  boolMatrix any (int dim = -1) const;

  ComplexMatrix cumprod (int dim = -1) const;
  ComplexMatrix cumsum (int dim = -1) const;
  ComplexMatrix prod (int dim = -1) const;
  ComplexMatrix sum (int dim = -1) const;
  ComplexMatrix sumsq (int dim = -1) const;
  Matrix abs (void) const;

  ComplexMatrix diag (octave_idx_type k = 0) const;

  ComplexDiagMatrix diag (octave_idx_type m, octave_idx_type n) const;

  bool row_is_real_only (octave_idx_type) const;
  bool column_is_real_only (octave_idx_type) const;

  ComplexColumnVector row_min (void) const;
  ComplexColumnVector row_max (void) const;

  ComplexColumnVector row_min (Array<octave_idx_type>& index) const;
  ComplexColumnVector row_max (Array<octave_idx_type>& index) const;

  ComplexRowVector column_min (void) const;
  ComplexRowVector column_max (void) const;

  ComplexRowVector column_min (Array<octave_idx_type>& index) const;
  ComplexRowVector column_max (Array<octave_idx_type>& index) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const ComplexMatrix& a);
  friend std::istream& operator >> (std::istream& is,
                                               ComplexMatrix& a);
};

extern ComplexMatrix conj (const ComplexMatrix& a);



extern ComplexMatrix
operator * (const ColumnVector& a, const ComplexRowVector& b);

extern ComplexMatrix
operator * (const ComplexColumnVector& a, const RowVector& b);

extern ComplexMatrix
operator * (const ComplexColumnVector& a, const ComplexRowVector& b);

extern ComplexMatrix
Givens (const Complex&, const Complex&);

extern ComplexMatrix
Sylvester (const ComplexMatrix&, const ComplexMatrix&, const ComplexMatrix&);

extern ComplexMatrix
xgemm (const ComplexMatrix& a, const ComplexMatrix& b,
       blas_trans_type transa = blas_no_trans,
       blas_trans_type transb = blas_no_trans);

extern ComplexMatrix operator * (const Matrix&,
                                            const ComplexMatrix&);
extern ComplexMatrix operator * (const ComplexMatrix&,
                                            const Matrix&);
extern ComplexMatrix operator * (const ComplexMatrix&,
                                            const ComplexMatrix&);

extern ComplexMatrix min (const Complex& c, const ComplexMatrix& m);
extern ComplexMatrix min (const ComplexMatrix& m, const Complex& c);
extern ComplexMatrix min (const ComplexMatrix& a,
                                     const ComplexMatrix& b);

extern ComplexMatrix max (const Complex& c, const ComplexMatrix& m);
extern ComplexMatrix max (const ComplexMatrix& m, const Complex& c);
extern ComplexMatrix max (const ComplexMatrix& a,
                                     const ComplexMatrix& b);

extern ComplexMatrix linspace (const ComplexColumnVector& x1,
                                          const ComplexColumnVector& x2,
                                          octave_idx_type n);

extern boolMatrix mx_el_lt (const ComplexMatrix&, const Complex&); extern boolMatrix mx_el_le (const ComplexMatrix&, const Complex&); extern boolMatrix mx_el_ge (const ComplexMatrix&, const Complex&); extern boolMatrix mx_el_gt (const ComplexMatrix&, const Complex&); extern boolMatrix mx_el_eq (const ComplexMatrix&, const Complex&); extern boolMatrix mx_el_ne (const ComplexMatrix&, const Complex&);
extern boolMatrix mx_el_and (const ComplexMatrix&, const Complex&); extern boolMatrix mx_el_or (const ComplexMatrix&, const Complex&);

extern boolMatrix mx_el_lt (const Complex&, const ComplexMatrix&); extern boolMatrix mx_el_le (const Complex&, const ComplexMatrix&); extern boolMatrix mx_el_ge (const Complex&, const ComplexMatrix&); extern boolMatrix mx_el_gt (const Complex&, const ComplexMatrix&); extern boolMatrix mx_el_eq (const Complex&, const ComplexMatrix&); extern boolMatrix mx_el_ne (const Complex&, const ComplexMatrix&);
extern boolMatrix mx_el_and (const Complex&, const ComplexMatrix&); extern boolMatrix mx_el_or (const Complex&, const ComplexMatrix&);

extern boolMatrix mx_el_lt (const ComplexMatrix&, const ComplexMatrix&); extern boolMatrix mx_el_le (const ComplexMatrix&, const ComplexMatrix&); extern boolMatrix mx_el_ge (const ComplexMatrix&, const ComplexMatrix&); extern boolMatrix mx_el_gt (const ComplexMatrix&, const ComplexMatrix&); extern boolMatrix mx_el_eq (const ComplexMatrix&, const ComplexMatrix&); extern boolMatrix mx_el_ne (const ComplexMatrix&, const ComplexMatrix&);
extern boolMatrix mx_el_and (const ComplexMatrix&, const ComplexMatrix&); extern boolMatrix mx_el_or (const ComplexMatrix&, const ComplexMatrix&);

inline ComplexMatrix operator += (ComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator += (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexMatrix operator -= (ComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator -= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexMatrix operator *= (ComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator *= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexMatrix operator /= (ComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator /= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexMatrix operator += (ComplexMatrix& x, const ComplexMatrix& y) { return ComplexMatrix (operator += (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix operator -= (ComplexMatrix& x, const ComplexMatrix& y) { return ComplexMatrix (operator -= (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix product_eq (ComplexMatrix& x, const ComplexMatrix& y) { return ComplexMatrix (product_eq (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix quotient_eq (ComplexMatrix& x, const ComplexMatrix& y) { return ComplexMatrix (quotient_eq (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix operator + (const ComplexMatrix& x) { return ComplexMatrix (operator + (dynamic_cast<const MArray<Complex>&> (x))); } inline ComplexMatrix operator - (const ComplexMatrix& x) { return ComplexMatrix (operator - (dynamic_cast<const MArray<Complex>&> (x))); } inline ComplexMatrix operator + (const ComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator + (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexMatrix operator - (const ComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator - (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexMatrix operator * (const ComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator * (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexMatrix operator / (const ComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator / (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexMatrix operator + (const Complex& x, const ComplexMatrix& y) { return ComplexMatrix (operator + ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix operator - (const Complex& x, const ComplexMatrix& y) { return ComplexMatrix (operator - ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix operator * (const Complex& x, const ComplexMatrix& y) { return ComplexMatrix (operator * ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix operator / (const Complex& x, const ComplexMatrix& y) { return ComplexMatrix (operator / ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix operator + (const ComplexMatrix& x, const ComplexMatrix& y) { return ComplexMatrix (operator + (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix operator - (const ComplexMatrix& x, const ComplexMatrix& y) { return ComplexMatrix (operator - (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix product (const ComplexMatrix& x, const ComplexMatrix& y) { return ComplexMatrix (product (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexMatrix quotient (const ComplexMatrix& x, const ComplexMatrix& y) { return ComplexMatrix (quotient (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); }
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fMatrix.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fMatrix.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fNDArray.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fNDArray.h"
template <typename T> class intNDArray;

class

FloatNDArray : public MArray<float>
{
public:

  FloatNDArray (void) : MArray<float> () { }

  FloatNDArray (const dim_vector& dv) : MArray<float> (dv) { }

  FloatNDArray (const dim_vector& dv, float val)
    : MArray<float> (dv, val) { }

  FloatNDArray (const FloatNDArray& a) : MArray<float> (a) { }

  template <typename U>
  FloatNDArray (const MArray<U>& a) : MArray<float> (a) { }

  template <typename U>
  FloatNDArray (const Array<U>& a) : MArray<float> (a) { }

  template <typename U>
  explicit FloatNDArray (const intNDArray<U>& a) : MArray<float> (a) { }

  FloatNDArray (const charNDArray&);

  FloatNDArray& operator = (const FloatNDArray& a)
  {
    MArray<float>::operator = (a);
    return *this;
  }



  boolNDArray operator ! (void) const;

  bool any_element_is_negative (bool = false) const;
  bool any_element_is_positive (bool = false) const;
  bool any_element_is_nan (void) const;
  bool any_element_is_inf_or_nan (void) const;
  bool any_element_not_one_or_zero (void) const;
  bool all_elements_are_zero (void) const;
  bool all_elements_are_int_or_inf_or_nan (void) const;
  bool all_integers (float& max_val, float& min_val) const;
  bool all_integers (void) const;
  bool too_large_for_float (void) const;



  boolNDArray all (int dim = -1) const;
  boolNDArray any (int dim = -1) const;

  FloatNDArray cumprod (int dim = -1) const;
  FloatNDArray cumsum (int dim = -1) const;
  FloatNDArray prod (int dim = -1) const;
  NDArray dprod (int dim = -1) const;
  FloatNDArray sum (int dim = -1) const;
  NDArray dsum (int dim = -1) const;
  FloatNDArray sumsq (int dim = -1) const;
  FloatNDArray concat (const FloatNDArray& rb,
                       const Array<octave_idx_type>& ra_idx);
  FloatComplexNDArray concat (const FloatComplexNDArray& rb,
                              const Array<octave_idx_type>& ra_idx);
  charNDArray concat (const charNDArray& rb,
                      const Array<octave_idx_type>& ra_idx);

  FloatNDArray max (int dim = -1) const;
  FloatNDArray max (Array<octave_idx_type>& index, int dim = -1) const;
  FloatNDArray min (int dim = -1) const;
  FloatNDArray min (Array<octave_idx_type>& index, int dim = -1) const;

  FloatNDArray cummax (int dim = -1) const;
  FloatNDArray cummax (Array<octave_idx_type>& index, int dim = -1) const;
  FloatNDArray cummin (int dim = -1) const;
  FloatNDArray cummin (Array<octave_idx_type>& index, int dim = -1) const;

  FloatNDArray diff (octave_idx_type order = 1, int dim = -1) const;

  FloatNDArray& insert (const FloatNDArray& a,
                        octave_idx_type r, octave_idx_type c);
  FloatNDArray& insert (const FloatNDArray& a,
                        const Array<octave_idx_type>& ra_idx);

  FloatNDArray abs (void) const;
  boolNDArray isnan (void) const;
  boolNDArray isinf (void) const;
  boolNDArray isfinite (void) const;

  FloatComplexNDArray fourier (int dim = 1) const;
  FloatComplexNDArray ifourier (int dim = 1) const;

  FloatComplexNDArray fourier2d (void) const;
  FloatComplexNDArray ifourier2d (void) const;

  FloatComplexNDArray fourierNd (void) const;
  FloatComplexNDArray ifourierNd (void) const;

  friend FloatNDArray real (const FloatComplexNDArray& a);
  friend FloatNDArray imag (const FloatComplexNDArray& a);

  friend class FloatComplexNDArray;

  FloatNDArray squeeze (void) const { return MArray<float>::squeeze (); }

  static void increment_index (Array<octave_idx_type>& ra_idx,
                               const dim_vector& dimensions,
                               int start_dimension = 0);

  static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions);



  friend std::ostream& operator << (std::ostream& os,
                                               const FloatNDArray& a);
  friend std::istream& operator >> (std::istream& is, FloatNDArray& a);

  FloatNDArray diag (octave_idx_type k = 0) const;

  FloatNDArray diag (octave_idx_type m, octave_idx_type n) const;

  FloatNDArray& changesign (void)
  {
    MArray<float>::changesign ();
    return *this;
  }

};



extern FloatNDArray real (const FloatComplexNDArray& a);
extern FloatNDArray imag (const FloatComplexNDArray& a);

extern FloatNDArray min (float d, const FloatNDArray& m); extern FloatNDArray min (const FloatNDArray& m, float d); extern FloatNDArray min (const FloatNDArray& a, const FloatNDArray& b); extern FloatNDArray max (float d, const FloatNDArray& m); extern FloatNDArray max (const FloatNDArray& m, float d); extern FloatNDArray max (const FloatNDArray& a, const FloatNDArray& b);

extern boolNDArray mx_el_lt (const FloatNDArray&, const float&); extern boolNDArray mx_el_le (const FloatNDArray&, const float&); extern boolNDArray mx_el_ge (const FloatNDArray&, const float&); extern boolNDArray mx_el_gt (const FloatNDArray&, const float&); extern boolNDArray mx_el_eq (const FloatNDArray&, const float&); extern boolNDArray mx_el_ne (const FloatNDArray&, const float&);
extern boolNDArray mx_el_and (const FloatNDArray&, const float&); extern boolNDArray mx_el_or (const FloatNDArray&, const float&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const float&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const float&);

extern boolNDArray mx_el_lt (const float&, const FloatNDArray&); extern boolNDArray mx_el_le (const float&, const FloatNDArray&); extern boolNDArray mx_el_ge (const float&, const FloatNDArray&); extern boolNDArray mx_el_gt (const float&, const FloatNDArray&); extern boolNDArray mx_el_eq (const float&, const FloatNDArray&); extern boolNDArray mx_el_ne (const float&, const FloatNDArray&);
extern boolNDArray mx_el_and (const float&, const FloatNDArray&); extern boolNDArray mx_el_or (const float&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const float&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const float&, const FloatNDArray&);

extern boolNDArray mx_el_lt (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const FloatNDArray&);

inline FloatNDArray operator += (FloatNDArray& x, const float& y) { return FloatNDArray (operator += (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatNDArray operator -= (FloatNDArray& x, const float& y) { return FloatNDArray (operator -= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatNDArray operator *= (FloatNDArray& x, const float& y) { return FloatNDArray (operator *= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatNDArray operator /= (FloatNDArray& x, const float& y) { return FloatNDArray (operator /= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatNDArray operator += (FloatNDArray& x, const FloatNDArray& y) { return FloatNDArray (operator += (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray operator -= (FloatNDArray& x, const FloatNDArray& y) { return FloatNDArray (operator -= (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray product_eq (FloatNDArray& x, const FloatNDArray& y) { return FloatNDArray (product_eq (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray quotient_eq (FloatNDArray& x, const FloatNDArray& y) { return FloatNDArray (quotient_eq (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray operator + (const FloatNDArray& x) { return FloatNDArray (operator + (dynamic_cast<const MArray<float>&> (x))); } inline FloatNDArray operator - (const FloatNDArray& x) { return FloatNDArray (operator - (dynamic_cast<const MArray<float>&> (x))); } inline FloatNDArray operator + (const FloatNDArray& x, const float& y) { return FloatNDArray (operator + (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatNDArray operator - (const FloatNDArray& x, const float& y) { return FloatNDArray (operator - (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatNDArray operator * (const FloatNDArray& x, const float& y) { return FloatNDArray (operator * (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatNDArray operator / (const FloatNDArray& x, const float& y) { return FloatNDArray (operator / (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatNDArray operator + (const float& x, const FloatNDArray& y) { return FloatNDArray (operator + ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray operator - (const float& x, const FloatNDArray& y) { return FloatNDArray (operator - ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray operator * (const float& x, const FloatNDArray& y) { return FloatNDArray (operator * ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray operator / (const float& x, const FloatNDArray& y) { return FloatNDArray (operator / ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray operator + (const FloatNDArray& x, const FloatNDArray& y) { return FloatNDArray (operator + (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray operator - (const FloatNDArray& x, const FloatNDArray& y) { return FloatNDArray (operator - (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray product (const FloatNDArray& x, const FloatNDArray& y) { return FloatNDArray (product (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatNDArray quotient (const FloatNDArray& x, const FloatNDArray& y) { return FloatNDArray (quotient (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); }

extern FloatNDArray bsxfun_add (const FloatNDArray&, const FloatNDArray&); extern FloatNDArray bsxfun_sub (const FloatNDArray&, const FloatNDArray&); extern FloatNDArray bsxfun_mul (const FloatNDArray&, const FloatNDArray&); extern FloatNDArray bsxfun_div (const FloatNDArray&, const FloatNDArray&); extern FloatNDArray bsxfun_pow (const FloatNDArray&, const FloatNDArray&); extern FloatNDArray bsxfun_min (const FloatNDArray&, const FloatNDArray&); extern FloatNDArray bsxfun_max (const FloatNDArray&, const FloatNDArray&);
extern boolNDArray bsxfun_eq (const FloatNDArray&, const FloatNDArray&); extern boolNDArray bsxfun_ne (const FloatNDArray&, const FloatNDArray&); extern boolNDArray bsxfun_lt (const FloatNDArray&, const FloatNDArray&); extern boolNDArray bsxfun_le (const FloatNDArray&, const FloatNDArray&); extern boolNDArray bsxfun_gt (const FloatNDArray&, const FloatNDArray&); extern boolNDArray bsxfun_ge (const FloatNDArray&, const FloatNDArray&);

extern FloatNDArray bsxfun_pow (const FloatNDArray&, const FloatNDArray&);
extern FloatComplexNDArray bsxfun_pow (const FloatComplexNDArray&, const FloatNDArray&);

extern FloatComplexNDArray bsxfun_pow (const FloatNDArray&, const FloatComplexNDArray&);
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fMatrix.h" 2








class

FloatMatrix : public FloatNDArray
{
public:

  typedef FloatColumnVector column_vector_type;
  typedef FloatRowVector row_vector_type;

  typedef FloatColumnVector real_column_vector_type;
  typedef FloatRowVector real_row_vector_type;

  typedef FloatMatrix real_matrix_type;
  typedef FloatComplexMatrix complex_matrix_type;

  typedef FloatDiagMatrix real_diag_matrix_type;
  typedef FloatComplexDiagMatrix complex_diag_matrix_type;

  typedef float real_elt_type;
  typedef FloatComplex complex_elt_type;

  typedef void (*solve_singularity_handler) (float rcon);

  FloatMatrix (void) : FloatNDArray () { }

  FloatMatrix (octave_idx_type r, octave_idx_type c)
    : FloatNDArray (dim_vector (r, c)) { }

  FloatMatrix (octave_idx_type r, octave_idx_type c, float val)
    : FloatNDArray (dim_vector (r, c), val) { }

  FloatMatrix (const dim_vector& dv) : FloatNDArray (dv.redim (2)) { }

  FloatMatrix (const dim_vector& dv, float val)
    : FloatNDArray (dv.redim (2), val) { }

  FloatMatrix (const FloatMatrix& a) : FloatNDArray (a) { }

  template <typename U>
  FloatMatrix (const MArray<U>& a) : FloatNDArray (a.as_matrix ()) { }

  template <typename U>
  FloatMatrix (const Array<U>& a) : FloatNDArray (a.as_matrix ()) { }

  explicit FloatMatrix (const FloatRowVector& rv);

  explicit FloatMatrix (const FloatColumnVector& cv);

  explicit FloatMatrix (const FloatDiagMatrix& a);

  explicit FloatMatrix (const MDiagArray2<float>& a);

  explicit FloatMatrix (const DiagArray2<float>& a);

  explicit FloatMatrix (const PermMatrix& a);

  explicit FloatMatrix (const boolMatrix& a);

  explicit FloatMatrix (const charMatrix& a);

  bool operator == (const FloatMatrix& a) const;
  bool operator != (const FloatMatrix& a) const;

  bool is_symmetric (void) const;



  FloatMatrix& insert (const FloatMatrix& a,
                       octave_idx_type r, octave_idx_type c);
  FloatMatrix& insert (const FloatRowVector& a,
                       octave_idx_type r, octave_idx_type c);
  FloatMatrix& insert (const FloatColumnVector& a,
                       octave_idx_type r, octave_idx_type c);
  FloatMatrix& insert (const FloatDiagMatrix& a,
                       octave_idx_type r, octave_idx_type c);

  FloatMatrix& fill (float val);
  FloatMatrix& fill (float val, octave_idx_type r1, octave_idx_type c1,
                     octave_idx_type r2, octave_idx_type c2);

  FloatMatrix append (const FloatMatrix& a) const;
  FloatMatrix append (const FloatRowVector& a) const;
  FloatMatrix append (const FloatColumnVector& a) const;
  FloatMatrix append (const FloatDiagMatrix& a) const;

  FloatMatrix stack (const FloatMatrix& a) const;
  FloatMatrix stack (const FloatRowVector& a) const;
  FloatMatrix stack (const FloatColumnVector& a) const;
  FloatMatrix stack (const FloatDiagMatrix& a) const;

  friend FloatMatrix real (const FloatComplexMatrix& a);
  friend FloatMatrix imag (const FloatComplexMatrix& a);

  friend class FloatComplexMatrix;

  FloatMatrix hermitian (void) const { return MArray<float>::transpose (); }
  FloatMatrix transpose (void) const { return MArray<float>::transpose (); }



  FloatMatrix extract (octave_idx_type r1, octave_idx_type c1,
                       octave_idx_type r2, octave_idx_type c2) const;

  FloatMatrix extract_n (octave_idx_type r1, octave_idx_type c1,
                         octave_idx_type nr, octave_idx_type nc) const;



  FloatRowVector row (octave_idx_type i) const;

  FloatColumnVector column (octave_idx_type i) const;

  void resize (octave_idx_type nr, octave_idx_type nc, float rfv = 0)
  {
    MArray<float>::resize (dim_vector (nr, nc), rfv);
  }

private:
  FloatMatrix tinverse (MatrixType &mattype, octave_idx_type& info,
                        float& rcon, bool force, bool calc_cond) const;

  FloatMatrix finverse (MatrixType &mattype, octave_idx_type& info,
                        float& rcon, bool force, bool calc_cond) const;

public:
  FloatMatrix inverse (void) const;
  FloatMatrix inverse (octave_idx_type& info) const;
  FloatMatrix inverse (octave_idx_type& info, float& rcon, bool force = false,
                       bool calc_cond = true) const;

  FloatMatrix inverse (MatrixType &mattype) const;
  FloatMatrix inverse (MatrixType &mattype, octave_idx_type& info) const;
  FloatMatrix inverse (MatrixType &mattype, octave_idx_type& info, float& rcon,
                       bool force = false, bool calc_cond = true) const;

  FloatMatrix pseudo_inverse (float tol = 0.0) const;

  FloatComplexMatrix fourier (void) const;
  FloatComplexMatrix ifourier (void) const;

  FloatComplexMatrix fourier2d (void) const;
  FloatComplexMatrix ifourier2d (void) const;

  FloatDET determinant (void) const;
  FloatDET determinant (octave_idx_type& info) const;
  FloatDET determinant (octave_idx_type& info, float& rcon,
                        bool calc_cond = true) const;
  FloatDET determinant (MatrixType &mattype, octave_idx_type& info,
                        float& rcon, bool calc_cond = true) const;

  float rcond (void) const;
  float rcond (MatrixType &mattype) const;

private:

  FloatMatrix utsolve (MatrixType &typ, const FloatMatrix& b,
                       octave_idx_type& info,
                       float& rcon, solve_singularity_handler sing_handler,
                       bool calc_cond = false,
                       blas_trans_type transt = blas_no_trans) const;


  FloatMatrix ltsolve (MatrixType &typ, const FloatMatrix& b,
                       octave_idx_type& info,
                       float& rcon, solve_singularity_handler sing_handler,
                       bool calc_cond = false,
                       blas_trans_type transt = blas_no_trans) const;


  FloatMatrix fsolve (MatrixType &typ, const FloatMatrix& b,
                      octave_idx_type& info,
                      float& rcon, solve_singularity_handler sing_handler,
                      bool calc_cond = false) const;

public:

  FloatMatrix solve (MatrixType &typ, const FloatMatrix& b) const;
  FloatMatrix solve (MatrixType &typ, const FloatMatrix& b,
                     octave_idx_type& info) const;
  FloatMatrix solve (MatrixType &typ, const FloatMatrix& b,
                     octave_idx_type& info, float& rcon) const;
  FloatMatrix solve (MatrixType &typ, const FloatMatrix& b,
                     octave_idx_type& info, float& rcon,
                     solve_singularity_handler sing_handler,
                     bool singular_fallback = true,
                     blas_trans_type transt = blas_no_trans) const;

  FloatComplexMatrix solve (MatrixType &typ, const FloatComplexMatrix& b) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatComplexMatrix& b,
                            octave_idx_type& info) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatComplexMatrix& b,
                            octave_idx_type& info, float& rcon) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatComplexMatrix& b,
                            octave_idx_type& info, float& rcon,
                            solve_singularity_handler sing_handler,
                            bool singular_fallback = true,
                            blas_trans_type transt = blas_no_trans) const;

  FloatColumnVector solve (MatrixType &typ, const FloatColumnVector& b) const;
  FloatColumnVector solve (MatrixType &typ, const FloatColumnVector& b,
                           octave_idx_type& info) const;
  FloatColumnVector solve (MatrixType &typ, const FloatColumnVector& b,
                           octave_idx_type& info, float& rcon) const;
  FloatColumnVector solve (MatrixType &typ, const FloatColumnVector& b,
                           octave_idx_type& info, float& rcon,
                           solve_singularity_handler sing_handler,
                           blas_trans_type transt = blas_no_trans) const;

  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatComplexColumnVector& b) const;
  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatComplexColumnVector& b,
                                  octave_idx_type& info) const;
  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatComplexColumnVector& b,
                                  octave_idx_type& info, float& rcon) const;
  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatComplexColumnVector& b,
                                  octave_idx_type& info, float& rcon,
                                  solve_singularity_handler sing_handler,
                                  blas_trans_type transt = blas_no_trans) const;


  FloatMatrix solve (const FloatMatrix& b) const;
  FloatMatrix solve (const FloatMatrix& b, octave_idx_type& info) const;
  FloatMatrix solve (const FloatMatrix& b, octave_idx_type& info,
                     float& rcon) const;
  FloatMatrix solve (const FloatMatrix& b, octave_idx_type& info, float& rcon,
                     solve_singularity_handler sing_handler,
                     blas_trans_type transt = blas_no_trans) const;

  FloatComplexMatrix solve (const FloatComplexMatrix& b) const;
  FloatComplexMatrix solve (const FloatComplexMatrix& b,
                            octave_idx_type& info) const;
  FloatComplexMatrix solve (const FloatComplexMatrix& b, octave_idx_type& info,
                            float& rcon) const;
  FloatComplexMatrix solve (const FloatComplexMatrix& b, octave_idx_type& info,
                            float& rcon,
                            solve_singularity_handler sing_handler,
                            blas_trans_type transt = blas_no_trans) const;

  FloatColumnVector solve (const FloatColumnVector& b) const;
  FloatColumnVector solve (const FloatColumnVector& b,
                           octave_idx_type& info) const;
  FloatColumnVector solve (const FloatColumnVector& b, octave_idx_type& info,
                           float& rcon) const;
  FloatColumnVector solve (const FloatColumnVector& b, octave_idx_type& info,
                           float& rcon,
                           solve_singularity_handler sing_handler,
                           blas_trans_type transt = blas_no_trans) const;

  FloatComplexColumnVector solve (const FloatComplexColumnVector& b) const;
  FloatComplexColumnVector solve (const FloatComplexColumnVector& b,
                                  octave_idx_type& info) const;
  FloatComplexColumnVector solve (const FloatComplexColumnVector& b,
                                  octave_idx_type& info,
                                  float& rcon) const;
  FloatComplexColumnVector solve (const FloatComplexColumnVector& b,
                                  octave_idx_type& info,
                                  float& rcon,
                                  solve_singularity_handler sing_handler,
                                  blas_trans_type transt = blas_no_trans) const;


  FloatMatrix lssolve (const FloatMatrix& b) const;
  FloatMatrix lssolve (const FloatMatrix& b, octave_idx_type& info) const;
  FloatMatrix lssolve (const FloatMatrix& b, octave_idx_type& info,
                       octave_idx_type& rank) const;
  FloatMatrix lssolve (const FloatMatrix& b, octave_idx_type& info,
                       octave_idx_type& rank, float& rcon) const;

  FloatComplexMatrix lssolve (const FloatComplexMatrix& b) const;
  FloatComplexMatrix lssolve (const FloatComplexMatrix& b,
                              octave_idx_type& info) const;
  FloatComplexMatrix lssolve (const FloatComplexMatrix& b,
                              octave_idx_type& info,
                              octave_idx_type& rank) const;
  FloatComplexMatrix lssolve (const FloatComplexMatrix& b,
                              octave_idx_type& info, octave_idx_type& rank,
                              float &rcon) const;

  FloatColumnVector lssolve (const FloatColumnVector& b) const;
  FloatColumnVector lssolve (const FloatColumnVector& b,
                             octave_idx_type& info) const;
  FloatColumnVector lssolve (const FloatColumnVector& b, octave_idx_type& info,
                             octave_idx_type& rank) const;
  FloatColumnVector lssolve (const FloatColumnVector& b, octave_idx_type& info,
                             octave_idx_type& rank, float& rcon) const;

  FloatComplexColumnVector lssolve (const FloatComplexColumnVector& b) const;
  FloatComplexColumnVector lssolve (const FloatComplexColumnVector& b,
                                    octave_idx_type& info) const;
  FloatComplexColumnVector lssolve (const FloatComplexColumnVector& b,
                                    octave_idx_type& info,
                                    octave_idx_type& rank) const;
  FloatComplexColumnVector lssolve (const FloatComplexColumnVector& b,
                                    octave_idx_type& info,
                                    octave_idx_type& rank, float& rcon) const;

  FloatMatrix& operator += (const FloatDiagMatrix& a);
  FloatMatrix& operator -= (const FloatDiagMatrix& a);

  FloatMatrix cumprod (int dim = -1) const;
  FloatMatrix cumsum (int dim = -1) const;
  FloatMatrix prod (int dim = -1) const;
  FloatMatrix sum (int dim = -1) const;
  FloatMatrix sumsq (int dim = -1) const;
  FloatMatrix abs (void) const;

  FloatMatrix diag (octave_idx_type k = 0) const;

  FloatDiagMatrix diag (octave_idx_type m, octave_idx_type n) const;

  FloatColumnVector row_min (void) const;
  FloatColumnVector row_max (void) const;

  FloatColumnVector row_min (Array<octave_idx_type>& index) const;
  FloatColumnVector row_max (Array<octave_idx_type>& index) const;

  FloatRowVector column_min (void) const;
  FloatRowVector column_max (void) const;

  FloatRowVector column_min (Array<octave_idx_type>& index) const;
  FloatRowVector column_max (Array<octave_idx_type>& index) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const FloatMatrix& a);
  friend std::istream& operator >> (std::istream& is,
                                               FloatMatrix& a);
};



extern FloatMatrix real (const FloatComplexMatrix& a);
extern FloatMatrix imag (const FloatComplexMatrix& a);



extern FloatMatrix operator * (const FloatColumnVector& a,
                                          const FloatRowVector& b);



extern FloatMatrix Givens (float, float);

extern FloatMatrix Sylvester (const FloatMatrix&, const FloatMatrix&,
                                         const FloatMatrix&);

extern FloatMatrix xgemm (const FloatMatrix& a, const FloatMatrix& b,
                                     blas_trans_type transa = blas_no_trans,
                                     blas_trans_type transb = blas_no_trans);

extern FloatMatrix operator * (const FloatMatrix& a,
                                          const FloatMatrix& b);

extern FloatMatrix min (float d, const FloatMatrix& m);
extern FloatMatrix min (const FloatMatrix& m, float d);
extern FloatMatrix min (const FloatMatrix& a, const FloatMatrix& b);

extern FloatMatrix max (float d, const FloatMatrix& m);
extern FloatMatrix max (const FloatMatrix& m, float d);
extern FloatMatrix max (const FloatMatrix& a, const FloatMatrix& b);

extern FloatMatrix linspace (const FloatColumnVector& x1,
                                        const FloatColumnVector& x2,
                                        octave_idx_type n);

extern boolMatrix mx_el_lt (const FloatMatrix&, const float&); extern boolMatrix mx_el_le (const FloatMatrix&, const float&); extern boolMatrix mx_el_ge (const FloatMatrix&, const float&); extern boolMatrix mx_el_gt (const FloatMatrix&, const float&); extern boolMatrix mx_el_eq (const FloatMatrix&, const float&); extern boolMatrix mx_el_ne (const FloatMatrix&, const float&);
extern boolMatrix mx_el_and (const FloatMatrix&, const float&); extern boolMatrix mx_el_or (const FloatMatrix&, const float&);

extern boolMatrix mx_el_lt (const float&, const FloatMatrix&); extern boolMatrix mx_el_le (const float&, const FloatMatrix&); extern boolMatrix mx_el_ge (const float&, const FloatMatrix&); extern boolMatrix mx_el_gt (const float&, const FloatMatrix&); extern boolMatrix mx_el_eq (const float&, const FloatMatrix&); extern boolMatrix mx_el_ne (const float&, const FloatMatrix&);
extern boolMatrix mx_el_and (const float&, const FloatMatrix&); extern boolMatrix mx_el_or (const float&, const FloatMatrix&);

extern boolMatrix mx_el_lt (const FloatMatrix&, const FloatMatrix&); extern boolMatrix mx_el_le (const FloatMatrix&, const FloatMatrix&); extern boolMatrix mx_el_ge (const FloatMatrix&, const FloatMatrix&); extern boolMatrix mx_el_gt (const FloatMatrix&, const FloatMatrix&); extern boolMatrix mx_el_eq (const FloatMatrix&, const FloatMatrix&); extern boolMatrix mx_el_ne (const FloatMatrix&, const FloatMatrix&);
extern boolMatrix mx_el_and (const FloatMatrix&, const FloatMatrix&); extern boolMatrix mx_el_or (const FloatMatrix&, const FloatMatrix&);

inline FloatMatrix operator += (FloatMatrix& x, const float& y) { return FloatMatrix (operator += (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatMatrix operator -= (FloatMatrix& x, const float& y) { return FloatMatrix (operator -= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatMatrix operator *= (FloatMatrix& x, const float& y) { return FloatMatrix (operator *= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatMatrix operator /= (FloatMatrix& x, const float& y) { return FloatMatrix (operator /= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatMatrix operator += (FloatMatrix& x, const FloatMatrix& y) { return FloatMatrix (operator += (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix operator -= (FloatMatrix& x, const FloatMatrix& y) { return FloatMatrix (operator -= (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix product_eq (FloatMatrix& x, const FloatMatrix& y) { return FloatMatrix (product_eq (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix quotient_eq (FloatMatrix& x, const FloatMatrix& y) { return FloatMatrix (quotient_eq (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix operator + (const FloatMatrix& x) { return FloatMatrix (operator + (dynamic_cast<const MArray<float>&> (x))); } inline FloatMatrix operator - (const FloatMatrix& x) { return FloatMatrix (operator - (dynamic_cast<const MArray<float>&> (x))); } inline FloatMatrix operator + (const FloatMatrix& x, const float& y) { return FloatMatrix (operator + (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatMatrix operator - (const FloatMatrix& x, const float& y) { return FloatMatrix (operator - (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatMatrix operator * (const FloatMatrix& x, const float& y) { return FloatMatrix (operator * (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatMatrix operator / (const FloatMatrix& x, const float& y) { return FloatMatrix (operator / (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatMatrix operator + (const float& x, const FloatMatrix& y) { return FloatMatrix (operator + ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix operator - (const float& x, const FloatMatrix& y) { return FloatMatrix (operator - ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix operator * (const float& x, const FloatMatrix& y) { return FloatMatrix (operator * ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix operator / (const float& x, const FloatMatrix& y) { return FloatMatrix (operator / ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix operator + (const FloatMatrix& x, const FloatMatrix& y) { return FloatMatrix (operator + (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix operator - (const FloatMatrix& x, const FloatMatrix& y) { return FloatMatrix (operator - (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix product (const FloatMatrix& x, const FloatMatrix& y) { return FloatMatrix (product (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatMatrix quotient (const FloatMatrix& x, const FloatMatrix& y) { return FloatMatrix (quotient (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); }

template <typename T>
void read_int (std::istream& is, bool swap_bytes, T& val);
# 39 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCMatrix.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCMatrix.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCNDArray.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCNDArray.h"
class

FloatComplexNDArray : public MArray<FloatComplex>
{
public:

  FloatComplexNDArray (void) : MArray<FloatComplex> () { }

  FloatComplexNDArray (const dim_vector& dv) : MArray<FloatComplex> (dv) { }

  FloatComplexNDArray (const dim_vector& dv, const FloatComplex& val)
    : MArray<FloatComplex> (dv, val) { }

  FloatComplexNDArray (const FloatComplexNDArray& a)
    : MArray<FloatComplex> (a) { }

  template <typename U>
  FloatComplexNDArray (const MArray<U>& a) : MArray<FloatComplex> (a) { }

  template <typename U>
  FloatComplexNDArray (const Array<U>& a) : MArray<FloatComplex> (a) { }

  FloatComplexNDArray (const charNDArray&);

  FloatComplexNDArray& operator = (const FloatComplexNDArray& a)
  {
    MArray<FloatComplex>::operator = (a);
    return *this;
  }



  boolNDArray operator ! (void) const;



  bool any_element_is_nan (void) const;
  bool any_element_is_inf_or_nan (void) const;
  bool all_elements_are_real (void) const;
  bool all_integers (float& max_val, float& min_val) const;
  bool too_large_for_float (void) const;

  boolNDArray all (int dim = -1) const;
  boolNDArray any (int dim = -1) const;

  FloatComplexNDArray cumprod (int dim = -1) const;
  FloatComplexNDArray cumsum (int dim = -1) const;
  FloatComplexNDArray prod (int dim = -1) const;
  ComplexNDArray dprod (int dim = -1) const;
  FloatComplexNDArray sum (int dim = -1) const;
  ComplexNDArray dsum (int dim = -1) const;
  FloatComplexNDArray sumsq (int dim = -1) const;
  FloatComplexNDArray concat (const FloatComplexNDArray& rb,
                              const Array<octave_idx_type>& ra_idx);
  FloatComplexNDArray concat (const FloatNDArray& rb,
                              const Array<octave_idx_type>& ra_idx);

  FloatComplexNDArray max (int dim = -1) const;
  FloatComplexNDArray max (Array<octave_idx_type>& index, int dim = -1) const;
  FloatComplexNDArray min (int dim = -1) const;
  FloatComplexNDArray min (Array<octave_idx_type>& index, int dim = -1) const;

  FloatComplexNDArray cummax (int dim = -1) const;
  FloatComplexNDArray cummax (Array<octave_idx_type>& index,
                              int dim = -1) const;
  FloatComplexNDArray cummin (int dim = -1) const;
  FloatComplexNDArray cummin (Array<octave_idx_type>& index,
                              int dim = -1) const;

  FloatComplexNDArray diff (octave_idx_type order = 1, int dim = -1) const;

  FloatComplexNDArray& insert (const NDArray& a,
                               octave_idx_type r, octave_idx_type c);
  FloatComplexNDArray& insert (const FloatComplexNDArray& a,
                               octave_idx_type r, octave_idx_type c);
  FloatComplexNDArray& insert (const FloatComplexNDArray& a,
                               const Array<octave_idx_type>& ra_idx);

  FloatNDArray abs (void) const;
  boolNDArray isnan (void) const;
  boolNDArray isinf (void) const;
  boolNDArray isfinite (void) const;

  friend FloatComplexNDArray conj (const FloatComplexNDArray& a);

  FloatComplexNDArray fourier (int dim = 1) const;
  FloatComplexNDArray ifourier (int dim = 1) const;

  FloatComplexNDArray fourier2d (void) const;
  FloatComplexNDArray ifourier2d (void) const;

  FloatComplexNDArray fourierNd (void) const;
  FloatComplexNDArray ifourierNd (void) const;

  FloatComplexNDArray squeeze (void) const
  { return MArray<FloatComplex>::squeeze (); }

  static void increment_index (Array<octave_idx_type>& ra_idx,
                               const dim_vector& dimensions,
                               int start_dimension = 0);

  static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions);



  friend std::ostream& operator << (std::ostream& os,
                                               const FloatComplexNDArray& a);
  friend std::istream& operator >> (std::istream& is,
                                               FloatComplexNDArray& a);




  FloatComplexNDArray diag (octave_idx_type k = 0) const;

  FloatComplexNDArray diag (octave_idx_type m, octave_idx_type n) const;

  FloatComplexNDArray& changesign (void)
  {
    MArray<FloatComplex>::changesign ();
    return *this;
  }

};

extern FloatComplexNDArray conj (const FloatComplexNDArray& a);

extern FloatComplexNDArray min (FloatComplex d, const FloatComplexNDArray& m); extern FloatComplexNDArray min (const FloatComplexNDArray& m, FloatComplex d); extern FloatComplexNDArray min (const FloatComplexNDArray& a, const FloatComplexNDArray& b); extern FloatComplexNDArray max (FloatComplex d, const FloatComplexNDArray& m); extern FloatComplexNDArray max (const FloatComplexNDArray& m, FloatComplex d); extern FloatComplexNDArray max (const FloatComplexNDArray& a, const FloatComplexNDArray& b);

extern boolNDArray mx_el_lt (const FloatComplexNDArray&, const FloatComplex&); extern boolNDArray mx_el_le (const FloatComplexNDArray&, const FloatComplex&); extern boolNDArray mx_el_ge (const FloatComplexNDArray&, const FloatComplex&); extern boolNDArray mx_el_gt (const FloatComplexNDArray&, const FloatComplex&); extern boolNDArray mx_el_eq (const FloatComplexNDArray&, const FloatComplex&); extern boolNDArray mx_el_ne (const FloatComplexNDArray&, const FloatComplex&);
extern boolNDArray mx_el_and (const FloatComplexNDArray&, const FloatComplex&); extern boolNDArray mx_el_or (const FloatComplexNDArray&, const FloatComplex&); extern boolNDArray mx_el_not_and (const FloatComplexNDArray&, const FloatComplex&); extern boolNDArray mx_el_not_or (const FloatComplexNDArray&, const FloatComplex&);

extern boolNDArray mx_el_lt (const FloatComplex&, const FloatComplexNDArray&); extern boolNDArray mx_el_le (const FloatComplex&, const FloatComplexNDArray&); extern boolNDArray mx_el_ge (const FloatComplex&, const FloatComplexNDArray&); extern boolNDArray mx_el_gt (const FloatComplex&, const FloatComplexNDArray&); extern boolNDArray mx_el_eq (const FloatComplex&, const FloatComplexNDArray&); extern boolNDArray mx_el_ne (const FloatComplex&, const FloatComplexNDArray&);
extern boolNDArray mx_el_and (const FloatComplex&, const FloatComplexNDArray&); extern boolNDArray mx_el_or (const FloatComplex&, const FloatComplexNDArray&); extern boolNDArray mx_el_and_not (const FloatComplex&, const FloatComplexNDArray&); extern boolNDArray mx_el_or_not (const FloatComplex&, const FloatComplexNDArray&);

extern boolNDArray mx_el_lt (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_le (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_ge (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_gt (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_eq (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_ne (const FloatComplexNDArray&, const FloatComplexNDArray&);
extern boolNDArray mx_el_and (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_or (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_and_not (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_or_not (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_not_and (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_not_or (const FloatComplexNDArray&, const FloatComplexNDArray&);

inline FloatComplexNDArray operator += (FloatComplexNDArray& x, const FloatComplex& y) { return FloatComplexNDArray (operator += (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexNDArray operator -= (FloatComplexNDArray& x, const FloatComplex& y) { return FloatComplexNDArray (operator -= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexNDArray operator *= (FloatComplexNDArray& x, const FloatComplex& y) { return FloatComplexNDArray (operator *= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexNDArray operator /= (FloatComplexNDArray& x, const FloatComplex& y) { return FloatComplexNDArray (operator /= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexNDArray operator += (FloatComplexNDArray& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (operator += (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray operator -= (FloatComplexNDArray& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (operator -= (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray product_eq (FloatComplexNDArray& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (product_eq (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray quotient_eq (FloatComplexNDArray& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (quotient_eq (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray operator + (const FloatComplexNDArray& x) { return FloatComplexNDArray (operator + (dynamic_cast<const MArray<FloatComplex>&> (x))); } inline FloatComplexNDArray operator - (const FloatComplexNDArray& x) { return FloatComplexNDArray (operator - (dynamic_cast<const MArray<FloatComplex>&> (x))); } inline FloatComplexNDArray operator + (const FloatComplexNDArray& x, const FloatComplex& y) { return FloatComplexNDArray (operator + (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexNDArray operator - (const FloatComplexNDArray& x, const FloatComplex& y) { return FloatComplexNDArray (operator - (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexNDArray operator * (const FloatComplexNDArray& x, const FloatComplex& y) { return FloatComplexNDArray (operator * (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexNDArray operator / (const FloatComplexNDArray& x, const FloatComplex& y) { return FloatComplexNDArray (operator / (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexNDArray operator + (const FloatComplex& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (operator + ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray operator - (const FloatComplex& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (operator - ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray operator * (const FloatComplex& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (operator * ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray operator / (const FloatComplex& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (operator / ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray operator + (const FloatComplexNDArray& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (operator + (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray operator - (const FloatComplexNDArray& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (operator - (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray product (const FloatComplexNDArray& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (product (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexNDArray quotient (const FloatComplexNDArray& x, const FloatComplexNDArray& y) { return FloatComplexNDArray (quotient (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); }

extern FloatComplexNDArray& operator *= (FloatComplexNDArray& a,
                                                    float s);
extern FloatComplexNDArray& operator /= (FloatComplexNDArray& a,
                                                    float s);

extern FloatComplexNDArray bsxfun_add (const FloatComplexNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray bsxfun_sub (const FloatComplexNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray bsxfun_mul (const FloatComplexNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray bsxfun_div (const FloatComplexNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray bsxfun_pow (const FloatComplexNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray bsxfun_min (const FloatComplexNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray bsxfun_max (const FloatComplexNDArray&, const FloatComplexNDArray&);
extern boolNDArray bsxfun_eq (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray bsxfun_ne (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray bsxfun_lt (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray bsxfun_le (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray bsxfun_gt (const FloatComplexNDArray&, const FloatComplexNDArray&); extern boolNDArray bsxfun_ge (const FloatComplexNDArray&, const FloatComplexNDArray&);

extern FloatComplexNDArray bsxfun_pow (const FloatComplexNDArray&, const FloatComplexNDArray&);
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCMatrix.h" 2
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCMatrix.h"
class

FloatComplexMatrix : public FloatComplexNDArray
{
public:

  typedef FloatComplexColumnVector column_vector_type;
  typedef FloatComplexRowVector row_vector_type;

  typedef FloatColumnVector real_column_vector_type;
  typedef FloatRowVector real_row_vector_type;

  typedef FloatMatrix real_matrix_type;
  typedef FloatComplexMatrix complex_matrix_type;

  typedef FloatDiagMatrix real_diag_matrix_type;
  typedef FloatComplexDiagMatrix complex_diag_matrix_type;

  typedef float real_elt_type;
  typedef FloatComplex complex_elt_type;

  typedef void (*solve_singularity_handler) (float rcon);

  FloatComplexMatrix (void) : FloatComplexNDArray () { }

  FloatComplexMatrix (octave_idx_type r, octave_idx_type c)
    : FloatComplexNDArray (dim_vector (r, c)) { }

  FloatComplexMatrix (octave_idx_type r, octave_idx_type c,
                      const FloatComplex& val)
    : FloatComplexNDArray (dim_vector (r, c), val) { }

  FloatComplexMatrix (const dim_vector& dv)
    : FloatComplexNDArray (dv.redim (2)) { }

  FloatComplexMatrix (const dim_vector& dv, const FloatComplex& val)
    : FloatComplexNDArray (dv.redim (2), val) { }

  FloatComplexMatrix (const FloatComplexMatrix& a)
    : FloatComplexNDArray (a) { }

  template <typename U>
  FloatComplexMatrix (const MArray<U>& a)
    : FloatComplexNDArray (a.as_matrix ()) { }

  template <typename U>
  FloatComplexMatrix (const Array<U>& a)
    : FloatComplexNDArray (a.as_matrix ()) { }

  explicit FloatComplexMatrix (const FloatMatrix& a);

  explicit FloatComplexMatrix (const FloatRowVector& rv);

  explicit FloatComplexMatrix (const FloatColumnVector& cv);

  explicit FloatComplexMatrix (const FloatDiagMatrix& a);

  explicit FloatComplexMatrix (const MDiagArray2<float>& a);

  explicit FloatComplexMatrix (const DiagArray2<float>& a);

  explicit FloatComplexMatrix (const FloatComplexRowVector& rv);

  explicit FloatComplexMatrix (const FloatComplexColumnVector& cv);

  explicit FloatComplexMatrix (const FloatComplexDiagMatrix& a);

  explicit FloatComplexMatrix (const MDiagArray2<FloatComplex>& a);

  explicit FloatComplexMatrix (const DiagArray2<FloatComplex>& a);

  explicit FloatComplexMatrix (const boolMatrix& a);

  explicit FloatComplexMatrix (const charMatrix& a);

  FloatComplexMatrix (const FloatMatrix& re, const FloatMatrix& im);

  bool operator == (const FloatComplexMatrix& a) const;
  bool operator != (const FloatComplexMatrix& a) const;

  bool is_hermitian (void) const;



  FloatComplexMatrix& insert (const FloatMatrix& a,
                              octave_idx_type r, octave_idx_type c);
  FloatComplexMatrix& insert (const FloatRowVector& a,
                              octave_idx_type r, octave_idx_type c);
  FloatComplexMatrix& insert (const FloatColumnVector& a,
                              octave_idx_type r, octave_idx_type c);
  FloatComplexMatrix& insert (const FloatDiagMatrix& a,
                              octave_idx_type r, octave_idx_type c);

  FloatComplexMatrix& insert (const FloatComplexMatrix& a,
                              octave_idx_type r, octave_idx_type c);
  FloatComplexMatrix& insert (const FloatComplexRowVector& a,
                              octave_idx_type r, octave_idx_type c);
  FloatComplexMatrix& insert (const FloatComplexColumnVector& a,
                              octave_idx_type r, octave_idx_type c);
  FloatComplexMatrix& insert (const FloatComplexDiagMatrix& a,
                              octave_idx_type r, octave_idx_type c);

  FloatComplexMatrix& fill (float val);
  FloatComplexMatrix& fill (const FloatComplex& val);
  FloatComplexMatrix& fill (float val, octave_idx_type r1, octave_idx_type c1,
                            octave_idx_type r2, octave_idx_type c2);
  FloatComplexMatrix& fill (const FloatComplex& val,
                            octave_idx_type r1, octave_idx_type c1,
                            octave_idx_type r2, octave_idx_type c2);

  FloatComplexMatrix append (const FloatMatrix& a) const;
  FloatComplexMatrix append (const FloatRowVector& a) const;
  FloatComplexMatrix append (const FloatColumnVector& a) const;
  FloatComplexMatrix append (const FloatDiagMatrix& a) const;

  FloatComplexMatrix append (const FloatComplexMatrix& a) const;
  FloatComplexMatrix append (const FloatComplexRowVector& a) const;
  FloatComplexMatrix append (const FloatComplexColumnVector& a) const;
  FloatComplexMatrix append (const FloatComplexDiagMatrix& a) const;

  FloatComplexMatrix stack (const FloatMatrix& a) const;
  FloatComplexMatrix stack (const FloatRowVector& a) const;
  FloatComplexMatrix stack (const FloatColumnVector& a) const;
  FloatComplexMatrix stack (const FloatDiagMatrix& a) const;

  FloatComplexMatrix stack (const FloatComplexMatrix& a) const;
  FloatComplexMatrix stack (const FloatComplexRowVector& a) const;
  FloatComplexMatrix stack (const FloatComplexColumnVector& a) const;
  FloatComplexMatrix stack (const FloatComplexDiagMatrix& a) const;

  FloatComplexMatrix hermitian (void) const
  { return MArray<FloatComplex>::hermitian (std::conj); }
  FloatComplexMatrix transpose (void) const
  { return MArray<FloatComplex>::transpose (); }

  friend FloatComplexMatrix conj (const FloatComplexMatrix& a);



  FloatComplexMatrix extract (octave_idx_type r1, octave_idx_type c1,
                              octave_idx_type r2, octave_idx_type c2) const;

  FloatComplexMatrix extract_n (octave_idx_type r1, octave_idx_type c1,
                                octave_idx_type nr, octave_idx_type nc) const;



  FloatComplexRowVector row (octave_idx_type i) const;

  FloatComplexColumnVector column (octave_idx_type i) const;

  void resize (octave_idx_type nr, octave_idx_type nc,
               const FloatComplex& rfv = FloatComplex (0))
  {
    MArray<FloatComplex>::resize (dim_vector (nr, nc), rfv);
  }

private:
  FloatComplexMatrix tinverse (MatrixType &mattype, octave_idx_type& info,
                               float& rcon, bool force, bool calc_cond) const;

  FloatComplexMatrix finverse (MatrixType &mattype, octave_idx_type& info,
                               float& rcon, bool force, bool calc_cond) const;

public:
  FloatComplexMatrix inverse (void) const;
  FloatComplexMatrix inverse (octave_idx_type& info) const;
  FloatComplexMatrix inverse (octave_idx_type& info, float& rcon,
                              bool force = false, bool calc_cond = true) const;

  FloatComplexMatrix inverse (MatrixType &mattype) const;
  FloatComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info) const;
  FloatComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info,
                              float& rcon, bool force = false,
                              bool calc_cond = true) const;

  FloatComplexMatrix pseudo_inverse (float tol = 0.0) const;

  FloatComplexMatrix fourier (void) const;
  FloatComplexMatrix ifourier (void) const;

  FloatComplexMatrix fourier2d (void) const;
  FloatComplexMatrix ifourier2d (void) const;

  FloatComplexDET determinant (void) const;
  FloatComplexDET determinant (octave_idx_type& info) const;
  FloatComplexDET determinant (octave_idx_type& info, float& rcon,
                               bool calc_cond = true) const;
  FloatComplexDET determinant (MatrixType &mattype, octave_idx_type& info,
                               float& rcon, bool calc_cond = true) const;

  float rcond (void) const;
  float rcond (MatrixType &mattype) const;

private:

  FloatComplexMatrix utsolve (MatrixType &typ, const FloatComplexMatrix& b,
                              octave_idx_type& info, float& rcon,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false,
                              blas_trans_type transt = blas_no_trans) const;


  FloatComplexMatrix ltsolve (MatrixType &typ, const FloatComplexMatrix& b,
                              octave_idx_type& info, float& rcon,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false,
                              blas_trans_type transt = blas_no_trans) const;


  FloatComplexMatrix fsolve (MatrixType &typ, const FloatComplexMatrix& b,
                             octave_idx_type& info, float& rcon,
                             solve_singularity_handler sing_handler,
                             bool calc_cond = false) const;

public:

  FloatComplexMatrix solve (MatrixType &typ, const FloatMatrix& b) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatMatrix& b,
                            octave_idx_type& info) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatMatrix& b,
                            octave_idx_type& info, float& rcon) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatMatrix& b,
                            octave_idx_type& info,
                            float& rcon, solve_singularity_handler sing_handler,
                            bool singular_fallback = true,
                            blas_trans_type transt = blas_no_trans) const;

  FloatComplexMatrix solve (MatrixType &typ, const FloatComplexMatrix& b) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatComplexMatrix& b,
                            octave_idx_type& info) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatComplexMatrix& b,
                            octave_idx_type& info, float& rcon) const;
  FloatComplexMatrix solve (MatrixType &typ, const FloatComplexMatrix& b,
                            octave_idx_type& info, float& rcon,
                            solve_singularity_handler sing_handler,
                            bool singular_fallback = true,
                            blas_trans_type transt = blas_no_trans) const;

  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatColumnVector& b) const;
  FloatComplexColumnVector solve (MatrixType &typ, const FloatColumnVector& b,
                                  octave_idx_type& info) const;
  FloatComplexColumnVector solve (MatrixType &typ, const FloatColumnVector& b,
                                  octave_idx_type& info, float& rcon) const;
  FloatComplexColumnVector solve (MatrixType &typ, const FloatColumnVector& b,
                                  octave_idx_type& info, float& rcon,
                                  solve_singularity_handler sing_handler,
                                  blas_trans_type transt = blas_no_trans) const;

  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatComplexColumnVector& b) const;
  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatComplexColumnVector& b,
                                  octave_idx_type& info) const;
  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatComplexColumnVector& b,
                                  octave_idx_type& info, float& rcon) const;
  FloatComplexColumnVector solve (MatrixType &typ,
                                  const FloatComplexColumnVector& b,
                                  octave_idx_type& info, float& rcon,
                                  solve_singularity_handler sing_handler,
                                  blas_trans_type transt = blas_no_trans) const;


  FloatComplexMatrix solve (const FloatMatrix& b) const;
  FloatComplexMatrix solve (const FloatMatrix& b, octave_idx_type& info) const;
  FloatComplexMatrix solve (const FloatMatrix& b, octave_idx_type& info,
                            float& rcon) const;
  FloatComplexMatrix solve (const FloatMatrix& b, octave_idx_type& info,
                            float& rcon,
                            solve_singularity_handler sing_handler,
                            blas_trans_type transt = blas_no_trans) const;

  FloatComplexMatrix solve (const FloatComplexMatrix& b) const;
  FloatComplexMatrix solve (const FloatComplexMatrix& b,
                            octave_idx_type& info) const;
  FloatComplexMatrix solve (const FloatComplexMatrix& b, octave_idx_type& info,
                            float& rcon) const;
  FloatComplexMatrix solve (const FloatComplexMatrix& b, octave_idx_type& info,
                            float& rcon,
                            solve_singularity_handler sing_handler,
                            blas_trans_type transt = blas_no_trans) const;

  FloatComplexColumnVector solve (const FloatColumnVector& b) const;
  FloatComplexColumnVector solve (const FloatColumnVector& b,
                                  octave_idx_type& info) const;
  FloatComplexColumnVector solve (const FloatColumnVector& b,
                                  octave_idx_type& info,
                                  float& rcon) const;
  FloatComplexColumnVector solve (const FloatColumnVector& b,
                                  octave_idx_type& info, float& rcon,
                                  solve_singularity_handler sing_handler,
                                  blas_trans_type transt = blas_no_trans) const;

  FloatComplexColumnVector solve (const FloatComplexColumnVector& b) const;
  FloatComplexColumnVector solve (const FloatComplexColumnVector& b,
                                  octave_idx_type& info) const;
  FloatComplexColumnVector solve (const FloatComplexColumnVector& b,
                                  octave_idx_type& info,
                                  float& rcon) const;
  FloatComplexColumnVector solve (const FloatComplexColumnVector& b,
                                  octave_idx_type& info,
                                  float& rcon,
                                  solve_singularity_handler sing_handler,
                                  blas_trans_type transt = blas_no_trans) const;

  FloatComplexMatrix lssolve (const FloatMatrix& b) const;
  FloatComplexMatrix lssolve (const FloatMatrix& b,
                              octave_idx_type& info) const;
  FloatComplexMatrix lssolve (const FloatMatrix& b, octave_idx_type& info,
                              octave_idx_type& rank) const;
  FloatComplexMatrix lssolve (const FloatMatrix& b, octave_idx_type& info,
                              octave_idx_type& rank, float& rcon) const;

  FloatComplexMatrix lssolve (const FloatComplexMatrix& b) const;
  FloatComplexMatrix lssolve (const FloatComplexMatrix& b,
                              octave_idx_type& info) const;
  FloatComplexMatrix lssolve (const FloatComplexMatrix& b,
                              octave_idx_type& info, octave_idx_type& rank) const;
  FloatComplexMatrix lssolve (const FloatComplexMatrix& b,
                              octave_idx_type& info, octave_idx_type& rank, float& rcon) const;

  FloatComplexColumnVector lssolve (const FloatColumnVector& b) const;
  FloatComplexColumnVector lssolve (const FloatColumnVector& b,
                                    octave_idx_type& info) const;
  FloatComplexColumnVector lssolve (const FloatColumnVector& b,
                                    octave_idx_type& info,
                                    octave_idx_type& rank) const;
  FloatComplexColumnVector lssolve (const FloatColumnVector& b,
                                    octave_idx_type& info,
                                    octave_idx_type& rank, float& rcon) const;

  FloatComplexColumnVector lssolve (const FloatComplexColumnVector& b) const;
  FloatComplexColumnVector lssolve (const FloatComplexColumnVector& b,
                                    octave_idx_type& info) const;
  FloatComplexColumnVector lssolve (const FloatComplexColumnVector& b,
                                    octave_idx_type& info,
                                    octave_idx_type& rank) const;
  FloatComplexColumnVector lssolve (const FloatComplexColumnVector& b,
                                    octave_idx_type& info,
                                    octave_idx_type& rank, float& rcon) const;



  FloatComplexMatrix& operator += (const FloatDiagMatrix& a);
  FloatComplexMatrix& operator -= (const FloatDiagMatrix& a);

  FloatComplexMatrix& operator += (const FloatComplexDiagMatrix& a);
  FloatComplexMatrix& operator -= (const FloatComplexDiagMatrix& a);



  FloatComplexMatrix& operator += (const FloatMatrix& a);
  FloatComplexMatrix& operator -= (const FloatMatrix& a);



  boolMatrix operator ! (void) const;



  boolMatrix all (int dim = -1) const;
  boolMatrix any (int dim = -1) const;

  FloatComplexMatrix cumprod (int dim = -1) const;
  FloatComplexMatrix cumsum (int dim = -1) const;
  FloatComplexMatrix prod (int dim = -1) const;
  FloatComplexMatrix sum (int dim = -1) const;
  FloatComplexMatrix sumsq (int dim = -1) const;
  FloatMatrix abs (void) const;

  FloatComplexMatrix diag (octave_idx_type k = 0) const;

  FloatComplexDiagMatrix diag (octave_idx_type m, octave_idx_type n) const;

  bool row_is_real_only (octave_idx_type) const;
  bool column_is_real_only (octave_idx_type) const;

  FloatComplexColumnVector row_min (void) const;
  FloatComplexColumnVector row_max (void) const;

  FloatComplexColumnVector row_min (Array<octave_idx_type>& index) const;
  FloatComplexColumnVector row_max (Array<octave_idx_type>& index) const;

  FloatComplexRowVector column_min (void) const;
  FloatComplexRowVector column_max (void) const;

  FloatComplexRowVector column_min (Array<octave_idx_type>& index) const;
  FloatComplexRowVector column_max (Array<octave_idx_type>& index) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const FloatComplexMatrix& a);
  friend std::istream& operator >> (std::istream& is,
                                               FloatComplexMatrix& a);
};

extern FloatComplexMatrix conj (const FloatComplexMatrix& a);



extern FloatComplexMatrix
operator * (const FloatColumnVector& a, const FloatComplexRowVector& b);

extern FloatComplexMatrix
operator * (const FloatComplexColumnVector& a, const FloatRowVector& b);

extern FloatComplexMatrix
operator * (const FloatComplexColumnVector& a, const FloatComplexRowVector& b);

extern FloatComplexMatrix
Givens (const FloatComplex&, const FloatComplex&);

extern FloatComplexMatrix
Sylvester (const FloatComplexMatrix&, const FloatComplexMatrix&,
           const FloatComplexMatrix&);

extern FloatComplexMatrix
xgemm (const FloatComplexMatrix& a, const FloatComplexMatrix& b,
       blas_trans_type transa = blas_no_trans,
       blas_trans_type transb = blas_no_trans);

extern FloatComplexMatrix operator * (const FloatMatrix&,
                                                 const FloatComplexMatrix&);
extern FloatComplexMatrix operator * (const FloatComplexMatrix&,
                                                 const FloatMatrix&);
extern FloatComplexMatrix operator * (const FloatComplexMatrix&,
                                                 const FloatComplexMatrix&);

extern FloatComplexMatrix min (const FloatComplex& c,
                                          const FloatComplexMatrix& m);
extern FloatComplexMatrix min (const FloatComplexMatrix& m,
                                          const FloatComplex& c);
extern FloatComplexMatrix min (const FloatComplexMatrix& a,
                                          const FloatComplexMatrix& b);

extern FloatComplexMatrix max (const FloatComplex& c,
                                          const FloatComplexMatrix& m);
extern FloatComplexMatrix max (const FloatComplexMatrix& m,
                                          const FloatComplex& c);
extern FloatComplexMatrix max (const FloatComplexMatrix& a,
                                          const FloatComplexMatrix& b);

extern FloatComplexMatrix
linspace (const FloatComplexColumnVector& x1,
          const FloatComplexColumnVector& x2,
          octave_idx_type n);

extern boolMatrix mx_el_lt (const FloatComplexMatrix&, const FloatComplex&); extern boolMatrix mx_el_le (const FloatComplexMatrix&, const FloatComplex&); extern boolMatrix mx_el_ge (const FloatComplexMatrix&, const FloatComplex&); extern boolMatrix mx_el_gt (const FloatComplexMatrix&, const FloatComplex&); extern boolMatrix mx_el_eq (const FloatComplexMatrix&, const FloatComplex&); extern boolMatrix mx_el_ne (const FloatComplexMatrix&, const FloatComplex&);
extern boolMatrix mx_el_and (const FloatComplexMatrix&, const FloatComplex&); extern boolMatrix mx_el_or (const FloatComplexMatrix&, const FloatComplex&);

extern boolMatrix mx_el_lt (const FloatComplex&, const FloatComplexMatrix&); extern boolMatrix mx_el_le (const FloatComplex&, const FloatComplexMatrix&); extern boolMatrix mx_el_ge (const FloatComplex&, const FloatComplexMatrix&); extern boolMatrix mx_el_gt (const FloatComplex&, const FloatComplexMatrix&); extern boolMatrix mx_el_eq (const FloatComplex&, const FloatComplexMatrix&); extern boolMatrix mx_el_ne (const FloatComplex&, const FloatComplexMatrix&);
extern boolMatrix mx_el_and (const FloatComplex&, const FloatComplexMatrix&); extern boolMatrix mx_el_or (const FloatComplex&, const FloatComplexMatrix&);

extern boolMatrix mx_el_lt (const FloatComplexMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_le (const FloatComplexMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_ge (const FloatComplexMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_gt (const FloatComplexMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_eq (const FloatComplexMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_ne (const FloatComplexMatrix&, const FloatComplexMatrix&);
extern boolMatrix mx_el_and (const FloatComplexMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_or (const FloatComplexMatrix&, const FloatComplexMatrix&);

inline FloatComplexMatrix operator += (FloatComplexMatrix& x, const FloatComplex& y) { return FloatComplexMatrix (operator += (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexMatrix operator -= (FloatComplexMatrix& x, const FloatComplex& y) { return FloatComplexMatrix (operator -= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexMatrix operator *= (FloatComplexMatrix& x, const FloatComplex& y) { return FloatComplexMatrix (operator *= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexMatrix operator /= (FloatComplexMatrix& x, const FloatComplex& y) { return FloatComplexMatrix (operator /= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexMatrix operator += (FloatComplexMatrix& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (operator += (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix operator -= (FloatComplexMatrix& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (operator -= (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix product_eq (FloatComplexMatrix& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (product_eq (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix quotient_eq (FloatComplexMatrix& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (quotient_eq (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix operator + (const FloatComplexMatrix& x) { return FloatComplexMatrix (operator + (dynamic_cast<const MArray<FloatComplex>&> (x))); } inline FloatComplexMatrix operator - (const FloatComplexMatrix& x) { return FloatComplexMatrix (operator - (dynamic_cast<const MArray<FloatComplex>&> (x))); } inline FloatComplexMatrix operator + (const FloatComplexMatrix& x, const FloatComplex& y) { return FloatComplexMatrix (operator + (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexMatrix operator - (const FloatComplexMatrix& x, const FloatComplex& y) { return FloatComplexMatrix (operator - (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexMatrix operator * (const FloatComplexMatrix& x, const FloatComplex& y) { return FloatComplexMatrix (operator * (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexMatrix operator / (const FloatComplexMatrix& x, const FloatComplex& y) { return FloatComplexMatrix (operator / (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexMatrix operator + (const FloatComplex& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (operator + ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix operator - (const FloatComplex& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (operator - ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix operator * (const FloatComplex& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (operator * ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix operator / (const FloatComplex& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (operator / ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix operator + (const FloatComplexMatrix& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (operator + (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix operator - (const FloatComplexMatrix& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (operator - (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix product (const FloatComplexMatrix& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (product (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexMatrix quotient (const FloatComplexMatrix& x, const FloatComplexMatrix& y) { return FloatComplexMatrix (quotient (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); }
# 40 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dColVector.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dColVector.h"
class

ColumnVector : public MArray<double>
{
public:

  ColumnVector (void) : MArray<double> (dim_vector (0, 1)) { }

  explicit ColumnVector (octave_idx_type n)
    : MArray<double> (dim_vector (n, 1)) { }

  explicit ColumnVector (const dim_vector& dv)
    : MArray<double> (dv.as_column ()) { }

  ColumnVector (octave_idx_type n, double val)
    : MArray<double> (dim_vector (n, 1), val) { }

  ColumnVector (const ColumnVector& a) : MArray<double> (a) { }

  ColumnVector (const MArray<double>& a) : MArray<double> (a.as_column ()) { }
  ColumnVector (const Array<double>& a) : MArray<double> (a.as_column ()) { }

  ColumnVector& operator = (const ColumnVector& a)
  {
    MArray<double>::operator = (a);
    return *this;
  }

  bool operator == (const ColumnVector& a) const;
  bool operator != (const ColumnVector& a) const;



  ColumnVector& insert (const ColumnVector& a, octave_idx_type r);

  ColumnVector& fill (double val);
  ColumnVector& fill (double val, octave_idx_type r1, octave_idx_type r2);

  ColumnVector stack (const ColumnVector& a) const;

  RowVector transpose (void) const;

  friend ColumnVector real (const ComplexColumnVector& a);
  friend ColumnVector imag (const ComplexColumnVector& a);



  ColumnVector extract (octave_idx_type r1, octave_idx_type r2) const;

  ColumnVector extract_n (octave_idx_type r1, octave_idx_type n) const;



  friend ColumnVector operator * (const Matrix& a,
                                             const ColumnVector& b);



  friend ColumnVector operator * (const DiagMatrix& a,
                                             const ColumnVector& b);



  double min (void) const;
  double max (void) const;

  ColumnVector abs (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const ColumnVector& a);
  friend std::istream& operator >> (std::istream& is,
                                               ColumnVector& a);

  void resize (octave_idx_type n, const double& rfv = 0)
  {
    Array<double>::resize (dim_vector (n, 1), rfv);
  }

  void clear (octave_idx_type n)
  { Array<double>::clear (n, 1); }

};



extern ColumnVector real (const ComplexColumnVector& a);
extern ColumnVector imag (const ComplexColumnVector& a);

inline ColumnVector operator += (ColumnVector& x, const double& y) { return ColumnVector (operator += (dynamic_cast<MArray<double>&> (x), (y))); } inline ColumnVector operator -= (ColumnVector& x, const double& y) { return ColumnVector (operator -= (dynamic_cast<MArray<double>&> (x), (y))); } inline ColumnVector operator *= (ColumnVector& x, const double& y) { return ColumnVector (operator *= (dynamic_cast<MArray<double>&> (x), (y))); } inline ColumnVector operator /= (ColumnVector& x, const double& y) { return ColumnVector (operator /= (dynamic_cast<MArray<double>&> (x), (y))); } inline ColumnVector operator += (ColumnVector& x, const ColumnVector& y) { return ColumnVector (operator += (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector operator -= (ColumnVector& x, const ColumnVector& y) { return ColumnVector (operator -= (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector product_eq (ColumnVector& x, const ColumnVector& y) { return ColumnVector (product_eq (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector quotient_eq (ColumnVector& x, const ColumnVector& y) { return ColumnVector (quotient_eq (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector operator + (const ColumnVector& x) { return ColumnVector (operator + (dynamic_cast<const MArray<double>&> (x))); } inline ColumnVector operator - (const ColumnVector& x) { return ColumnVector (operator - (dynamic_cast<const MArray<double>&> (x))); } inline ColumnVector operator + (const ColumnVector& x, const double& y) { return ColumnVector (operator + (dynamic_cast<const MArray<double>&> (x), (y))); } inline ColumnVector operator - (const ColumnVector& x, const double& y) { return ColumnVector (operator - (dynamic_cast<const MArray<double>&> (x), (y))); } inline ColumnVector operator * (const ColumnVector& x, const double& y) { return ColumnVector (operator * (dynamic_cast<const MArray<double>&> (x), (y))); } inline ColumnVector operator / (const ColumnVector& x, const double& y) { return ColumnVector (operator / (dynamic_cast<const MArray<double>&> (x), (y))); } inline ColumnVector operator + (const double& x, const ColumnVector& y) { return ColumnVector (operator + ( (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector operator - (const double& x, const ColumnVector& y) { return ColumnVector (operator - ( (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector operator * (const double& x, const ColumnVector& y) { return ColumnVector (operator * ( (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector operator / (const double& x, const ColumnVector& y) { return ColumnVector (operator / ( (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector operator + (const ColumnVector& x, const ColumnVector& y) { return ColumnVector (operator + (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector operator - (const ColumnVector& x, const ColumnVector& y) { return ColumnVector (operator - (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector product (const ColumnVector& x, const ColumnVector& y) { return ColumnVector (product (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline ColumnVector quotient (const ColumnVector& x, const ColumnVector& y) { return ColumnVector (quotient (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); }
# 44 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CColVector.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CColVector.h"
class

ComplexColumnVector : public MArray<Complex>
{
  friend class ComplexMatrix;
  friend class ComplexRowVector;

public:

  ComplexColumnVector (void) : MArray<Complex> (dim_vector (0, 1)) { }

  explicit ComplexColumnVector (octave_idx_type n)
    : MArray<Complex> (dim_vector (n, 1)) { }

  explicit ComplexColumnVector (const dim_vector& dv)
    : MArray<Complex> (dv.as_column ()) { }

  ComplexColumnVector (octave_idx_type n, const Complex& val)
    : MArray<Complex> (dim_vector (n, 1), val) { }

  ComplexColumnVector (const ComplexColumnVector& a) : MArray<Complex> (a) { }

  ComplexColumnVector (const MArray<Complex>& a)
    : MArray<Complex> (a.as_column ()) { }

  ComplexColumnVector (const Array<Complex>& a)
    : MArray<Complex> (a.as_column ()) { }

  explicit ComplexColumnVector (const ColumnVector& a);

  ComplexColumnVector& operator = (const ComplexColumnVector& a)
  {
    MArray<Complex>::operator = (a);
    return *this;
  }

  bool operator == (const ComplexColumnVector& a) const;
  bool operator != (const ComplexColumnVector& a) const;



  ComplexColumnVector& insert (const ColumnVector& a, octave_idx_type r);
  ComplexColumnVector& insert (const ComplexColumnVector& a, octave_idx_type r);

  ComplexColumnVector& fill (double val);
  ComplexColumnVector& fill (const Complex& val);
  ComplexColumnVector& fill (double val,
                             octave_idx_type r1, octave_idx_type r2);
  ComplexColumnVector& fill (const Complex& val,
                             octave_idx_type r1, octave_idx_type r2);

  ComplexColumnVector stack (const ColumnVector& a) const;
  ComplexColumnVector stack (const ComplexColumnVector& a) const;

  ComplexRowVector hermitian (void) const;
  ComplexRowVector transpose (void) const;

  friend ComplexColumnVector conj (const ComplexColumnVector& a);



  ComplexColumnVector extract (octave_idx_type r1, octave_idx_type r2) const;

  ComplexColumnVector extract_n (octave_idx_type r1, octave_idx_type n) const;



  ComplexColumnVector& operator += (const ColumnVector& a);
  ComplexColumnVector& operator -= (const ColumnVector& a);



  friend ComplexColumnVector operator * (const ComplexMatrix& a,
                                                    const ColumnVector& b);

  friend ComplexColumnVector operator * (const ComplexMatrix& a,
                                                    const ComplexColumnVector& b);



  friend ComplexColumnVector operator * (const Matrix& a,
                                                    const ComplexColumnVector& b);



  friend ComplexColumnVector operator * (const DiagMatrix& a,
                                                    const ComplexColumnVector& b);

  friend ComplexColumnVector operator * (const ComplexDiagMatrix& a,
                                                    const ColumnVector& b);

  friend ComplexColumnVector operator * (const ComplexDiagMatrix& a,
                                                    const ComplexColumnVector& b);



  Complex min (void) const;
  Complex max (void) const;

  ColumnVector abs (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const ComplexColumnVector& a);
  friend std::istream& operator >> (std::istream& is,
                                               ComplexColumnVector& a);

  void resize (octave_idx_type n, const Complex& rfv = Complex (0))
  {
    Array<Complex>::resize (dim_vector (n, 1), rfv);
  }

  void clear (octave_idx_type n)
  { Array<Complex>::clear (n, 1); }

};

inline ComplexColumnVector operator += (ComplexColumnVector& x, const Complex& y) { return ComplexColumnVector (operator += (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexColumnVector operator -= (ComplexColumnVector& x, const Complex& y) { return ComplexColumnVector (operator -= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexColumnVector operator *= (ComplexColumnVector& x, const Complex& y) { return ComplexColumnVector (operator *= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexColumnVector operator /= (ComplexColumnVector& x, const Complex& y) { return ComplexColumnVector (operator /= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexColumnVector operator += (ComplexColumnVector& x, const ComplexColumnVector& y) { return ComplexColumnVector (operator += (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector operator -= (ComplexColumnVector& x, const ComplexColumnVector& y) { return ComplexColumnVector (operator -= (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector product_eq (ComplexColumnVector& x, const ComplexColumnVector& y) { return ComplexColumnVector (product_eq (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector quotient_eq (ComplexColumnVector& x, const ComplexColumnVector& y) { return ComplexColumnVector (quotient_eq (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector operator + (const ComplexColumnVector& x) { return ComplexColumnVector (operator + (dynamic_cast<const MArray<Complex>&> (x))); } inline ComplexColumnVector operator - (const ComplexColumnVector& x) { return ComplexColumnVector (operator - (dynamic_cast<const MArray<Complex>&> (x))); } inline ComplexColumnVector operator + (const ComplexColumnVector& x, const Complex& y) { return ComplexColumnVector (operator + (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexColumnVector operator - (const ComplexColumnVector& x, const Complex& y) { return ComplexColumnVector (operator - (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexColumnVector operator * (const ComplexColumnVector& x, const Complex& y) { return ComplexColumnVector (operator * (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexColumnVector operator / (const ComplexColumnVector& x, const Complex& y) { return ComplexColumnVector (operator / (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexColumnVector operator + (const Complex& x, const ComplexColumnVector& y) { return ComplexColumnVector (operator + ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector operator - (const Complex& x, const ComplexColumnVector& y) { return ComplexColumnVector (operator - ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector operator * (const Complex& x, const ComplexColumnVector& y) { return ComplexColumnVector (operator * ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector operator / (const Complex& x, const ComplexColumnVector& y) { return ComplexColumnVector (operator / ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector operator + (const ComplexColumnVector& x, const ComplexColumnVector& y) { return ComplexColumnVector (operator + (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector operator - (const ComplexColumnVector& x, const ComplexColumnVector& y) { return ComplexColumnVector (operator - (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector product (const ComplexColumnVector& x, const ComplexColumnVector& y) { return ComplexColumnVector (product (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexColumnVector quotient (const ComplexColumnVector& x, const ComplexColumnVector& y) { return ComplexColumnVector (quotient (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); }
# 45 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fColVector.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fColVector.h"
class

FloatColumnVector : public MArray<float>
{
public:

  FloatColumnVector (void) : MArray<float> (dim_vector (0, 1)) { }

  explicit FloatColumnVector (octave_idx_type n)
    : MArray<float> (dim_vector (n, 1)) { }

  explicit FloatColumnVector (const dim_vector& dv)
    : MArray<float> (dv.as_column ()) { }

  FloatColumnVector (octave_idx_type n, float val)
    : MArray<float> (dim_vector (n, 1), val) { }

  FloatColumnVector (const FloatColumnVector& a) : MArray<float> (a) { }

  FloatColumnVector (const MArray<float>& a)
    : MArray<float> (a.as_column ()) { }

  FloatColumnVector (const Array<float>& a)
    : MArray<float> (a.as_column ()) { }

  FloatColumnVector& operator = (const FloatColumnVector& a)
  {
    MArray<float>::operator = (a);
    return *this;
  }

  bool operator == (const FloatColumnVector& a) const;
  bool operator != (const FloatColumnVector& a) const;



  FloatColumnVector& insert (const FloatColumnVector& a, octave_idx_type r);

  FloatColumnVector& fill (float val);
  FloatColumnVector& fill (float val, octave_idx_type r1, octave_idx_type r2);

  FloatColumnVector stack (const FloatColumnVector& a) const;

  FloatRowVector transpose (void) const;

  friend FloatColumnVector real (const FloatComplexColumnVector& a);
  friend FloatColumnVector imag (const FloatComplexColumnVector& a);



  FloatColumnVector extract (octave_idx_type r1, octave_idx_type r2) const;

  FloatColumnVector extract_n (octave_idx_type r1, octave_idx_type n) const;



  friend FloatColumnVector operator * (const FloatMatrix& a,
                                                  const FloatColumnVector& b);



  friend FloatColumnVector operator * (const FloatDiagMatrix& a,
                                                  const FloatColumnVector& b);



  float min (void) const;
  float max (void) const;

  FloatColumnVector abs (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const FloatColumnVector& a);
  friend std::istream& operator >> (std::istream& is,
                                               FloatColumnVector& a);

  void resize (octave_idx_type n, const float& rfv = 0)
  {
    Array<float>::resize (dim_vector (n, 1), rfv);
  }

  void clear (octave_idx_type n)
  { Array<float>::clear (n, 1); }

};



extern FloatColumnVector real (const FloatComplexColumnVector& a);
extern FloatColumnVector imag (const FloatComplexColumnVector& a);

inline FloatColumnVector operator += (FloatColumnVector& x, const float& y) { return FloatColumnVector (operator += (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatColumnVector operator -= (FloatColumnVector& x, const float& y) { return FloatColumnVector (operator -= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatColumnVector operator *= (FloatColumnVector& x, const float& y) { return FloatColumnVector (operator *= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatColumnVector operator /= (FloatColumnVector& x, const float& y) { return FloatColumnVector (operator /= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatColumnVector operator += (FloatColumnVector& x, const FloatColumnVector& y) { return FloatColumnVector (operator += (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector operator -= (FloatColumnVector& x, const FloatColumnVector& y) { return FloatColumnVector (operator -= (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector product_eq (FloatColumnVector& x, const FloatColumnVector& y) { return FloatColumnVector (product_eq (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector quotient_eq (FloatColumnVector& x, const FloatColumnVector& y) { return FloatColumnVector (quotient_eq (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector operator + (const FloatColumnVector& x) { return FloatColumnVector (operator + (dynamic_cast<const MArray<float>&> (x))); } inline FloatColumnVector operator - (const FloatColumnVector& x) { return FloatColumnVector (operator - (dynamic_cast<const MArray<float>&> (x))); } inline FloatColumnVector operator + (const FloatColumnVector& x, const float& y) { return FloatColumnVector (operator + (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatColumnVector operator - (const FloatColumnVector& x, const float& y) { return FloatColumnVector (operator - (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatColumnVector operator * (const FloatColumnVector& x, const float& y) { return FloatColumnVector (operator * (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatColumnVector operator / (const FloatColumnVector& x, const float& y) { return FloatColumnVector (operator / (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatColumnVector operator + (const float& x, const FloatColumnVector& y) { return FloatColumnVector (operator + ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector operator - (const float& x, const FloatColumnVector& y) { return FloatColumnVector (operator - ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector operator * (const float& x, const FloatColumnVector& y) { return FloatColumnVector (operator * ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector operator / (const float& x, const FloatColumnVector& y) { return FloatColumnVector (operator / ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector operator + (const FloatColumnVector& x, const FloatColumnVector& y) { return FloatColumnVector (operator + (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector operator - (const FloatColumnVector& x, const FloatColumnVector& y) { return FloatColumnVector (operator - (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector product (const FloatColumnVector& x, const FloatColumnVector& y) { return FloatColumnVector (product (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatColumnVector quotient (const FloatColumnVector& x, const FloatColumnVector& y) { return FloatColumnVector (quotient (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); }
# 46 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCColVector.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCColVector.h"
class

FloatComplexColumnVector : public MArray<FloatComplex>
{
  friend class FloatComplexMatrix;
  friend class FloatComplexRowVector;

public:

  FloatComplexColumnVector (void)
    : MArray<FloatComplex> (dim_vector (0, 1)) { }

  explicit FloatComplexColumnVector (octave_idx_type n)
    : MArray<FloatComplex> (dim_vector (n, 1)) { }

  explicit FloatComplexColumnVector (const dim_vector& dv)
    : MArray<FloatComplex> (dv.as_column ()) { }

  FloatComplexColumnVector (octave_idx_type n, const FloatComplex& val)
    : MArray<FloatComplex> (dim_vector (n, 1), val) { }

  FloatComplexColumnVector (const FloatComplexColumnVector& a)
    : MArray<FloatComplex> (a) { }

  FloatComplexColumnVector (const MArray<FloatComplex>& a)
    : MArray<FloatComplex> (a.as_column ()) { }

  FloatComplexColumnVector (const Array<FloatComplex>& a)
    : MArray<FloatComplex> (a.as_column ()) { }

  explicit FloatComplexColumnVector (const FloatColumnVector& a);

  FloatComplexColumnVector& operator = (const FloatComplexColumnVector& a)
  {
    MArray<FloatComplex>::operator = (a);
    return *this;
  }

  bool operator == (const FloatComplexColumnVector& a) const;
  bool operator != (const FloatComplexColumnVector& a) const;



  FloatComplexColumnVector& insert (const FloatColumnVector& a,
                                    octave_idx_type r);
  FloatComplexColumnVector& insert (const FloatComplexColumnVector& a,
                                    octave_idx_type r);

  FloatComplexColumnVector& fill (float val);
  FloatComplexColumnVector& fill (const FloatComplex& val);
  FloatComplexColumnVector& fill (float val,
                                  octave_idx_type r1, octave_idx_type r2);
  FloatComplexColumnVector& fill (const FloatComplex& val,
                                  octave_idx_type r1, octave_idx_type r2);

  FloatComplexColumnVector stack (const FloatColumnVector& a) const;
  FloatComplexColumnVector stack (const FloatComplexColumnVector& a) const;

  FloatComplexRowVector hermitian (void) const;
  FloatComplexRowVector transpose (void) const;

  friend FloatComplexColumnVector
  conj (const FloatComplexColumnVector& a);



  FloatComplexColumnVector extract (octave_idx_type r1,
                                    octave_idx_type r2) const;

  FloatComplexColumnVector extract_n (octave_idx_type r1,
                                      octave_idx_type n) const;



  FloatComplexColumnVector& operator += (const FloatColumnVector& a);
  FloatComplexColumnVector& operator -= (const FloatColumnVector& a);



  friend FloatComplexColumnVector
  operator * (const FloatComplexMatrix& a, const FloatColumnVector& b);

  friend FloatComplexColumnVector
  operator * (const FloatComplexMatrix& a, const FloatComplexColumnVector& b);



  friend FloatComplexColumnVector
  operator * (const FloatMatrix& a, const FloatComplexColumnVector& b);



  friend FloatComplexColumnVector
  operator * (const FloatDiagMatrix& a, const FloatComplexColumnVector& b);

  friend FloatComplexColumnVector
  operator * (const FloatComplexDiagMatrix& a, const ColumnVector& b);

  friend FloatComplexColumnVector
  operator * (const FloatComplexDiagMatrix& a, const FloatComplexColumnVector& b);



  FloatComplex min (void) const;
  FloatComplex max (void) const;

  FloatColumnVector abs (void) const;



  friend std::ostream&
  operator << (std::ostream& os, const FloatComplexColumnVector& a);
  friend std::istream& operator >> (std::istream& is,
                                               FloatComplexColumnVector& a);

  void resize (octave_idx_type n, const FloatComplex& rfv = FloatComplex (0))
  {
    Array<FloatComplex>::resize (dim_vector (n, 1), rfv);
  }

  void clear (octave_idx_type n)
  { Array<FloatComplex>::clear (n, 1); }

};

inline FloatComplexColumnVector operator += (FloatComplexColumnVector& x, const FloatComplex& y) { return FloatComplexColumnVector (operator += (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexColumnVector operator -= (FloatComplexColumnVector& x, const FloatComplex& y) { return FloatComplexColumnVector (operator -= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexColumnVector operator *= (FloatComplexColumnVector& x, const FloatComplex& y) { return FloatComplexColumnVector (operator *= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexColumnVector operator /= (FloatComplexColumnVector& x, const FloatComplex& y) { return FloatComplexColumnVector (operator /= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexColumnVector operator += (FloatComplexColumnVector& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (operator += (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector operator -= (FloatComplexColumnVector& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (operator -= (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector product_eq (FloatComplexColumnVector& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (product_eq (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector quotient_eq (FloatComplexColumnVector& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (quotient_eq (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector operator + (const FloatComplexColumnVector& x) { return FloatComplexColumnVector (operator + (dynamic_cast<const MArray<FloatComplex>&> (x))); } inline FloatComplexColumnVector operator - (const FloatComplexColumnVector& x) { return FloatComplexColumnVector (operator - (dynamic_cast<const MArray<FloatComplex>&> (x))); } inline FloatComplexColumnVector operator + (const FloatComplexColumnVector& x, const FloatComplex& y) { return FloatComplexColumnVector (operator + (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexColumnVector operator - (const FloatComplexColumnVector& x, const FloatComplex& y) { return FloatComplexColumnVector (operator - (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexColumnVector operator * (const FloatComplexColumnVector& x, const FloatComplex& y) { return FloatComplexColumnVector (operator * (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexColumnVector operator / (const FloatComplexColumnVector& x, const FloatComplex& y) { return FloatComplexColumnVector (operator / (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexColumnVector operator + (const FloatComplex& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (operator + ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector operator - (const FloatComplex& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (operator - ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector operator * (const FloatComplex& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (operator * ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector operator / (const FloatComplex& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (operator / ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector operator + (const FloatComplexColumnVector& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (operator + (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector operator - (const FloatComplexColumnVector& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (operator - (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector product (const FloatComplexColumnVector& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (product (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexColumnVector quotient (const FloatComplexColumnVector& x, const FloatComplexColumnVector& y) { return FloatComplexColumnVector (quotient (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); }
# 47 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dRowVector.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dRowVector.h"
class

RowVector : public MArray<double>
{
public:

  RowVector (void) : MArray<double> (dim_vector (1, 0)) { }

  explicit RowVector (octave_idx_type n)
    : MArray<double> (dim_vector (1, n)) { }

  explicit RowVector (const dim_vector& dv) : MArray<double> (dv.as_row ()) { }

  RowVector (octave_idx_type n, double val)
    : MArray<double> (dim_vector (1, n), val) { }

  RowVector (const RowVector& a) : MArray<double> (a) { }

  RowVector (const MArray<double>& a) : MArray<double> (a.as_row ()) { }

  RowVector (const Array<double>& a) : MArray<double> (a.as_row ()) { }

  RowVector& operator = (const RowVector& a)
  {
    MArray<double>::operator = (a);
    return *this;
  }

  bool operator == (const RowVector& a) const;
  bool operator != (const RowVector& a) const;



  RowVector& insert (const RowVector& a, octave_idx_type c);

  RowVector& fill (double val);
  RowVector& fill (double val, octave_idx_type c1, octave_idx_type c2);

  RowVector append (const RowVector& a) const;

  ColumnVector transpose (void) const;

  friend RowVector real (const ComplexRowVector& a);
  friend RowVector imag (const ComplexRowVector& a);



  RowVector extract (octave_idx_type c1, octave_idx_type c2) const;

  RowVector extract_n (octave_idx_type c1, octave_idx_type n) const;



  friend RowVector operator * (const RowVector& a, const Matrix& b);



  double min (void) const;
  double max (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const RowVector& a);
  friend std::istream& operator >> (std::istream& is, RowVector& a);

  void resize (octave_idx_type n, const double& rfv = 0)
  {
    Array<double>::resize (dim_vector (1, n), rfv);
  }

  void clear (octave_idx_type n)
  { Array<double>::clear (1, n); }

};



double operator * (const RowVector& a, const ColumnVector& b);

Complex operator * (const RowVector& a,
                               const ComplexColumnVector& b);



           RowVector linspace (double x1, double x2, octave_idx_type n);

inline RowVector operator += (RowVector& x, const double& y) { return RowVector (operator += (dynamic_cast<MArray<double>&> (x), (y))); } inline RowVector operator -= (RowVector& x, const double& y) { return RowVector (operator -= (dynamic_cast<MArray<double>&> (x), (y))); } inline RowVector operator *= (RowVector& x, const double& y) { return RowVector (operator *= (dynamic_cast<MArray<double>&> (x), (y))); } inline RowVector operator /= (RowVector& x, const double& y) { return RowVector (operator /= (dynamic_cast<MArray<double>&> (x), (y))); } inline RowVector operator += (RowVector& x, const RowVector& y) { return RowVector (operator += (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector operator -= (RowVector& x, const RowVector& y) { return RowVector (operator -= (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector product_eq (RowVector& x, const RowVector& y) { return RowVector (product_eq (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector quotient_eq (RowVector& x, const RowVector& y) { return RowVector (quotient_eq (dynamic_cast<MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector operator + (const RowVector& x) { return RowVector (operator + (dynamic_cast<const MArray<double>&> (x))); } inline RowVector operator - (const RowVector& x) { return RowVector (operator - (dynamic_cast<const MArray<double>&> (x))); } inline RowVector operator + (const RowVector& x, const double& y) { return RowVector (operator + (dynamic_cast<const MArray<double>&> (x), (y))); } inline RowVector operator - (const RowVector& x, const double& y) { return RowVector (operator - (dynamic_cast<const MArray<double>&> (x), (y))); } inline RowVector operator * (const RowVector& x, const double& y) { return RowVector (operator * (dynamic_cast<const MArray<double>&> (x), (y))); } inline RowVector operator / (const RowVector& x, const double& y) { return RowVector (operator / (dynamic_cast<const MArray<double>&> (x), (y))); } inline RowVector operator + (const double& x, const RowVector& y) { return RowVector (operator + ( (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector operator - (const double& x, const RowVector& y) { return RowVector (operator - ( (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector operator * (const double& x, const RowVector& y) { return RowVector (operator * ( (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector operator / (const double& x, const RowVector& y) { return RowVector (operator / ( (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector operator + (const RowVector& x, const RowVector& y) { return RowVector (operator + (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector operator - (const RowVector& x, const RowVector& y) { return RowVector (operator - (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector product (const RowVector& x, const RowVector& y) { return RowVector (product (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); } inline RowVector quotient (const RowVector& x, const RowVector& y) { return RowVector (quotient (dynamic_cast<const MArray<double>&> (x), dynamic_cast<const MArray<double>&> (y))); }
# 51 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CRowVector.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CRowVector.h"
class

ComplexRowVector : public MArray<Complex>
{
  friend class ComplexColumnVector;

public:

  ComplexRowVector (void) : MArray<Complex> (dim_vector (1, 0)) { }

  explicit ComplexRowVector (octave_idx_type n)
    : MArray<Complex> (dim_vector (1, n)) { }

  explicit ComplexRowVector (const dim_vector& dv) : MArray<Complex> (dv) { }

  ComplexRowVector (octave_idx_type n, const Complex& val)
    : MArray<Complex> (dim_vector (1, n), val) { }

  ComplexRowVector (const ComplexRowVector& a) : MArray<Complex> (a) { }

  ComplexRowVector (const MArray<Complex>& a)
    : MArray<Complex> (a.as_row ()) { }

  ComplexRowVector (const Array<Complex>& a)
    : MArray<Complex> (a.as_row ()) { }

  explicit ComplexRowVector (const RowVector& a) : MArray<Complex> (a) { }

  ComplexRowVector& operator = (const ComplexRowVector& a)
  {
    MArray<Complex>::operator = (a);
    return *this;
  }

  bool operator == (const ComplexRowVector& a) const;
  bool operator != (const ComplexRowVector& a) const;



  ComplexRowVector& insert (const RowVector& a, octave_idx_type c);
  ComplexRowVector& insert (const ComplexRowVector& a, octave_idx_type c);

  ComplexRowVector& fill (double val);
  ComplexRowVector& fill (const Complex& val);
  ComplexRowVector& fill (double val, octave_idx_type c1, octave_idx_type c2);
  ComplexRowVector& fill (const Complex& val,
                          octave_idx_type c1, octave_idx_type c2);

  ComplexRowVector append (const RowVector& a) const;
  ComplexRowVector append (const ComplexRowVector& a) const;

  ComplexColumnVector hermitian (void) const;
  ComplexColumnVector transpose (void) const;

  friend ComplexRowVector conj (const ComplexRowVector& a);



  ComplexRowVector extract (octave_idx_type c1, octave_idx_type c2) const;

  ComplexRowVector extract_n (octave_idx_type c1, octave_idx_type n) const;



  ComplexRowVector& operator += (const RowVector& a);
  ComplexRowVector& operator -= (const RowVector& a);



  friend ComplexRowVector operator * (const ComplexRowVector& a,
                                      const ComplexMatrix& b);

  friend ComplexRowVector operator * (const RowVector& a,
                                      const ComplexMatrix& b);



  Complex min (void) const;
  Complex max (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                    const ComplexRowVector& a);
  friend std::istream& operator >> (std::istream& is, ComplexRowVector& a);

  void resize (octave_idx_type n, const Complex& rfv = Complex (0))
  {
    Array<Complex>::resize (dim_vector (1, n), rfv);
  }

  void clear (octave_idx_type n)
  { Array<Complex>::clear (1, n); }

};



Complex operator * (const ComplexRowVector& a,
                               const ColumnVector& b);

Complex operator * (const ComplexRowVector& a,
                               const ComplexColumnVector& b);



           ComplexRowVector linspace (const Complex& x1, const Complex& x2,
                                      octave_idx_type n);

inline ComplexRowVector operator += (ComplexRowVector& x, const Complex& y) { return ComplexRowVector (operator += (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexRowVector operator -= (ComplexRowVector& x, const Complex& y) { return ComplexRowVector (operator -= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexRowVector operator *= (ComplexRowVector& x, const Complex& y) { return ComplexRowVector (operator *= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexRowVector operator /= (ComplexRowVector& x, const Complex& y) { return ComplexRowVector (operator /= (dynamic_cast<MArray<Complex>&> (x), (y))); } inline ComplexRowVector operator += (ComplexRowVector& x, const ComplexRowVector& y) { return ComplexRowVector (operator += (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector operator -= (ComplexRowVector& x, const ComplexRowVector& y) { return ComplexRowVector (operator -= (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector product_eq (ComplexRowVector& x, const ComplexRowVector& y) { return ComplexRowVector (product_eq (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector quotient_eq (ComplexRowVector& x, const ComplexRowVector& y) { return ComplexRowVector (quotient_eq (dynamic_cast<MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector operator + (const ComplexRowVector& x) { return ComplexRowVector (operator + (dynamic_cast<const MArray<Complex>&> (x))); } inline ComplexRowVector operator - (const ComplexRowVector& x) { return ComplexRowVector (operator - (dynamic_cast<const MArray<Complex>&> (x))); } inline ComplexRowVector operator + (const ComplexRowVector& x, const Complex& y) { return ComplexRowVector (operator + (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexRowVector operator - (const ComplexRowVector& x, const Complex& y) { return ComplexRowVector (operator - (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexRowVector operator * (const ComplexRowVector& x, const Complex& y) { return ComplexRowVector (operator * (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexRowVector operator / (const ComplexRowVector& x, const Complex& y) { return ComplexRowVector (operator / (dynamic_cast<const MArray<Complex>&> (x), (y))); } inline ComplexRowVector operator + (const Complex& x, const ComplexRowVector& y) { return ComplexRowVector (operator + ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector operator - (const Complex& x, const ComplexRowVector& y) { return ComplexRowVector (operator - ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector operator * (const Complex& x, const ComplexRowVector& y) { return ComplexRowVector (operator * ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector operator / (const Complex& x, const ComplexRowVector& y) { return ComplexRowVector (operator / ( (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector operator + (const ComplexRowVector& x, const ComplexRowVector& y) { return ComplexRowVector (operator + (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector operator - (const ComplexRowVector& x, const ComplexRowVector& y) { return ComplexRowVector (operator - (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector product (const ComplexRowVector& x, const ComplexRowVector& y) { return ComplexRowVector (product (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); } inline ComplexRowVector quotient (const ComplexRowVector& x, const ComplexRowVector& y) { return ComplexRowVector (quotient (dynamic_cast<const MArray<Complex>&> (x), dynamic_cast<const MArray<Complex>&> (y))); }
# 52 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fRowVector.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fRowVector.h"
class

FloatRowVector : public MArray<float>
{
public:

  FloatRowVector (void) : MArray<float> (dim_vector (1, 0)) { }

  explicit FloatRowVector (octave_idx_type n)
    : MArray<float> (dim_vector (1, n)) { }

  explicit FloatRowVector (const dim_vector& dv)
    : MArray<float> (dv.as_row ()) { }

  FloatRowVector (octave_idx_type n, float val)
    : MArray<float> (dim_vector (1, n), val) { }

  FloatRowVector (const FloatRowVector& a) : MArray<float> (a) { }

  FloatRowVector (const MArray<float>& a) : MArray<float> (a.as_row ()) { }

  FloatRowVector (const Array<float>& a) : MArray<float> (a.as_row ()) { }

  FloatRowVector& operator = (const FloatRowVector& a)
  {
    MArray<float>::operator = (a);
    return *this;
  }

  bool operator == (const FloatRowVector& a) const;
  bool operator != (const FloatRowVector& a) const;



  FloatRowVector& insert (const FloatRowVector& a, octave_idx_type c);

  FloatRowVector& fill (float val);
  FloatRowVector& fill (float val, octave_idx_type c1, octave_idx_type c2);

  FloatRowVector append (const FloatRowVector& a) const;

  FloatColumnVector transpose (void) const;

  friend FloatRowVector real (const FloatComplexRowVector& a);
  friend FloatRowVector imag (const FloatComplexRowVector& a);



  FloatRowVector extract (octave_idx_type c1, octave_idx_type c2) const;

  FloatRowVector extract_n (octave_idx_type c1, octave_idx_type n) const;



  friend FloatRowVector operator * (const FloatRowVector& a,
                                               const FloatMatrix& b);



  float min (void) const;
  float max (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const FloatRowVector& a);
  friend std::istream& operator >> (std::istream& is,
                                               FloatRowVector& a);

  void resize (octave_idx_type n, const float& rfv = 0)
  {
    Array<float>::resize (dim_vector (1, n), rfv);
  }

  void clear (octave_idx_type n)
  { Array<float>::clear (1, n); }

};



float operator * (const FloatRowVector& a,
                             const FloatColumnVector& b);

Complex operator * (const FloatRowVector& a,
                               const ComplexColumnVector& b);



           FloatRowVector linspace (float x1, float x2, octave_idx_type n);

inline FloatRowVector operator += (FloatRowVector& x, const float& y) { return FloatRowVector (operator += (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatRowVector operator -= (FloatRowVector& x, const float& y) { return FloatRowVector (operator -= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatRowVector operator *= (FloatRowVector& x, const float& y) { return FloatRowVector (operator *= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatRowVector operator /= (FloatRowVector& x, const float& y) { return FloatRowVector (operator /= (dynamic_cast<MArray<float>&> (x), (y))); } inline FloatRowVector operator += (FloatRowVector& x, const FloatRowVector& y) { return FloatRowVector (operator += (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector operator -= (FloatRowVector& x, const FloatRowVector& y) { return FloatRowVector (operator -= (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector product_eq (FloatRowVector& x, const FloatRowVector& y) { return FloatRowVector (product_eq (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector quotient_eq (FloatRowVector& x, const FloatRowVector& y) { return FloatRowVector (quotient_eq (dynamic_cast<MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector operator + (const FloatRowVector& x) { return FloatRowVector (operator + (dynamic_cast<const MArray<float>&> (x))); } inline FloatRowVector operator - (const FloatRowVector& x) { return FloatRowVector (operator - (dynamic_cast<const MArray<float>&> (x))); } inline FloatRowVector operator + (const FloatRowVector& x, const float& y) { return FloatRowVector (operator + (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatRowVector operator - (const FloatRowVector& x, const float& y) { return FloatRowVector (operator - (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatRowVector operator * (const FloatRowVector& x, const float& y) { return FloatRowVector (operator * (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatRowVector operator / (const FloatRowVector& x, const float& y) { return FloatRowVector (operator / (dynamic_cast<const MArray<float>&> (x), (y))); } inline FloatRowVector operator + (const float& x, const FloatRowVector& y) { return FloatRowVector (operator + ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector operator - (const float& x, const FloatRowVector& y) { return FloatRowVector (operator - ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector operator * (const float& x, const FloatRowVector& y) { return FloatRowVector (operator * ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector operator / (const float& x, const FloatRowVector& y) { return FloatRowVector (operator / ( (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector operator + (const FloatRowVector& x, const FloatRowVector& y) { return FloatRowVector (operator + (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector operator - (const FloatRowVector& x, const FloatRowVector& y) { return FloatRowVector (operator - (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector product (const FloatRowVector& x, const FloatRowVector& y) { return FloatRowVector (product (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); } inline FloatRowVector quotient (const FloatRowVector& x, const FloatRowVector& y) { return FloatRowVector (quotient (dynamic_cast<const MArray<float>&> (x), dynamic_cast<const MArray<float>&> (y))); }
# 53 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCRowVector.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCRowVector.h"
class

FloatComplexRowVector : public MArray<FloatComplex>
{
  friend class FloatComplexColumnVector;

public:

  FloatComplexRowVector (void)
    : MArray<FloatComplex> (dim_vector (1, 0)) { }

  explicit FloatComplexRowVector (octave_idx_type n)
    : MArray<FloatComplex> (dim_vector (1, n)) { }

  explicit FloatComplexRowVector (const dim_vector& dv)
    : MArray<FloatComplex> (dv.as_row ()) { }

  FloatComplexRowVector (octave_idx_type n, const FloatComplex& val)
    : MArray<FloatComplex> (dim_vector (1, n), val) { }

  FloatComplexRowVector (const FloatComplexRowVector& a)
    : MArray<FloatComplex> (a) { }

  FloatComplexRowVector (const MArray<FloatComplex>& a)
    : MArray<FloatComplex> (a.as_row ()) { }

  FloatComplexRowVector (const Array<FloatComplex>& a)
    : MArray<FloatComplex> (a.as_row ()) { }

  explicit FloatComplexRowVector (const FloatRowVector& a)
    : MArray<FloatComplex> (a) { }

  FloatComplexRowVector& operator = (const FloatComplexRowVector& a)
  {
    MArray<FloatComplex>::operator = (a);
    return *this;
  }

  bool operator == (const FloatComplexRowVector& a) const;
  bool operator != (const FloatComplexRowVector& a) const;



  FloatComplexRowVector& insert (const FloatRowVector& a, octave_idx_type c);
  FloatComplexRowVector& insert (const FloatComplexRowVector& a,
                                 octave_idx_type c);

  FloatComplexRowVector& fill (float val);
  FloatComplexRowVector& fill (const FloatComplex& val);
  FloatComplexRowVector& fill (float val,
                               octave_idx_type c1, octave_idx_type c2);
  FloatComplexRowVector& fill (const FloatComplex& val,
                               octave_idx_type c1, octave_idx_type c2);

  FloatComplexRowVector append (const FloatRowVector& a) const;
  FloatComplexRowVector append (const FloatComplexRowVector& a) const;

  FloatComplexColumnVector hermitian (void) const;
  FloatComplexColumnVector transpose (void) const;

  friend FloatComplexRowVector conj (const FloatComplexRowVector& a);



  FloatComplexRowVector extract (octave_idx_type c1, octave_idx_type c2) const;

  FloatComplexRowVector extract_n (octave_idx_type c1, octave_idx_type n) const;



  FloatComplexRowVector& operator += (const FloatRowVector& a);
  FloatComplexRowVector& operator -= (const FloatRowVector& a);



  friend FloatComplexRowVector operator * (const FloatComplexRowVector& a,
      const FloatComplexMatrix& b);

  friend FloatComplexRowVector operator * (const FloatRowVector& a,
      const FloatComplexMatrix& b);



  FloatComplex min (void) const;
  FloatComplex max (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                    const FloatComplexRowVector& a);
  friend std::istream& operator >> (std::istream& is,
                                    FloatComplexRowVector& a);

  void resize (octave_idx_type n, const FloatComplex& rfv = FloatComplex (0))
  {
    Array<FloatComplex>::resize (dim_vector (1, n), rfv);
  }

  void clear (octave_idx_type n)
  { Array<FloatComplex>::clear (1, n); }

};



FloatComplex operator * (const FloatComplexRowVector& a,
                                    const ColumnVector& b);

FloatComplex operator * (const FloatComplexRowVector& a,
                                    const FloatComplexColumnVector& b);



           FloatComplexRowVector linspace (const FloatComplex& x1,
    const FloatComplex& x2, octave_idx_type n);

inline FloatComplexRowVector operator += (FloatComplexRowVector& x, const FloatComplex& y) { return FloatComplexRowVector (operator += (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexRowVector operator -= (FloatComplexRowVector& x, const FloatComplex& y) { return FloatComplexRowVector (operator -= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexRowVector operator *= (FloatComplexRowVector& x, const FloatComplex& y) { return FloatComplexRowVector (operator *= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexRowVector operator /= (FloatComplexRowVector& x, const FloatComplex& y) { return FloatComplexRowVector (operator /= (dynamic_cast<MArray<FloatComplex>&> (x), (y))); } inline FloatComplexRowVector operator += (FloatComplexRowVector& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (operator += (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector operator -= (FloatComplexRowVector& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (operator -= (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector product_eq (FloatComplexRowVector& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (product_eq (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector quotient_eq (FloatComplexRowVector& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (quotient_eq (dynamic_cast<MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector operator + (const FloatComplexRowVector& x) { return FloatComplexRowVector (operator + (dynamic_cast<const MArray<FloatComplex>&> (x))); } inline FloatComplexRowVector operator - (const FloatComplexRowVector& x) { return FloatComplexRowVector (operator - (dynamic_cast<const MArray<FloatComplex>&> (x))); } inline FloatComplexRowVector operator + (const FloatComplexRowVector& x, const FloatComplex& y) { return FloatComplexRowVector (operator + (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexRowVector operator - (const FloatComplexRowVector& x, const FloatComplex& y) { return FloatComplexRowVector (operator - (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexRowVector operator * (const FloatComplexRowVector& x, const FloatComplex& y) { return FloatComplexRowVector (operator * (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexRowVector operator / (const FloatComplexRowVector& x, const FloatComplex& y) { return FloatComplexRowVector (operator / (dynamic_cast<const MArray<FloatComplex>&> (x), (y))); } inline FloatComplexRowVector operator + (const FloatComplex& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (operator + ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector operator - (const FloatComplex& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (operator - ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector operator * (const FloatComplex& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (operator * ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector operator / (const FloatComplex& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (operator / ( (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector operator + (const FloatComplexRowVector& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (operator + (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector operator - (const FloatComplexRowVector& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (operator - (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector product (const FloatComplexRowVector& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (product (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); } inline FloatComplexRowVector quotient (const FloatComplexRowVector& x, const FloatComplexRowVector& y) { return FloatComplexRowVector (quotient (dynamic_cast<const MArray<FloatComplex>&> (x), dynamic_cast<const MArray<FloatComplex>&> (y))); }
# 54 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dDiagMatrix.h" 1
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dDiagMatrix.h"
class

DiagMatrix : public MDiagArray2<double>
{
public:

  DiagMatrix (void) : MDiagArray2<double> () { }

  DiagMatrix (octave_idx_type r, octave_idx_type c)
    : MDiagArray2<double> (r, c) { }

  DiagMatrix (octave_idx_type r, octave_idx_type c, double val)
    : MDiagArray2<double> (r, c, val) { }

  DiagMatrix (const DiagMatrix& a) : MDiagArray2<double> (a) { }

  DiagMatrix (const MDiagArray2<double>& a) : MDiagArray2<double> (a) { }

  template <typename U>
  DiagMatrix (const DiagArray2<U>& a) : MDiagArray2<double> (a) { }

  explicit DiagMatrix (const Array<double>& a) : MDiagArray2<double> (a) { }

  DiagMatrix (const Array<double>& a, octave_idx_type r, octave_idx_type c)
    : MDiagArray2<double> (a, r, c) { }

  DiagMatrix& operator = (const DiagMatrix& a)
  {
    MDiagArray2<double>::operator = (a);
    return *this;
  }

  bool operator == (const DiagMatrix& a) const;
  bool operator != (const DiagMatrix& a) const;

  DiagMatrix& fill (double val);
  DiagMatrix& fill (double val, octave_idx_type beg, octave_idx_type end);
  DiagMatrix& fill (const ColumnVector& a);
  DiagMatrix& fill (const RowVector& a);
  DiagMatrix& fill (const ColumnVector& a, octave_idx_type beg);
  DiagMatrix& fill (const RowVector& a, octave_idx_type beg);

  DiagMatrix transpose (void) const
  { return MDiagArray2<double>::transpose (); }
  DiagMatrix abs (void) const;

  friend DiagMatrix real (const ComplexDiagMatrix& a);
  friend DiagMatrix imag (const ComplexDiagMatrix& a);



  Matrix extract (octave_idx_type r1, octave_idx_type c1,
                  octave_idx_type r2, octave_idx_type c2) const;



  RowVector row (octave_idx_type i) const;
  RowVector row (char *s) const;

  ColumnVector column (octave_idx_type i) const;
  ColumnVector column (char *s) const;

  DiagMatrix inverse (void) const;
  DiagMatrix inverse (octave_idx_type& info) const;
  DiagMatrix pseudo_inverse (double tol = 0.0) const;



  ColumnVector extract_diag (octave_idx_type k = 0) const
  { return MDiagArray2<double>::extract_diag (k); }

  DET determinant (void) const;
  double rcond (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const DiagMatrix& a);

};

           DiagMatrix real (const ComplexDiagMatrix& a);
           DiagMatrix imag (const ComplexDiagMatrix& a);



           DiagMatrix
operator * (const DiagMatrix& a, const DiagMatrix& b);

inline DiagMatrix operator + (const DiagMatrix& x) { return DiagMatrix (operator + (dynamic_cast<const MDiagArray2<double>&> (x))); } inline DiagMatrix operator - (const DiagMatrix& x) { return DiagMatrix (operator - (dynamic_cast<const MDiagArray2<double>&> (x))); } inline DiagMatrix operator * (const DiagMatrix& x, const double& y) { return DiagMatrix (operator * (dynamic_cast<const MDiagArray2<double>&> (x), (y))); } inline DiagMatrix operator / (const DiagMatrix& x, const double& y) { return DiagMatrix (operator / (dynamic_cast<const MDiagArray2<double>&> (x), (y))); } inline DiagMatrix operator * (const double& x, const DiagMatrix& y) { return DiagMatrix (operator * ( (x), dynamic_cast<const MDiagArray2<double>&> (y))); } inline DiagMatrix operator + (const DiagMatrix& x, const DiagMatrix& y) { return DiagMatrix (operator + (dynamic_cast<const MDiagArray2<double>&> (x), dynamic_cast<const MDiagArray2<double>&> (y))); } inline DiagMatrix operator - (const DiagMatrix& x, const DiagMatrix& y) { return DiagMatrix (operator - (dynamic_cast<const MDiagArray2<double>&> (x), dynamic_cast<const MDiagArray2<double>&> (y))); } inline DiagMatrix product (const DiagMatrix& x, const DiagMatrix& y) { return DiagMatrix (product (dynamic_cast<const MDiagArray2<double>&> (x), dynamic_cast<const MDiagArray2<double>&> (y))); }
# 58 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CDiagMatrix.h" 1
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CDiagMatrix.h"
class

ComplexDiagMatrix : public MDiagArray2<Complex>
{
public:

  ComplexDiagMatrix (void) : MDiagArray2<Complex> () { }

  ComplexDiagMatrix (octave_idx_type r, octave_idx_type c)
    : MDiagArray2<Complex> (r, c) { }

  ComplexDiagMatrix (octave_idx_type r, octave_idx_type c, const Complex& val)
    : MDiagArray2<Complex> (r, c, val) { }

  explicit ComplexDiagMatrix (const Array<Complex>& a)
    : MDiagArray2<Complex> (a) { }

  explicit ComplexDiagMatrix (const Array<double>& a)
    : MDiagArray2<Complex> (Array<Complex> (a)) { }

  ComplexDiagMatrix (const Array<Complex>& a, octave_idx_type r,
                     octave_idx_type c)
    : MDiagArray2<Complex> (a, r, c) { }

  explicit ComplexDiagMatrix (const DiagMatrix& a);

  ComplexDiagMatrix (const MDiagArray2<Complex>& a)
    : MDiagArray2<Complex> (a) { }

  ComplexDiagMatrix (const ComplexDiagMatrix& a)
    : MDiagArray2<Complex> (a) { }

  template <typename U>
  ComplexDiagMatrix (const DiagArray2<U>& a)
    : MDiagArray2<Complex> (a) { }

  ComplexDiagMatrix& operator = (const ComplexDiagMatrix& a)
  {
    MDiagArray2<Complex>::operator = (a);
    return *this;
  }

  bool operator == (const ComplexDiagMatrix& a) const;
  bool operator != (const ComplexDiagMatrix& a) const;

  ComplexDiagMatrix& fill (double val);
  ComplexDiagMatrix& fill (const Complex& val);
  ComplexDiagMatrix& fill (double val,
                           octave_idx_type beg, octave_idx_type end);
  ComplexDiagMatrix& fill (const Complex& val,
                           octave_idx_type beg, octave_idx_type end);
  ComplexDiagMatrix& fill (const ColumnVector& a);
  ComplexDiagMatrix& fill (const ComplexColumnVector& a);
  ComplexDiagMatrix& fill (const RowVector& a);
  ComplexDiagMatrix& fill (const ComplexRowVector& a);
  ComplexDiagMatrix& fill (const ColumnVector& a, octave_idx_type beg);
  ComplexDiagMatrix& fill (const ComplexColumnVector& a, octave_idx_type beg);
  ComplexDiagMatrix& fill (const RowVector& a, octave_idx_type beg);
  ComplexDiagMatrix& fill (const ComplexRowVector& a, octave_idx_type beg);

  ComplexDiagMatrix hermitian (void) const
  { return MDiagArray2<Complex>::hermitian (std::conj); }
  ComplexDiagMatrix transpose (void) const
  { return MDiagArray2<Complex>::transpose (); }
  DiagMatrix abs (void) const;

  friend ComplexDiagMatrix conj (const ComplexDiagMatrix& a);



  ComplexMatrix extract (octave_idx_type r1, octave_idx_type c1,
                         octave_idx_type r2, octave_idx_type c2) const;



  ComplexRowVector row (octave_idx_type i) const;
  ComplexRowVector row (char *s) const;

  ComplexColumnVector column (octave_idx_type i) const;
  ComplexColumnVector column (char *s) const;

  ComplexDiagMatrix inverse (octave_idx_type& info) const;
  ComplexDiagMatrix inverse (void) const;
  ComplexDiagMatrix pseudo_inverse (double tol = 0.0) const;

  bool all_elements_are_real (void) const;



  ComplexDiagMatrix& operator += (const DiagMatrix& a);
  ComplexDiagMatrix& operator -= (const DiagMatrix& a);



  ComplexColumnVector extract_diag (octave_idx_type k = 0) const
  { return MDiagArray2<Complex>::extract_diag (k); }

  ComplexDET determinant (void) const;
  double rcond (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                    const ComplexDiagMatrix& a);

};

           ComplexDiagMatrix conj (const ComplexDiagMatrix& a);



           ComplexDiagMatrix
operator * (const ComplexDiagMatrix& a, const ComplexDiagMatrix& b);

           ComplexDiagMatrix
operator * (const ComplexDiagMatrix& a, const DiagMatrix& b);

           ComplexDiagMatrix
operator * (const DiagMatrix& a, const ComplexDiagMatrix& b);

inline ComplexDiagMatrix operator + (const ComplexDiagMatrix& x) { return ComplexDiagMatrix (operator + (dynamic_cast<const MDiagArray2<Complex>&> (x))); } inline ComplexDiagMatrix operator - (const ComplexDiagMatrix& x) { return ComplexDiagMatrix (operator - (dynamic_cast<const MDiagArray2<Complex>&> (x))); } inline ComplexDiagMatrix operator * (const ComplexDiagMatrix& x, const Complex& y) { return ComplexDiagMatrix (operator * (dynamic_cast<const MDiagArray2<Complex>&> (x), (y))); } inline ComplexDiagMatrix operator / (const ComplexDiagMatrix& x, const Complex& y) { return ComplexDiagMatrix (operator / (dynamic_cast<const MDiagArray2<Complex>&> (x), (y))); } inline ComplexDiagMatrix operator * (const Complex& x, const ComplexDiagMatrix& y) { return ComplexDiagMatrix (operator * ( (x), dynamic_cast<const MDiagArray2<Complex>&> (y))); } inline ComplexDiagMatrix operator + (const ComplexDiagMatrix& x, const ComplexDiagMatrix& y) { return ComplexDiagMatrix (operator + (dynamic_cast<const MDiagArray2<Complex>&> (x), dynamic_cast<const MDiagArray2<Complex>&> (y))); } inline ComplexDiagMatrix operator - (const ComplexDiagMatrix& x, const ComplexDiagMatrix& y) { return ComplexDiagMatrix (operator - (dynamic_cast<const MDiagArray2<Complex>&> (x), dynamic_cast<const MDiagArray2<Complex>&> (y))); } inline ComplexDiagMatrix product (const ComplexDiagMatrix& x, const ComplexDiagMatrix& y) { return ComplexDiagMatrix (product (dynamic_cast<const MDiagArray2<Complex>&> (x), dynamic_cast<const MDiagArray2<Complex>&> (y))); }
# 59 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fDiagMatrix.h" 1
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fDiagMatrix.h"
class

FloatDiagMatrix : public MDiagArray2<float>
{
public:

  FloatDiagMatrix (void) : MDiagArray2<float> () { }

  FloatDiagMatrix (octave_idx_type r, octave_idx_type c)
    : MDiagArray2<float> (r, c) { }

  FloatDiagMatrix (octave_idx_type r, octave_idx_type c, float val)
    : MDiagArray2<float> (r, c, val) { }

  FloatDiagMatrix (const FloatDiagMatrix& a) : MDiagArray2<float> (a) { }

  FloatDiagMatrix (const MDiagArray2<float>& a) : MDiagArray2<float> (a) { }

  template <typename U>
  FloatDiagMatrix (const DiagArray2<U>& a) : MDiagArray2<float> (a) { }

  explicit FloatDiagMatrix (const Array<double>& a) : MDiagArray2<float> (a) { }

  FloatDiagMatrix (const Array<float>& a, octave_idx_type r, octave_idx_type c)
    : MDiagArray2<float> (a, r, c) { }

  FloatDiagMatrix& operator = (const FloatDiagMatrix& a)
  {
    MDiagArray2<float>::operator = (a);
    return *this;
  }

  bool operator == (const FloatDiagMatrix& a) const;
  bool operator != (const FloatDiagMatrix& a) const;

  FloatDiagMatrix& fill (float val);
  FloatDiagMatrix& fill (float val, octave_idx_type beg, octave_idx_type end);
  FloatDiagMatrix& fill (const FloatColumnVector& a);
  FloatDiagMatrix& fill (const FloatRowVector& a);
  FloatDiagMatrix& fill (const FloatColumnVector& a, octave_idx_type beg);
  FloatDiagMatrix& fill (const FloatRowVector& a, octave_idx_type beg);

  FloatDiagMatrix transpose (void) const
  { return MDiagArray2<float>::transpose (); }

  FloatDiagMatrix abs (void) const;

  friend FloatDiagMatrix real (const FloatComplexDiagMatrix& a);
  friend FloatDiagMatrix imag (const FloatComplexDiagMatrix& a);



  FloatMatrix extract (octave_idx_type r1, octave_idx_type c1,
                       octave_idx_type r2, octave_idx_type c2) const;



  FloatRowVector row (octave_idx_type i) const;
  FloatRowVector row (char *s) const;

  FloatColumnVector column (octave_idx_type i) const;
  FloatColumnVector column (char *s) const;

  FloatDiagMatrix inverse (void) const;
  FloatDiagMatrix inverse (octave_idx_type& info) const;
  FloatDiagMatrix pseudo_inverse (float tol = 0.0f) const;



  FloatColumnVector extract_diag (octave_idx_type k = 0) const
  { return MDiagArray2<float>::extract_diag (k); }

  FloatDET determinant (void) const;
  float rcond (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const FloatDiagMatrix& a);

};

           FloatDiagMatrix real (const FloatComplexDiagMatrix& a);
           FloatDiagMatrix imag (const FloatComplexDiagMatrix& a);



           FloatDiagMatrix operator * (const FloatDiagMatrix& a,
                                       const FloatDiagMatrix& b);

inline FloatDiagMatrix operator + (const FloatDiagMatrix& x) { return FloatDiagMatrix (operator + (dynamic_cast<const MDiagArray2<float>&> (x))); } inline FloatDiagMatrix operator - (const FloatDiagMatrix& x) { return FloatDiagMatrix (operator - (dynamic_cast<const MDiagArray2<float>&> (x))); } inline FloatDiagMatrix operator * (const FloatDiagMatrix& x, const float& y) { return FloatDiagMatrix (operator * (dynamic_cast<const MDiagArray2<float>&> (x), (y))); } inline FloatDiagMatrix operator / (const FloatDiagMatrix& x, const float& y) { return FloatDiagMatrix (operator / (dynamic_cast<const MDiagArray2<float>&> (x), (y))); } inline FloatDiagMatrix operator * (const float& x, const FloatDiagMatrix& y) { return FloatDiagMatrix (operator * ( (x), dynamic_cast<const MDiagArray2<float>&> (y))); } inline FloatDiagMatrix operator + (const FloatDiagMatrix& x, const FloatDiagMatrix& y) { return FloatDiagMatrix (operator + (dynamic_cast<const MDiagArray2<float>&> (x), dynamic_cast<const MDiagArray2<float>&> (y))); } inline FloatDiagMatrix operator - (const FloatDiagMatrix& x, const FloatDiagMatrix& y) { return FloatDiagMatrix (operator - (dynamic_cast<const MDiagArray2<float>&> (x), dynamic_cast<const MDiagArray2<float>&> (y))); } inline FloatDiagMatrix product (const FloatDiagMatrix& x, const FloatDiagMatrix& y) { return FloatDiagMatrix (product (dynamic_cast<const MDiagArray2<float>&> (x), dynamic_cast<const MDiagArray2<float>&> (y))); }
# 60 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCDiagMatrix.h" 1
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/fCDiagMatrix.h"
class

FloatComplexDiagMatrix : public MDiagArray2<FloatComplex>
{
public:

  FloatComplexDiagMatrix (void) : MDiagArray2<FloatComplex> () { }

  FloatComplexDiagMatrix (octave_idx_type r,
                          octave_idx_type c)
    : MDiagArray2<FloatComplex> (r, c) { }

  FloatComplexDiagMatrix (octave_idx_type r, octave_idx_type c,
                          const FloatComplex& val)
    : MDiagArray2<FloatComplex> (r, c, val) { }

  explicit FloatComplexDiagMatrix (const Array<FloatComplex>& a)
    : MDiagArray2<FloatComplex> (a) { }

  FloatComplexDiagMatrix (const Array<FloatComplex>& a, octave_idx_type r,
                          octave_idx_type c)
    : MDiagArray2<FloatComplex> (a, r, c) { }

  explicit FloatComplexDiagMatrix (const Array<float>& a)
    : MDiagArray2<FloatComplex> (Array<FloatComplex> (a)) { }

  explicit FloatComplexDiagMatrix (const FloatDiagMatrix& a);

  FloatComplexDiagMatrix (const MDiagArray2<FloatComplex>& a)
    : MDiagArray2<FloatComplex> (a) { }

  FloatComplexDiagMatrix (const FloatComplexDiagMatrix& a)
    : MDiagArray2<FloatComplex> (a) { }

  template <typename U>
  FloatComplexDiagMatrix (const DiagArray2<U>& a)
    : MDiagArray2<FloatComplex> (a) { }

  FloatComplexDiagMatrix& operator = (const FloatComplexDiagMatrix& a)
  {
    MDiagArray2<FloatComplex>::operator = (a);
    return *this;
  }

  bool operator == (const FloatComplexDiagMatrix& a) const;
  bool operator != (const FloatComplexDiagMatrix& a) const;

  FloatComplexDiagMatrix& fill (float val);
  FloatComplexDiagMatrix& fill (const FloatComplex& val);
  FloatComplexDiagMatrix& fill (float val,
                                octave_idx_type beg, octave_idx_type end);
  FloatComplexDiagMatrix& fill (const FloatComplex& val,
                                octave_idx_type beg, octave_idx_type end);
  FloatComplexDiagMatrix& fill (const FloatColumnVector& a);
  FloatComplexDiagMatrix& fill (const FloatComplexColumnVector& a);
  FloatComplexDiagMatrix& fill (const FloatRowVector& a);
  FloatComplexDiagMatrix& fill (const FloatComplexRowVector& a);
  FloatComplexDiagMatrix& fill (const FloatColumnVector& a,
                                octave_idx_type beg);
  FloatComplexDiagMatrix& fill (const FloatComplexColumnVector& a,
                                octave_idx_type beg);
  FloatComplexDiagMatrix& fill (const FloatRowVector& a, octave_idx_type beg);
  FloatComplexDiagMatrix& fill (const FloatComplexRowVector& a,
                                octave_idx_type beg);

  FloatComplexDiagMatrix hermitian (void) const
  { return MDiagArray2<FloatComplex>::hermitian (std::conj); }
  FloatComplexDiagMatrix transpose (void) const
  { return MDiagArray2<FloatComplex>::transpose (); }
  FloatDiagMatrix abs (void) const;

  friend FloatComplexDiagMatrix
  conj (const FloatComplexDiagMatrix& a);



  FloatComplexMatrix extract (octave_idx_type r1, octave_idx_type c1,
                              octave_idx_type r2, octave_idx_type c2) const;



  FloatComplexRowVector row (octave_idx_type i) const;
  FloatComplexRowVector row (char *s) const;

  FloatComplexColumnVector column (octave_idx_type i) const;
  FloatComplexColumnVector column (char *s) const;

  FloatComplexDiagMatrix inverse (octave_idx_type& info) const;
  FloatComplexDiagMatrix inverse (void) const;
  FloatComplexDiagMatrix pseudo_inverse (float tol = 0.0f) const;

  bool all_elements_are_real (void) const;



  FloatComplexDiagMatrix& operator += (const FloatDiagMatrix& a);
  FloatComplexDiagMatrix& operator -= (const FloatDiagMatrix& a);



  FloatComplexColumnVector extract_diag (octave_idx_type k = 0) const
  { return MDiagArray2<FloatComplex>::extract_diag (k); }

  FloatComplexDET determinant (void) const;
  float rcond (void) const;



  friend std::ostream& operator << (std::ostream& os,
                                    const FloatComplexDiagMatrix& a);

};

           FloatComplexDiagMatrix conj (const FloatComplexDiagMatrix& a);



           FloatComplexDiagMatrix
operator * (const FloatComplexDiagMatrix& a, const FloatComplexDiagMatrix& b);

           FloatComplexDiagMatrix
operator * (const FloatComplexDiagMatrix& a, const FloatDiagMatrix& b);

           FloatComplexDiagMatrix
operator * (const FloatDiagMatrix& a, const FloatComplexDiagMatrix& b);

inline FloatComplexDiagMatrix operator + (const FloatComplexDiagMatrix& x) { return FloatComplexDiagMatrix (operator + (dynamic_cast<const MDiagArray2<FloatComplex>&> (x))); } inline FloatComplexDiagMatrix operator - (const FloatComplexDiagMatrix& x) { return FloatComplexDiagMatrix (operator - (dynamic_cast<const MDiagArray2<FloatComplex>&> (x))); } inline FloatComplexDiagMatrix operator * (const FloatComplexDiagMatrix& x, const FloatComplex& y) { return FloatComplexDiagMatrix (operator * (dynamic_cast<const MDiagArray2<FloatComplex>&> (x), (y))); } inline FloatComplexDiagMatrix operator / (const FloatComplexDiagMatrix& x, const FloatComplex& y) { return FloatComplexDiagMatrix (operator / (dynamic_cast<const MDiagArray2<FloatComplex>&> (x), (y))); } inline FloatComplexDiagMatrix operator * (const FloatComplex& x, const FloatComplexDiagMatrix& y) { return FloatComplexDiagMatrix (operator * ( (x), dynamic_cast<const MDiagArray2<FloatComplex>&> (y))); } inline FloatComplexDiagMatrix operator + (const FloatComplexDiagMatrix& x, const FloatComplexDiagMatrix& y) { return FloatComplexDiagMatrix (operator + (dynamic_cast<const MDiagArray2<FloatComplex>&> (x), dynamic_cast<const MDiagArray2<FloatComplex>&> (y))); } inline FloatComplexDiagMatrix operator - (const FloatComplexDiagMatrix& x, const FloatComplexDiagMatrix& y) { return FloatComplexDiagMatrix (operator - (dynamic_cast<const MDiagArray2<FloatComplex>&> (x), dynamic_cast<const MDiagArray2<FloatComplex>&> (y))); } inline FloatComplexDiagMatrix product (const FloatComplexDiagMatrix& x, const FloatComplexDiagMatrix& y) { return FloatComplexDiagMatrix (product (dynamic_cast<const MDiagArray2<FloatComplex>&> (x), dynamic_cast<const MDiagArray2<FloatComplex>&> (y))); }
# 61 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/PermMatrix.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/PermMatrix.h"
class PermMatrix : protected Array<octave_idx_type>
{
public:

  PermMatrix (void) : Array<octave_idx_type> () { }

  PermMatrix (octave_idx_type n);

  __attribute__ ((__deprecated__))
  PermMatrix (const Array<octave_idx_type>& p);

  PermMatrix (const Array<octave_idx_type>& p, bool colp, bool check = true);

  PermMatrix (const PermMatrix& m) : Array<octave_idx_type> (m) { }

  __attribute__ ((__deprecated__))
  PermMatrix (const idx_vector& idx);

  PermMatrix (const idx_vector& idx, bool colp, octave_idx_type n = 0);

  octave_idx_type dim1 (void) const
  { return Array<octave_idx_type>::numel (); }
  octave_idx_type dim2 (void) const
  { return Array<octave_idx_type>::numel (); }

  octave_idx_type rows (void) const { return dim1 (); }
  octave_idx_type cols (void) const { return dim2 (); }
  octave_idx_type columns (void) const { return dim2 (); }

  octave_idx_type perm_length (void) const
  { return Array<octave_idx_type>::numel (); }

  octave_idx_type length (void) const
  { return perm_length (); }

  __attribute__ ((__deprecated__))
  octave_idx_type nelem (void) const { return numel (); }

  octave_idx_type numel (void) const { return dim1 () * dim2 (); }

  size_t byte_size (void) const
  { return Array<octave_idx_type>::byte_size (); }

  dim_vector dims (void) const { return dim_vector (dim1 (), dim2 ()); }

  const Array<octave_idx_type>& col_perm_vec (void) const
  { return *this; }

  octave_idx_type
  elem (octave_idx_type i, octave_idx_type j) const
  {
    return (Array<octave_idx_type>::elem (j) == i) ? 1 : 0;
  }

  octave_idx_type
  checkelem (octave_idx_type i, octave_idx_type j) const;

  octave_idx_type
  operator () (octave_idx_type i, octave_idx_type j) const
  {



    return elem (i, j);

  }


  PermMatrix transpose (void) const;
  PermMatrix inverse (void) const;


  octave_idx_type determinant (void) const;


  PermMatrix power (octave_idx_type n) const;

  bool is_col_perm (void) const { return true; }
  bool is_row_perm (void) const { return false; }

  void print_info (std::ostream& os, const std::string& prefix) const
  { Array<octave_idx_type>::print_info (os, prefix); }

  static PermMatrix eye (octave_idx_type n);

private:

  PermMatrix pos_power (octave_idx_type m) const;

  void setup (const Array<octave_idx_type>& p, bool colp, bool check);

  void setup (const idx_vector& idx, bool colp, octave_idx_type n);
};


PermMatrix

operator * (const PermMatrix& a, const PermMatrix& b);
# 64 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolSparse.h" 1
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolSparse.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse-op-decls.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Sparse-op-decls.h"
class SparseBoolMatrix;
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/boolSparse.h" 2

class SparseMatrix;

class

SparseBoolMatrix : public Sparse<bool>
{
public:


  typedef boolMatrix dense_matrix_type;

  SparseBoolMatrix (void) : Sparse<bool> () { }

  SparseBoolMatrix (octave_idx_type r, octave_idx_type c)
    : Sparse<bool> (r, c) { }

  explicit SparseBoolMatrix (octave_idx_type r, octave_idx_type c, bool val)
    : Sparse<bool> (r, c, val) { }

  SparseBoolMatrix (const dim_vector& dv, octave_idx_type nz = 0)
    : Sparse<bool> (dv, nz) { }

  SparseBoolMatrix (const Sparse<bool>& a) : Sparse<bool> (a) { }

  SparseBoolMatrix (const SparseBoolMatrix& a) : Sparse<bool> (a) { }

  SparseBoolMatrix (const SparseBoolMatrix& a, const dim_vector& dv)
    : Sparse<bool> (a, dv) { }

  explicit SparseBoolMatrix (const boolMatrix& a) : Sparse<bool> (a) { }

  explicit SparseBoolMatrix (const boolNDArray& a) : Sparse<bool> (a) { }

  explicit SparseBoolMatrix (const PermMatrix& a) : Sparse<bool> (a) { };

  SparseBoolMatrix (const Array<bool>& a, const idx_vector& r,
                    const idx_vector& c, octave_idx_type nr = -1,
                    octave_idx_type nc = -1, bool sum_terms = true,
                    octave_idx_type nzm = -1)
    : Sparse<bool> (a, r, c, nr, nc, sum_terms, nzm) { }

  SparseBoolMatrix (octave_idx_type r, octave_idx_type c,
                    octave_idx_type num_nz) : Sparse<bool> (r, c, num_nz) { }

  SparseBoolMatrix& operator = (const SparseBoolMatrix& a)
  {
    Sparse<bool>::operator = (a);
    return *this;
  }

  bool operator == (const SparseBoolMatrix& a) const;
  bool operator != (const SparseBoolMatrix& a) const;

  SparseBoolMatrix transpose (void) const
  { return Sparse<bool>::transpose (); }



  SparseBoolMatrix& insert (const SparseBoolMatrix& a,
                            octave_idx_type r, octave_idx_type c);

  SparseBoolMatrix& insert (const SparseBoolMatrix& a,
                            const Array<octave_idx_type>& indx);

  SparseBoolMatrix concat (const SparseBoolMatrix& rb,
                           const Array<octave_idx_type>& ra_idx);

  SparseBoolMatrix diag (octave_idx_type k = 0) const;

  boolMatrix matrix_value (void) const;

  SparseBoolMatrix squeeze (void) const;

  SparseBoolMatrix index (const idx_vector& i, bool resize_ok) const;

  SparseBoolMatrix index (const idx_vector& i, const idx_vector& j,
                          bool resize_ok) const;

  SparseBoolMatrix reshape (const dim_vector& new_dims) const;

  SparseBoolMatrix permute (const Array<octave_idx_type>& vec,
                            bool inv = false) const;

  SparseBoolMatrix ipermute (const Array<octave_idx_type>& vec) const;



  SparseBoolMatrix operator ! (void) const;



  SparseBoolMatrix all (int dim = -1) const;
  SparseBoolMatrix any (int dim = -1) const;
  SparseMatrix sum (int dim = -1) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const SparseBoolMatrix& a);
  friend std::istream& operator >> (std::istream& is,
                                               SparseBoolMatrix& a);
};

extern SparseBoolMatrix mx_el_eq (const SparseBoolMatrix&, const bool&); extern SparseBoolMatrix mx_el_ne (const SparseBoolMatrix&, const bool&);
extern SparseBoolMatrix mx_el_and (const SparseBoolMatrix&, const bool&); extern SparseBoolMatrix mx_el_or (const SparseBoolMatrix&, const bool&);

extern SparseBoolMatrix mx_el_eq (const bool&, const SparseBoolMatrix&); extern SparseBoolMatrix mx_el_ne (const bool&, const SparseBoolMatrix&);
extern SparseBoolMatrix mx_el_and (const bool&, const SparseBoolMatrix&); extern SparseBoolMatrix mx_el_or (const bool&, const SparseBoolMatrix&);

extern SparseBoolMatrix mx_el_eq (const SparseBoolMatrix&, const SparseBoolMatrix&); extern SparseBoolMatrix mx_el_ne (const SparseBoolMatrix&, const SparseBoolMatrix&);
extern SparseBoolMatrix mx_el_and (const SparseBoolMatrix&, const SparseBoolMatrix&); extern SparseBoolMatrix mx_el_or (const SparseBoolMatrix&, const SparseBoolMatrix&);
# 68 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dSparse.h" 1
# 42 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/dSparse.h"
class PermMatrix;
class DiagMatrix;
class SparseComplexMatrix;
class SparseBoolMatrix;

class

SparseMatrix : public MSparse<double>
{
public:


  typedef Matrix dense_matrix_type;

  typedef void (*solve_singularity_handler) (double rcond);

  SparseMatrix (void) : MSparse<double> () { }

  SparseMatrix (octave_idx_type r, octave_idx_type c)
    : MSparse<double> (r, c) { }

  SparseMatrix (const dim_vector& dv, octave_idx_type nz = 0) :
    MSparse<double> (dv, nz) { }

  explicit SparseMatrix (octave_idx_type r, octave_idx_type c, double val)
    : MSparse<double> (r, c, val) { }

  SparseMatrix (const SparseMatrix& a) : MSparse<double> (a) { }

  SparseMatrix (const SparseMatrix& a, const dim_vector& dv)
    : MSparse<double> (a, dv) { }

  SparseMatrix (const MSparse<double>& a) : MSparse<double> (a) { }

  SparseMatrix (const Sparse<double>& a) : MSparse<double> (a) { }

  explicit SparseMatrix (const SparseBoolMatrix& a);

  explicit SparseMatrix (const Matrix& a) : MSparse<double> (a) { }

  explicit SparseMatrix (const NDArray& a) : MSparse<double> (a) { }

  SparseMatrix (const Array<double>& a, const idx_vector& r,
                const idx_vector& c, octave_idx_type nr = -1,
                octave_idx_type nc = -1, bool sum_terms = true,
                octave_idx_type nzm = -1)
    : MSparse<double> (a, r, c, nr, nc, sum_terms, nzm) { }

  explicit SparseMatrix (const DiagMatrix& a);

  explicit SparseMatrix (const PermMatrix& a) : MSparse<double>(a) { }

  SparseMatrix (octave_idx_type r, octave_idx_type c,
                octave_idx_type num_nz) : MSparse<double> (r, c, num_nz) { }

  SparseMatrix& operator = (const SparseMatrix& a)
  {
    MSparse<double>::operator = (a);
    return *this;
  }

  bool operator == (const SparseMatrix& a) const;
  bool operator != (const SparseMatrix& a) const;

  bool is_symmetric (void) const;

  SparseMatrix max (int dim = -1) const;
  SparseMatrix max (Array<octave_idx_type>& index, int dim = -1) const;
  SparseMatrix min (int dim = -1) const;
  SparseMatrix min (Array<octave_idx_type>& index, int dim = -1) const;



  SparseMatrix& insert (const SparseMatrix& a, octave_idx_type r,
                        octave_idx_type c);

  SparseMatrix& insert (const SparseMatrix& a,
                        const Array<octave_idx_type>& indx);

  SparseMatrix concat (const SparseMatrix& rb,
                       const Array<octave_idx_type>& ra_idx);
  SparseComplexMatrix concat (const SparseComplexMatrix& rb,
                              const Array<octave_idx_type>& ra_idx);

  friend SparseMatrix real (const SparseComplexMatrix& a);
  friend SparseMatrix imag (const SparseComplexMatrix& a);

  __attribute__ ((__deprecated__))
             friend
  SparseMatrix atan2 (const double& x, const SparseMatrix& y);

  __attribute__ ((__deprecated__))
             friend
  SparseMatrix atan2 (const SparseMatrix& x, const double& y);

  __attribute__ ((__deprecated__))
             friend
  SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);

  SparseMatrix transpose (void) const
  {
    return MSparse<double>::transpose ();
  }
  SparseMatrix hermitian (void) const { return transpose (); }



  RowVector row (octave_idx_type i) const;

  ColumnVector column (octave_idx_type i) const;

private:
  SparseMatrix dinverse (MatrixType &mattyp, octave_idx_type& info,
                         double& rcond, const bool force = false,
                         const bool calccond = true) const;

  SparseMatrix tinverse (MatrixType &mattyp, octave_idx_type& info,
                         double& rcond, const bool force = false,
                         const bool calccond = true) const;

public:
  SparseMatrix inverse (void) const;
  SparseMatrix inverse (MatrixType& mattype) const;
  SparseMatrix inverse (MatrixType& mattype, octave_idx_type& info) const;
  SparseMatrix inverse (MatrixType& mattype, octave_idx_type& info,
                        double& rcond, bool force = false,
                        bool calc_cond = true) const;

  DET determinant (void) const;
  DET determinant (octave_idx_type& info) const;
  DET determinant (octave_idx_type& info, double& rcond,
                   bool calc_cond = true) const;

private:

  Matrix dsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                 double& rcond, solve_singularity_handler sing_handler,
                 bool calc_cond = false) const;

  ComplexMatrix dsolve (MatrixType &typ, const ComplexMatrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  SparseMatrix dsolve (MatrixType &typ, const SparseMatrix& b,
                       octave_idx_type& info, double& rcond,
                       solve_singularity_handler sing_handler,
                       bool calc_cond = false) const;

  SparseComplexMatrix dsolve (MatrixType &typ, const SparseComplexMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;


  Matrix utsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                  double& rcond, solve_singularity_handler sing_handler,
                  bool calc_cond = false) const;

  ComplexMatrix utsolve (MatrixType &typ, const ComplexMatrix& b,
                         octave_idx_type& info, double& rcond,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false) const;

  SparseMatrix utsolve (MatrixType &typ, const SparseMatrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  SparseComplexMatrix utsolve (MatrixType &typ, const SparseComplexMatrix& b,
                               octave_idx_type& info, double& rcond,
                               solve_singularity_handler sing_handler,
                               bool calc_cond = false) const;


  Matrix ltsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                  double& rcond, solve_singularity_handler sing_handler,
                  bool calc_cond = false) const;

  ComplexMatrix ltsolve (MatrixType &typ, const ComplexMatrix& b,
                         octave_idx_type& info, double& rcond,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false) const;

  SparseMatrix ltsolve (MatrixType &typ, const SparseMatrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  SparseComplexMatrix ltsolve (MatrixType &typ, const SparseComplexMatrix& b,
                               octave_idx_type& info, double& rcond,
                               solve_singularity_handler sing_handler,
                               bool calc_cond = false) const;


  Matrix trisolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                   double& rcond, solve_singularity_handler sing_handler,
                   bool calc_cond = false) const;

  ComplexMatrix trisolve (MatrixType &typ, const ComplexMatrix& b,
                          octave_idx_type& info, double& rcond,
                          solve_singularity_handler sing_handler,
                          bool calc_cond = false) const;

  SparseMatrix trisolve (MatrixType &typ, const SparseMatrix& b,
                         octave_idx_type& info, double& rcond,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false) const;

  SparseComplexMatrix trisolve (MatrixType &typ, const SparseComplexMatrix& b,
                                octave_idx_type& info, double& rcond,
                                solve_singularity_handler sing_handler,
                                bool calc_cond = false) const;


  Matrix bsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                 double& rcond, solve_singularity_handler sing_handler,
                 bool calc_cond = false) const;

  ComplexMatrix bsolve (MatrixType &typ, const ComplexMatrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  SparseMatrix bsolve (MatrixType &typ, const SparseMatrix& b,
                       octave_idx_type& info, double& rcond,
                       solve_singularity_handler sing_handler,
                       bool calc_cond = false) const;

  SparseComplexMatrix bsolve (MatrixType &typ, const SparseComplexMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;


  void * factorize (octave_idx_type& err, double &rcond, Matrix &Control,
                    Matrix &Info, solve_singularity_handler sing_handler,
                    bool calc_cond = false) const;

  Matrix fsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                 double& rcond, solve_singularity_handler sing_handler,
                 bool calc_cond = false) const;

  ComplexMatrix fsolve (MatrixType &typ, const ComplexMatrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  SparseMatrix fsolve (MatrixType &typ, const SparseMatrix& b,
                       octave_idx_type& info, double& rcond,
                       solve_singularity_handler sing_handler,
                       bool calc_cond = false) const;

  SparseComplexMatrix fsolve (MatrixType &typ, const SparseComplexMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;

public:

  Matrix solve (MatrixType &typ, const Matrix& b) const;
  Matrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info) const;
  Matrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                double& rcond) const;
  Matrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                double& rcond, solve_singularity_handler sing_handler,
                bool singular_fallback = true) const;

  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info, double& rcond) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info, double& rcond,
                       solve_singularity_handler sing_handler,
                       bool singular_fallback = true) const;

  SparseMatrix solve (MatrixType &typ, const SparseMatrix& b) const;
  SparseMatrix solve (MatrixType &typ, const SparseMatrix& b,
                      octave_idx_type& info) const;
  SparseMatrix solve (MatrixType &typ, const SparseMatrix& b,
                      octave_idx_type& info, double& rcond) const;
  SparseMatrix solve (MatrixType &typ, const SparseMatrix& b,
                      octave_idx_type& info, double& rcond,
                      solve_singularity_handler sing_handler,
                      bool singular_fallback = true) const;

  SparseComplexMatrix solve (MatrixType &typ,
                             const SparseComplexMatrix& b) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseComplexMatrix& b,
                             octave_idx_type& info) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseComplexMatrix& b,
                             octave_idx_type& info, double& rcond) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseComplexMatrix& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler,
                             bool singular_fallabck = true) const;

  ColumnVector solve (MatrixType &typ, const ColumnVector& b) const;
  ColumnVector solve (MatrixType &typ, const ColumnVector& b,
                      octave_idx_type& info) const;
  ColumnVector solve (MatrixType &typ, const ColumnVector& b,
                      octave_idx_type& info, double& rcond) const;
  ColumnVector solve (MatrixType &typ, const ColumnVector& b,
                      octave_idx_type& info, double& rcond,
                      solve_singularity_handler sing_handler) const;

  ComplexColumnVector solve (MatrixType &typ,
                             const ComplexColumnVector& b) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcond) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler) const;


  Matrix solve (const Matrix& b) const;
  Matrix solve (const Matrix& b, octave_idx_type& info) const;
  Matrix solve (const Matrix& b, octave_idx_type& info, double& rcond) const;
  Matrix solve (const Matrix& b, octave_idx_type& info, double& rcond,
                solve_singularity_handler sing_handler) const;

  ComplexMatrix solve (const ComplexMatrix& b) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
                       double& rcond) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
                       double& rcond,
                       solve_singularity_handler sing_handler) const;

  SparseMatrix solve (const SparseMatrix& b) const;
  SparseMatrix solve (const SparseMatrix& b, octave_idx_type& info) const;
  SparseMatrix solve (const SparseMatrix& b, octave_idx_type& info,
                      double& rcond) const;
  SparseMatrix solve (const SparseMatrix& b, octave_idx_type& info,
                      double& rcond,
                      solve_singularity_handler sing_handler) const;

  SparseComplexMatrix solve (const SparseComplexMatrix& b) const;
  SparseComplexMatrix solve (const SparseComplexMatrix& b,
                             octave_idx_type& info) const;
  SparseComplexMatrix solve (const SparseComplexMatrix& b,
                             octave_idx_type& info, double& rcond) const;
  SparseComplexMatrix solve (const SparseComplexMatrix& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler) const;

  ColumnVector solve (const ColumnVector& b) const;
  ColumnVector solve (const ColumnVector& b, octave_idx_type& info) const;
  ColumnVector solve (const ColumnVector& b, octave_idx_type& info,
                      double& rcond) const;
  ColumnVector solve (const ColumnVector& b, octave_idx_type& info,
                      double& rcond,
                      solve_singularity_handler sing_handler) const;

  ComplexColumnVector solve (const ComplexColumnVector& b) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcond) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler) const;



  bool any_element_is_negative (bool = false) const;
  bool any_element_is_nan (void) const;
  bool any_element_is_inf_or_nan (void) const;
  bool any_element_not_one_or_zero (void) const;
  bool all_elements_are_zero (void) const;
  bool all_elements_are_int_or_inf_or_nan (void) const;
  bool all_integers (double& max_val, double& min_val) const;
  bool too_large_for_float (void) const;

  SparseBoolMatrix operator ! (void) const;

  SparseBoolMatrix all (int dim = -1) const;
  SparseBoolMatrix any (int dim = -1) const;

  SparseMatrix cumprod (int dim = -1) const;
  SparseMatrix cumsum (int dim = -1) const;
  SparseMatrix prod (int dim = -1) const;
  SparseMatrix sum (int dim = -1) const;
  SparseMatrix sumsq (int dim = -1) const;
  SparseMatrix abs (void) const;

  SparseMatrix diag (octave_idx_type k = 0) const;

  Matrix matrix_value (void) const;

  SparseMatrix squeeze (void) const;

  SparseMatrix reshape (const dim_vector& new_dims) const;

  SparseMatrix permute (const Array<octave_idx_type>& vec,
                        bool inv = false) const;

  SparseMatrix ipermute (const Array<octave_idx_type>& vec) const;



  friend std::ostream& operator << (std::ostream& os,
                                               const SparseMatrix& a);
  friend std::istream& operator >> (std::istream& is,
                                               SparseMatrix& a);

};



extern SparseMatrix real (const SparseComplexMatrix& a);
extern SparseMatrix imag (const SparseComplexMatrix& a);



extern SparseMatrix operator * (const SparseMatrix& a,
                                           const SparseMatrix& b);
extern Matrix operator * (const Matrix& a,
                                     const SparseMatrix& b);
extern Matrix mul_trans (const Matrix& a,
                                    const SparseMatrix& b);
extern Matrix operator * (const SparseMatrix& a,
                                     const Matrix& b);
extern Matrix trans_mul (const SparseMatrix& a,
                                    const Matrix& b);

extern SparseMatrix operator * (const DiagMatrix&,
                                           const SparseMatrix&);
extern SparseMatrix operator * (const SparseMatrix&,
                                           const DiagMatrix&);

extern SparseMatrix operator + (const DiagMatrix&,
                                           const SparseMatrix&);
extern SparseMatrix operator + (const SparseMatrix&,
                                           const DiagMatrix&);
extern SparseMatrix operator - (const DiagMatrix&,
                                           const SparseMatrix&);
extern SparseMatrix operator - (const SparseMatrix&,
                                           const DiagMatrix&);

extern SparseMatrix operator * (const PermMatrix&,
                                           const SparseMatrix&);
extern SparseMatrix operator * (const SparseMatrix&,
                                           const PermMatrix&);

extern SparseMatrix min (double d, const SparseMatrix& m);
extern SparseMatrix min (const SparseMatrix& m, double d);
extern SparseMatrix min (const SparseMatrix& a,
                                    const SparseMatrix& b);

extern SparseMatrix max (double d, const SparseMatrix& m);
extern SparseMatrix max (const SparseMatrix& m, double d);
extern SparseMatrix max (const SparseMatrix& a,
                                    const SparseMatrix& b);

extern SparseBoolMatrix mx_el_lt (const SparseMatrix&, const double&); extern SparseBoolMatrix mx_el_le (const SparseMatrix&, const double&); extern SparseBoolMatrix mx_el_ge (const SparseMatrix&, const double&); extern SparseBoolMatrix mx_el_gt (const SparseMatrix&, const double&); extern SparseBoolMatrix mx_el_eq (const SparseMatrix&, const double&); extern SparseBoolMatrix mx_el_ne (const SparseMatrix&, const double&);
extern SparseBoolMatrix mx_el_and (const SparseMatrix&, const double&); extern SparseBoolMatrix mx_el_or (const SparseMatrix&, const double&);

extern SparseBoolMatrix mx_el_lt (const double&, const SparseMatrix&); extern SparseBoolMatrix mx_el_le (const double&, const SparseMatrix&); extern SparseBoolMatrix mx_el_ge (const double&, const SparseMatrix&); extern SparseBoolMatrix mx_el_gt (const double&, const SparseMatrix&); extern SparseBoolMatrix mx_el_eq (const double&, const SparseMatrix&); extern SparseBoolMatrix mx_el_ne (const double&, const SparseMatrix&);
extern SparseBoolMatrix mx_el_and (const double&, const SparseMatrix&); extern SparseBoolMatrix mx_el_or (const double&, const SparseMatrix&);

extern SparseBoolMatrix mx_el_lt (const SparseMatrix&, const SparseMatrix&); extern SparseBoolMatrix mx_el_le (const SparseMatrix&, const SparseMatrix&); extern SparseBoolMatrix mx_el_ge (const SparseMatrix&, const SparseMatrix&); extern SparseBoolMatrix mx_el_gt (const SparseMatrix&, const SparseMatrix&); extern SparseBoolMatrix mx_el_eq (const SparseMatrix&, const SparseMatrix&); extern SparseBoolMatrix mx_el_ne (const SparseMatrix&, const SparseMatrix&);
extern SparseBoolMatrix mx_el_and (const SparseMatrix&, const SparseMatrix&); extern SparseBoolMatrix mx_el_or (const SparseMatrix&, const SparseMatrix&);

inline SparseMatrix operator += (SparseMatrix& x, const SparseMatrix& y) { return SparseMatrix (operator += (dynamic_cast<MSparse<double>&> (x), dynamic_cast<const MSparse<double>&> (y))); } inline SparseMatrix operator -= (SparseMatrix& x, const SparseMatrix& y) { return SparseMatrix (operator -= (dynamic_cast<MSparse<double>&> (x), dynamic_cast<const MSparse<double>&> (y))); } inline SparseMatrix operator + (const SparseMatrix& x) { return SparseMatrix (operator + (dynamic_cast<const MSparse<double>&> (x))); } inline SparseMatrix operator - (const SparseMatrix& x) { return SparseMatrix (operator - (dynamic_cast<const MSparse<double>&> (x))); } inline Matrix operator + (const SparseMatrix& x, const double& y) { return Matrix (operator + (dynamic_cast<const MSparse<double>&> (x), (y))); } inline Matrix operator - (const SparseMatrix& x, const double& y) { return Matrix (operator - (dynamic_cast<const MSparse<double>&> (x), (y))); } inline SparseMatrix operator * (const SparseMatrix& x, const double& y) { return SparseMatrix (operator * (dynamic_cast<const MSparse<double>&> (x), (y))); } inline SparseMatrix operator / (const SparseMatrix& x, const double& y) { return SparseMatrix (operator / (dynamic_cast<const MSparse<double>&> (x), (y))); } inline Matrix operator + (const double& x, const SparseMatrix& y) { return Matrix (operator + ( (x), dynamic_cast<const MSparse<double>&> (y))); } inline Matrix operator - (const double& x, const SparseMatrix& y) { return Matrix (operator - ( (x), dynamic_cast<const MSparse<double>&> (y))); } inline SparseMatrix operator * (const double& x, const SparseMatrix& y) { return SparseMatrix (operator * ( (x), dynamic_cast<const MSparse<double>&> (y))); } inline SparseMatrix operator / (const double& x, const SparseMatrix& y) { return SparseMatrix (operator / ( (x), dynamic_cast<const MSparse<double>&> (y))); } inline SparseMatrix operator + (const SparseMatrix& x, const SparseMatrix& y) { return SparseMatrix (operator + (dynamic_cast<const MSparse<double>&> (x), dynamic_cast<const MSparse<double>&> (y))); } inline SparseMatrix operator - (const SparseMatrix& x, const SparseMatrix& y) { return SparseMatrix (operator - (dynamic_cast<const MSparse<double>&> (x), dynamic_cast<const MSparse<double>&> (y))); } inline SparseMatrix product (const SparseMatrix& x, const SparseMatrix& y) { return SparseMatrix (product (dynamic_cast<const MSparse<double>&> (x), dynamic_cast<const MSparse<double>&> (y))); } inline SparseMatrix quotient (const SparseMatrix& x, const SparseMatrix& y) { return SparseMatrix (quotient (dynamic_cast<const MSparse<double>&> (x), dynamic_cast<const MSparse<double>&> (y))); }
# 69 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CSparse.h" 1
# 44 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/CSparse.h"
class PermMatrix;
class DiagMatrix;
class ComplexDiagMatrix;
class SparseMatrix;
class SparseBoolMatrix;

class

SparseComplexMatrix : public MSparse<Complex>
{
public:


  typedef ComplexMatrix dense_matrix_type;

  typedef void (*solve_singularity_handler) (double rcond);

  SparseComplexMatrix (void) : MSparse<Complex> () { }

  SparseComplexMatrix (octave_idx_type r,
                       octave_idx_type c) : MSparse<Complex> (r, c) { }

  SparseComplexMatrix (const dim_vector& dv, octave_idx_type nz = 0)
    : MSparse<Complex> (dv, nz) { }

  explicit SparseComplexMatrix (octave_idx_type r, octave_idx_type c,
                                Complex val)
    : MSparse<Complex> (r, c, val) { }

  SparseComplexMatrix (octave_idx_type r, octave_idx_type c, double val)
    : MSparse<Complex> (r, c, Complex (val)) { }

  SparseComplexMatrix (const SparseComplexMatrix& a)
    : MSparse<Complex> (a) { }

  SparseComplexMatrix (const SparseComplexMatrix& a, const dim_vector& dv)
    : MSparse<Complex> (a, dv) { }

  SparseComplexMatrix (const MSparse<Complex>& a) : MSparse<Complex> (a) { }

  SparseComplexMatrix (const Sparse<Complex>& a) : MSparse<Complex> (a) { }

  explicit SparseComplexMatrix (const ComplexMatrix& a)
    : MSparse<Complex> (a) { }

  explicit SparseComplexMatrix (const ComplexNDArray& a)
    : MSparse<Complex> (a) { }

  SparseComplexMatrix (const Array<Complex>& a, const idx_vector& r,
                       const idx_vector& c, octave_idx_type nr = -1,
                       octave_idx_type nc = -1, bool sum_terms = true,
                       octave_idx_type nzm = -1)
    : MSparse<Complex> (a, r, c, nr, nc, sum_terms, nzm) { }

  explicit SparseComplexMatrix (const SparseMatrix& a);

  explicit SparseComplexMatrix (const SparseBoolMatrix& a);

  explicit SparseComplexMatrix (const ComplexDiagMatrix& a);

  SparseComplexMatrix (octave_idx_type r, octave_idx_type c,
                       octave_idx_type num_nz)
    : MSparse<Complex> (r, c, num_nz) { }

  SparseComplexMatrix& operator = (const SparseComplexMatrix& a)
  {
    MSparse<Complex>::operator = (a);
    return *this;
  }

  bool operator == (const SparseComplexMatrix& a) const;
  bool operator != (const SparseComplexMatrix& a) const;

  bool is_hermitian (void) const;

  SparseComplexMatrix max (int dim = -1) const;
  SparseComplexMatrix max (Array<octave_idx_type>& index, int dim = -1) const;
  SparseComplexMatrix min (int dim = -1) const;
  SparseComplexMatrix min (Array<octave_idx_type>& index, int dim = -1) const;

  SparseComplexMatrix& insert (const SparseComplexMatrix& a,
                               octave_idx_type r, octave_idx_type c);
  SparseComplexMatrix& insert (const SparseMatrix& a,
                               octave_idx_type r, octave_idx_type c);
  SparseComplexMatrix& insert (const SparseComplexMatrix& a,
                               const Array<octave_idx_type>& indx);
  SparseComplexMatrix& insert (const SparseMatrix& a,
                               const Array<octave_idx_type>& indx);

  SparseComplexMatrix concat (const SparseComplexMatrix& rb,
                              const Array<octave_idx_type>& ra_idx);
  SparseComplexMatrix concat (const SparseMatrix& rb,
                              const Array<octave_idx_type>& ra_idx);

  ComplexMatrix matrix_value (void) const;

  SparseComplexMatrix hermitian (void) const;
  SparseComplexMatrix transpose (void) const
  { return MSparse<Complex>::transpose (); }

  friend SparseComplexMatrix conj (const SparseComplexMatrix& a);



  ComplexRowVector row (octave_idx_type i) const;

  ComplexColumnVector column (octave_idx_type i) const;

private:
  SparseComplexMatrix dinverse (MatrixType &mattyp, octave_idx_type& info,
                                double& rcond, const bool force = false,
                                const bool calccond = true) const;

  SparseComplexMatrix tinverse (MatrixType &mattyp, octave_idx_type& info,
                                double& rcond, const bool force = false,
                                const bool calccond = true) const;

public:
  SparseComplexMatrix inverse (void) const;
  SparseComplexMatrix inverse (MatrixType& mattype) const;
  SparseComplexMatrix inverse (MatrixType& mattype,
                               octave_idx_type& info) const;
  SparseComplexMatrix inverse (MatrixType& mattype, octave_idx_type& info,
                               double& rcond, bool force = false,
                               bool calc_cond = true) const;

  ComplexDET determinant (void) const;
  ComplexDET determinant (octave_idx_type& info) const;
  ComplexDET determinant (octave_idx_type& info, double& rcond,
                          bool calc_cond = true) const;

private:

  ComplexMatrix dsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                        double& rcond, solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  ComplexMatrix dsolve (MatrixType &typ, const ComplexMatrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  SparseComplexMatrix dsolve (MatrixType &typ, const SparseMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;

  SparseComplexMatrix dsolve (MatrixType &typ, const SparseComplexMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;


  ComplexMatrix utsolve (MatrixType &typ, const Matrix& b,
                         octave_idx_type& info, double& rcond,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false) const;

  ComplexMatrix utsolve (MatrixType &typ, const ComplexMatrix& b,
                         octave_idx_type& info, double& rcond,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false) const;

  SparseComplexMatrix utsolve (MatrixType &typ, const SparseMatrix& b,
                               octave_idx_type& info, double& rcond,
                               solve_singularity_handler sing_handler,
                               bool calc_cond = false) const;

  SparseComplexMatrix utsolve (MatrixType &typ, const SparseComplexMatrix& b,
                               octave_idx_type& info, double& rcond,
                               solve_singularity_handler sing_handler,
                               bool calc_cond = false) const;


  ComplexMatrix ltsolve (MatrixType &typ, const Matrix& b,
                         octave_idx_type& info, double& rcond,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false) const;

  ComplexMatrix ltsolve (MatrixType &typ, const ComplexMatrix& b,
                         octave_idx_type& info, double& rcond,
                         solve_singularity_handler sing_handler,
                         bool calc_cond = false) const;

  SparseComplexMatrix ltsolve (MatrixType &typ, const SparseMatrix& b,
                               octave_idx_type& info, double& rcond,
                               solve_singularity_handler sing_handler,
                               bool calc_cond = false) const;

  SparseComplexMatrix ltsolve (MatrixType &typ, const SparseComplexMatrix& b,
                               octave_idx_type& info, double& rcond,
                               solve_singularity_handler sing_handler,
                               bool calc_cond = false) const;


  ComplexMatrix trisolve (MatrixType &typ, const Matrix& b,
                          octave_idx_type& info, double& rcond,
                          solve_singularity_handler sing_handler,
                          bool calc_cond = false) const;

  ComplexMatrix trisolve (MatrixType &typ, const ComplexMatrix& b,
                          octave_idx_type& info, double& rcond,
                          solve_singularity_handler sing_handler,
                          bool calc_cond = false) const;

  SparseComplexMatrix trisolve (MatrixType &typ, const SparseMatrix& b,
                                octave_idx_type& info, double& rcond,
                                solve_singularity_handler sing_handler,
                                bool calc_cond = false) const;

  SparseComplexMatrix trisolve (MatrixType &typ, const SparseComplexMatrix& b,
                                octave_idx_type& info, double& rcond,
                                solve_singularity_handler sing_handler,
                                bool calc_cond = false) const;


  ComplexMatrix bsolve (MatrixType &typ, const Matrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  ComplexMatrix bsolve (MatrixType &typ, const ComplexMatrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  SparseComplexMatrix bsolve (MatrixType &typ, const SparseMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;

  SparseComplexMatrix bsolve (MatrixType &typ, const SparseComplexMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;


  void * factorize (octave_idx_type& err, double &rcond, Matrix &Control,
                    Matrix &Info, solve_singularity_handler sing_handler,
                    bool calc_cond) const;

  ComplexMatrix fsolve (MatrixType &typ, const Matrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  ComplexMatrix fsolve (MatrixType &typ, const ComplexMatrix& b,
                        octave_idx_type& info, double& rcond,
                        solve_singularity_handler sing_handler,
                        bool calc_cond = false) const;

  SparseComplexMatrix fsolve (MatrixType &typ, const SparseMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;

  SparseComplexMatrix fsolve (MatrixType &typ, const SparseComplexMatrix& b,
                              octave_idx_type& info, double& rcond,
                              solve_singularity_handler sing_handler,
                              bool calc_cond = false) const;

public:

  ComplexMatrix solve (MatrixType &typ, const Matrix& b) const;
  ComplexMatrix solve (MatrixType &typ, const Matrix& b,
                       octave_idx_type& info) const;
  ComplexMatrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                       double& rcond) const;
  ComplexMatrix solve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                       double& rcond, solve_singularity_handler sing_handler,
                       bool singular_fallback = true) const;

  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info, double& rcond) const;
  ComplexMatrix solve (MatrixType &typ, const ComplexMatrix& b,
                       octave_idx_type& info, double& rcond,
                       solve_singularity_handler sing_handler,
                       bool singular_fallback = true) const;

  SparseComplexMatrix solve (MatrixType &typ, const SparseMatrix& b) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseMatrix& b,
                             octave_idx_type& info) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseMatrix& b,
                             octave_idx_type& info, double& rcond) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseMatrix& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler,
                             bool singular_fallback = true) const;

  SparseComplexMatrix solve (MatrixType &typ,
                             const SparseComplexMatrix& b) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseComplexMatrix& b,
                             octave_idx_type& info) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseComplexMatrix& b,
                             octave_idx_type& info, double& rcond) const;
  SparseComplexMatrix solve (MatrixType &typ, const SparseComplexMatrix& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler,
                             bool singular_fallback = true) const;

  ComplexColumnVector solve (MatrixType &typ, const ColumnVector& b) const;
  ComplexColumnVector solve (MatrixType &typ, const ColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (MatrixType &typ, const ColumnVector& b,
                             octave_idx_type& info, double& rcond) const;
  ComplexColumnVector solve (MatrixType &typ, const ColumnVector& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler) const;

  ComplexColumnVector solve (MatrixType &typ,
                             const ComplexColumnVector& b) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcond) const;
  ComplexColumnVector solve (MatrixType &typ, const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler) const;


  ComplexMatrix solve (const Matrix& b) const;
  ComplexMatrix solve (const Matrix& b, octave_idx_type& info) const;
  ComplexMatrix solve (const Matrix& b, octave_idx_type& info,
                       double& rcond) const;
  ComplexMatrix solve (const Matrix& b, octave_idx_type& info, double& rcond,
                       solve_singularity_handler sing_handler) const;

  ComplexMatrix solve (const ComplexMatrix& b) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
                       double& rcond) const;
  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
                       double& rcond,
                       solve_singularity_handler sing_handler) const;

  SparseComplexMatrix solve (const SparseMatrix& b) const;
  SparseComplexMatrix solve (const SparseMatrix& b,
                             octave_idx_type& info) const;
  SparseComplexMatrix solve (const SparseMatrix& b, octave_idx_type& info,
                             double& rcond) const;
  SparseComplexMatrix solve (const SparseMatrix& b, octave_idx_type& info,
                             double& rcond,
                             solve_singularity_handler sing_handler) const;

  SparseComplexMatrix solve (const SparseComplexMatrix& b) const;
  SparseComplexMatrix solve (const SparseComplexMatrix& b,
                             octave_idx_type& info) const;
  SparseComplexMatrix solve (const SparseComplexMatrix& b,
                             octave_idx_type& info, double& rcond) const;
  SparseComplexMatrix solve (const SparseComplexMatrix& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler) const;

  ComplexColumnVector solve (const ColumnVector& b) const;
  ComplexColumnVector solve (const ColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info,
                             double& rcond) const;
  ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info,
                             double& rcond,
                             solve_singularity_handler sing_handler) const;

  ComplexColumnVector solve (const ComplexColumnVector& b) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcond) const;
  ComplexColumnVector solve (const ComplexColumnVector& b,
                             octave_idx_type& info, double& rcond,
                             solve_singularity_handler sing_handler) const;

  SparseComplexMatrix squeeze (void) const;

  SparseComplexMatrix reshape (const dim_vector& new_dims) const;

  SparseComplexMatrix permute (const Array<octave_idx_type>& vec,
                               bool inv = false) const;

  SparseComplexMatrix ipermute (const Array<octave_idx_type>& vec) const;

  bool any_element_is_nan (void) const;
  bool any_element_is_inf_or_nan (void) const;
  bool all_elements_are_real (void) const;
  bool all_integers (double& max_val, double& min_val) const;
  bool too_large_for_float (void) const;

  SparseBoolMatrix operator ! (void) const;

  SparseBoolMatrix all (int dim = -1) const;
  SparseBoolMatrix any (int dim = -1) const;

  SparseComplexMatrix cumprod (int dim = -1) const;
  SparseComplexMatrix cumsum (int dim = -1) const;
  SparseComplexMatrix prod (int dim = -1) const;
  SparseComplexMatrix sum (int dim = -1) const;
  SparseComplexMatrix sumsq (int dim = -1) const;
  SparseMatrix abs (void) const;

  SparseComplexMatrix diag (octave_idx_type k = 0) const;


  friend std::ostream& operator << (std::ostream& os,
                                               const SparseComplexMatrix& a);
  friend std::istream& operator >> (std::istream& is,
                                               SparseComplexMatrix& a);
};

extern SparseComplexMatrix operator * (const SparseMatrix&,
                                                  const SparseComplexMatrix&);
extern SparseComplexMatrix operator * (const SparseComplexMatrix&,
                                                  const SparseMatrix&);
extern SparseComplexMatrix operator * (const SparseComplexMatrix&,
                                                  const SparseComplexMatrix&);

extern ComplexMatrix operator * (const Matrix&,
                                            const SparseComplexMatrix&);
extern ComplexMatrix operator * (const ComplexMatrix&,
                                            const SparseMatrix&);
extern ComplexMatrix operator * (const ComplexMatrix&,
                                            const SparseComplexMatrix&);
extern ComplexMatrix mul_trans (const ComplexMatrix&,
                                           const SparseComplexMatrix&);
extern ComplexMatrix mul_herm (const ComplexMatrix&,
                                          const SparseComplexMatrix&);

extern ComplexMatrix operator * (const SparseMatrix&,
                                            const ComplexMatrix&);
extern ComplexMatrix operator * (const SparseComplexMatrix&,
                                            const Matrix&);
extern ComplexMatrix operator * (const SparseComplexMatrix&,
                                            const ComplexMatrix&);
extern ComplexMatrix trans_mul (const SparseComplexMatrix&,
                                           const ComplexMatrix&);
extern ComplexMatrix herm_mul (const SparseComplexMatrix&,
                                          const ComplexMatrix&);

extern SparseComplexMatrix operator * (const DiagMatrix&,
                                                  const SparseComplexMatrix&);
extern SparseComplexMatrix operator * (const SparseComplexMatrix&,
                                                  const DiagMatrix&);

extern SparseComplexMatrix operator * (const ComplexDiagMatrix&,
                                                  const SparseMatrix&);
extern SparseComplexMatrix operator * (const SparseMatrix&,
                                                  const ComplexDiagMatrix&);

extern SparseComplexMatrix operator * (const ComplexDiagMatrix&,
                                                  const SparseComplexMatrix&);
extern SparseComplexMatrix operator * (const SparseComplexMatrix&,
                                                  const ComplexDiagMatrix&);

extern SparseComplexMatrix operator + (const ComplexDiagMatrix&,
                                                  const SparseMatrix&);
extern SparseComplexMatrix operator + (const DiagMatrix&,
                                                  const SparseComplexMatrix&);
extern SparseComplexMatrix operator + (const ComplexDiagMatrix&,
                                                  const SparseComplexMatrix&);
extern SparseComplexMatrix operator + (const SparseMatrix&,
                                                  const ComplexDiagMatrix&);
extern SparseComplexMatrix operator + (const SparseComplexMatrix&,
                                                  const DiagMatrix&);
extern SparseComplexMatrix operator + (const SparseComplexMatrix&,
                                                  const ComplexDiagMatrix&);

extern SparseComplexMatrix operator - (const ComplexDiagMatrix&,
                                                  const SparseMatrix&);
extern SparseComplexMatrix operator - (const DiagMatrix&,
                                                  const SparseComplexMatrix&);
extern SparseComplexMatrix operator - (const ComplexDiagMatrix&,
                                                  const SparseComplexMatrix&);
extern SparseComplexMatrix operator - (const SparseMatrix&,
                                                  const ComplexDiagMatrix&);
extern SparseComplexMatrix operator - (const SparseComplexMatrix&,
                                                  const DiagMatrix&);
extern SparseComplexMatrix operator - (const SparseComplexMatrix&,
                                                  const ComplexDiagMatrix&);

extern SparseComplexMatrix operator * (const PermMatrix&,
                                                  const SparseComplexMatrix&);
extern SparseComplexMatrix operator * (const SparseComplexMatrix&,
                                                  const PermMatrix&);

extern SparseComplexMatrix min (const Complex& c,
                                           const SparseComplexMatrix& m);
extern SparseComplexMatrix min (const SparseComplexMatrix& m,
                                           const Complex& c);
extern SparseComplexMatrix min (const SparseComplexMatrix& a,
                                           const SparseComplexMatrix& b);

extern SparseComplexMatrix max (const Complex& c,
                                           const SparseComplexMatrix& m);
extern SparseComplexMatrix max (const SparseComplexMatrix& m,
                                           const Complex& c);
extern SparseComplexMatrix max (const SparseComplexMatrix& a,
                                           const SparseComplexMatrix& b);

extern SparseBoolMatrix mx_el_lt (const SparseComplexMatrix&, const Complex&); extern SparseBoolMatrix mx_el_le (const SparseComplexMatrix&, const Complex&); extern SparseBoolMatrix mx_el_ge (const SparseComplexMatrix&, const Complex&); extern SparseBoolMatrix mx_el_gt (const SparseComplexMatrix&, const Complex&); extern SparseBoolMatrix mx_el_eq (const SparseComplexMatrix&, const Complex&); extern SparseBoolMatrix mx_el_ne (const SparseComplexMatrix&, const Complex&);
extern SparseBoolMatrix mx_el_and (const SparseComplexMatrix&, const Complex&); extern SparseBoolMatrix mx_el_or (const SparseComplexMatrix&, const Complex&);

extern SparseBoolMatrix mx_el_lt (const Complex&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_le (const Complex&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_ge (const Complex&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_gt (const Complex&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_eq (const Complex&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_ne (const Complex&, const SparseComplexMatrix&);
extern SparseBoolMatrix mx_el_and (const Complex&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_or (const Complex&, const SparseComplexMatrix&);

extern SparseBoolMatrix mx_el_lt (const SparseComplexMatrix&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_le (const SparseComplexMatrix&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_ge (const SparseComplexMatrix&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_gt (const SparseComplexMatrix&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_eq (const SparseComplexMatrix&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_ne (const SparseComplexMatrix&, const SparseComplexMatrix&);
extern SparseBoolMatrix mx_el_and (const SparseComplexMatrix&, const SparseComplexMatrix&); extern SparseBoolMatrix mx_el_or (const SparseComplexMatrix&, const SparseComplexMatrix&);

inline SparseComplexMatrix operator += (SparseComplexMatrix& x, const SparseComplexMatrix& y) { return SparseComplexMatrix (operator += (dynamic_cast<MSparse<Complex>&> (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline SparseComplexMatrix operator -= (SparseComplexMatrix& x, const SparseComplexMatrix& y) { return SparseComplexMatrix (operator -= (dynamic_cast<MSparse<Complex>&> (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline SparseComplexMatrix operator + (const SparseComplexMatrix& x) { return SparseComplexMatrix (operator + (dynamic_cast<const MSparse<Complex>&> (x))); } inline SparseComplexMatrix operator - (const SparseComplexMatrix& x) { return SparseComplexMatrix (operator - (dynamic_cast<const MSparse<Complex>&> (x))); } inline ComplexMatrix operator + (const SparseComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator + (dynamic_cast<const MSparse<Complex>&> (x), (y))); } inline ComplexMatrix operator - (const SparseComplexMatrix& x, const Complex& y) { return ComplexMatrix (operator - (dynamic_cast<const MSparse<Complex>&> (x), (y))); } inline SparseComplexMatrix operator * (const SparseComplexMatrix& x, const Complex& y) { return SparseComplexMatrix (operator * (dynamic_cast<const MSparse<Complex>&> (x), (y))); } inline SparseComplexMatrix operator / (const SparseComplexMatrix& x, const Complex& y) { return SparseComplexMatrix (operator / (dynamic_cast<const MSparse<Complex>&> (x), (y))); } inline ComplexMatrix operator + (const Complex& x, const SparseComplexMatrix& y) { return ComplexMatrix (operator + ( (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline ComplexMatrix operator - (const Complex& x, const SparseComplexMatrix& y) { return ComplexMatrix (operator - ( (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline SparseComplexMatrix operator * (const Complex& x, const SparseComplexMatrix& y) { return SparseComplexMatrix (operator * ( (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline SparseComplexMatrix operator / (const Complex& x, const SparseComplexMatrix& y) { return SparseComplexMatrix (operator / ( (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline SparseComplexMatrix operator + (const SparseComplexMatrix& x, const SparseComplexMatrix& y) { return SparseComplexMatrix (operator + (dynamic_cast<const MSparse<Complex>&> (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline SparseComplexMatrix operator - (const SparseComplexMatrix& x, const SparseComplexMatrix& y) { return SparseComplexMatrix (operator - (dynamic_cast<const MSparse<Complex>&> (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline SparseComplexMatrix product (const SparseComplexMatrix& x, const SparseComplexMatrix& y) { return SparseComplexMatrix (product (dynamic_cast<const MSparse<Complex>&> (x), dynamic_cast<const MSparse<Complex>&> (y))); } inline SparseComplexMatrix quotient (const SparseComplexMatrix& x, const SparseComplexMatrix& y) { return SparseComplexMatrix (quotient (dynamic_cast<const MSparse<Complex>&> (x), dynamic_cast<const MSparse<Complex>&> (y))); }
# 70 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 80 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int8NDArray.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int8NDArray.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/intNDArray.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/intNDArray.h"
class NDArray;

template <typename T>
class
intNDArray : public MArray<T>
{
public:

  using typename MArray<T>::element_type;

  intNDArray (void) : MArray<T> () { }

  intNDArray (T val) : MArray<T> (dim_vector (1, 1), val) { }

  intNDArray (const dim_vector& dv) : MArray<T> (dv) { }

  intNDArray (const dim_vector& dv, T val)
    : MArray<T> (dv, val) { }

  template <typename U>
  intNDArray (const Array<U>& a) : MArray<T> (a) { }

  template <typename U>
  intNDArray (const MArray<U>& a) : MArray<T> (a) { }

  template <typename U>
  intNDArray (const intNDArray<U>& a) : MArray<T> (a) { }

  intNDArray& operator = (const intNDArray<T>& a)
  {
    MArray<T>::operator = (a);
    return *this;
  }

  boolNDArray operator ! (void) const;

  bool any_element_is_nan (void) const { return false; }
  bool any_element_not_one_or_zero (void) const;

  intNDArray diag (octave_idx_type k = 0) const;

  intNDArray diag (octave_idx_type m, octave_idx_type n) const;

  intNDArray& changesign (void)
  {
    MArray<T>::changesign ();
    return *this;
  }



  boolNDArray all (int dim = -1) const;
  boolNDArray any (int dim = -1) const;

  intNDArray max (int dim = -1) const;
  intNDArray max (Array<octave_idx_type>& index, int dim = -1) const;
  intNDArray min (int dim = -1) const;
  intNDArray min (Array<octave_idx_type>& index, int dim = -1) const;

  intNDArray cummax (int dim = -1) const;
  intNDArray cummax (Array<octave_idx_type>& index, int dim = -1) const;
  intNDArray cummin (int dim = -1) const;
  intNDArray cummin (Array<octave_idx_type>& index, int dim = -1) const;

  intNDArray prod (int dim) const;
  intNDArray sum (int dim) const;
  NDArray dsum (int dim) const;
  intNDArray cumsum (int dim) const;

  intNDArray diff (octave_idx_type order = 1, int dim = -1) const;

  intNDArray abs (void) const;
  intNDArray signum (void) const;

  intNDArray squeeze (void) const
  { return intNDArray<T> (MArray<T>::squeeze ()); }

  intNDArray transpose (void) const
  { return intNDArray<T> (MArray<T>::transpose ()); }

  intNDArray concat (const intNDArray<T>& rb,
                     const Array<octave_idx_type>& ra_idx);

  intNDArray& insert (const intNDArray<T>& a,
                      octave_idx_type r, octave_idx_type c);
  intNDArray& insert (const intNDArray<T>& a,
                      const Array<octave_idx_type>& ra_idx);

  static void increment_index (Array<octave_idx_type>& ra_idx,
                               const dim_vector& dimensions,
                               int start_dimension = 0);

  static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
                                        const dim_vector& dimensions);
};



template <typename T>
std::ostream& operator << (std::ostream& os, const intNDArray<T>& a);

template <typename T>
std::istream& operator >> (std::istream& is, intNDArray<T>& a);
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int8NDArray.h" 2




typedef intNDArray<octave_int8> int8NDArray;

extern boolNDArray mx_el_lt (const int8NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const int8NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const int8NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const int8NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const int8NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const int8NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const int8NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const int8NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const int8NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const int8NDArray&, const octave_int8&);

extern boolNDArray mx_el_lt (const octave_int8&, const int8NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const int8NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const int8NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const int8NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const int8NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const int8NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const int8NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const int8NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const int8NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const int8NDArray&);

extern boolNDArray mx_el_lt (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const int8NDArray&);

inline int8NDArray operator += (int8NDArray& x, const octave_int8& y) { return int8NDArray (operator += (dynamic_cast<MArray<octave_int8>&> (x), (y))); } inline int8NDArray operator -= (int8NDArray& x, const octave_int8& y) { return int8NDArray (operator -= (dynamic_cast<MArray<octave_int8>&> (x), (y))); } inline int8NDArray operator *= (int8NDArray& x, const octave_int8& y) { return int8NDArray (operator *= (dynamic_cast<MArray<octave_int8>&> (x), (y))); } inline int8NDArray operator /= (int8NDArray& x, const octave_int8& y) { return int8NDArray (operator /= (dynamic_cast<MArray<octave_int8>&> (x), (y))); } inline int8NDArray operator += (int8NDArray& x, const int8NDArray& y) { return int8NDArray (operator += (dynamic_cast<MArray<octave_int8>&> (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray operator -= (int8NDArray& x, const int8NDArray& y) { return int8NDArray (operator -= (dynamic_cast<MArray<octave_int8>&> (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray product_eq (int8NDArray& x, const int8NDArray& y) { return int8NDArray (product_eq (dynamic_cast<MArray<octave_int8>&> (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray quotient_eq (int8NDArray& x, const int8NDArray& y) { return int8NDArray (quotient_eq (dynamic_cast<MArray<octave_int8>&> (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray operator + (const int8NDArray& x) { return int8NDArray (operator + (dynamic_cast<const MArray<octave_int8>&> (x))); } inline int8NDArray operator - (const int8NDArray& x) { return int8NDArray (operator - (dynamic_cast<const MArray<octave_int8>&> (x))); } inline int8NDArray operator + (const int8NDArray& x, const octave_int8& y) { return int8NDArray (operator + (dynamic_cast<const MArray<octave_int8>&> (x), (y))); } inline int8NDArray operator - (const int8NDArray& x, const octave_int8& y) { return int8NDArray (operator - (dynamic_cast<const MArray<octave_int8>&> (x), (y))); } inline int8NDArray operator * (const int8NDArray& x, const octave_int8& y) { return int8NDArray (operator * (dynamic_cast<const MArray<octave_int8>&> (x), (y))); } inline int8NDArray operator / (const int8NDArray& x, const octave_int8& y) { return int8NDArray (operator / (dynamic_cast<const MArray<octave_int8>&> (x), (y))); } inline int8NDArray operator + (const octave_int8& x, const int8NDArray& y) { return int8NDArray (operator + ( (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray operator - (const octave_int8& x, const int8NDArray& y) { return int8NDArray (operator - ( (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray operator * (const octave_int8& x, const int8NDArray& y) { return int8NDArray (operator * ( (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray operator / (const octave_int8& x, const int8NDArray& y) { return int8NDArray (operator / ( (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray operator + (const int8NDArray& x, const int8NDArray& y) { return int8NDArray (operator + (dynamic_cast<const MArray<octave_int8>&> (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray operator - (const int8NDArray& x, const int8NDArray& y) { return int8NDArray (operator - (dynamic_cast<const MArray<octave_int8>&> (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray product (const int8NDArray& x, const int8NDArray& y) { return int8NDArray (product (dynamic_cast<const MArray<octave_int8>&> (x), dynamic_cast<const MArray<octave_int8>&> (y))); } inline int8NDArray quotient (const int8NDArray& x, const int8NDArray& y) { return int8NDArray (quotient (dynamic_cast<const MArray<octave_int8>&> (x), dynamic_cast<const MArray<octave_int8>&> (y))); }

extern int8NDArray min (octave_int8 d, const int8NDArray& m); extern int8NDArray min (const int8NDArray& m, octave_int8 d); extern int8NDArray min (const int8NDArray& a, const int8NDArray& b); extern int8NDArray max (octave_int8 d, const int8NDArray& m); extern int8NDArray max (const int8NDArray& m, octave_int8 d); extern int8NDArray max (const int8NDArray& a, const int8NDArray& b);

extern int8NDArray bsxfun_add (const int8NDArray&, const int8NDArray&); extern int8NDArray bsxfun_sub (const int8NDArray&, const int8NDArray&); extern int8NDArray bsxfun_mul (const int8NDArray&, const int8NDArray&); extern int8NDArray bsxfun_div (const int8NDArray&, const int8NDArray&); extern int8NDArray bsxfun_pow (const int8NDArray&, const int8NDArray&); extern int8NDArray bsxfun_min (const int8NDArray&, const int8NDArray&); extern int8NDArray bsxfun_max (const int8NDArray&, const int8NDArray&);
extern int8NDArray bsxfun_pow (const int8NDArray&, const NDArray&); extern int8NDArray bsxfun_pow (const int8NDArray&, const FloatNDArray&); extern int8NDArray bsxfun_pow (const NDArray&, const int8NDArray&); extern int8NDArray bsxfun_pow (const FloatNDArray&, const int8NDArray&);
extern boolNDArray bsxfun_eq (const int8NDArray&, const int8NDArray&); extern boolNDArray bsxfun_ne (const int8NDArray&, const int8NDArray&); extern boolNDArray bsxfun_lt (const int8NDArray&, const int8NDArray&); extern boolNDArray bsxfun_le (const int8NDArray&, const int8NDArray&); extern boolNDArray bsxfun_gt (const int8NDArray&, const int8NDArray&); extern boolNDArray bsxfun_ge (const int8NDArray&, const int8NDArray&);
# 81 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int16NDArray.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int16NDArray.h"
typedef intNDArray<octave_int16> int16NDArray;

extern boolNDArray mx_el_lt (const int16NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const int16NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const int16NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const int16NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const int16NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const int16NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const int16NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const int16NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const int16NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const int16NDArray&, const octave_int16&);

extern boolNDArray mx_el_lt (const octave_int16&, const int16NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const int16NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const int16NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const int16NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const int16NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const int16NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const int16NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const int16NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const int16NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const int16NDArray&);

extern boolNDArray mx_el_lt (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const int16NDArray&);

inline int16NDArray operator += (int16NDArray& x, const octave_int16& y) { return int16NDArray (operator += (dynamic_cast<MArray<octave_int16>&> (x), (y))); } inline int16NDArray operator -= (int16NDArray& x, const octave_int16& y) { return int16NDArray (operator -= (dynamic_cast<MArray<octave_int16>&> (x), (y))); } inline int16NDArray operator *= (int16NDArray& x, const octave_int16& y) { return int16NDArray (operator *= (dynamic_cast<MArray<octave_int16>&> (x), (y))); } inline int16NDArray operator /= (int16NDArray& x, const octave_int16& y) { return int16NDArray (operator /= (dynamic_cast<MArray<octave_int16>&> (x), (y))); } inline int16NDArray operator += (int16NDArray& x, const int16NDArray& y) { return int16NDArray (operator += (dynamic_cast<MArray<octave_int16>&> (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray operator -= (int16NDArray& x, const int16NDArray& y) { return int16NDArray (operator -= (dynamic_cast<MArray<octave_int16>&> (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray product_eq (int16NDArray& x, const int16NDArray& y) { return int16NDArray (product_eq (dynamic_cast<MArray<octave_int16>&> (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray quotient_eq (int16NDArray& x, const int16NDArray& y) { return int16NDArray (quotient_eq (dynamic_cast<MArray<octave_int16>&> (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray operator + (const int16NDArray& x) { return int16NDArray (operator + (dynamic_cast<const MArray<octave_int16>&> (x))); } inline int16NDArray operator - (const int16NDArray& x) { return int16NDArray (operator - (dynamic_cast<const MArray<octave_int16>&> (x))); } inline int16NDArray operator + (const int16NDArray& x, const octave_int16& y) { return int16NDArray (operator + (dynamic_cast<const MArray<octave_int16>&> (x), (y))); } inline int16NDArray operator - (const int16NDArray& x, const octave_int16& y) { return int16NDArray (operator - (dynamic_cast<const MArray<octave_int16>&> (x), (y))); } inline int16NDArray operator * (const int16NDArray& x, const octave_int16& y) { return int16NDArray (operator * (dynamic_cast<const MArray<octave_int16>&> (x), (y))); } inline int16NDArray operator / (const int16NDArray& x, const octave_int16& y) { return int16NDArray (operator / (dynamic_cast<const MArray<octave_int16>&> (x), (y))); } inline int16NDArray operator + (const octave_int16& x, const int16NDArray& y) { return int16NDArray (operator + ( (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray operator - (const octave_int16& x, const int16NDArray& y) { return int16NDArray (operator - ( (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray operator * (const octave_int16& x, const int16NDArray& y) { return int16NDArray (operator * ( (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray operator / (const octave_int16& x, const int16NDArray& y) { return int16NDArray (operator / ( (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray operator + (const int16NDArray& x, const int16NDArray& y) { return int16NDArray (operator + (dynamic_cast<const MArray<octave_int16>&> (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray operator - (const int16NDArray& x, const int16NDArray& y) { return int16NDArray (operator - (dynamic_cast<const MArray<octave_int16>&> (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray product (const int16NDArray& x, const int16NDArray& y) { return int16NDArray (product (dynamic_cast<const MArray<octave_int16>&> (x), dynamic_cast<const MArray<octave_int16>&> (y))); } inline int16NDArray quotient (const int16NDArray& x, const int16NDArray& y) { return int16NDArray (quotient (dynamic_cast<const MArray<octave_int16>&> (x), dynamic_cast<const MArray<octave_int16>&> (y))); }

extern int16NDArray min (octave_int16 d, const int16NDArray& m); extern int16NDArray min (const int16NDArray& m, octave_int16 d); extern int16NDArray min (const int16NDArray& a, const int16NDArray& b); extern int16NDArray max (octave_int16 d, const int16NDArray& m); extern int16NDArray max (const int16NDArray& m, octave_int16 d); extern int16NDArray max (const int16NDArray& a, const int16NDArray& b);

extern int16NDArray bsxfun_add (const int16NDArray&, const int16NDArray&); extern int16NDArray bsxfun_sub (const int16NDArray&, const int16NDArray&); extern int16NDArray bsxfun_mul (const int16NDArray&, const int16NDArray&); extern int16NDArray bsxfun_div (const int16NDArray&, const int16NDArray&); extern int16NDArray bsxfun_pow (const int16NDArray&, const int16NDArray&); extern int16NDArray bsxfun_min (const int16NDArray&, const int16NDArray&); extern int16NDArray bsxfun_max (const int16NDArray&, const int16NDArray&);
extern int16NDArray bsxfun_pow (const int16NDArray&, const NDArray&); extern int16NDArray bsxfun_pow (const int16NDArray&, const FloatNDArray&); extern int16NDArray bsxfun_pow (const NDArray&, const int16NDArray&); extern int16NDArray bsxfun_pow (const FloatNDArray&, const int16NDArray&);
extern boolNDArray bsxfun_eq (const int16NDArray&, const int16NDArray&); extern boolNDArray bsxfun_ne (const int16NDArray&, const int16NDArray&); extern boolNDArray bsxfun_lt (const int16NDArray&, const int16NDArray&); extern boolNDArray bsxfun_le (const int16NDArray&, const int16NDArray&); extern boolNDArray bsxfun_gt (const int16NDArray&, const int16NDArray&); extern boolNDArray bsxfun_ge (const int16NDArray&, const int16NDArray&);
# 82 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int32NDArray.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int32NDArray.h"
typedef intNDArray<octave_int32> int32NDArray;

extern boolNDArray mx_el_lt (const int32NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const int32NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const int32NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const int32NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const int32NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const int32NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const int32NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const int32NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const int32NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const int32NDArray&, const octave_int32&);

extern boolNDArray mx_el_lt (const octave_int32&, const int32NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const int32NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const int32NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const int32NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const int32NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const int32NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const int32NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const int32NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const int32NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const int32NDArray&);

extern boolNDArray mx_el_lt (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const int32NDArray&);

inline int32NDArray operator += (int32NDArray& x, const octave_int32& y) { return int32NDArray (operator += (dynamic_cast<MArray<octave_int32>&> (x), (y))); } inline int32NDArray operator -= (int32NDArray& x, const octave_int32& y) { return int32NDArray (operator -= (dynamic_cast<MArray<octave_int32>&> (x), (y))); } inline int32NDArray operator *= (int32NDArray& x, const octave_int32& y) { return int32NDArray (operator *= (dynamic_cast<MArray<octave_int32>&> (x), (y))); } inline int32NDArray operator /= (int32NDArray& x, const octave_int32& y) { return int32NDArray (operator /= (dynamic_cast<MArray<octave_int32>&> (x), (y))); } inline int32NDArray operator += (int32NDArray& x, const int32NDArray& y) { return int32NDArray (operator += (dynamic_cast<MArray<octave_int32>&> (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray operator -= (int32NDArray& x, const int32NDArray& y) { return int32NDArray (operator -= (dynamic_cast<MArray<octave_int32>&> (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray product_eq (int32NDArray& x, const int32NDArray& y) { return int32NDArray (product_eq (dynamic_cast<MArray<octave_int32>&> (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray quotient_eq (int32NDArray& x, const int32NDArray& y) { return int32NDArray (quotient_eq (dynamic_cast<MArray<octave_int32>&> (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray operator + (const int32NDArray& x) { return int32NDArray (operator + (dynamic_cast<const MArray<octave_int32>&> (x))); } inline int32NDArray operator - (const int32NDArray& x) { return int32NDArray (operator - (dynamic_cast<const MArray<octave_int32>&> (x))); } inline int32NDArray operator + (const int32NDArray& x, const octave_int32& y) { return int32NDArray (operator + (dynamic_cast<const MArray<octave_int32>&> (x), (y))); } inline int32NDArray operator - (const int32NDArray& x, const octave_int32& y) { return int32NDArray (operator - (dynamic_cast<const MArray<octave_int32>&> (x), (y))); } inline int32NDArray operator * (const int32NDArray& x, const octave_int32& y) { return int32NDArray (operator * (dynamic_cast<const MArray<octave_int32>&> (x), (y))); } inline int32NDArray operator / (const int32NDArray& x, const octave_int32& y) { return int32NDArray (operator / (dynamic_cast<const MArray<octave_int32>&> (x), (y))); } inline int32NDArray operator + (const octave_int32& x, const int32NDArray& y) { return int32NDArray (operator + ( (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray operator - (const octave_int32& x, const int32NDArray& y) { return int32NDArray (operator - ( (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray operator * (const octave_int32& x, const int32NDArray& y) { return int32NDArray (operator * ( (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray operator / (const octave_int32& x, const int32NDArray& y) { return int32NDArray (operator / ( (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray operator + (const int32NDArray& x, const int32NDArray& y) { return int32NDArray (operator + (dynamic_cast<const MArray<octave_int32>&> (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray operator - (const int32NDArray& x, const int32NDArray& y) { return int32NDArray (operator - (dynamic_cast<const MArray<octave_int32>&> (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray product (const int32NDArray& x, const int32NDArray& y) { return int32NDArray (product (dynamic_cast<const MArray<octave_int32>&> (x), dynamic_cast<const MArray<octave_int32>&> (y))); } inline int32NDArray quotient (const int32NDArray& x, const int32NDArray& y) { return int32NDArray (quotient (dynamic_cast<const MArray<octave_int32>&> (x), dynamic_cast<const MArray<octave_int32>&> (y))); }

extern int32NDArray min (octave_int32 d, const int32NDArray& m); extern int32NDArray min (const int32NDArray& m, octave_int32 d); extern int32NDArray min (const int32NDArray& a, const int32NDArray& b); extern int32NDArray max (octave_int32 d, const int32NDArray& m); extern int32NDArray max (const int32NDArray& m, octave_int32 d); extern int32NDArray max (const int32NDArray& a, const int32NDArray& b);

extern int32NDArray bsxfun_add (const int32NDArray&, const int32NDArray&); extern int32NDArray bsxfun_sub (const int32NDArray&, const int32NDArray&); extern int32NDArray bsxfun_mul (const int32NDArray&, const int32NDArray&); extern int32NDArray bsxfun_div (const int32NDArray&, const int32NDArray&); extern int32NDArray bsxfun_pow (const int32NDArray&, const int32NDArray&); extern int32NDArray bsxfun_min (const int32NDArray&, const int32NDArray&); extern int32NDArray bsxfun_max (const int32NDArray&, const int32NDArray&);
extern int32NDArray bsxfun_pow (const int32NDArray&, const NDArray&); extern int32NDArray bsxfun_pow (const int32NDArray&, const FloatNDArray&); extern int32NDArray bsxfun_pow (const NDArray&, const int32NDArray&); extern int32NDArray bsxfun_pow (const FloatNDArray&, const int32NDArray&);
extern boolNDArray bsxfun_eq (const int32NDArray&, const int32NDArray&); extern boolNDArray bsxfun_ne (const int32NDArray&, const int32NDArray&); extern boolNDArray bsxfun_lt (const int32NDArray&, const int32NDArray&); extern boolNDArray bsxfun_le (const int32NDArray&, const int32NDArray&); extern boolNDArray bsxfun_gt (const int32NDArray&, const int32NDArray&); extern boolNDArray bsxfun_ge (const int32NDArray&, const int32NDArray&);
# 83 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int64NDArray.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/int64NDArray.h"
typedef intNDArray<octave_int64> int64NDArray;

extern boolNDArray mx_el_lt (const int64NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const int64NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const int64NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const int64NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const int64NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const int64NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const int64NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const int64NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const int64NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const int64NDArray&, const octave_int64&);

extern boolNDArray mx_el_lt (const octave_int64&, const int64NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const int64NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const int64NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const int64NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const int64NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const int64NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const int64NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const int64NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const int64NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const int64NDArray&);

extern boolNDArray mx_el_lt (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const int64NDArray&);

inline int64NDArray operator += (int64NDArray& x, const octave_int64& y) { return int64NDArray (operator += (dynamic_cast<MArray<octave_int64>&> (x), (y))); } inline int64NDArray operator -= (int64NDArray& x, const octave_int64& y) { return int64NDArray (operator -= (dynamic_cast<MArray<octave_int64>&> (x), (y))); } inline int64NDArray operator *= (int64NDArray& x, const octave_int64& y) { return int64NDArray (operator *= (dynamic_cast<MArray<octave_int64>&> (x), (y))); } inline int64NDArray operator /= (int64NDArray& x, const octave_int64& y) { return int64NDArray (operator /= (dynamic_cast<MArray<octave_int64>&> (x), (y))); } inline int64NDArray operator += (int64NDArray& x, const int64NDArray& y) { return int64NDArray (operator += (dynamic_cast<MArray<octave_int64>&> (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray operator -= (int64NDArray& x, const int64NDArray& y) { return int64NDArray (operator -= (dynamic_cast<MArray<octave_int64>&> (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray product_eq (int64NDArray& x, const int64NDArray& y) { return int64NDArray (product_eq (dynamic_cast<MArray<octave_int64>&> (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray quotient_eq (int64NDArray& x, const int64NDArray& y) { return int64NDArray (quotient_eq (dynamic_cast<MArray<octave_int64>&> (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray operator + (const int64NDArray& x) { return int64NDArray (operator + (dynamic_cast<const MArray<octave_int64>&> (x))); } inline int64NDArray operator - (const int64NDArray& x) { return int64NDArray (operator - (dynamic_cast<const MArray<octave_int64>&> (x))); } inline int64NDArray operator + (const int64NDArray& x, const octave_int64& y) { return int64NDArray (operator + (dynamic_cast<const MArray<octave_int64>&> (x), (y))); } inline int64NDArray operator - (const int64NDArray& x, const octave_int64& y) { return int64NDArray (operator - (dynamic_cast<const MArray<octave_int64>&> (x), (y))); } inline int64NDArray operator * (const int64NDArray& x, const octave_int64& y) { return int64NDArray (operator * (dynamic_cast<const MArray<octave_int64>&> (x), (y))); } inline int64NDArray operator / (const int64NDArray& x, const octave_int64& y) { return int64NDArray (operator / (dynamic_cast<const MArray<octave_int64>&> (x), (y))); } inline int64NDArray operator + (const octave_int64& x, const int64NDArray& y) { return int64NDArray (operator + ( (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray operator - (const octave_int64& x, const int64NDArray& y) { return int64NDArray (operator - ( (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray operator * (const octave_int64& x, const int64NDArray& y) { return int64NDArray (operator * ( (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray operator / (const octave_int64& x, const int64NDArray& y) { return int64NDArray (operator / ( (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray operator + (const int64NDArray& x, const int64NDArray& y) { return int64NDArray (operator + (dynamic_cast<const MArray<octave_int64>&> (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray operator - (const int64NDArray& x, const int64NDArray& y) { return int64NDArray (operator - (dynamic_cast<const MArray<octave_int64>&> (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray product (const int64NDArray& x, const int64NDArray& y) { return int64NDArray (product (dynamic_cast<const MArray<octave_int64>&> (x), dynamic_cast<const MArray<octave_int64>&> (y))); } inline int64NDArray quotient (const int64NDArray& x, const int64NDArray& y) { return int64NDArray (quotient (dynamic_cast<const MArray<octave_int64>&> (x), dynamic_cast<const MArray<octave_int64>&> (y))); }

extern int64NDArray min (octave_int64 d, const int64NDArray& m); extern int64NDArray min (const int64NDArray& m, octave_int64 d); extern int64NDArray min (const int64NDArray& a, const int64NDArray& b); extern int64NDArray max (octave_int64 d, const int64NDArray& m); extern int64NDArray max (const int64NDArray& m, octave_int64 d); extern int64NDArray max (const int64NDArray& a, const int64NDArray& b);

extern int64NDArray bsxfun_add (const int64NDArray&, const int64NDArray&); extern int64NDArray bsxfun_sub (const int64NDArray&, const int64NDArray&); extern int64NDArray bsxfun_mul (const int64NDArray&, const int64NDArray&); extern int64NDArray bsxfun_div (const int64NDArray&, const int64NDArray&); extern int64NDArray bsxfun_pow (const int64NDArray&, const int64NDArray&); extern int64NDArray bsxfun_min (const int64NDArray&, const int64NDArray&); extern int64NDArray bsxfun_max (const int64NDArray&, const int64NDArray&);
extern int64NDArray bsxfun_pow (const int64NDArray&, const NDArray&); extern int64NDArray bsxfun_pow (const int64NDArray&, const FloatNDArray&); extern int64NDArray bsxfun_pow (const NDArray&, const int64NDArray&); extern int64NDArray bsxfun_pow (const FloatNDArray&, const int64NDArray&);
extern boolNDArray bsxfun_eq (const int64NDArray&, const int64NDArray&); extern boolNDArray bsxfun_ne (const int64NDArray&, const int64NDArray&); extern boolNDArray bsxfun_lt (const int64NDArray&, const int64NDArray&); extern boolNDArray bsxfun_le (const int64NDArray&, const int64NDArray&); extern boolNDArray bsxfun_gt (const int64NDArray&, const int64NDArray&); extern boolNDArray bsxfun_ge (const int64NDArray&, const int64NDArray&);
# 84 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/uint8NDArray.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/uint8NDArray.h"
typedef intNDArray<octave_uint8> uint8NDArray;

extern boolNDArray mx_el_lt (const uint8NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const uint8NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const uint8NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const uint8NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const uint8NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const uint8NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const uint8NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const uint8NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const octave_uint8&);

extern boolNDArray mx_el_lt (const octave_uint8&, const uint8NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const uint8NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const uint8NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const uint8NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const uint8NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const uint8NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const uint8NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const uint8NDArray&);

extern boolNDArray mx_el_lt (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const uint8NDArray&);

inline uint8NDArray operator += (uint8NDArray& x, const octave_uint8& y) { return uint8NDArray (operator += (dynamic_cast<MArray<octave_uint8>&> (x), (y))); } inline uint8NDArray operator -= (uint8NDArray& x, const octave_uint8& y) { return uint8NDArray (operator -= (dynamic_cast<MArray<octave_uint8>&> (x), (y))); } inline uint8NDArray operator *= (uint8NDArray& x, const octave_uint8& y) { return uint8NDArray (operator *= (dynamic_cast<MArray<octave_uint8>&> (x), (y))); } inline uint8NDArray operator /= (uint8NDArray& x, const octave_uint8& y) { return uint8NDArray (operator /= (dynamic_cast<MArray<octave_uint8>&> (x), (y))); } inline uint8NDArray operator += (uint8NDArray& x, const uint8NDArray& y) { return uint8NDArray (operator += (dynamic_cast<MArray<octave_uint8>&> (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray operator -= (uint8NDArray& x, const uint8NDArray& y) { return uint8NDArray (operator -= (dynamic_cast<MArray<octave_uint8>&> (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray product_eq (uint8NDArray& x, const uint8NDArray& y) { return uint8NDArray (product_eq (dynamic_cast<MArray<octave_uint8>&> (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray quotient_eq (uint8NDArray& x, const uint8NDArray& y) { return uint8NDArray (quotient_eq (dynamic_cast<MArray<octave_uint8>&> (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray operator + (const uint8NDArray& x) { return uint8NDArray (operator + (dynamic_cast<const MArray<octave_uint8>&> (x))); } inline uint8NDArray operator - (const uint8NDArray& x) { return uint8NDArray (operator - (dynamic_cast<const MArray<octave_uint8>&> (x))); } inline uint8NDArray operator + (const uint8NDArray& x, const octave_uint8& y) { return uint8NDArray (operator + (dynamic_cast<const MArray<octave_uint8>&> (x), (y))); } inline uint8NDArray operator - (const uint8NDArray& x, const octave_uint8& y) { return uint8NDArray (operator - (dynamic_cast<const MArray<octave_uint8>&> (x), (y))); } inline uint8NDArray operator * (const uint8NDArray& x, const octave_uint8& y) { return uint8NDArray (operator * (dynamic_cast<const MArray<octave_uint8>&> (x), (y))); } inline uint8NDArray operator / (const uint8NDArray& x, const octave_uint8& y) { return uint8NDArray (operator / (dynamic_cast<const MArray<octave_uint8>&> (x), (y))); } inline uint8NDArray operator + (const octave_uint8& x, const uint8NDArray& y) { return uint8NDArray (operator + ( (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray operator - (const octave_uint8& x, const uint8NDArray& y) { return uint8NDArray (operator - ( (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray operator * (const octave_uint8& x, const uint8NDArray& y) { return uint8NDArray (operator * ( (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray operator / (const octave_uint8& x, const uint8NDArray& y) { return uint8NDArray (operator / ( (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray operator + (const uint8NDArray& x, const uint8NDArray& y) { return uint8NDArray (operator + (dynamic_cast<const MArray<octave_uint8>&> (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray operator - (const uint8NDArray& x, const uint8NDArray& y) { return uint8NDArray (operator - (dynamic_cast<const MArray<octave_uint8>&> (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray product (const uint8NDArray& x, const uint8NDArray& y) { return uint8NDArray (product (dynamic_cast<const MArray<octave_uint8>&> (x), dynamic_cast<const MArray<octave_uint8>&> (y))); } inline uint8NDArray quotient (const uint8NDArray& x, const uint8NDArray& y) { return uint8NDArray (quotient (dynamic_cast<const MArray<octave_uint8>&> (x), dynamic_cast<const MArray<octave_uint8>&> (y))); }

extern uint8NDArray min (octave_uint8 d, const uint8NDArray& m); extern uint8NDArray min (const uint8NDArray& m, octave_uint8 d); extern uint8NDArray min (const uint8NDArray& a, const uint8NDArray& b); extern uint8NDArray max (octave_uint8 d, const uint8NDArray& m); extern uint8NDArray max (const uint8NDArray& m, octave_uint8 d); extern uint8NDArray max (const uint8NDArray& a, const uint8NDArray& b);

extern uint8NDArray bsxfun_add (const uint8NDArray&, const uint8NDArray&); extern uint8NDArray bsxfun_sub (const uint8NDArray&, const uint8NDArray&); extern uint8NDArray bsxfun_mul (const uint8NDArray&, const uint8NDArray&); extern uint8NDArray bsxfun_div (const uint8NDArray&, const uint8NDArray&); extern uint8NDArray bsxfun_pow (const uint8NDArray&, const uint8NDArray&); extern uint8NDArray bsxfun_min (const uint8NDArray&, const uint8NDArray&); extern uint8NDArray bsxfun_max (const uint8NDArray&, const uint8NDArray&);
extern uint8NDArray bsxfun_pow (const uint8NDArray&, const NDArray&); extern uint8NDArray bsxfun_pow (const uint8NDArray&, const FloatNDArray&); extern uint8NDArray bsxfun_pow (const NDArray&, const uint8NDArray&); extern uint8NDArray bsxfun_pow (const FloatNDArray&, const uint8NDArray&);
extern boolNDArray bsxfun_eq (const uint8NDArray&, const uint8NDArray&); extern boolNDArray bsxfun_ne (const uint8NDArray&, const uint8NDArray&); extern boolNDArray bsxfun_lt (const uint8NDArray&, const uint8NDArray&); extern boolNDArray bsxfun_le (const uint8NDArray&, const uint8NDArray&); extern boolNDArray bsxfun_gt (const uint8NDArray&, const uint8NDArray&); extern boolNDArray bsxfun_ge (const uint8NDArray&, const uint8NDArray&);
# 86 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/uint16NDArray.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/uint16NDArray.h"
typedef intNDArray<octave_uint16> uint16NDArray;

extern boolNDArray mx_el_lt (const uint16NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const uint16NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const uint16NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const uint16NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const uint16NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const uint16NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const uint16NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const uint16NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const octave_uint16&);

extern boolNDArray mx_el_lt (const octave_uint16&, const uint16NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const uint16NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const uint16NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const uint16NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const uint16NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const uint16NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const uint16NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const uint16NDArray&);

extern boolNDArray mx_el_lt (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const uint16NDArray&);

inline uint16NDArray operator += (uint16NDArray& x, const octave_uint16& y) { return uint16NDArray (operator += (dynamic_cast<MArray<octave_uint16>&> (x), (y))); } inline uint16NDArray operator -= (uint16NDArray& x, const octave_uint16& y) { return uint16NDArray (operator -= (dynamic_cast<MArray<octave_uint16>&> (x), (y))); } inline uint16NDArray operator *= (uint16NDArray& x, const octave_uint16& y) { return uint16NDArray (operator *= (dynamic_cast<MArray<octave_uint16>&> (x), (y))); } inline uint16NDArray operator /= (uint16NDArray& x, const octave_uint16& y) { return uint16NDArray (operator /= (dynamic_cast<MArray<octave_uint16>&> (x), (y))); } inline uint16NDArray operator += (uint16NDArray& x, const uint16NDArray& y) { return uint16NDArray (operator += (dynamic_cast<MArray<octave_uint16>&> (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray operator -= (uint16NDArray& x, const uint16NDArray& y) { return uint16NDArray (operator -= (dynamic_cast<MArray<octave_uint16>&> (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray product_eq (uint16NDArray& x, const uint16NDArray& y) { return uint16NDArray (product_eq (dynamic_cast<MArray<octave_uint16>&> (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray quotient_eq (uint16NDArray& x, const uint16NDArray& y) { return uint16NDArray (quotient_eq (dynamic_cast<MArray<octave_uint16>&> (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray operator + (const uint16NDArray& x) { return uint16NDArray (operator + (dynamic_cast<const MArray<octave_uint16>&> (x))); } inline uint16NDArray operator - (const uint16NDArray& x) { return uint16NDArray (operator - (dynamic_cast<const MArray<octave_uint16>&> (x))); } inline uint16NDArray operator + (const uint16NDArray& x, const octave_uint16& y) { return uint16NDArray (operator + (dynamic_cast<const MArray<octave_uint16>&> (x), (y))); } inline uint16NDArray operator - (const uint16NDArray& x, const octave_uint16& y) { return uint16NDArray (operator - (dynamic_cast<const MArray<octave_uint16>&> (x), (y))); } inline uint16NDArray operator * (const uint16NDArray& x, const octave_uint16& y) { return uint16NDArray (operator * (dynamic_cast<const MArray<octave_uint16>&> (x), (y))); } inline uint16NDArray operator / (const uint16NDArray& x, const octave_uint16& y) { return uint16NDArray (operator / (dynamic_cast<const MArray<octave_uint16>&> (x), (y))); } inline uint16NDArray operator + (const octave_uint16& x, const uint16NDArray& y) { return uint16NDArray (operator + ( (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray operator - (const octave_uint16& x, const uint16NDArray& y) { return uint16NDArray (operator - ( (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray operator * (const octave_uint16& x, const uint16NDArray& y) { return uint16NDArray (operator * ( (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray operator / (const octave_uint16& x, const uint16NDArray& y) { return uint16NDArray (operator / ( (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray operator + (const uint16NDArray& x, const uint16NDArray& y) { return uint16NDArray (operator + (dynamic_cast<const MArray<octave_uint16>&> (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray operator - (const uint16NDArray& x, const uint16NDArray& y) { return uint16NDArray (operator - (dynamic_cast<const MArray<octave_uint16>&> (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray product (const uint16NDArray& x, const uint16NDArray& y) { return uint16NDArray (product (dynamic_cast<const MArray<octave_uint16>&> (x), dynamic_cast<const MArray<octave_uint16>&> (y))); } inline uint16NDArray quotient (const uint16NDArray& x, const uint16NDArray& y) { return uint16NDArray (quotient (dynamic_cast<const MArray<octave_uint16>&> (x), dynamic_cast<const MArray<octave_uint16>&> (y))); }

extern uint16NDArray min (octave_uint16 d, const uint16NDArray& m); extern uint16NDArray min (const uint16NDArray& m, octave_uint16 d); extern uint16NDArray min (const uint16NDArray& a, const uint16NDArray& b); extern uint16NDArray max (octave_uint16 d, const uint16NDArray& m); extern uint16NDArray max (const uint16NDArray& m, octave_uint16 d); extern uint16NDArray max (const uint16NDArray& a, const uint16NDArray& b);

extern uint16NDArray bsxfun_add (const uint16NDArray&, const uint16NDArray&); extern uint16NDArray bsxfun_sub (const uint16NDArray&, const uint16NDArray&); extern uint16NDArray bsxfun_mul (const uint16NDArray&, const uint16NDArray&); extern uint16NDArray bsxfun_div (const uint16NDArray&, const uint16NDArray&); extern uint16NDArray bsxfun_pow (const uint16NDArray&, const uint16NDArray&); extern uint16NDArray bsxfun_min (const uint16NDArray&, const uint16NDArray&); extern uint16NDArray bsxfun_max (const uint16NDArray&, const uint16NDArray&);
extern uint16NDArray bsxfun_pow (const uint16NDArray&, const NDArray&); extern uint16NDArray bsxfun_pow (const uint16NDArray&, const FloatNDArray&); extern uint16NDArray bsxfun_pow (const NDArray&, const uint16NDArray&); extern uint16NDArray bsxfun_pow (const FloatNDArray&, const uint16NDArray&);
extern boolNDArray bsxfun_eq (const uint16NDArray&, const uint16NDArray&); extern boolNDArray bsxfun_ne (const uint16NDArray&, const uint16NDArray&); extern boolNDArray bsxfun_lt (const uint16NDArray&, const uint16NDArray&); extern boolNDArray bsxfun_le (const uint16NDArray&, const uint16NDArray&); extern boolNDArray bsxfun_gt (const uint16NDArray&, const uint16NDArray&); extern boolNDArray bsxfun_ge (const uint16NDArray&, const uint16NDArray&);
# 87 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/uint32NDArray.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/uint32NDArray.h"
typedef intNDArray<octave_uint32> uint32NDArray;

extern boolNDArray mx_el_lt (const uint32NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const uint32NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const uint32NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const uint32NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const uint32NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const uint32NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const uint32NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const uint32NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const octave_uint32&);

extern boolNDArray mx_el_lt (const octave_uint32&, const uint32NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const uint32NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const uint32NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const uint32NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const uint32NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const uint32NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const uint32NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const uint32NDArray&);

extern boolNDArray mx_el_lt (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const uint32NDArray&);

inline uint32NDArray operator += (uint32NDArray& x, const octave_uint32& y) { return uint32NDArray (operator += (dynamic_cast<MArray<octave_uint32>&> (x), (y))); } inline uint32NDArray operator -= (uint32NDArray& x, const octave_uint32& y) { return uint32NDArray (operator -= (dynamic_cast<MArray<octave_uint32>&> (x), (y))); } inline uint32NDArray operator *= (uint32NDArray& x, const octave_uint32& y) { return uint32NDArray (operator *= (dynamic_cast<MArray<octave_uint32>&> (x), (y))); } inline uint32NDArray operator /= (uint32NDArray& x, const octave_uint32& y) { return uint32NDArray (operator /= (dynamic_cast<MArray<octave_uint32>&> (x), (y))); } inline uint32NDArray operator += (uint32NDArray& x, const uint32NDArray& y) { return uint32NDArray (operator += (dynamic_cast<MArray<octave_uint32>&> (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray operator -= (uint32NDArray& x, const uint32NDArray& y) { return uint32NDArray (operator -= (dynamic_cast<MArray<octave_uint32>&> (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray product_eq (uint32NDArray& x, const uint32NDArray& y) { return uint32NDArray (product_eq (dynamic_cast<MArray<octave_uint32>&> (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray quotient_eq (uint32NDArray& x, const uint32NDArray& y) { return uint32NDArray (quotient_eq (dynamic_cast<MArray<octave_uint32>&> (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray operator + (const uint32NDArray& x) { return uint32NDArray (operator + (dynamic_cast<const MArray<octave_uint32>&> (x))); } inline uint32NDArray operator - (const uint32NDArray& x) { return uint32NDArray (operator - (dynamic_cast<const MArray<octave_uint32>&> (x))); } inline uint32NDArray operator + (const uint32NDArray& x, const octave_uint32& y) { return uint32NDArray (operator + (dynamic_cast<const MArray<octave_uint32>&> (x), (y))); } inline uint32NDArray operator - (const uint32NDArray& x, const octave_uint32& y) { return uint32NDArray (operator - (dynamic_cast<const MArray<octave_uint32>&> (x), (y))); } inline uint32NDArray operator * (const uint32NDArray& x, const octave_uint32& y) { return uint32NDArray (operator * (dynamic_cast<const MArray<octave_uint32>&> (x), (y))); } inline uint32NDArray operator / (const uint32NDArray& x, const octave_uint32& y) { return uint32NDArray (operator / (dynamic_cast<const MArray<octave_uint32>&> (x), (y))); } inline uint32NDArray operator + (const octave_uint32& x, const uint32NDArray& y) { return uint32NDArray (operator + ( (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray operator - (const octave_uint32& x, const uint32NDArray& y) { return uint32NDArray (operator - ( (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray operator * (const octave_uint32& x, const uint32NDArray& y) { return uint32NDArray (operator * ( (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray operator / (const octave_uint32& x, const uint32NDArray& y) { return uint32NDArray (operator / ( (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray operator + (const uint32NDArray& x, const uint32NDArray& y) { return uint32NDArray (operator + (dynamic_cast<const MArray<octave_uint32>&> (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray operator - (const uint32NDArray& x, const uint32NDArray& y) { return uint32NDArray (operator - (dynamic_cast<const MArray<octave_uint32>&> (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray product (const uint32NDArray& x, const uint32NDArray& y) { return uint32NDArray (product (dynamic_cast<const MArray<octave_uint32>&> (x), dynamic_cast<const MArray<octave_uint32>&> (y))); } inline uint32NDArray quotient (const uint32NDArray& x, const uint32NDArray& y) { return uint32NDArray (quotient (dynamic_cast<const MArray<octave_uint32>&> (x), dynamic_cast<const MArray<octave_uint32>&> (y))); }

extern uint32NDArray min (octave_uint32 d, const uint32NDArray& m); extern uint32NDArray min (const uint32NDArray& m, octave_uint32 d); extern uint32NDArray min (const uint32NDArray& a, const uint32NDArray& b); extern uint32NDArray max (octave_uint32 d, const uint32NDArray& m); extern uint32NDArray max (const uint32NDArray& m, octave_uint32 d); extern uint32NDArray max (const uint32NDArray& a, const uint32NDArray& b);

extern uint32NDArray bsxfun_add (const uint32NDArray&, const uint32NDArray&); extern uint32NDArray bsxfun_sub (const uint32NDArray&, const uint32NDArray&); extern uint32NDArray bsxfun_mul (const uint32NDArray&, const uint32NDArray&); extern uint32NDArray bsxfun_div (const uint32NDArray&, const uint32NDArray&); extern uint32NDArray bsxfun_pow (const uint32NDArray&, const uint32NDArray&); extern uint32NDArray bsxfun_min (const uint32NDArray&, const uint32NDArray&); extern uint32NDArray bsxfun_max (const uint32NDArray&, const uint32NDArray&);
extern uint32NDArray bsxfun_pow (const uint32NDArray&, const NDArray&); extern uint32NDArray bsxfun_pow (const uint32NDArray&, const FloatNDArray&); extern uint32NDArray bsxfun_pow (const NDArray&, const uint32NDArray&); extern uint32NDArray bsxfun_pow (const FloatNDArray&, const uint32NDArray&);
extern boolNDArray bsxfun_eq (const uint32NDArray&, const uint32NDArray&); extern boolNDArray bsxfun_ne (const uint32NDArray&, const uint32NDArray&); extern boolNDArray bsxfun_lt (const uint32NDArray&, const uint32NDArray&); extern boolNDArray bsxfun_le (const uint32NDArray&, const uint32NDArray&); extern boolNDArray bsxfun_gt (const uint32NDArray&, const uint32NDArray&); extern boolNDArray bsxfun_ge (const uint32NDArray&, const uint32NDArray&);
# 88 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/uint64NDArray.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/uint64NDArray.h"
typedef intNDArray<octave_uint64> uint64NDArray;

extern boolNDArray mx_el_lt (const uint64NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const uint64NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const uint64NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const uint64NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const uint64NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const uint64NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const uint64NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const uint64NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const octave_uint64&);

extern boolNDArray mx_el_lt (const octave_uint64&, const uint64NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const uint64NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const uint64NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const uint64NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const uint64NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const uint64NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const uint64NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const uint64NDArray&);

extern boolNDArray mx_el_lt (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const uint64NDArray&);

inline uint64NDArray operator += (uint64NDArray& x, const octave_uint64& y) { return uint64NDArray (operator += (dynamic_cast<MArray<octave_uint64>&> (x), (y))); } inline uint64NDArray operator -= (uint64NDArray& x, const octave_uint64& y) { return uint64NDArray (operator -= (dynamic_cast<MArray<octave_uint64>&> (x), (y))); } inline uint64NDArray operator *= (uint64NDArray& x, const octave_uint64& y) { return uint64NDArray (operator *= (dynamic_cast<MArray<octave_uint64>&> (x), (y))); } inline uint64NDArray operator /= (uint64NDArray& x, const octave_uint64& y) { return uint64NDArray (operator /= (dynamic_cast<MArray<octave_uint64>&> (x), (y))); } inline uint64NDArray operator += (uint64NDArray& x, const uint64NDArray& y) { return uint64NDArray (operator += (dynamic_cast<MArray<octave_uint64>&> (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray operator -= (uint64NDArray& x, const uint64NDArray& y) { return uint64NDArray (operator -= (dynamic_cast<MArray<octave_uint64>&> (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray product_eq (uint64NDArray& x, const uint64NDArray& y) { return uint64NDArray (product_eq (dynamic_cast<MArray<octave_uint64>&> (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray quotient_eq (uint64NDArray& x, const uint64NDArray& y) { return uint64NDArray (quotient_eq (dynamic_cast<MArray<octave_uint64>&> (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray operator + (const uint64NDArray& x) { return uint64NDArray (operator + (dynamic_cast<const MArray<octave_uint64>&> (x))); } inline uint64NDArray operator - (const uint64NDArray& x) { return uint64NDArray (operator - (dynamic_cast<const MArray<octave_uint64>&> (x))); } inline uint64NDArray operator + (const uint64NDArray& x, const octave_uint64& y) { return uint64NDArray (operator + (dynamic_cast<const MArray<octave_uint64>&> (x), (y))); } inline uint64NDArray operator - (const uint64NDArray& x, const octave_uint64& y) { return uint64NDArray (operator - (dynamic_cast<const MArray<octave_uint64>&> (x), (y))); } inline uint64NDArray operator * (const uint64NDArray& x, const octave_uint64& y) { return uint64NDArray (operator * (dynamic_cast<const MArray<octave_uint64>&> (x), (y))); } inline uint64NDArray operator / (const uint64NDArray& x, const octave_uint64& y) { return uint64NDArray (operator / (dynamic_cast<const MArray<octave_uint64>&> (x), (y))); } inline uint64NDArray operator + (const octave_uint64& x, const uint64NDArray& y) { return uint64NDArray (operator + ( (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray operator - (const octave_uint64& x, const uint64NDArray& y) { return uint64NDArray (operator - ( (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray operator * (const octave_uint64& x, const uint64NDArray& y) { return uint64NDArray (operator * ( (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray operator / (const octave_uint64& x, const uint64NDArray& y) { return uint64NDArray (operator / ( (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray operator + (const uint64NDArray& x, const uint64NDArray& y) { return uint64NDArray (operator + (dynamic_cast<const MArray<octave_uint64>&> (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray operator - (const uint64NDArray& x, const uint64NDArray& y) { return uint64NDArray (operator - (dynamic_cast<const MArray<octave_uint64>&> (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray product (const uint64NDArray& x, const uint64NDArray& y) { return uint64NDArray (product (dynamic_cast<const MArray<octave_uint64>&> (x), dynamic_cast<const MArray<octave_uint64>&> (y))); } inline uint64NDArray quotient (const uint64NDArray& x, const uint64NDArray& y) { return uint64NDArray (quotient (dynamic_cast<const MArray<octave_uint64>&> (x), dynamic_cast<const MArray<octave_uint64>&> (y))); }

extern uint64NDArray min (octave_uint64 d, const uint64NDArray& m); extern uint64NDArray min (const uint64NDArray& m, octave_uint64 d); extern uint64NDArray min (const uint64NDArray& a, const uint64NDArray& b); extern uint64NDArray max (octave_uint64 d, const uint64NDArray& m); extern uint64NDArray max (const uint64NDArray& m, octave_uint64 d); extern uint64NDArray max (const uint64NDArray& a, const uint64NDArray& b);

extern uint64NDArray bsxfun_add (const uint64NDArray&, const uint64NDArray&); extern uint64NDArray bsxfun_sub (const uint64NDArray&, const uint64NDArray&); extern uint64NDArray bsxfun_mul (const uint64NDArray&, const uint64NDArray&); extern uint64NDArray bsxfun_div (const uint64NDArray&, const uint64NDArray&); extern uint64NDArray bsxfun_pow (const uint64NDArray&, const uint64NDArray&); extern uint64NDArray bsxfun_min (const uint64NDArray&, const uint64NDArray&); extern uint64NDArray bsxfun_max (const uint64NDArray&, const uint64NDArray&);
extern uint64NDArray bsxfun_pow (const uint64NDArray&, const NDArray&); extern uint64NDArray bsxfun_pow (const uint64NDArray&, const FloatNDArray&); extern uint64NDArray bsxfun_pow (const NDArray&, const uint64NDArray&); extern uint64NDArray bsxfun_pow (const FloatNDArray&, const uint64NDArray&);
extern boolNDArray bsxfun_eq (const uint64NDArray&, const uint64NDArray&); extern boolNDArray bsxfun_ne (const uint64NDArray&, const uint64NDArray&); extern boolNDArray bsxfun_lt (const uint64NDArray&, const uint64NDArray&); extern boolNDArray bsxfun_le (const uint64NDArray&, const uint64NDArray&); extern boolNDArray bsxfun_gt (const uint64NDArray&, const uint64NDArray&); extern boolNDArray bsxfun_ge (const uint64NDArray&, const uint64NDArray&);
# 89 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-base.h" 2
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Matrix.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/aepbalance.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/aepbalance.h"
namespace octave
{
  namespace math
  {
    template <typename MT>
    class aepbalance
    {
    public:

      typedef typename MT::real_column_vector_type VT;

      aepbalance (void) : balanced_mat (), scale (), ilo (), ihi (), job () { }

      aepbalance (const MT& a, bool noperm = false, bool noscal = false);

      aepbalance (const aepbalance& a)
        : balanced_mat (a.balanced_mat), scale (a.scale),
          ilo(a.ilo), ihi(a.ihi), job(a.job)
      { }

      aepbalance& operator = (const aepbalance& a)
      {
        if (this != &a)
          {
            balanced_mat = a.balanced_mat;
            scale = a.scale;
            ilo = a.ilo;
            ihi = a.ihi;
            job = a.job;
          }

        return *this;
      }

      virtual ~aepbalance (void) { }

      MT balancing_matrix (void) const;

      MT balanced_matrix (void) const
      {
        return balanced_mat;
      }

      VT permuting_vector (void) const
      {
        octave_idx_type n = balanced_mat.rows ();

        VT pv (n);

        for (octave_idx_type i = 0; i < n; i++)
          pv(i) = i+1;

        for (octave_idx_type i = n-1; i >= ihi; i--)
          {
            octave_idx_type j = scale(i) - 1;
            std::swap (pv(i), pv(j));
          }

        for (octave_idx_type i = 0; i < ilo-1; i++)
          {
            octave_idx_type j = scale(i) - 1;
            std::swap (pv(i), pv(j));
          }

        return pv;
      }

      VT scaling_vector (void) const
      {
        octave_idx_type n = balanced_mat.rows ();

        VT scv (n);

        for (octave_idx_type i = 0; i < ilo-1; i++)
          scv(i) = 1;

        for (octave_idx_type i = ilo-1; i < ihi; i++)
          scv(i) = scale(i);

        for (octave_idx_type i = ihi; i < n; i++)
          scv(i) = 1;

        return scv;
      }

    protected:

      MT balanced_mat;
      VT scale;
      octave_idx_type ilo;
      octave_idx_type ihi;
      char job;
    };
  }
}
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/gepbalance.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/gepbalance.h"
namespace octave
{
  namespace math
  {
    template <typename T>
    class
    gepbalance
    {
    public:

      typedef typename T::real_matrix_type RT;

      gepbalance (void)
        : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
      { }

      gepbalance (const T& a, const T& b, const std::string& job)
        : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
      {
        init (a, b, job);
      }

      gepbalance (const gepbalance& a)
        : balanced_mat (a.balanced_mat), balanced_mat2 (a.balanced_mat2),
          balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2)
      { }

      gepbalance& operator = (const gepbalance& a)
      {
        if (this != &a)
          {
            balanced_mat = a.balanced_mat;
            balanced_mat2 = a.balanced_mat2;
            balancing_mat = a.balancing_mat;
            balancing_mat2 = a.balancing_mat2;
          }

        return *this;
      }

      ~gepbalance (void) { }

      T balanced_matrix (void) const { return balanced_mat; }

      T balanced_matrix2 (void) const { return balanced_mat2; }

      RT balancing_matrix (void) const { return balancing_mat; }

      RT balancing_matrix2 (void) const { return balancing_mat2; }

    private:

      T balanced_mat;
      T balanced_mat2;
      RT balancing_mat;
      RT balancing_mat2;

      octave_idx_type init (const T& a, const T& b, const std::string& job);
    };
  }
}
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2







# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/chol.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/chol.h"
namespace octave
{
  namespace math
  {
    template <typename T>
    class
    chol
    {
    public:

      typedef typename T::column_vector_type VT;
      typedef typename T::real_elt_type COND_T;

      chol (void) : chol_mat (), xrcond (0) { }

      chol (const T& a, bool upper = true, bool calc_cond = false)
        : chol_mat (), xrcond (0)
      {
        init (a, upper, calc_cond);
      }

      chol (const T& a, octave_idx_type& info, bool upper = true,
            bool calc_cond = false)
        : chol_mat (), xrcond (0)
      {
        info = init (a, upper, calc_cond);
      }

      chol (const chol& a)
        : chol_mat (a.chol_mat), xrcond (a.xrcond) { }

      chol& operator = (const chol& a)
      {
        if (this != &a)
          {
            chol_mat = a.chol_mat;
            xrcond = a.xrcond;
          }

        return *this;
      }

      T chol_matrix (void) const { return chol_mat; }

      COND_T rcond (void) const { return xrcond; }


      T inverse (void) const;

      void set (const T& R);

      void update (const VT& u);

      octave_idx_type downdate (const VT& u);

      octave_idx_type insert_sym (const VT& u, octave_idx_type j);

      void delete_sym (octave_idx_type j);

      void shift_sym (octave_idx_type i, octave_idx_type j);

    private:

      T chol_mat;

      COND_T xrcond;

      bool is_upper;

      octave_idx_type init (const T& a, bool upper, bool calc_cond);
    };

    template <typename T>
    T
    chol2inv (const T& r);
  }
}
# 43 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/hess.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/hess.h"
namespace octave
{
  namespace math
  {
    template <typename T>
    class
    hess
    {
    public:

      hess (void)
        : hess_mat (), unitary_hess_mat ()
      { }

      hess (const T& a)
        : hess_mat (), unitary_hess_mat ()
      {
        init (a);
      }

      hess (const T& a, octave_idx_type& info)
        : hess_mat (), unitary_hess_mat ()
      {
        info = init (a);
      }

      hess (const hess& a)
        : hess_mat (a.hess_mat), unitary_hess_mat (a.unitary_hess_mat)
      { }

      hess& operator = (const hess& a)
      {
        if (this != &a)
          {
            hess_mat = a.hess_mat;
            unitary_hess_mat = a.unitary_hess_mat;
          }

        return *this;
      }

      ~hess (void) { }

      T hess_matrix (void) const { return hess_mat; }

      T unitary_hess_matrix (void) const { return unitary_hess_mat; }

    private:

      T hess_mat;
      T unitary_hess_mat;

      octave_idx_type init (const T& a);
    };

    template <typename T>
    extern std::ostream&
    operator << (std::ostream& os, const hess<T>& a);
  }
}
# 47 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/schur.h" 1
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/schur.h"
namespace octave
{
  namespace math
  {
    template <typename T> class schur;

    template <typename T>
    class
    schur
    {
    public:

      schur (void) : schur_mat (), unitary_mat () { }

      schur (const T& a, const std::string& ord, bool calc_unitary = true)
        : schur_mat (), unitary_mat ()
      {
        init (a, ord, calc_unitary);
      }

      schur (const T& a, const std::string& ord, octave_idx_type& info,
             bool calc_unitary = true)
        : schur_mat (), unitary_mat ()
      {
        info = init (a, ord, calc_unitary);
      }




      schur (const T& s, const T& u) : schur_mat (s), unitary_mat (u) { }

      schur (const schur& a)

        : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat)
      { }

      schur& operator = (const schur& a)
      {
        if (this != &a)
          {
            schur_mat = a.schur_mat;
            unitary_mat = a.unitary_mat;
          }

        return *this;
      }

      ~schur (void) { }

      T schur_matrix (void) const { return schur_mat; }

      T unitary_matrix (void) const { return unitary_mat; }

    protected:

    private:

      T schur_mat;
      T unitary_mat;

      octave_idx_type
      init (const T& a, const std::string& ord, bool calc_unitary);
    };

    template <typename RT, typename AT>
    extern schur<RT>
    rsf2csf (const AT& s, const AT& u);
  }
}
# 51 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/svd.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/svd.h"
namespace octave
{
  namespace math
  {
    template <typename T>
    class
    svd
    {
    public:

      typedef typename T::real_diag_matrix_type DM_T;

      enum class Type
      {
        std,
        economy,
        sigma_only
      };

      enum class Driver
      {
        GESVD,
        GESDD
      };

      svd (void)
        : m_type (), m_driver (), left_sm (), sigma (), right_sm ()
      { }

      svd (const T& a, svd::Type type = svd::Type::std,
           svd::Driver driver = svd::Driver::GESVD);

      svd (const svd& a)
        : m_type (a.m_type), m_driver (a.m_driver), left_sm (a.left_sm),
          sigma (a.sigma), right_sm (a.right_sm)
      { }

      svd& operator = (const svd& a)
      {
        if (this != &a)
          {
            m_type = a.m_type;
            left_sm = a.left_sm;
            sigma = a.sigma;
            right_sm = a.right_sm;
            m_driver = a.m_driver;
          }

        return *this;
      }

      ~svd (void) { }

      T left_singular_matrix (void) const;

      DM_T singular_values (void) const { return sigma; }

      T right_singular_matrix (void) const;

    private:

      typedef typename T::element_type P;
      typedef typename DM_T::element_type DM_P;

      svd::Type m_type;
      svd::Driver m_driver;

      T left_sm;
      DM_T sigma;
      T right_sm;

      void gesvd (char& jobu, char& jobv, octave_idx_type m, octave_idx_type n,
                  P* tmp_data, octave_idx_type m1, DM_P* s_vec, P* u, P* vt,
                  octave_idx_type nrow_vt1, std::vector<P>& work,
                  octave_idx_type& lwork, octave_idx_type& info);

      void gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
                  P* tmp_data, octave_idx_type m1, DM_P* s_vec, P* u, P* vt,
                  octave_idx_type nrow_vt1, std::vector<P>& work,
                  octave_idx_type& lwork,
                  octave_idx_type* iwork, octave_idx_type& info);
    };
  }
}
# 55 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/EIG.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/EIG.h"
class

EIG
{
  friend class Matrix;
  friend class ComplexMatrix;

public:

  EIG (void) : lambda (), v (), w () { }

  EIG (const Matrix& a, bool calc_rev = true,
       bool calc_lev = true, bool balance = true)
    : lambda (), v (), w ()
  {
    init (a, calc_rev, calc_lev, balance);
  }

  EIG (const Matrix& a, octave_idx_type& info,
       bool calc_rev = true, bool calc_lev = true, bool balance = true)
    : lambda (), v (), w ()
  {
    info = init (a, calc_rev, calc_lev, balance);
  }

  EIG (const Matrix& a, const Matrix& b,
       bool calc_rev = true, bool calc_lev = true, bool force_qz = false)
    : lambda (), v (), w ()
  {
    init (a, b, calc_rev, calc_lev, force_qz);
  }

  EIG (const Matrix& a, const Matrix& b, octave_idx_type& info,
       bool calc_rev = true, bool calc_lev = true, bool force_qz = false)
    : lambda (), v (), w ()
  {
    info = init (a, b, calc_rev, calc_lev, force_qz);
  }

  EIG (const ComplexMatrix& a, bool calc_rev = true,
       bool calc_lev = true, bool balance = true)
    : lambda (), v (), w ()
  {
    init (a, calc_rev, calc_lev, balance);
  }

  EIG (const ComplexMatrix& a, octave_idx_type& info,
       bool calc_rev = true, bool calc_lev = true, bool balance = true)
    : lambda (), v (), w ()
  {
    info = init (a, calc_rev, calc_lev, balance);
  }

  EIG (const ComplexMatrix& a, const ComplexMatrix& b,
       bool calc_rev = true, bool calc_lev = true, bool force_qz = false)
    : lambda (), v (), w ()
  {
    init (a, b, calc_rev, calc_lev, force_qz);
  }

  EIG (const ComplexMatrix& a, const ComplexMatrix& b,
       octave_idx_type& info, bool calc_rev = true, bool calc_lev = true,
       bool force_qz = false)
    : lambda (), v (), w ()
  {
    info = init (a, b, calc_rev, calc_lev, force_qz);
  }

  EIG (const EIG& a) : lambda (a.lambda), v (a.v), w (a.w) { }

  EIG& operator = (const EIG& a)
  {
    if (this != &a)
      {
        lambda = a.lambda;
        v = a.v;
        w = a.w;
      }
    return *this;
  }

  ~EIG (void) { }

  ComplexColumnVector eigenvalues (void) const { return lambda; }
  ComplexMatrix right_eigenvectors (void) const { return v; }
  ComplexMatrix left_eigenvectors (void) const { return w; }

  friend std::ostream& operator << (std::ostream& os, const EIG& a);

private:

  ComplexColumnVector lambda;
  ComplexMatrix v;
  ComplexMatrix w;

  octave_idx_type init (const Matrix& a, bool calc_rev, bool calc_lev,
                        bool balance);

  octave_idx_type init (const Matrix& a, const Matrix& b,
                        bool calc_rev, bool calc_lev, bool force_qz);

  octave_idx_type init (const ComplexMatrix& a, bool calc_rev,
                        bool calc_lev, bool balance);

  octave_idx_type init (const ComplexMatrix& a, const ComplexMatrix& b,
                        bool calc_rev, bool calc_lev, bool force_qz);

  octave_idx_type symmetric_init (const Matrix& a, bool calc_rev,
                                  bool calc_lev);

  octave_idx_type symmetric_init (const Matrix& a, const Matrix& b,
                                  bool calc_rev, bool calc_lev);

  octave_idx_type hermitian_init (const ComplexMatrix& a,
                                  bool calc_rev, bool calc_lev);

  octave_idx_type hermitian_init (const ComplexMatrix& a,
                                  const ComplexMatrix& b,
                                  bool calc_rev, bool calc_lev);

};
# 59 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lu.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lu.h"
namespace octave
{
  namespace math
  {
    template <typename T>
    class
    lu
    {
    public:

      typedef typename T::column_vector_type VT;
      typedef typename T::element_type ELT_T;

      lu (void)
        : a_fact (), l_fact (), ipvt () { }

      lu (const T& a);

      lu (const lu& a)
        : a_fact (a.a_fact), l_fact (a.l_fact), ipvt (a.ipvt) { }

      lu (const T& l, const T& u, const PermMatrix& p);

      lu& operator = (const lu& a)
      {
        if (this != &a)
          {
            a_fact = a.a_fact;
            l_fact = a.l_fact;
            ipvt = a.ipvt;
          }

        return *this;
      }

      virtual ~lu (void) { }

      bool packed (void) const;

      void unpack (void);

      T L (void) const;

      T U (void) const;

      T Y (void) const;

      PermMatrix P (void) const;

      ColumnVector P_vec (void) const;

      bool regular (void) const;

      void update (const VT& u, const VT& v);

      void update (const T& u, const T& v);

      void update_piv (const VT& u, const VT& v);

      void update_piv (const T& u, const T& v);

    protected:

      Array<octave_idx_type> getp (void) const;

      T a_fact;
      T l_fact;

      Array<octave_idx_type> ipvt;
    };
  }
}
# 63 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/qr.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/qr.h"
namespace octave
{
  namespace math
  {
    template <typename T>
    class
    qr
    {
    public:

      typedef typename T::element_type ELT_T;
      typedef typename T::row_vector_type RV_T;
      typedef typename T::column_vector_type CV_T;

      enum type
      {
        std,
        raw,
        economy
      };

      qr (void) : q (), r () { }

      qr (const T& a, type qr_type = qr::std)
        : q (), r ()
      {
        init (a, qr_type);
      }

      qr (const T& q, const T& r);

      qr (const qr& a) : q (a.q), r (a.r) { }

      qr& operator = (const qr& a)
      {
        if (this != &a)
          {
            q = a.q;
            r = a.r;
          }

        return *this;
      }

      virtual ~qr (void) { }

      T Q (void) const { return q; }

      T R (void) const { return r; }

      type get_type (void) const;

      bool regular (void) const;

      void init (const T& a, type qr_type);

      void update (const CV_T& u, const CV_T& v);

      void update (const T& u, const T& v);

      void insert_col (const CV_T& u, octave_idx_type j);

      void insert_col (const T& u, const Array<octave_idx_type>& j);

      void delete_col (octave_idx_type j);

      void delete_col (const Array<octave_idx_type>& j);

      void insert_row (const RV_T& u, octave_idx_type j);

      void delete_row (octave_idx_type j);

      void shift_cols (octave_idx_type i, octave_idx_type j);

    protected:

      T q;
      T r;

      void form (octave_idx_type n, T& afact, ELT_T *tau, type qr_type);
    };

    extern void warn_qrupdate_once (void);
  }
}
# 67 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ext.h" 2
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Matrix.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 1




# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cdm-dm.h" 1







extern ComplexDiagMatrix operator + (const ComplexDiagMatrix&, const DiagMatrix&); extern ComplexDiagMatrix operator - (const ComplexDiagMatrix&, const DiagMatrix&); extern ComplexDiagMatrix product (const ComplexDiagMatrix&, const DiagMatrix&);
# 6 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-dm-cdm.h" 1







extern ComplexDiagMatrix operator + (const DiagMatrix&, const ComplexDiagMatrix&); extern ComplexDiagMatrix operator - (const DiagMatrix&, const ComplexDiagMatrix&); extern ComplexDiagMatrix product (const DiagMatrix&, const ComplexDiagMatrix&);
# 7 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cs-dm.h" 1








extern ComplexDiagMatrix operator * (const Complex&, const DiagMatrix&);
# 8 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cs-m.h" 1








extern ComplexMatrix operator + (const Complex&, const Matrix&); extern ComplexMatrix operator - (const Complex&, const Matrix&); extern ComplexMatrix operator * (const Complex&, const Matrix&); extern ComplexMatrix operator / (const Complex&, const Matrix&);
extern boolMatrix mx_el_lt (const Complex&, const Matrix&); extern boolMatrix mx_el_le (const Complex&, const Matrix&); extern boolMatrix mx_el_ge (const Complex&, const Matrix&); extern boolMatrix mx_el_gt (const Complex&, const Matrix&); extern boolMatrix mx_el_eq (const Complex&, const Matrix&); extern boolMatrix mx_el_ne (const Complex&, const Matrix&);
extern boolMatrix mx_el_and (const Complex&, const Matrix&); extern boolMatrix mx_el_or (const Complex&, const Matrix&);
# 9 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cs-nda.h" 1








extern ComplexNDArray operator + (const Complex&, const NDArray&); extern ComplexNDArray operator - (const Complex&, const NDArray&); extern ComplexNDArray operator * (const Complex&, const NDArray&); extern ComplexNDArray operator / (const Complex&, const NDArray&);
extern boolNDArray mx_el_lt (const Complex&, const NDArray&); extern boolNDArray mx_el_le (const Complex&, const NDArray&); extern boolNDArray mx_el_ge (const Complex&, const NDArray&); extern boolNDArray mx_el_gt (const Complex&, const NDArray&); extern boolNDArray mx_el_eq (const Complex&, const NDArray&); extern boolNDArray mx_el_ne (const Complex&, const NDArray&);
extern boolNDArray mx_el_and (const Complex&, const NDArray&); extern boolNDArray mx_el_or (const Complex&, const NDArray&); extern boolNDArray mx_el_and_not (const Complex&, const NDArray&); extern boolNDArray mx_el_or_not (const Complex&, const NDArray&);
# 10 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cdm-cm.h" 1







extern ComplexMatrix operator + (const ComplexDiagMatrix&, const ComplexMatrix&); extern ComplexMatrix operator - (const ComplexDiagMatrix&, const ComplexMatrix&); extern ComplexMatrix operator * (const ComplexDiagMatrix&, const ComplexMatrix&);
# 11 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cdm-m.h" 1








extern ComplexMatrix operator + (const ComplexDiagMatrix&, const Matrix&); extern ComplexMatrix operator - (const ComplexDiagMatrix&, const Matrix&); extern ComplexMatrix operator * (const ComplexDiagMatrix&, const Matrix&);
# 12 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cdm-s.h" 1






extern ComplexDiagMatrix operator * (const ComplexDiagMatrix&, const double&); extern ComplexDiagMatrix operator / (const ComplexDiagMatrix&, const double&);
# 13 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cm-cdm.h" 1







extern ComplexMatrix operator + (const ComplexMatrix&, const ComplexDiagMatrix&); extern ComplexMatrix operator - (const ComplexMatrix&, const ComplexDiagMatrix&); extern ComplexMatrix operator * (const ComplexMatrix&, const ComplexDiagMatrix&);
# 14 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cm-dm.h" 1







extern ComplexMatrix operator + (const ComplexMatrix&, const DiagMatrix&); extern ComplexMatrix operator - (const ComplexMatrix&, const DiagMatrix&); extern ComplexMatrix operator * (const ComplexMatrix&, const DiagMatrix&);
# 15 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cm-m.h" 1







extern ComplexMatrix operator + (const ComplexMatrix&, const Matrix&); extern ComplexMatrix operator - (const ComplexMatrix&, const Matrix&); extern ComplexMatrix product (const ComplexMatrix&, const Matrix&); extern ComplexMatrix quotient (const ComplexMatrix&, const Matrix&);
extern boolMatrix mx_el_lt (const ComplexMatrix&, const Matrix&); extern boolMatrix mx_el_le (const ComplexMatrix&, const Matrix&); extern boolMatrix mx_el_ge (const ComplexMatrix&, const Matrix&); extern boolMatrix mx_el_gt (const ComplexMatrix&, const Matrix&); extern boolMatrix mx_el_eq (const ComplexMatrix&, const Matrix&); extern boolMatrix mx_el_ne (const ComplexMatrix&, const Matrix&);
extern boolMatrix mx_el_and (const ComplexMatrix&, const Matrix&); extern boolMatrix mx_el_or (const ComplexMatrix&, const Matrix&);
# 16 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cnda-nda.h" 1







extern ComplexNDArray operator + (const ComplexNDArray&, const NDArray&); extern ComplexNDArray operator - (const ComplexNDArray&, const NDArray&); extern ComplexNDArray product (const ComplexNDArray&, const NDArray&); extern ComplexNDArray quotient (const ComplexNDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_le (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_ge (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_gt (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_eq (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_ne (const ComplexNDArray&, const NDArray&);
extern boolNDArray mx_el_and (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_or (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const ComplexNDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const ComplexNDArray&, const NDArray&);
# 17 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cm-s.h" 1






extern ComplexMatrix operator + (const ComplexMatrix&, const double&); extern ComplexMatrix operator - (const ComplexMatrix&, const double&); extern ComplexMatrix operator * (const ComplexMatrix&, const double&); extern ComplexMatrix operator / (const ComplexMatrix&, const double&);
extern boolMatrix mx_el_lt (const ComplexMatrix&, const double&); extern boolMatrix mx_el_le (const ComplexMatrix&, const double&); extern boolMatrix mx_el_ge (const ComplexMatrix&, const double&); extern boolMatrix mx_el_gt (const ComplexMatrix&, const double&); extern boolMatrix mx_el_eq (const ComplexMatrix&, const double&); extern boolMatrix mx_el_ne (const ComplexMatrix&, const double&);
extern boolMatrix mx_el_and (const ComplexMatrix&, const double&); extern boolMatrix mx_el_or (const ComplexMatrix&, const double&);
# 18 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cnda-s.h" 1






extern ComplexNDArray operator + (const ComplexNDArray&, const double&); extern ComplexNDArray operator - (const ComplexNDArray&, const double&); extern ComplexNDArray operator * (const ComplexNDArray&, const double&); extern ComplexNDArray operator / (const ComplexNDArray&, const double&);
extern boolNDArray mx_el_lt (const ComplexNDArray&, const double&); extern boolNDArray mx_el_le (const ComplexNDArray&, const double&); extern boolNDArray mx_el_ge (const ComplexNDArray&, const double&); extern boolNDArray mx_el_gt (const ComplexNDArray&, const double&); extern boolNDArray mx_el_eq (const ComplexNDArray&, const double&); extern boolNDArray mx_el_ne (const ComplexNDArray&, const double&);
extern boolNDArray mx_el_and (const ComplexNDArray&, const double&); extern boolNDArray mx_el_or (const ComplexNDArray&, const double&); extern boolNDArray mx_el_not_and (const ComplexNDArray&, const double&); extern boolNDArray mx_el_not_or (const ComplexNDArray&, const double&);
# 19 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-dm-cs.h" 1








extern ComplexDiagMatrix operator * (const DiagMatrix&, const Complex&); extern ComplexDiagMatrix operator / (const DiagMatrix&, const Complex&);
# 20 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-dm-cm.h" 1







extern ComplexMatrix operator + (const DiagMatrix&, const ComplexMatrix&); extern ComplexMatrix operator - (const DiagMatrix&, const ComplexMatrix&); extern ComplexMatrix operator * (const DiagMatrix&, const ComplexMatrix&);
# 21 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-m-cs.h" 1








extern ComplexMatrix operator + (const Matrix&, const Complex&); extern ComplexMatrix operator - (const Matrix&, const Complex&); extern ComplexMatrix operator * (const Matrix&, const Complex&); extern ComplexMatrix operator / (const Matrix&, const Complex&);
extern boolMatrix mx_el_lt (const Matrix&, const Complex&); extern boolMatrix mx_el_le (const Matrix&, const Complex&); extern boolMatrix mx_el_ge (const Matrix&, const Complex&); extern boolMatrix mx_el_gt (const Matrix&, const Complex&); extern boolMatrix mx_el_eq (const Matrix&, const Complex&); extern boolMatrix mx_el_ne (const Matrix&, const Complex&);
extern boolMatrix mx_el_and (const Matrix&, const Complex&); extern boolMatrix mx_el_or (const Matrix&, const Complex&);
# 22 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-cs.h" 1








extern ComplexNDArray operator + (const NDArray&, const Complex&); extern ComplexNDArray operator - (const NDArray&, const Complex&); extern ComplexNDArray operator * (const NDArray&, const Complex&); extern ComplexNDArray operator / (const NDArray&, const Complex&);
extern boolNDArray mx_el_lt (const NDArray&, const Complex&); extern boolNDArray mx_el_le (const NDArray&, const Complex&); extern boolNDArray mx_el_ge (const NDArray&, const Complex&); extern boolNDArray mx_el_gt (const NDArray&, const Complex&); extern boolNDArray mx_el_eq (const NDArray&, const Complex&); extern boolNDArray mx_el_ne (const NDArray&, const Complex&);
extern boolNDArray mx_el_and (const NDArray&, const Complex&); extern boolNDArray mx_el_or (const NDArray&, const Complex&); extern boolNDArray mx_el_not_and (const NDArray&, const Complex&); extern boolNDArray mx_el_not_or (const NDArray&, const Complex&);
# 23 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-m-cdm.h" 1








extern ComplexMatrix operator + (const Matrix&, const ComplexDiagMatrix&); extern ComplexMatrix operator - (const Matrix&, const ComplexDiagMatrix&); extern ComplexMatrix operator * (const Matrix&, const ComplexDiagMatrix&);
# 24 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-m-cm.h" 1







extern ComplexMatrix operator + (const Matrix&, const ComplexMatrix&); extern ComplexMatrix operator - (const Matrix&, const ComplexMatrix&); extern ComplexMatrix product (const Matrix&, const ComplexMatrix&); extern ComplexMatrix quotient (const Matrix&, const ComplexMatrix&);
extern boolMatrix mx_el_lt (const Matrix&, const ComplexMatrix&); extern boolMatrix mx_el_le (const Matrix&, const ComplexMatrix&); extern boolMatrix mx_el_ge (const Matrix&, const ComplexMatrix&); extern boolMatrix mx_el_gt (const Matrix&, const ComplexMatrix&); extern boolMatrix mx_el_eq (const Matrix&, const ComplexMatrix&); extern boolMatrix mx_el_ne (const Matrix&, const ComplexMatrix&);
extern boolMatrix mx_el_and (const Matrix&, const ComplexMatrix&); extern boolMatrix mx_el_or (const Matrix&, const ComplexMatrix&);
# 25 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-cnda.h" 1







extern ComplexNDArray operator + (const NDArray&, const ComplexNDArray&); extern ComplexNDArray operator - (const NDArray&, const ComplexNDArray&); extern ComplexNDArray product (const NDArray&, const ComplexNDArray&); extern ComplexNDArray quotient (const NDArray&, const ComplexNDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_le (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_ge (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_gt (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_eq (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_ne (const NDArray&, const ComplexNDArray&);
extern boolNDArray mx_el_and (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_or (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const ComplexNDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const ComplexNDArray&);
# 26 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-cdm.h" 1






extern ComplexDiagMatrix operator * (const double&, const ComplexDiagMatrix&);
# 27 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-cm.h" 1






extern ComplexMatrix operator + (const double&, const ComplexMatrix&); extern ComplexMatrix operator - (const double&, const ComplexMatrix&); extern ComplexMatrix operator * (const double&, const ComplexMatrix&); extern ComplexMatrix operator / (const double&, const ComplexMatrix&);
extern boolMatrix mx_el_lt (const double&, const ComplexMatrix&); extern boolMatrix mx_el_le (const double&, const ComplexMatrix&); extern boolMatrix mx_el_ge (const double&, const ComplexMatrix&); extern boolMatrix mx_el_gt (const double&, const ComplexMatrix&); extern boolMatrix mx_el_eq (const double&, const ComplexMatrix&); extern boolMatrix mx_el_ne (const double&, const ComplexMatrix&);
extern boolMatrix mx_el_and (const double&, const ComplexMatrix&); extern boolMatrix mx_el_or (const double&, const ComplexMatrix&);
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-cnda.h" 1






extern ComplexNDArray operator + (const double&, const ComplexNDArray&); extern ComplexNDArray operator - (const double&, const ComplexNDArray&); extern ComplexNDArray operator * (const double&, const ComplexNDArray&); extern ComplexNDArray operator / (const double&, const ComplexNDArray&);
extern boolNDArray mx_el_lt (const double&, const ComplexNDArray&); extern boolNDArray mx_el_le (const double&, const ComplexNDArray&); extern boolNDArray mx_el_ge (const double&, const ComplexNDArray&); extern boolNDArray mx_el_gt (const double&, const ComplexNDArray&); extern boolNDArray mx_el_eq (const double&, const ComplexNDArray&); extern boolNDArray mx_el_ne (const double&, const ComplexNDArray&);
extern boolNDArray mx_el_and (const double&, const ComplexNDArray&); extern boolNDArray mx_el_or (const double&, const ComplexNDArray&); extern boolNDArray mx_el_and_not (const double&, const ComplexNDArray&); extern boolNDArray mx_el_or_not (const double&, const ComplexNDArray&);
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-dm-m.h" 1







extern Matrix operator + (const DiagMatrix&, const Matrix&); extern Matrix operator - (const DiagMatrix&, const Matrix&); extern Matrix operator * (const DiagMatrix&, const Matrix&);
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-m-dm.h" 1







extern Matrix operator + (const Matrix&, const DiagMatrix&); extern Matrix operator - (const Matrix&, const DiagMatrix&); extern Matrix operator * (const Matrix&, const DiagMatrix&);
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcdm-fdm.h" 1







extern FloatComplexDiagMatrix operator + (const FloatComplexDiagMatrix&, const FloatDiagMatrix&); extern FloatComplexDiagMatrix operator - (const FloatComplexDiagMatrix&, const FloatDiagMatrix&); extern FloatComplexDiagMatrix product (const FloatComplexDiagMatrix&, const FloatDiagMatrix&);
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fdm-fcdm.h" 1







extern FloatComplexDiagMatrix operator + (const FloatDiagMatrix&, const FloatComplexDiagMatrix&); extern FloatComplexDiagMatrix operator - (const FloatDiagMatrix&, const FloatComplexDiagMatrix&); extern FloatComplexDiagMatrix product (const FloatDiagMatrix&, const FloatComplexDiagMatrix&);
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcs-fdm.h" 1








extern FloatComplexDiagMatrix operator * (const FloatComplex&, const FloatDiagMatrix&);
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcs-fm.h" 1








extern FloatComplexMatrix operator + (const FloatComplex&, const FloatMatrix&); extern FloatComplexMatrix operator - (const FloatComplex&, const FloatMatrix&); extern FloatComplexMatrix operator * (const FloatComplex&, const FloatMatrix&); extern FloatComplexMatrix operator / (const FloatComplex&, const FloatMatrix&);
extern boolMatrix mx_el_lt (const FloatComplex&, const FloatMatrix&); extern boolMatrix mx_el_le (const FloatComplex&, const FloatMatrix&); extern boolMatrix mx_el_ge (const FloatComplex&, const FloatMatrix&); extern boolMatrix mx_el_gt (const FloatComplex&, const FloatMatrix&); extern boolMatrix mx_el_eq (const FloatComplex&, const FloatMatrix&); extern boolMatrix mx_el_ne (const FloatComplex&, const FloatMatrix&);
extern boolMatrix mx_el_and (const FloatComplex&, const FloatMatrix&); extern boolMatrix mx_el_or (const FloatComplex&, const FloatMatrix&);
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcs-fnda.h" 1








extern FloatComplexNDArray operator + (const FloatComplex&, const FloatNDArray&); extern FloatComplexNDArray operator - (const FloatComplex&, const FloatNDArray&); extern FloatComplexNDArray operator * (const FloatComplex&, const FloatNDArray&); extern FloatComplexNDArray operator / (const FloatComplex&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const FloatComplex&, const FloatNDArray&); extern boolNDArray mx_el_le (const FloatComplex&, const FloatNDArray&); extern boolNDArray mx_el_ge (const FloatComplex&, const FloatNDArray&); extern boolNDArray mx_el_gt (const FloatComplex&, const FloatNDArray&); extern boolNDArray mx_el_eq (const FloatComplex&, const FloatNDArray&); extern boolNDArray mx_el_ne (const FloatComplex&, const FloatNDArray&);
extern boolNDArray mx_el_and (const FloatComplex&, const FloatNDArray&); extern boolNDArray mx_el_or (const FloatComplex&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const FloatComplex&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const FloatComplex&, const FloatNDArray&);
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcdm-fcm.h" 1







extern FloatComplexMatrix operator + (const FloatComplexDiagMatrix&, const FloatComplexMatrix&); extern FloatComplexMatrix operator - (const FloatComplexDiagMatrix&, const FloatComplexMatrix&); extern FloatComplexMatrix operator * (const FloatComplexDiagMatrix&, const FloatComplexMatrix&);
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcdm-fm.h" 1








extern FloatComplexMatrix operator + (const FloatComplexDiagMatrix&, const FloatMatrix&); extern FloatComplexMatrix operator - (const FloatComplexDiagMatrix&, const FloatMatrix&); extern FloatComplexMatrix operator * (const FloatComplexDiagMatrix&, const FloatMatrix&);
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcdm-fs.h" 1






extern FloatComplexDiagMatrix operator * (const FloatComplexDiagMatrix&, const float&); extern FloatComplexDiagMatrix operator / (const FloatComplexDiagMatrix&, const float&);
# 39 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcm-fcdm.h" 1







extern FloatComplexMatrix operator + (const FloatComplexMatrix&, const FloatComplexDiagMatrix&); extern FloatComplexMatrix operator - (const FloatComplexMatrix&, const FloatComplexDiagMatrix&); extern FloatComplexMatrix operator * (const FloatComplexMatrix&, const FloatComplexDiagMatrix&);
# 40 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcm-fdm.h" 1







extern FloatComplexMatrix operator + (const FloatComplexMatrix&, const FloatDiagMatrix&); extern FloatComplexMatrix operator - (const FloatComplexMatrix&, const FloatDiagMatrix&); extern FloatComplexMatrix operator * (const FloatComplexMatrix&, const FloatDiagMatrix&);
# 41 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcm-fm.h" 1







extern FloatComplexMatrix operator + (const FloatComplexMatrix&, const FloatMatrix&); extern FloatComplexMatrix operator - (const FloatComplexMatrix&, const FloatMatrix&); extern FloatComplexMatrix product (const FloatComplexMatrix&, const FloatMatrix&); extern FloatComplexMatrix quotient (const FloatComplexMatrix&, const FloatMatrix&);
extern boolMatrix mx_el_lt (const FloatComplexMatrix&, const FloatMatrix&); extern boolMatrix mx_el_le (const FloatComplexMatrix&, const FloatMatrix&); extern boolMatrix mx_el_ge (const FloatComplexMatrix&, const FloatMatrix&); extern boolMatrix mx_el_gt (const FloatComplexMatrix&, const FloatMatrix&); extern boolMatrix mx_el_eq (const FloatComplexMatrix&, const FloatMatrix&); extern boolMatrix mx_el_ne (const FloatComplexMatrix&, const FloatMatrix&);
extern boolMatrix mx_el_and (const FloatComplexMatrix&, const FloatMatrix&); extern boolMatrix mx_el_or (const FloatComplexMatrix&, const FloatMatrix&);
# 42 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcnda-fnda.h" 1







extern FloatComplexNDArray operator + (const FloatComplexNDArray&, const FloatNDArray&); extern FloatComplexNDArray operator - (const FloatComplexNDArray&, const FloatNDArray&); extern FloatComplexNDArray product (const FloatComplexNDArray&, const FloatNDArray&); extern FloatComplexNDArray quotient (const FloatComplexNDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const FloatComplexNDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const FloatComplexNDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const FloatComplexNDArray&, const FloatNDArray&);
# 43 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcm-fs.h" 1






extern FloatComplexMatrix operator + (const FloatComplexMatrix&, const float&); extern FloatComplexMatrix operator - (const FloatComplexMatrix&, const float&); extern FloatComplexMatrix operator * (const FloatComplexMatrix&, const float&); extern FloatComplexMatrix operator / (const FloatComplexMatrix&, const float&);
extern boolMatrix mx_el_lt (const FloatComplexMatrix&, const float&); extern boolMatrix mx_el_le (const FloatComplexMatrix&, const float&); extern boolMatrix mx_el_ge (const FloatComplexMatrix&, const float&); extern boolMatrix mx_el_gt (const FloatComplexMatrix&, const float&); extern boolMatrix mx_el_eq (const FloatComplexMatrix&, const float&); extern boolMatrix mx_el_ne (const FloatComplexMatrix&, const float&);
extern boolMatrix mx_el_and (const FloatComplexMatrix&, const float&); extern boolMatrix mx_el_or (const FloatComplexMatrix&, const float&);
# 44 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcnda-fs.h" 1






extern FloatComplexNDArray operator + (const FloatComplexNDArray&, const float&); extern FloatComplexNDArray operator - (const FloatComplexNDArray&, const float&); extern FloatComplexNDArray operator * (const FloatComplexNDArray&, const float&); extern FloatComplexNDArray operator / (const FloatComplexNDArray&, const float&);
extern boolNDArray mx_el_lt (const FloatComplexNDArray&, const float&); extern boolNDArray mx_el_le (const FloatComplexNDArray&, const float&); extern boolNDArray mx_el_ge (const FloatComplexNDArray&, const float&); extern boolNDArray mx_el_gt (const FloatComplexNDArray&, const float&); extern boolNDArray mx_el_eq (const FloatComplexNDArray&, const float&); extern boolNDArray mx_el_ne (const FloatComplexNDArray&, const float&);
extern boolNDArray mx_el_and (const FloatComplexNDArray&, const float&); extern boolNDArray mx_el_or (const FloatComplexNDArray&, const float&); extern boolNDArray mx_el_not_and (const FloatComplexNDArray&, const float&); extern boolNDArray mx_el_not_or (const FloatComplexNDArray&, const float&);
# 45 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fdm-fcs.h" 1








extern FloatComplexDiagMatrix operator * (const FloatDiagMatrix&, const FloatComplex&); extern FloatComplexDiagMatrix operator / (const FloatDiagMatrix&, const FloatComplex&);
# 46 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fdm-fcm.h" 1







extern FloatComplexMatrix operator + (const FloatDiagMatrix&, const FloatComplexMatrix&); extern FloatComplexMatrix operator - (const FloatDiagMatrix&, const FloatComplexMatrix&); extern FloatComplexMatrix operator * (const FloatDiagMatrix&, const FloatComplexMatrix&);
# 47 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fm-fcs.h" 1








extern FloatComplexMatrix operator + (const FloatMatrix&, const FloatComplex&); extern FloatComplexMatrix operator - (const FloatMatrix&, const FloatComplex&); extern FloatComplexMatrix operator * (const FloatMatrix&, const FloatComplex&); extern FloatComplexMatrix operator / (const FloatMatrix&, const FloatComplex&);
extern boolMatrix mx_el_lt (const FloatMatrix&, const FloatComplex&); extern boolMatrix mx_el_le (const FloatMatrix&, const FloatComplex&); extern boolMatrix mx_el_ge (const FloatMatrix&, const FloatComplex&); extern boolMatrix mx_el_gt (const FloatMatrix&, const FloatComplex&); extern boolMatrix mx_el_eq (const FloatMatrix&, const FloatComplex&); extern boolMatrix mx_el_ne (const FloatMatrix&, const FloatComplex&);
extern boolMatrix mx_el_and (const FloatMatrix&, const FloatComplex&); extern boolMatrix mx_el_or (const FloatMatrix&, const FloatComplex&);
# 48 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-fcs.h" 1








extern FloatComplexNDArray operator + (const FloatNDArray&, const FloatComplex&); extern FloatComplexNDArray operator - (const FloatNDArray&, const FloatComplex&); extern FloatComplexNDArray operator * (const FloatNDArray&, const FloatComplex&); extern FloatComplexNDArray operator / (const FloatNDArray&, const FloatComplex&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const FloatComplex&); extern boolNDArray mx_el_le (const FloatNDArray&, const FloatComplex&); extern boolNDArray mx_el_ge (const FloatNDArray&, const FloatComplex&); extern boolNDArray mx_el_gt (const FloatNDArray&, const FloatComplex&); extern boolNDArray mx_el_eq (const FloatNDArray&, const FloatComplex&); extern boolNDArray mx_el_ne (const FloatNDArray&, const FloatComplex&);
extern boolNDArray mx_el_and (const FloatNDArray&, const FloatComplex&); extern boolNDArray mx_el_or (const FloatNDArray&, const FloatComplex&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const FloatComplex&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const FloatComplex&);
# 49 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fm-fcdm.h" 1








extern FloatComplexMatrix operator + (const FloatMatrix&, const FloatComplexDiagMatrix&); extern FloatComplexMatrix operator - (const FloatMatrix&, const FloatComplexDiagMatrix&); extern FloatComplexMatrix operator * (const FloatMatrix&, const FloatComplexDiagMatrix&);
# 50 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fm-fcm.h" 1







extern FloatComplexMatrix operator + (const FloatMatrix&, const FloatComplexMatrix&); extern FloatComplexMatrix operator - (const FloatMatrix&, const FloatComplexMatrix&); extern FloatComplexMatrix product (const FloatMatrix&, const FloatComplexMatrix&); extern FloatComplexMatrix quotient (const FloatMatrix&, const FloatComplexMatrix&);
extern boolMatrix mx_el_lt (const FloatMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_le (const FloatMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_ge (const FloatMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_gt (const FloatMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_eq (const FloatMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_ne (const FloatMatrix&, const FloatComplexMatrix&);
extern boolMatrix mx_el_and (const FloatMatrix&, const FloatComplexMatrix&); extern boolMatrix mx_el_or (const FloatMatrix&, const FloatComplexMatrix&);
# 51 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-fcnda.h" 1







extern FloatComplexNDArray operator + (const FloatNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray operator - (const FloatNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray product (const FloatNDArray&, const FloatComplexNDArray&); extern FloatComplexNDArray quotient (const FloatNDArray&, const FloatComplexNDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const FloatComplexNDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const FloatComplexNDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const FloatComplexNDArray&);
# 52 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-fcdm.h" 1






extern FloatComplexDiagMatrix operator * (const float&, const FloatComplexDiagMatrix&);
# 53 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-fcm.h" 1






extern FloatComplexMatrix operator + (const float&, const FloatComplexMatrix&); extern FloatComplexMatrix operator - (const float&, const FloatComplexMatrix&); extern FloatComplexMatrix operator * (const float&, const FloatComplexMatrix&); extern FloatComplexMatrix operator / (const float&, const FloatComplexMatrix&);
extern boolMatrix mx_el_lt (const float&, const FloatComplexMatrix&); extern boolMatrix mx_el_le (const float&, const FloatComplexMatrix&); extern boolMatrix mx_el_ge (const float&, const FloatComplexMatrix&); extern boolMatrix mx_el_gt (const float&, const FloatComplexMatrix&); extern boolMatrix mx_el_eq (const float&, const FloatComplexMatrix&); extern boolMatrix mx_el_ne (const float&, const FloatComplexMatrix&);
extern boolMatrix mx_el_and (const float&, const FloatComplexMatrix&); extern boolMatrix mx_el_or (const float&, const FloatComplexMatrix&);
# 54 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-fcnda.h" 1






extern FloatComplexNDArray operator + (const float&, const FloatComplexNDArray&); extern FloatComplexNDArray operator - (const float&, const FloatComplexNDArray&); extern FloatComplexNDArray operator * (const float&, const FloatComplexNDArray&); extern FloatComplexNDArray operator / (const float&, const FloatComplexNDArray&);
extern boolNDArray mx_el_lt (const float&, const FloatComplexNDArray&); extern boolNDArray mx_el_le (const float&, const FloatComplexNDArray&); extern boolNDArray mx_el_ge (const float&, const FloatComplexNDArray&); extern boolNDArray mx_el_gt (const float&, const FloatComplexNDArray&); extern boolNDArray mx_el_eq (const float&, const FloatComplexNDArray&); extern boolNDArray mx_el_ne (const float&, const FloatComplexNDArray&);
extern boolNDArray mx_el_and (const float&, const FloatComplexNDArray&); extern boolNDArray mx_el_or (const float&, const FloatComplexNDArray&); extern boolNDArray mx_el_and_not (const float&, const FloatComplexNDArray&); extern boolNDArray mx_el_or_not (const float&, const FloatComplexNDArray&);
# 55 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fdm-fm.h" 1







extern FloatMatrix operator + (const FloatDiagMatrix&, const FloatMatrix&); extern FloatMatrix operator - (const FloatDiagMatrix&, const FloatMatrix&); extern FloatMatrix operator * (const FloatDiagMatrix&, const FloatMatrix&);
# 56 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fm-fdm.h" 1







extern FloatMatrix operator + (const FloatMatrix&, const FloatDiagMatrix&); extern FloatMatrix operator - (const FloatMatrix&, const FloatDiagMatrix&); extern FloatMatrix operator * (const FloatMatrix&, const FloatDiagMatrix&);
# 57 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-pm-m.h" 1







extern Matrix operator * (const PermMatrix&, const Matrix&);
# 58 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-m-pm.h" 1







extern Matrix operator * (const Matrix&, const PermMatrix&);
# 59 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-pm-cm.h" 1







extern ComplexMatrix operator * (const PermMatrix&, const ComplexMatrix&);
# 60 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-cm-pm.h" 1







extern ComplexMatrix operator * (const ComplexMatrix&, const PermMatrix&);
# 61 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-pm-fm.h" 1







extern FloatMatrix operator * (const PermMatrix&, const FloatMatrix&);
# 62 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fm-pm.h" 1







extern FloatMatrix operator * (const FloatMatrix&, const PermMatrix&);
# 63 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-pm-fcm.h" 1







extern FloatComplexMatrix operator * (const PermMatrix&, const FloatComplexMatrix&);
# 64 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fcm-pm.h" 1







extern FloatComplexMatrix operator * (const FloatComplexMatrix&, const PermMatrix&);
# 65 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-i8nda.h" 1






extern int8NDArray operator + (const double&, const int8NDArray&); extern int8NDArray operator - (const double&, const int8NDArray&); extern int8NDArray operator * (const double&, const int8NDArray&); extern int8NDArray operator / (const double&, const int8NDArray&);
extern boolNDArray mx_el_lt (const double&, const int8NDArray&); extern boolNDArray mx_el_le (const double&, const int8NDArray&); extern boolNDArray mx_el_ge (const double&, const int8NDArray&); extern boolNDArray mx_el_gt (const double&, const int8NDArray&); extern boolNDArray mx_el_eq (const double&, const int8NDArray&); extern boolNDArray mx_el_ne (const double&, const int8NDArray&);
extern boolNDArray mx_el_and (const double&, const int8NDArray&); extern boolNDArray mx_el_or (const double&, const int8NDArray&); extern boolNDArray mx_el_and_not (const double&, const int8NDArray&); extern boolNDArray mx_el_or_not (const double&, const int8NDArray&);
# 66 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-s.h" 1






extern int8NDArray operator + (const int8NDArray&, const double&); extern int8NDArray operator - (const int8NDArray&, const double&); extern int8NDArray operator * (const int8NDArray&, const double&); extern int8NDArray operator / (const int8NDArray&, const double&);
extern boolNDArray mx_el_lt (const int8NDArray&, const double&); extern boolNDArray mx_el_le (const int8NDArray&, const double&); extern boolNDArray mx_el_ge (const int8NDArray&, const double&); extern boolNDArray mx_el_gt (const int8NDArray&, const double&); extern boolNDArray mx_el_eq (const int8NDArray&, const double&); extern boolNDArray mx_el_ne (const int8NDArray&, const double&);
extern boolNDArray mx_el_and (const int8NDArray&, const double&); extern boolNDArray mx_el_or (const int8NDArray&, const double&); extern boolNDArray mx_el_not_and (const int8NDArray&, const double&); extern boolNDArray mx_el_not_or (const int8NDArray&, const double&);
# 67 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-ui8nda.h" 1






extern uint8NDArray operator + (const double&, const uint8NDArray&); extern uint8NDArray operator - (const double&, const uint8NDArray&); extern uint8NDArray operator * (const double&, const uint8NDArray&); extern uint8NDArray operator / (const double&, const uint8NDArray&);
extern boolNDArray mx_el_lt (const double&, const uint8NDArray&); extern boolNDArray mx_el_le (const double&, const uint8NDArray&); extern boolNDArray mx_el_ge (const double&, const uint8NDArray&); extern boolNDArray mx_el_gt (const double&, const uint8NDArray&); extern boolNDArray mx_el_eq (const double&, const uint8NDArray&); extern boolNDArray mx_el_ne (const double&, const uint8NDArray&);
extern boolNDArray mx_el_and (const double&, const uint8NDArray&); extern boolNDArray mx_el_or (const double&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const double&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const double&, const uint8NDArray&);
# 68 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-s.h" 1






extern uint8NDArray operator + (const uint8NDArray&, const double&); extern uint8NDArray operator - (const uint8NDArray&, const double&); extern uint8NDArray operator * (const uint8NDArray&, const double&); extern uint8NDArray operator / (const uint8NDArray&, const double&);
extern boolNDArray mx_el_lt (const uint8NDArray&, const double&); extern boolNDArray mx_el_le (const uint8NDArray&, const double&); extern boolNDArray mx_el_ge (const uint8NDArray&, const double&); extern boolNDArray mx_el_gt (const uint8NDArray&, const double&); extern boolNDArray mx_el_eq (const uint8NDArray&, const double&); extern boolNDArray mx_el_ne (const uint8NDArray&, const double&);
extern boolNDArray mx_el_and (const uint8NDArray&, const double&); extern boolNDArray mx_el_or (const uint8NDArray&, const double&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const double&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const double&);
# 69 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-i16nda.h" 1






extern int16NDArray operator + (const double&, const int16NDArray&); extern int16NDArray operator - (const double&, const int16NDArray&); extern int16NDArray operator * (const double&, const int16NDArray&); extern int16NDArray operator / (const double&, const int16NDArray&);
extern boolNDArray mx_el_lt (const double&, const int16NDArray&); extern boolNDArray mx_el_le (const double&, const int16NDArray&); extern boolNDArray mx_el_ge (const double&, const int16NDArray&); extern boolNDArray mx_el_gt (const double&, const int16NDArray&); extern boolNDArray mx_el_eq (const double&, const int16NDArray&); extern boolNDArray mx_el_ne (const double&, const int16NDArray&);
extern boolNDArray mx_el_and (const double&, const int16NDArray&); extern boolNDArray mx_el_or (const double&, const int16NDArray&); extern boolNDArray mx_el_and_not (const double&, const int16NDArray&); extern boolNDArray mx_el_or_not (const double&, const int16NDArray&);
# 70 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-s.h" 1






extern int16NDArray operator + (const int16NDArray&, const double&); extern int16NDArray operator - (const int16NDArray&, const double&); extern int16NDArray operator * (const int16NDArray&, const double&); extern int16NDArray operator / (const int16NDArray&, const double&);
extern boolNDArray mx_el_lt (const int16NDArray&, const double&); extern boolNDArray mx_el_le (const int16NDArray&, const double&); extern boolNDArray mx_el_ge (const int16NDArray&, const double&); extern boolNDArray mx_el_gt (const int16NDArray&, const double&); extern boolNDArray mx_el_eq (const int16NDArray&, const double&); extern boolNDArray mx_el_ne (const int16NDArray&, const double&);
extern boolNDArray mx_el_and (const int16NDArray&, const double&); extern boolNDArray mx_el_or (const int16NDArray&, const double&); extern boolNDArray mx_el_not_and (const int16NDArray&, const double&); extern boolNDArray mx_el_not_or (const int16NDArray&, const double&);
# 71 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-ui16nda.h" 1






extern uint16NDArray operator + (const double&, const uint16NDArray&); extern uint16NDArray operator - (const double&, const uint16NDArray&); extern uint16NDArray operator * (const double&, const uint16NDArray&); extern uint16NDArray operator / (const double&, const uint16NDArray&);
extern boolNDArray mx_el_lt (const double&, const uint16NDArray&); extern boolNDArray mx_el_le (const double&, const uint16NDArray&); extern boolNDArray mx_el_ge (const double&, const uint16NDArray&); extern boolNDArray mx_el_gt (const double&, const uint16NDArray&); extern boolNDArray mx_el_eq (const double&, const uint16NDArray&); extern boolNDArray mx_el_ne (const double&, const uint16NDArray&);
extern boolNDArray mx_el_and (const double&, const uint16NDArray&); extern boolNDArray mx_el_or (const double&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const double&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const double&, const uint16NDArray&);
# 72 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-s.h" 1






extern uint16NDArray operator + (const uint16NDArray&, const double&); extern uint16NDArray operator - (const uint16NDArray&, const double&); extern uint16NDArray operator * (const uint16NDArray&, const double&); extern uint16NDArray operator / (const uint16NDArray&, const double&);
extern boolNDArray mx_el_lt (const uint16NDArray&, const double&); extern boolNDArray mx_el_le (const uint16NDArray&, const double&); extern boolNDArray mx_el_ge (const uint16NDArray&, const double&); extern boolNDArray mx_el_gt (const uint16NDArray&, const double&); extern boolNDArray mx_el_eq (const uint16NDArray&, const double&); extern boolNDArray mx_el_ne (const uint16NDArray&, const double&);
extern boolNDArray mx_el_and (const uint16NDArray&, const double&); extern boolNDArray mx_el_or (const uint16NDArray&, const double&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const double&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const double&);
# 73 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-i32nda.h" 1






extern int32NDArray operator + (const double&, const int32NDArray&); extern int32NDArray operator - (const double&, const int32NDArray&); extern int32NDArray operator * (const double&, const int32NDArray&); extern int32NDArray operator / (const double&, const int32NDArray&);
extern boolNDArray mx_el_lt (const double&, const int32NDArray&); extern boolNDArray mx_el_le (const double&, const int32NDArray&); extern boolNDArray mx_el_ge (const double&, const int32NDArray&); extern boolNDArray mx_el_gt (const double&, const int32NDArray&); extern boolNDArray mx_el_eq (const double&, const int32NDArray&); extern boolNDArray mx_el_ne (const double&, const int32NDArray&);
extern boolNDArray mx_el_and (const double&, const int32NDArray&); extern boolNDArray mx_el_or (const double&, const int32NDArray&); extern boolNDArray mx_el_and_not (const double&, const int32NDArray&); extern boolNDArray mx_el_or_not (const double&, const int32NDArray&);
# 74 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-s.h" 1






extern int32NDArray operator + (const int32NDArray&, const double&); extern int32NDArray operator - (const int32NDArray&, const double&); extern int32NDArray operator * (const int32NDArray&, const double&); extern int32NDArray operator / (const int32NDArray&, const double&);
extern boolNDArray mx_el_lt (const int32NDArray&, const double&); extern boolNDArray mx_el_le (const int32NDArray&, const double&); extern boolNDArray mx_el_ge (const int32NDArray&, const double&); extern boolNDArray mx_el_gt (const int32NDArray&, const double&); extern boolNDArray mx_el_eq (const int32NDArray&, const double&); extern boolNDArray mx_el_ne (const int32NDArray&, const double&);
extern boolNDArray mx_el_and (const int32NDArray&, const double&); extern boolNDArray mx_el_or (const int32NDArray&, const double&); extern boolNDArray mx_el_not_and (const int32NDArray&, const double&); extern boolNDArray mx_el_not_or (const int32NDArray&, const double&);
# 75 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-ui32nda.h" 1






extern uint32NDArray operator + (const double&, const uint32NDArray&); extern uint32NDArray operator - (const double&, const uint32NDArray&); extern uint32NDArray operator * (const double&, const uint32NDArray&); extern uint32NDArray operator / (const double&, const uint32NDArray&);
extern boolNDArray mx_el_lt (const double&, const uint32NDArray&); extern boolNDArray mx_el_le (const double&, const uint32NDArray&); extern boolNDArray mx_el_ge (const double&, const uint32NDArray&); extern boolNDArray mx_el_gt (const double&, const uint32NDArray&); extern boolNDArray mx_el_eq (const double&, const uint32NDArray&); extern boolNDArray mx_el_ne (const double&, const uint32NDArray&);
extern boolNDArray mx_el_and (const double&, const uint32NDArray&); extern boolNDArray mx_el_or (const double&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const double&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const double&, const uint32NDArray&);
# 76 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-s.h" 1






extern uint32NDArray operator + (const uint32NDArray&, const double&); extern uint32NDArray operator - (const uint32NDArray&, const double&); extern uint32NDArray operator * (const uint32NDArray&, const double&); extern uint32NDArray operator / (const uint32NDArray&, const double&);
extern boolNDArray mx_el_lt (const uint32NDArray&, const double&); extern boolNDArray mx_el_le (const uint32NDArray&, const double&); extern boolNDArray mx_el_ge (const uint32NDArray&, const double&); extern boolNDArray mx_el_gt (const uint32NDArray&, const double&); extern boolNDArray mx_el_eq (const uint32NDArray&, const double&); extern boolNDArray mx_el_ne (const uint32NDArray&, const double&);
extern boolNDArray mx_el_and (const uint32NDArray&, const double&); extern boolNDArray mx_el_or (const uint32NDArray&, const double&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const double&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const double&);
# 77 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-i64nda.h" 1






extern int64NDArray operator + (const double&, const int64NDArray&); extern int64NDArray operator - (const double&, const int64NDArray&); extern int64NDArray operator * (const double&, const int64NDArray&); extern int64NDArray operator / (const double&, const int64NDArray&);
extern boolNDArray mx_el_lt (const double&, const int64NDArray&); extern boolNDArray mx_el_le (const double&, const int64NDArray&); extern boolNDArray mx_el_ge (const double&, const int64NDArray&); extern boolNDArray mx_el_gt (const double&, const int64NDArray&); extern boolNDArray mx_el_eq (const double&, const int64NDArray&); extern boolNDArray mx_el_ne (const double&, const int64NDArray&);
extern boolNDArray mx_el_and (const double&, const int64NDArray&); extern boolNDArray mx_el_or (const double&, const int64NDArray&); extern boolNDArray mx_el_and_not (const double&, const int64NDArray&); extern boolNDArray mx_el_or_not (const double&, const int64NDArray&);
# 78 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-s.h" 1






extern int64NDArray operator + (const int64NDArray&, const double&); extern int64NDArray operator - (const int64NDArray&, const double&); extern int64NDArray operator * (const int64NDArray&, const double&); extern int64NDArray operator / (const int64NDArray&, const double&);
extern boolNDArray mx_el_lt (const int64NDArray&, const double&); extern boolNDArray mx_el_le (const int64NDArray&, const double&); extern boolNDArray mx_el_ge (const int64NDArray&, const double&); extern boolNDArray mx_el_gt (const int64NDArray&, const double&); extern boolNDArray mx_el_eq (const int64NDArray&, const double&); extern boolNDArray mx_el_ne (const int64NDArray&, const double&);
extern boolNDArray mx_el_and (const int64NDArray&, const double&); extern boolNDArray mx_el_or (const int64NDArray&, const double&); extern boolNDArray mx_el_not_and (const int64NDArray&, const double&); extern boolNDArray mx_el_not_or (const int64NDArray&, const double&);
# 79 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-s-ui64nda.h" 1






extern uint64NDArray operator + (const double&, const uint64NDArray&); extern uint64NDArray operator - (const double&, const uint64NDArray&); extern uint64NDArray operator * (const double&, const uint64NDArray&); extern uint64NDArray operator / (const double&, const uint64NDArray&);
extern boolNDArray mx_el_lt (const double&, const uint64NDArray&); extern boolNDArray mx_el_le (const double&, const uint64NDArray&); extern boolNDArray mx_el_ge (const double&, const uint64NDArray&); extern boolNDArray mx_el_gt (const double&, const uint64NDArray&); extern boolNDArray mx_el_eq (const double&, const uint64NDArray&); extern boolNDArray mx_el_ne (const double&, const uint64NDArray&);
extern boolNDArray mx_el_and (const double&, const uint64NDArray&); extern boolNDArray mx_el_or (const double&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const double&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const double&, const uint64NDArray&);
# 80 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-s.h" 1






extern uint64NDArray operator + (const uint64NDArray&, const double&); extern uint64NDArray operator - (const uint64NDArray&, const double&); extern uint64NDArray operator * (const uint64NDArray&, const double&); extern uint64NDArray operator / (const uint64NDArray&, const double&);
extern boolNDArray mx_el_lt (const uint64NDArray&, const double&); extern boolNDArray mx_el_le (const uint64NDArray&, const double&); extern boolNDArray mx_el_ge (const uint64NDArray&, const double&); extern boolNDArray mx_el_gt (const uint64NDArray&, const double&); extern boolNDArray mx_el_eq (const uint64NDArray&, const double&); extern boolNDArray mx_el_ne (const uint64NDArray&, const double&);
extern boolNDArray mx_el_and (const uint64NDArray&, const double&); extern boolNDArray mx_el_or (const uint64NDArray&, const double&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const double&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const double&);
# 81 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-i8nda.h" 1






extern int8NDArray operator + (const float&, const int8NDArray&); extern int8NDArray operator - (const float&, const int8NDArray&); extern int8NDArray operator * (const float&, const int8NDArray&); extern int8NDArray operator / (const float&, const int8NDArray&);
extern boolNDArray mx_el_lt (const float&, const int8NDArray&); extern boolNDArray mx_el_le (const float&, const int8NDArray&); extern boolNDArray mx_el_ge (const float&, const int8NDArray&); extern boolNDArray mx_el_gt (const float&, const int8NDArray&); extern boolNDArray mx_el_eq (const float&, const int8NDArray&); extern boolNDArray mx_el_ne (const float&, const int8NDArray&);
extern boolNDArray mx_el_and (const float&, const int8NDArray&); extern boolNDArray mx_el_or (const float&, const int8NDArray&); extern boolNDArray mx_el_and_not (const float&, const int8NDArray&); extern boolNDArray mx_el_or_not (const float&, const int8NDArray&);
# 82 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-fs.h" 1






extern int8NDArray operator + (const int8NDArray&, const float&); extern int8NDArray operator - (const int8NDArray&, const float&); extern int8NDArray operator * (const int8NDArray&, const float&); extern int8NDArray operator / (const int8NDArray&, const float&);
extern boolNDArray mx_el_lt (const int8NDArray&, const float&); extern boolNDArray mx_el_le (const int8NDArray&, const float&); extern boolNDArray mx_el_ge (const int8NDArray&, const float&); extern boolNDArray mx_el_gt (const int8NDArray&, const float&); extern boolNDArray mx_el_eq (const int8NDArray&, const float&); extern boolNDArray mx_el_ne (const int8NDArray&, const float&);
extern boolNDArray mx_el_and (const int8NDArray&, const float&); extern boolNDArray mx_el_or (const int8NDArray&, const float&); extern boolNDArray mx_el_not_and (const int8NDArray&, const float&); extern boolNDArray mx_el_not_or (const int8NDArray&, const float&);
# 83 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-ui8nda.h" 1






extern uint8NDArray operator + (const float&, const uint8NDArray&); extern uint8NDArray operator - (const float&, const uint8NDArray&); extern uint8NDArray operator * (const float&, const uint8NDArray&); extern uint8NDArray operator / (const float&, const uint8NDArray&);
extern boolNDArray mx_el_lt (const float&, const uint8NDArray&); extern boolNDArray mx_el_le (const float&, const uint8NDArray&); extern boolNDArray mx_el_ge (const float&, const uint8NDArray&); extern boolNDArray mx_el_gt (const float&, const uint8NDArray&); extern boolNDArray mx_el_eq (const float&, const uint8NDArray&); extern boolNDArray mx_el_ne (const float&, const uint8NDArray&);
extern boolNDArray mx_el_and (const float&, const uint8NDArray&); extern boolNDArray mx_el_or (const float&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const float&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const float&, const uint8NDArray&);
# 84 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-fs.h" 1






extern uint8NDArray operator + (const uint8NDArray&, const float&); extern uint8NDArray operator - (const uint8NDArray&, const float&); extern uint8NDArray operator * (const uint8NDArray&, const float&); extern uint8NDArray operator / (const uint8NDArray&, const float&);
extern boolNDArray mx_el_lt (const uint8NDArray&, const float&); extern boolNDArray mx_el_le (const uint8NDArray&, const float&); extern boolNDArray mx_el_ge (const uint8NDArray&, const float&); extern boolNDArray mx_el_gt (const uint8NDArray&, const float&); extern boolNDArray mx_el_eq (const uint8NDArray&, const float&); extern boolNDArray mx_el_ne (const uint8NDArray&, const float&);
extern boolNDArray mx_el_and (const uint8NDArray&, const float&); extern boolNDArray mx_el_or (const uint8NDArray&, const float&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const float&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const float&);
# 85 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-i16nda.h" 1






extern int16NDArray operator + (const float&, const int16NDArray&); extern int16NDArray operator - (const float&, const int16NDArray&); extern int16NDArray operator * (const float&, const int16NDArray&); extern int16NDArray operator / (const float&, const int16NDArray&);
extern boolNDArray mx_el_lt (const float&, const int16NDArray&); extern boolNDArray mx_el_le (const float&, const int16NDArray&); extern boolNDArray mx_el_ge (const float&, const int16NDArray&); extern boolNDArray mx_el_gt (const float&, const int16NDArray&); extern boolNDArray mx_el_eq (const float&, const int16NDArray&); extern boolNDArray mx_el_ne (const float&, const int16NDArray&);
extern boolNDArray mx_el_and (const float&, const int16NDArray&); extern boolNDArray mx_el_or (const float&, const int16NDArray&); extern boolNDArray mx_el_and_not (const float&, const int16NDArray&); extern boolNDArray mx_el_or_not (const float&, const int16NDArray&);
# 86 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-fs.h" 1






extern int16NDArray operator + (const int16NDArray&, const float&); extern int16NDArray operator - (const int16NDArray&, const float&); extern int16NDArray operator * (const int16NDArray&, const float&); extern int16NDArray operator / (const int16NDArray&, const float&);
extern boolNDArray mx_el_lt (const int16NDArray&, const float&); extern boolNDArray mx_el_le (const int16NDArray&, const float&); extern boolNDArray mx_el_ge (const int16NDArray&, const float&); extern boolNDArray mx_el_gt (const int16NDArray&, const float&); extern boolNDArray mx_el_eq (const int16NDArray&, const float&); extern boolNDArray mx_el_ne (const int16NDArray&, const float&);
extern boolNDArray mx_el_and (const int16NDArray&, const float&); extern boolNDArray mx_el_or (const int16NDArray&, const float&); extern boolNDArray mx_el_not_and (const int16NDArray&, const float&); extern boolNDArray mx_el_not_or (const int16NDArray&, const float&);
# 87 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-ui16nda.h" 1






extern uint16NDArray operator + (const float&, const uint16NDArray&); extern uint16NDArray operator - (const float&, const uint16NDArray&); extern uint16NDArray operator * (const float&, const uint16NDArray&); extern uint16NDArray operator / (const float&, const uint16NDArray&);
extern boolNDArray mx_el_lt (const float&, const uint16NDArray&); extern boolNDArray mx_el_le (const float&, const uint16NDArray&); extern boolNDArray mx_el_ge (const float&, const uint16NDArray&); extern boolNDArray mx_el_gt (const float&, const uint16NDArray&); extern boolNDArray mx_el_eq (const float&, const uint16NDArray&); extern boolNDArray mx_el_ne (const float&, const uint16NDArray&);
extern boolNDArray mx_el_and (const float&, const uint16NDArray&); extern boolNDArray mx_el_or (const float&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const float&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const float&, const uint16NDArray&);
# 88 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-fs.h" 1






extern uint16NDArray operator + (const uint16NDArray&, const float&); extern uint16NDArray operator - (const uint16NDArray&, const float&); extern uint16NDArray operator * (const uint16NDArray&, const float&); extern uint16NDArray operator / (const uint16NDArray&, const float&);
extern boolNDArray mx_el_lt (const uint16NDArray&, const float&); extern boolNDArray mx_el_le (const uint16NDArray&, const float&); extern boolNDArray mx_el_ge (const uint16NDArray&, const float&); extern boolNDArray mx_el_gt (const uint16NDArray&, const float&); extern boolNDArray mx_el_eq (const uint16NDArray&, const float&); extern boolNDArray mx_el_ne (const uint16NDArray&, const float&);
extern boolNDArray mx_el_and (const uint16NDArray&, const float&); extern boolNDArray mx_el_or (const uint16NDArray&, const float&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const float&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const float&);
# 89 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-i32nda.h" 1






extern int32NDArray operator + (const float&, const int32NDArray&); extern int32NDArray operator - (const float&, const int32NDArray&); extern int32NDArray operator * (const float&, const int32NDArray&); extern int32NDArray operator / (const float&, const int32NDArray&);
extern boolNDArray mx_el_lt (const float&, const int32NDArray&); extern boolNDArray mx_el_le (const float&, const int32NDArray&); extern boolNDArray mx_el_ge (const float&, const int32NDArray&); extern boolNDArray mx_el_gt (const float&, const int32NDArray&); extern boolNDArray mx_el_eq (const float&, const int32NDArray&); extern boolNDArray mx_el_ne (const float&, const int32NDArray&);
extern boolNDArray mx_el_and (const float&, const int32NDArray&); extern boolNDArray mx_el_or (const float&, const int32NDArray&); extern boolNDArray mx_el_and_not (const float&, const int32NDArray&); extern boolNDArray mx_el_or_not (const float&, const int32NDArray&);
# 90 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-fs.h" 1






extern int32NDArray operator + (const int32NDArray&, const float&); extern int32NDArray operator - (const int32NDArray&, const float&); extern int32NDArray operator * (const int32NDArray&, const float&); extern int32NDArray operator / (const int32NDArray&, const float&);
extern boolNDArray mx_el_lt (const int32NDArray&, const float&); extern boolNDArray mx_el_le (const int32NDArray&, const float&); extern boolNDArray mx_el_ge (const int32NDArray&, const float&); extern boolNDArray mx_el_gt (const int32NDArray&, const float&); extern boolNDArray mx_el_eq (const int32NDArray&, const float&); extern boolNDArray mx_el_ne (const int32NDArray&, const float&);
extern boolNDArray mx_el_and (const int32NDArray&, const float&); extern boolNDArray mx_el_or (const int32NDArray&, const float&); extern boolNDArray mx_el_not_and (const int32NDArray&, const float&); extern boolNDArray mx_el_not_or (const int32NDArray&, const float&);
# 91 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-ui32nda.h" 1






extern uint32NDArray operator + (const float&, const uint32NDArray&); extern uint32NDArray operator - (const float&, const uint32NDArray&); extern uint32NDArray operator * (const float&, const uint32NDArray&); extern uint32NDArray operator / (const float&, const uint32NDArray&);
extern boolNDArray mx_el_lt (const float&, const uint32NDArray&); extern boolNDArray mx_el_le (const float&, const uint32NDArray&); extern boolNDArray mx_el_ge (const float&, const uint32NDArray&); extern boolNDArray mx_el_gt (const float&, const uint32NDArray&); extern boolNDArray mx_el_eq (const float&, const uint32NDArray&); extern boolNDArray mx_el_ne (const float&, const uint32NDArray&);
extern boolNDArray mx_el_and (const float&, const uint32NDArray&); extern boolNDArray mx_el_or (const float&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const float&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const float&, const uint32NDArray&);
# 92 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-fs.h" 1






extern uint32NDArray operator + (const uint32NDArray&, const float&); extern uint32NDArray operator - (const uint32NDArray&, const float&); extern uint32NDArray operator * (const uint32NDArray&, const float&); extern uint32NDArray operator / (const uint32NDArray&, const float&);
extern boolNDArray mx_el_lt (const uint32NDArray&, const float&); extern boolNDArray mx_el_le (const uint32NDArray&, const float&); extern boolNDArray mx_el_ge (const uint32NDArray&, const float&); extern boolNDArray mx_el_gt (const uint32NDArray&, const float&); extern boolNDArray mx_el_eq (const uint32NDArray&, const float&); extern boolNDArray mx_el_ne (const uint32NDArray&, const float&);
extern boolNDArray mx_el_and (const uint32NDArray&, const float&); extern boolNDArray mx_el_or (const uint32NDArray&, const float&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const float&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const float&);
# 93 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-i64nda.h" 1






extern int64NDArray operator + (const float&, const int64NDArray&); extern int64NDArray operator - (const float&, const int64NDArray&); extern int64NDArray operator * (const float&, const int64NDArray&); extern int64NDArray operator / (const float&, const int64NDArray&);
extern boolNDArray mx_el_lt (const float&, const int64NDArray&); extern boolNDArray mx_el_le (const float&, const int64NDArray&); extern boolNDArray mx_el_ge (const float&, const int64NDArray&); extern boolNDArray mx_el_gt (const float&, const int64NDArray&); extern boolNDArray mx_el_eq (const float&, const int64NDArray&); extern boolNDArray mx_el_ne (const float&, const int64NDArray&);
extern boolNDArray mx_el_and (const float&, const int64NDArray&); extern boolNDArray mx_el_or (const float&, const int64NDArray&); extern boolNDArray mx_el_and_not (const float&, const int64NDArray&); extern boolNDArray mx_el_or_not (const float&, const int64NDArray&);
# 94 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-fs.h" 1






extern int64NDArray operator + (const int64NDArray&, const float&); extern int64NDArray operator - (const int64NDArray&, const float&); extern int64NDArray operator * (const int64NDArray&, const float&); extern int64NDArray operator / (const int64NDArray&, const float&);
extern boolNDArray mx_el_lt (const int64NDArray&, const float&); extern boolNDArray mx_el_le (const int64NDArray&, const float&); extern boolNDArray mx_el_ge (const int64NDArray&, const float&); extern boolNDArray mx_el_gt (const int64NDArray&, const float&); extern boolNDArray mx_el_eq (const int64NDArray&, const float&); extern boolNDArray mx_el_ne (const int64NDArray&, const float&);
extern boolNDArray mx_el_and (const int64NDArray&, const float&); extern boolNDArray mx_el_or (const int64NDArray&, const float&); extern boolNDArray mx_el_not_and (const int64NDArray&, const float&); extern boolNDArray mx_el_not_or (const int64NDArray&, const float&);
# 95 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fs-ui64nda.h" 1






extern uint64NDArray operator + (const float&, const uint64NDArray&); extern uint64NDArray operator - (const float&, const uint64NDArray&); extern uint64NDArray operator * (const float&, const uint64NDArray&); extern uint64NDArray operator / (const float&, const uint64NDArray&);
extern boolNDArray mx_el_lt (const float&, const uint64NDArray&); extern boolNDArray mx_el_le (const float&, const uint64NDArray&); extern boolNDArray mx_el_ge (const float&, const uint64NDArray&); extern boolNDArray mx_el_gt (const float&, const uint64NDArray&); extern boolNDArray mx_el_eq (const float&, const uint64NDArray&); extern boolNDArray mx_el_ne (const float&, const uint64NDArray&);
extern boolNDArray mx_el_and (const float&, const uint64NDArray&); extern boolNDArray mx_el_or (const float&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const float&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const float&, const uint64NDArray&);
# 96 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-fs.h" 1






extern uint64NDArray operator + (const uint64NDArray&, const float&); extern uint64NDArray operator - (const uint64NDArray&, const float&); extern uint64NDArray operator * (const uint64NDArray&, const float&); extern uint64NDArray operator / (const uint64NDArray&, const float&);
extern boolNDArray mx_el_lt (const uint64NDArray&, const float&); extern boolNDArray mx_el_le (const uint64NDArray&, const float&); extern boolNDArray mx_el_ge (const uint64NDArray&, const float&); extern boolNDArray mx_el_gt (const uint64NDArray&, const float&); extern boolNDArray mx_el_eq (const uint64NDArray&, const float&); extern boolNDArray mx_el_ne (const uint64NDArray&, const float&);
extern boolNDArray mx_el_and (const uint64NDArray&, const float&); extern boolNDArray mx_el_or (const uint64NDArray&, const float&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const float&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const float&);
# 97 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-i8.h" 1








extern int8NDArray operator + (const NDArray&, const octave_int8&); extern int8NDArray operator - (const NDArray&, const octave_int8&); extern int8NDArray operator * (const NDArray&, const octave_int8&); extern int8NDArray operator / (const NDArray&, const octave_int8&);
extern boolNDArray mx_el_lt (const NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const NDArray&, const octave_int8&);
# 98 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-nda.h" 1








extern int8NDArray operator + (const octave_int8&, const NDArray&); extern int8NDArray operator - (const octave_int8&, const NDArray&); extern int8NDArray operator * (const octave_int8&, const NDArray&); extern int8NDArray operator / (const octave_int8&, const NDArray&);
extern boolNDArray mx_el_lt (const octave_int8&, const NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const NDArray&);
# 99 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-ui8.h" 1








extern uint8NDArray operator + (const NDArray&, const octave_uint8&); extern uint8NDArray operator - (const NDArray&, const octave_uint8&); extern uint8NDArray operator * (const NDArray&, const octave_uint8&); extern uint8NDArray operator / (const NDArray&, const octave_uint8&);
extern boolNDArray mx_el_lt (const NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const NDArray&, const octave_uint8&);
# 100 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-nda.h" 1








extern uint8NDArray operator + (const octave_uint8&, const NDArray&); extern uint8NDArray operator - (const octave_uint8&, const NDArray&); extern uint8NDArray operator * (const octave_uint8&, const NDArray&); extern uint8NDArray operator / (const octave_uint8&, const NDArray&);
extern boolNDArray mx_el_lt (const octave_uint8&, const NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const NDArray&);
# 101 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-i16.h" 1








extern int16NDArray operator + (const NDArray&, const octave_int16&); extern int16NDArray operator - (const NDArray&, const octave_int16&); extern int16NDArray operator * (const NDArray&, const octave_int16&); extern int16NDArray operator / (const NDArray&, const octave_int16&);
extern boolNDArray mx_el_lt (const NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const NDArray&, const octave_int16&);
# 102 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-nda.h" 1








extern int16NDArray operator + (const octave_int16&, const NDArray&); extern int16NDArray operator - (const octave_int16&, const NDArray&); extern int16NDArray operator * (const octave_int16&, const NDArray&); extern int16NDArray operator / (const octave_int16&, const NDArray&);
extern boolNDArray mx_el_lt (const octave_int16&, const NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const NDArray&);
# 103 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-ui16.h" 1








extern uint16NDArray operator + (const NDArray&, const octave_uint16&); extern uint16NDArray operator - (const NDArray&, const octave_uint16&); extern uint16NDArray operator * (const NDArray&, const octave_uint16&); extern uint16NDArray operator / (const NDArray&, const octave_uint16&);
extern boolNDArray mx_el_lt (const NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const NDArray&, const octave_uint16&);
# 104 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-nda.h" 1








extern uint16NDArray operator + (const octave_uint16&, const NDArray&); extern uint16NDArray operator - (const octave_uint16&, const NDArray&); extern uint16NDArray operator * (const octave_uint16&, const NDArray&); extern uint16NDArray operator / (const octave_uint16&, const NDArray&);
extern boolNDArray mx_el_lt (const octave_uint16&, const NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const NDArray&);
# 105 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-i32.h" 1








extern int32NDArray operator + (const NDArray&, const octave_int32&); extern int32NDArray operator - (const NDArray&, const octave_int32&); extern int32NDArray operator * (const NDArray&, const octave_int32&); extern int32NDArray operator / (const NDArray&, const octave_int32&);
extern boolNDArray mx_el_lt (const NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const NDArray&, const octave_int32&);
# 106 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-nda.h" 1








extern int32NDArray operator + (const octave_int32&, const NDArray&); extern int32NDArray operator - (const octave_int32&, const NDArray&); extern int32NDArray operator * (const octave_int32&, const NDArray&); extern int32NDArray operator / (const octave_int32&, const NDArray&);
extern boolNDArray mx_el_lt (const octave_int32&, const NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const NDArray&);
# 107 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-ui32.h" 1








extern uint32NDArray operator + (const NDArray&, const octave_uint32&); extern uint32NDArray operator - (const NDArray&, const octave_uint32&); extern uint32NDArray operator * (const NDArray&, const octave_uint32&); extern uint32NDArray operator / (const NDArray&, const octave_uint32&);
extern boolNDArray mx_el_lt (const NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const NDArray&, const octave_uint32&);
# 108 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-nda.h" 1








extern uint32NDArray operator + (const octave_uint32&, const NDArray&); extern uint32NDArray operator - (const octave_uint32&, const NDArray&); extern uint32NDArray operator * (const octave_uint32&, const NDArray&); extern uint32NDArray operator / (const octave_uint32&, const NDArray&);
extern boolNDArray mx_el_lt (const octave_uint32&, const NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const NDArray&);
# 109 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-i64.h" 1








extern int64NDArray operator + (const NDArray&, const octave_int64&); extern int64NDArray operator - (const NDArray&, const octave_int64&); extern int64NDArray operator * (const NDArray&, const octave_int64&); extern int64NDArray operator / (const NDArray&, const octave_int64&);
extern boolNDArray mx_el_lt (const NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const NDArray&, const octave_int64&);
# 110 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-nda.h" 1








extern int64NDArray operator + (const octave_int64&, const NDArray&); extern int64NDArray operator - (const octave_int64&, const NDArray&); extern int64NDArray operator * (const octave_int64&, const NDArray&); extern int64NDArray operator / (const octave_int64&, const NDArray&);
extern boolNDArray mx_el_lt (const octave_int64&, const NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const NDArray&);
# 111 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-ui64.h" 1








extern uint64NDArray operator + (const NDArray&, const octave_uint64&); extern uint64NDArray operator - (const NDArray&, const octave_uint64&); extern uint64NDArray operator * (const NDArray&, const octave_uint64&); extern uint64NDArray operator / (const NDArray&, const octave_uint64&);
extern boolNDArray mx_el_lt (const NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const NDArray&, const octave_uint64&);
# 112 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-nda.h" 1








extern uint64NDArray operator + (const octave_uint64&, const NDArray&); extern uint64NDArray operator - (const octave_uint64&, const NDArray&); extern uint64NDArray operator * (const octave_uint64&, const NDArray&); extern uint64NDArray operator / (const octave_uint64&, const NDArray&);
extern boolNDArray mx_el_lt (const octave_uint64&, const NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const NDArray&);
# 113 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-i8.h" 1








extern int8NDArray operator + (const FloatNDArray&, const octave_int8&); extern int8NDArray operator - (const FloatNDArray&, const octave_int8&); extern int8NDArray operator * (const FloatNDArray&, const octave_int8&); extern int8NDArray operator / (const FloatNDArray&, const octave_int8&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const octave_int8&); extern boolNDArray mx_el_le (const FloatNDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const FloatNDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const FloatNDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const FloatNDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const FloatNDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const FloatNDArray&, const octave_int8&); extern boolNDArray mx_el_or (const FloatNDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const octave_int8&);
# 114 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-fnda.h" 1








extern int8NDArray operator + (const octave_int8&, const FloatNDArray&); extern int8NDArray operator - (const octave_int8&, const FloatNDArray&); extern int8NDArray operator * (const octave_int8&, const FloatNDArray&); extern int8NDArray operator / (const octave_int8&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const octave_int8&, const FloatNDArray&); extern boolNDArray mx_el_le (const octave_int8&, const FloatNDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const FloatNDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const FloatNDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const FloatNDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const FloatNDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const FloatNDArray&); extern boolNDArray mx_el_or (const octave_int8&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const FloatNDArray&);
# 115 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-ui8.h" 1








extern uint8NDArray operator + (const FloatNDArray&, const octave_uint8&); extern uint8NDArray operator - (const FloatNDArray&, const octave_uint8&); extern uint8NDArray operator * (const FloatNDArray&, const octave_uint8&); extern uint8NDArray operator / (const FloatNDArray&, const octave_uint8&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const FloatNDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const FloatNDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const FloatNDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const FloatNDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const FloatNDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const FloatNDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const FloatNDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const octave_uint8&);
# 116 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-fnda.h" 1








extern uint8NDArray operator + (const octave_uint8&, const FloatNDArray&); extern uint8NDArray operator - (const octave_uint8&, const FloatNDArray&); extern uint8NDArray operator * (const octave_uint8&, const FloatNDArray&); extern uint8NDArray operator / (const octave_uint8&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const octave_uint8&, const FloatNDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const FloatNDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const FloatNDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const FloatNDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const FloatNDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const FloatNDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const FloatNDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const FloatNDArray&);
# 117 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-i16.h" 1








extern int16NDArray operator + (const FloatNDArray&, const octave_int16&); extern int16NDArray operator - (const FloatNDArray&, const octave_int16&); extern int16NDArray operator * (const FloatNDArray&, const octave_int16&); extern int16NDArray operator / (const FloatNDArray&, const octave_int16&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const octave_int16&); extern boolNDArray mx_el_le (const FloatNDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const FloatNDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const FloatNDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const FloatNDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const FloatNDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const FloatNDArray&, const octave_int16&); extern boolNDArray mx_el_or (const FloatNDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const octave_int16&);
# 118 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-fnda.h" 1








extern int16NDArray operator + (const octave_int16&, const FloatNDArray&); extern int16NDArray operator - (const octave_int16&, const FloatNDArray&); extern int16NDArray operator * (const octave_int16&, const FloatNDArray&); extern int16NDArray operator / (const octave_int16&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const octave_int16&, const FloatNDArray&); extern boolNDArray mx_el_le (const octave_int16&, const FloatNDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const FloatNDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const FloatNDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const FloatNDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const FloatNDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const FloatNDArray&); extern boolNDArray mx_el_or (const octave_int16&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const FloatNDArray&);
# 119 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-ui16.h" 1








extern uint16NDArray operator + (const FloatNDArray&, const octave_uint16&); extern uint16NDArray operator - (const FloatNDArray&, const octave_uint16&); extern uint16NDArray operator * (const FloatNDArray&, const octave_uint16&); extern uint16NDArray operator / (const FloatNDArray&, const octave_uint16&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const FloatNDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const FloatNDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const FloatNDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const FloatNDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const FloatNDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const FloatNDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const FloatNDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const octave_uint16&);
# 120 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-fnda.h" 1








extern uint16NDArray operator + (const octave_uint16&, const FloatNDArray&); extern uint16NDArray operator - (const octave_uint16&, const FloatNDArray&); extern uint16NDArray operator * (const octave_uint16&, const FloatNDArray&); extern uint16NDArray operator / (const octave_uint16&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const octave_uint16&, const FloatNDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const FloatNDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const FloatNDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const FloatNDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const FloatNDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const FloatNDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const FloatNDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const FloatNDArray&);
# 121 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-i32.h" 1








extern int32NDArray operator + (const FloatNDArray&, const octave_int32&); extern int32NDArray operator - (const FloatNDArray&, const octave_int32&); extern int32NDArray operator * (const FloatNDArray&, const octave_int32&); extern int32NDArray operator / (const FloatNDArray&, const octave_int32&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const octave_int32&); extern boolNDArray mx_el_le (const FloatNDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const FloatNDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const FloatNDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const FloatNDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const FloatNDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const FloatNDArray&, const octave_int32&); extern boolNDArray mx_el_or (const FloatNDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const octave_int32&);
# 122 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-fnda.h" 1








extern int32NDArray operator + (const octave_int32&, const FloatNDArray&); extern int32NDArray operator - (const octave_int32&, const FloatNDArray&); extern int32NDArray operator * (const octave_int32&, const FloatNDArray&); extern int32NDArray operator / (const octave_int32&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const octave_int32&, const FloatNDArray&); extern boolNDArray mx_el_le (const octave_int32&, const FloatNDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const FloatNDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const FloatNDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const FloatNDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const FloatNDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const FloatNDArray&); extern boolNDArray mx_el_or (const octave_int32&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const FloatNDArray&);
# 123 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-ui32.h" 1








extern uint32NDArray operator + (const FloatNDArray&, const octave_uint32&); extern uint32NDArray operator - (const FloatNDArray&, const octave_uint32&); extern uint32NDArray operator * (const FloatNDArray&, const octave_uint32&); extern uint32NDArray operator / (const FloatNDArray&, const octave_uint32&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const FloatNDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const FloatNDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const FloatNDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const FloatNDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const FloatNDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const FloatNDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const FloatNDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const octave_uint32&);
# 124 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-fnda.h" 1








extern uint32NDArray operator + (const octave_uint32&, const FloatNDArray&); extern uint32NDArray operator - (const octave_uint32&, const FloatNDArray&); extern uint32NDArray operator * (const octave_uint32&, const FloatNDArray&); extern uint32NDArray operator / (const octave_uint32&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const octave_uint32&, const FloatNDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const FloatNDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const FloatNDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const FloatNDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const FloatNDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const FloatNDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const FloatNDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const FloatNDArray&);
# 125 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-i64.h" 1








extern int64NDArray operator + (const FloatNDArray&, const octave_int64&); extern int64NDArray operator - (const FloatNDArray&, const octave_int64&); extern int64NDArray operator * (const FloatNDArray&, const octave_int64&); extern int64NDArray operator / (const FloatNDArray&, const octave_int64&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const octave_int64&); extern boolNDArray mx_el_le (const FloatNDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const FloatNDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const FloatNDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const FloatNDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const FloatNDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const FloatNDArray&, const octave_int64&); extern boolNDArray mx_el_or (const FloatNDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const octave_int64&);
# 126 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-fnda.h" 1








extern int64NDArray operator + (const octave_int64&, const FloatNDArray&); extern int64NDArray operator - (const octave_int64&, const FloatNDArray&); extern int64NDArray operator * (const octave_int64&, const FloatNDArray&); extern int64NDArray operator / (const octave_int64&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const octave_int64&, const FloatNDArray&); extern boolNDArray mx_el_le (const octave_int64&, const FloatNDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const FloatNDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const FloatNDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const FloatNDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const FloatNDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const FloatNDArray&); extern boolNDArray mx_el_or (const octave_int64&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const FloatNDArray&);
# 127 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-ui64.h" 1








extern uint64NDArray operator + (const FloatNDArray&, const octave_uint64&); extern uint64NDArray operator - (const FloatNDArray&, const octave_uint64&); extern uint64NDArray operator * (const FloatNDArray&, const octave_uint64&); extern uint64NDArray operator / (const FloatNDArray&, const octave_uint64&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const FloatNDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const FloatNDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const FloatNDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const FloatNDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const FloatNDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const FloatNDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const FloatNDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const octave_uint64&);
# 128 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-fnda.h" 1








extern uint64NDArray operator + (const octave_uint64&, const FloatNDArray&); extern uint64NDArray operator - (const octave_uint64&, const FloatNDArray&); extern uint64NDArray operator * (const octave_uint64&, const FloatNDArray&); extern uint64NDArray operator / (const octave_uint64&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const octave_uint64&, const FloatNDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const FloatNDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const FloatNDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const FloatNDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const FloatNDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const FloatNDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const FloatNDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const FloatNDArray&);
# 129 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-i8nda.h" 1







extern int8NDArray operator + (const NDArray&, const int8NDArray&); extern int8NDArray operator - (const NDArray&, const int8NDArray&); extern int8NDArray product (const NDArray&, const int8NDArray&); extern int8NDArray quotient (const NDArray&, const int8NDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const int8NDArray&);
# 130 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-nda.h" 1







extern int8NDArray operator + (const int8NDArray&, const NDArray&); extern int8NDArray operator - (const int8NDArray&, const NDArray&); extern int8NDArray product (const int8NDArray&, const NDArray&); extern int8NDArray quotient (const int8NDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const NDArray&);
# 131 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-ui8nda.h" 1







extern uint8NDArray operator + (const NDArray&, const uint8NDArray&); extern uint8NDArray operator - (const NDArray&, const uint8NDArray&); extern uint8NDArray product (const NDArray&, const uint8NDArray&); extern uint8NDArray quotient (const NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const uint8NDArray&);
# 132 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-nda.h" 1







extern uint8NDArray operator + (const uint8NDArray&, const NDArray&); extern uint8NDArray operator - (const uint8NDArray&, const NDArray&); extern uint8NDArray product (const uint8NDArray&, const NDArray&); extern uint8NDArray quotient (const uint8NDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const NDArray&);
# 133 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-i16nda.h" 1







extern int16NDArray operator + (const NDArray&, const int16NDArray&); extern int16NDArray operator - (const NDArray&, const int16NDArray&); extern int16NDArray product (const NDArray&, const int16NDArray&); extern int16NDArray quotient (const NDArray&, const int16NDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const int16NDArray&);
# 134 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-nda.h" 1







extern int16NDArray operator + (const int16NDArray&, const NDArray&); extern int16NDArray operator - (const int16NDArray&, const NDArray&); extern int16NDArray product (const int16NDArray&, const NDArray&); extern int16NDArray quotient (const int16NDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const NDArray&);
# 135 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-ui16nda.h" 1







extern uint16NDArray operator + (const NDArray&, const uint16NDArray&); extern uint16NDArray operator - (const NDArray&, const uint16NDArray&); extern uint16NDArray product (const NDArray&, const uint16NDArray&); extern uint16NDArray quotient (const NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const uint16NDArray&);
# 136 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-nda.h" 1







extern uint16NDArray operator + (const uint16NDArray&, const NDArray&); extern uint16NDArray operator - (const uint16NDArray&, const NDArray&); extern uint16NDArray product (const uint16NDArray&, const NDArray&); extern uint16NDArray quotient (const uint16NDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const NDArray&);
# 137 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-i32nda.h" 1







extern int32NDArray operator + (const NDArray&, const int32NDArray&); extern int32NDArray operator - (const NDArray&, const int32NDArray&); extern int32NDArray product (const NDArray&, const int32NDArray&); extern int32NDArray quotient (const NDArray&, const int32NDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const int32NDArray&);
# 138 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-nda.h" 1







extern int32NDArray operator + (const int32NDArray&, const NDArray&); extern int32NDArray operator - (const int32NDArray&, const NDArray&); extern int32NDArray product (const int32NDArray&, const NDArray&); extern int32NDArray quotient (const int32NDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const NDArray&);
# 139 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-ui32nda.h" 1







extern uint32NDArray operator + (const NDArray&, const uint32NDArray&); extern uint32NDArray operator - (const NDArray&, const uint32NDArray&); extern uint32NDArray product (const NDArray&, const uint32NDArray&); extern uint32NDArray quotient (const NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const uint32NDArray&);
# 140 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-nda.h" 1







extern uint32NDArray operator + (const uint32NDArray&, const NDArray&); extern uint32NDArray operator - (const uint32NDArray&, const NDArray&); extern uint32NDArray product (const uint32NDArray&, const NDArray&); extern uint32NDArray quotient (const uint32NDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const NDArray&);
# 141 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-i64nda.h" 1







extern int64NDArray operator + (const NDArray&, const int64NDArray&); extern int64NDArray operator - (const NDArray&, const int64NDArray&); extern int64NDArray product (const NDArray&, const int64NDArray&); extern int64NDArray quotient (const NDArray&, const int64NDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const int64NDArray&);
# 142 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-nda.h" 1







extern int64NDArray operator + (const int64NDArray&, const NDArray&); extern int64NDArray operator - (const int64NDArray&, const NDArray&); extern int64NDArray product (const int64NDArray&, const NDArray&); extern int64NDArray quotient (const int64NDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const NDArray&);
# 143 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-nda-ui64nda.h" 1







extern uint64NDArray operator + (const NDArray&, const uint64NDArray&); extern uint64NDArray operator - (const NDArray&, const uint64NDArray&); extern uint64NDArray product (const NDArray&, const uint64NDArray&); extern uint64NDArray quotient (const NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_lt (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const NDArray&, const uint64NDArray&);
# 144 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-nda.h" 1







extern uint64NDArray operator + (const uint64NDArray&, const NDArray&); extern uint64NDArray operator - (const uint64NDArray&, const NDArray&); extern uint64NDArray product (const uint64NDArray&, const NDArray&); extern uint64NDArray quotient (const uint64NDArray&, const NDArray&);
extern boolNDArray mx_el_lt (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const NDArray&);
# 145 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-i8nda.h" 1







extern int8NDArray operator + (const FloatNDArray&, const int8NDArray&); extern int8NDArray operator - (const FloatNDArray&, const int8NDArray&); extern int8NDArray product (const FloatNDArray&, const int8NDArray&); extern int8NDArray quotient (const FloatNDArray&, const int8NDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const int8NDArray&);
# 146 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-fnda.h" 1







extern int8NDArray operator + (const int8NDArray&, const FloatNDArray&); extern int8NDArray operator - (const int8NDArray&, const FloatNDArray&); extern int8NDArray product (const int8NDArray&, const FloatNDArray&); extern int8NDArray quotient (const int8NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const FloatNDArray&);
# 147 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-ui8nda.h" 1







extern uint8NDArray operator + (const FloatNDArray&, const uint8NDArray&); extern uint8NDArray operator - (const FloatNDArray&, const uint8NDArray&); extern uint8NDArray product (const FloatNDArray&, const uint8NDArray&); extern uint8NDArray quotient (const FloatNDArray&, const uint8NDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const uint8NDArray&);
# 148 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-fnda.h" 1







extern uint8NDArray operator + (const uint8NDArray&, const FloatNDArray&); extern uint8NDArray operator - (const uint8NDArray&, const FloatNDArray&); extern uint8NDArray product (const uint8NDArray&, const FloatNDArray&); extern uint8NDArray quotient (const uint8NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const FloatNDArray&);
# 149 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-i16nda.h" 1







extern int16NDArray operator + (const FloatNDArray&, const int16NDArray&); extern int16NDArray operator - (const FloatNDArray&, const int16NDArray&); extern int16NDArray product (const FloatNDArray&, const int16NDArray&); extern int16NDArray quotient (const FloatNDArray&, const int16NDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const int16NDArray&);
# 150 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-fnda.h" 1







extern int16NDArray operator + (const int16NDArray&, const FloatNDArray&); extern int16NDArray operator - (const int16NDArray&, const FloatNDArray&); extern int16NDArray product (const int16NDArray&, const FloatNDArray&); extern int16NDArray quotient (const int16NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const FloatNDArray&);
# 151 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-ui16nda.h" 1







extern uint16NDArray operator + (const FloatNDArray&, const uint16NDArray&); extern uint16NDArray operator - (const FloatNDArray&, const uint16NDArray&); extern uint16NDArray product (const FloatNDArray&, const uint16NDArray&); extern uint16NDArray quotient (const FloatNDArray&, const uint16NDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const uint16NDArray&);
# 152 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-fnda.h" 1







extern uint16NDArray operator + (const uint16NDArray&, const FloatNDArray&); extern uint16NDArray operator - (const uint16NDArray&, const FloatNDArray&); extern uint16NDArray product (const uint16NDArray&, const FloatNDArray&); extern uint16NDArray quotient (const uint16NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const FloatNDArray&);
# 153 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-i32nda.h" 1







extern int32NDArray operator + (const FloatNDArray&, const int32NDArray&); extern int32NDArray operator - (const FloatNDArray&, const int32NDArray&); extern int32NDArray product (const FloatNDArray&, const int32NDArray&); extern int32NDArray quotient (const FloatNDArray&, const int32NDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const int32NDArray&);
# 154 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-fnda.h" 1







extern int32NDArray operator + (const int32NDArray&, const FloatNDArray&); extern int32NDArray operator - (const int32NDArray&, const FloatNDArray&); extern int32NDArray product (const int32NDArray&, const FloatNDArray&); extern int32NDArray quotient (const int32NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const FloatNDArray&);
# 155 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-ui32nda.h" 1







extern uint32NDArray operator + (const FloatNDArray&, const uint32NDArray&); extern uint32NDArray operator - (const FloatNDArray&, const uint32NDArray&); extern uint32NDArray product (const FloatNDArray&, const uint32NDArray&); extern uint32NDArray quotient (const FloatNDArray&, const uint32NDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const uint32NDArray&);
# 156 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-fnda.h" 1







extern uint32NDArray operator + (const uint32NDArray&, const FloatNDArray&); extern uint32NDArray operator - (const uint32NDArray&, const FloatNDArray&); extern uint32NDArray product (const uint32NDArray&, const FloatNDArray&); extern uint32NDArray quotient (const uint32NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const FloatNDArray&);
# 157 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-i64nda.h" 1







extern int64NDArray operator + (const FloatNDArray&, const int64NDArray&); extern int64NDArray operator - (const FloatNDArray&, const int64NDArray&); extern int64NDArray product (const FloatNDArray&, const int64NDArray&); extern int64NDArray quotient (const FloatNDArray&, const int64NDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const int64NDArray&);
# 158 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-fnda.h" 1







extern int64NDArray operator + (const int64NDArray&, const FloatNDArray&); extern int64NDArray operator - (const int64NDArray&, const FloatNDArray&); extern int64NDArray product (const int64NDArray&, const FloatNDArray&); extern int64NDArray quotient (const int64NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const FloatNDArray&);
# 159 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-fnda-ui64nda.h" 1







extern uint64NDArray operator + (const FloatNDArray&, const uint64NDArray&); extern uint64NDArray operator - (const FloatNDArray&, const uint64NDArray&); extern uint64NDArray product (const FloatNDArray&, const uint64NDArray&); extern uint64NDArray quotient (const FloatNDArray&, const uint64NDArray&);
extern boolNDArray mx_el_lt (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const FloatNDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const FloatNDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const FloatNDArray&, const uint64NDArray&);
# 160 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-fnda.h" 1







extern uint64NDArray operator + (const uint64NDArray&, const FloatNDArray&); extern uint64NDArray operator - (const uint64NDArray&, const FloatNDArray&); extern uint64NDArray product (const uint64NDArray&, const FloatNDArray&); extern uint64NDArray quotient (const uint64NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_lt (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const FloatNDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const FloatNDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const FloatNDArray&);
# 161 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-ui8.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const int8NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const int8NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const int8NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const int8NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const int8NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const int8NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const int8NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const int8NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const int8NDArray&, const octave_uint8&);
# 162 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-i16.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const int8NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const int8NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const int8NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const int8NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const int8NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const int8NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const int8NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const int8NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const int8NDArray&, const octave_int16&);
# 163 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-ui16.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const int8NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const int8NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const int8NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const int8NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const int8NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const int8NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const int8NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const int8NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const int8NDArray&, const octave_uint16&);
# 164 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-i32.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const int8NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const int8NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const int8NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const int8NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const int8NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const int8NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const int8NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const int8NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const int8NDArray&, const octave_int32&);
# 165 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-ui32.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const int8NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const int8NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const int8NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const int8NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const int8NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const int8NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const int8NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const int8NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const int8NDArray&, const octave_uint32&);
# 166 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-i64.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const int8NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const int8NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const int8NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const int8NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const int8NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const int8NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const int8NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const int8NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const int8NDArray&, const octave_int64&);
# 167 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-ui64.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const int8NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const int8NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const int8NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const int8NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const int8NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const int8NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const int8NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const int8NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const int8NDArray&, const octave_uint64&);
# 168 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-i8.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const int16NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const int16NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const int16NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const int16NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const int16NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const int16NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const int16NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const int16NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const int16NDArray&, const octave_int8&);
# 169 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-ui8.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const int16NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const int16NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const int16NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const int16NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const int16NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const int16NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const int16NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const int16NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const int16NDArray&, const octave_uint8&);
# 170 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-ui16.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const int16NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const int16NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const int16NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const int16NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const int16NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const int16NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const int16NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const int16NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const int16NDArray&, const octave_uint16&);
# 171 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-i32.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const int16NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const int16NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const int16NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const int16NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const int16NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const int16NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const int16NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const int16NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const int16NDArray&, const octave_int32&);
# 172 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-ui32.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const int16NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const int16NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const int16NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const int16NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const int16NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const int16NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const int16NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const int16NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const int16NDArray&, const octave_uint32&);
# 173 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-i64.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const int16NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const int16NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const int16NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const int16NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const int16NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const int16NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const int16NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const int16NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const int16NDArray&, const octave_int64&);
# 174 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-ui64.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const int16NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const int16NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const int16NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const int16NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const int16NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const int16NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const int16NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const int16NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const int16NDArray&, const octave_uint64&);
# 175 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-i8.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const int32NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const int32NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const int32NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const int32NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const int32NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const int32NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const int32NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const int32NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const int32NDArray&, const octave_int8&);
# 176 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-ui8.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const int32NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const int32NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const int32NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const int32NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const int32NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const int32NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const int32NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const int32NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const int32NDArray&, const octave_uint8&);
# 177 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-i16.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const int32NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const int32NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const int32NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const int32NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const int32NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const int32NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const int32NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const int32NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const int32NDArray&, const octave_int16&);
# 178 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-ui16.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const int32NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const int32NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const int32NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const int32NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const int32NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const int32NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const int32NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const int32NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const int32NDArray&, const octave_uint16&);
# 179 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-ui32.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const int32NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const int32NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const int32NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const int32NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const int32NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const int32NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const int32NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const int32NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const int32NDArray&, const octave_uint32&);
# 180 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-i64.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const int32NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const int32NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const int32NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const int32NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const int32NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const int32NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const int32NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const int32NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const int32NDArray&, const octave_int64&);
# 181 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-ui64.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const int32NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const int32NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const int32NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const int32NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const int32NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const int32NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const int32NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const int32NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const int32NDArray&, const octave_uint64&);
# 182 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-i8.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const int64NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const int64NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const int64NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const int64NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const int64NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const int64NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const int64NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const int64NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const int64NDArray&, const octave_int8&);
# 183 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-ui8.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const int64NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const int64NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const int64NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const int64NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const int64NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const int64NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const int64NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const int64NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const int64NDArray&, const octave_uint8&);
# 184 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-i16.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const int64NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const int64NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const int64NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const int64NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const int64NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const int64NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const int64NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const int64NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const int64NDArray&, const octave_int16&);
# 185 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-ui16.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const int64NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const int64NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const int64NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const int64NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const int64NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const int64NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const int64NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const int64NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const int64NDArray&, const octave_uint16&);
# 186 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-i32.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const int64NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const int64NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const int64NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const int64NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const int64NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const int64NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const int64NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const int64NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const int64NDArray&, const octave_int32&);
# 187 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-ui32.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const int64NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const int64NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const int64NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const int64NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const int64NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const int64NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const int64NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const int64NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const int64NDArray&, const octave_uint32&);
# 188 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-ui64.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const int64NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const int64NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const int64NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const int64NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const int64NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const int64NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const int64NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const int64NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const int64NDArray&, const octave_uint64&);
# 189 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-i8.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const uint8NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const uint8NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const uint8NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const uint8NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const uint8NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const uint8NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const uint8NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const octave_int8&);
# 190 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-i16.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const uint8NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const uint8NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const uint8NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const uint8NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const uint8NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const uint8NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const uint8NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const octave_int16&);
# 191 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-ui16.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const uint8NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const uint8NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const uint8NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const uint8NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const uint8NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const uint8NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const uint8NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const octave_uint16&);
# 192 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-i32.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const uint8NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const uint8NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const uint8NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const uint8NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const uint8NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const uint8NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const uint8NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const octave_int32&);
# 193 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-ui32.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const uint8NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const uint8NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const uint8NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const uint8NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const uint8NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const uint8NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const uint8NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const octave_uint32&);
# 194 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-i64.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const uint8NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const uint8NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const uint8NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const uint8NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const uint8NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const uint8NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const uint8NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const octave_int64&);
# 195 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-ui64.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const uint8NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const uint8NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const uint8NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const uint8NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const uint8NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const uint8NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const uint8NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const octave_uint64&);
# 196 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-i8.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const uint16NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const uint16NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const uint16NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const uint16NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const uint16NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const uint16NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const uint16NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const octave_int8&);
# 197 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-ui8.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const uint16NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const uint16NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const uint16NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const uint16NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const uint16NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const uint16NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const uint16NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const octave_uint8&);
# 198 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-i16.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const uint16NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const uint16NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const uint16NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const uint16NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const uint16NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const uint16NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const uint16NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const octave_int16&);
# 199 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-i32.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const uint16NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const uint16NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const uint16NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const uint16NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const uint16NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const uint16NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const uint16NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const octave_int32&);
# 200 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-ui32.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const uint16NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const uint16NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const uint16NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const uint16NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const uint16NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const uint16NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const uint16NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const octave_uint32&);
# 201 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-i64.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const uint16NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const uint16NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const uint16NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const uint16NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const uint16NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const uint16NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const uint16NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const octave_int64&);
# 202 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-ui64.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const uint16NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const uint16NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const uint16NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const uint16NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const uint16NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const uint16NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const uint16NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const octave_uint64&);
# 203 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-i8.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const uint32NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const uint32NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const uint32NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const uint32NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const uint32NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const uint32NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const uint32NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const octave_int8&);
# 204 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-ui8.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const uint32NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const uint32NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const uint32NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const uint32NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const uint32NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const uint32NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const uint32NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const octave_uint8&);
# 205 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-i16.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const uint32NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const uint32NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const uint32NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const uint32NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const uint32NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const uint32NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const uint32NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const octave_int16&);
# 206 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-ui16.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const uint32NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const uint32NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const uint32NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const uint32NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const uint32NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const uint32NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const uint32NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const octave_uint16&);
# 207 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-i32.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const uint32NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const uint32NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const uint32NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const uint32NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const uint32NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const uint32NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const uint32NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const octave_int32&);
# 208 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-i64.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const uint32NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const uint32NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const uint32NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const uint32NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const uint32NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const uint32NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const uint32NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const octave_int64&);
# 209 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-ui64.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const octave_uint64&); extern boolNDArray mx_el_le (const uint32NDArray&, const octave_uint64&); extern boolNDArray mx_el_ge (const uint32NDArray&, const octave_uint64&); extern boolNDArray mx_el_gt (const uint32NDArray&, const octave_uint64&); extern boolNDArray mx_el_eq (const uint32NDArray&, const octave_uint64&); extern boolNDArray mx_el_ne (const uint32NDArray&, const octave_uint64&);
extern boolNDArray mx_el_and (const uint32NDArray&, const octave_uint64&); extern boolNDArray mx_el_or (const uint32NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const octave_uint64&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const octave_uint64&);
# 210 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-i8.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const octave_int8&); extern boolNDArray mx_el_le (const uint64NDArray&, const octave_int8&); extern boolNDArray mx_el_ge (const uint64NDArray&, const octave_int8&); extern boolNDArray mx_el_gt (const uint64NDArray&, const octave_int8&); extern boolNDArray mx_el_eq (const uint64NDArray&, const octave_int8&); extern boolNDArray mx_el_ne (const uint64NDArray&, const octave_int8&);
extern boolNDArray mx_el_and (const uint64NDArray&, const octave_int8&); extern boolNDArray mx_el_or (const uint64NDArray&, const octave_int8&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const octave_int8&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const octave_int8&);
# 211 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-ui8.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const octave_uint8&); extern boolNDArray mx_el_le (const uint64NDArray&, const octave_uint8&); extern boolNDArray mx_el_ge (const uint64NDArray&, const octave_uint8&); extern boolNDArray mx_el_gt (const uint64NDArray&, const octave_uint8&); extern boolNDArray mx_el_eq (const uint64NDArray&, const octave_uint8&); extern boolNDArray mx_el_ne (const uint64NDArray&, const octave_uint8&);
extern boolNDArray mx_el_and (const uint64NDArray&, const octave_uint8&); extern boolNDArray mx_el_or (const uint64NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const octave_uint8&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const octave_uint8&);
# 212 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-i16.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const octave_int16&); extern boolNDArray mx_el_le (const uint64NDArray&, const octave_int16&); extern boolNDArray mx_el_ge (const uint64NDArray&, const octave_int16&); extern boolNDArray mx_el_gt (const uint64NDArray&, const octave_int16&); extern boolNDArray mx_el_eq (const uint64NDArray&, const octave_int16&); extern boolNDArray mx_el_ne (const uint64NDArray&, const octave_int16&);
extern boolNDArray mx_el_and (const uint64NDArray&, const octave_int16&); extern boolNDArray mx_el_or (const uint64NDArray&, const octave_int16&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const octave_int16&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const octave_int16&);
# 213 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-ui16.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const octave_uint16&); extern boolNDArray mx_el_le (const uint64NDArray&, const octave_uint16&); extern boolNDArray mx_el_ge (const uint64NDArray&, const octave_uint16&); extern boolNDArray mx_el_gt (const uint64NDArray&, const octave_uint16&); extern boolNDArray mx_el_eq (const uint64NDArray&, const octave_uint16&); extern boolNDArray mx_el_ne (const uint64NDArray&, const octave_uint16&);
extern boolNDArray mx_el_and (const uint64NDArray&, const octave_uint16&); extern boolNDArray mx_el_or (const uint64NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const octave_uint16&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const octave_uint16&);
# 214 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-i32.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const octave_int32&); extern boolNDArray mx_el_le (const uint64NDArray&, const octave_int32&); extern boolNDArray mx_el_ge (const uint64NDArray&, const octave_int32&); extern boolNDArray mx_el_gt (const uint64NDArray&, const octave_int32&); extern boolNDArray mx_el_eq (const uint64NDArray&, const octave_int32&); extern boolNDArray mx_el_ne (const uint64NDArray&, const octave_int32&);
extern boolNDArray mx_el_and (const uint64NDArray&, const octave_int32&); extern boolNDArray mx_el_or (const uint64NDArray&, const octave_int32&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const octave_int32&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const octave_int32&);
# 215 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-ui32.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const octave_uint32&); extern boolNDArray mx_el_le (const uint64NDArray&, const octave_uint32&); extern boolNDArray mx_el_ge (const uint64NDArray&, const octave_uint32&); extern boolNDArray mx_el_gt (const uint64NDArray&, const octave_uint32&); extern boolNDArray mx_el_eq (const uint64NDArray&, const octave_uint32&); extern boolNDArray mx_el_ne (const uint64NDArray&, const octave_uint32&);
extern boolNDArray mx_el_and (const uint64NDArray&, const octave_uint32&); extern boolNDArray mx_el_or (const uint64NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const octave_uint32&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const octave_uint32&);
# 216 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-i64.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const octave_int64&); extern boolNDArray mx_el_le (const uint64NDArray&, const octave_int64&); extern boolNDArray mx_el_ge (const uint64NDArray&, const octave_int64&); extern boolNDArray mx_el_gt (const uint64NDArray&, const octave_int64&); extern boolNDArray mx_el_eq (const uint64NDArray&, const octave_int64&); extern boolNDArray mx_el_ne (const uint64NDArray&, const octave_int64&);
extern boolNDArray mx_el_and (const uint64NDArray&, const octave_int64&); extern boolNDArray mx_el_or (const uint64NDArray&, const octave_int64&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const octave_int64&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const octave_int64&);
# 217 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-ui8nda.h" 1







extern boolNDArray mx_el_lt (const octave_int8&, const uint8NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const uint8NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const uint8NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const uint8NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const uint8NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const uint8NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const uint8NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const uint8NDArray&);
# 218 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-i16nda.h" 1







extern boolNDArray mx_el_lt (const octave_int8&, const int16NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const int16NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const int16NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const int16NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const int16NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const int16NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const int16NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const int16NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const int16NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const int16NDArray&);
# 219 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-ui16nda.h" 1







extern boolNDArray mx_el_lt (const octave_int8&, const uint16NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const uint16NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const uint16NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const uint16NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const uint16NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const uint16NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const uint16NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const uint16NDArray&);
# 220 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-i32nda.h" 1







extern boolNDArray mx_el_lt (const octave_int8&, const int32NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const int32NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const int32NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const int32NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const int32NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const int32NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const int32NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const int32NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const int32NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const int32NDArray&);
# 221 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-ui32nda.h" 1







extern boolNDArray mx_el_lt (const octave_int8&, const uint32NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const uint32NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const uint32NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const uint32NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const uint32NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const uint32NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const uint32NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const uint32NDArray&);
# 222 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-i64nda.h" 1







extern boolNDArray mx_el_lt (const octave_int8&, const int64NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const int64NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const int64NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const int64NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const int64NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const int64NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const int64NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const int64NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const int64NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const int64NDArray&);
# 223 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8-ui64nda.h" 1







extern boolNDArray mx_el_lt (const octave_int8&, const uint64NDArray&); extern boolNDArray mx_el_le (const octave_int8&, const uint64NDArray&); extern boolNDArray mx_el_ge (const octave_int8&, const uint64NDArray&); extern boolNDArray mx_el_gt (const octave_int8&, const uint64NDArray&); extern boolNDArray mx_el_eq (const octave_int8&, const uint64NDArray&); extern boolNDArray mx_el_ne (const octave_int8&, const uint64NDArray&);
extern boolNDArray mx_el_and (const octave_int8&, const uint64NDArray&); extern boolNDArray mx_el_or (const octave_int8&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const octave_int8&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const octave_int8&, const uint64NDArray&);
# 224 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-i8nda.h" 1







extern boolNDArray mx_el_lt (const octave_int16&, const int8NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const int8NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const int8NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const int8NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const int8NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const int8NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const int8NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const int8NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const int8NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const int8NDArray&);
# 225 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-ui8nda.h" 1







extern boolNDArray mx_el_lt (const octave_int16&, const uint8NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const uint8NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const uint8NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const uint8NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const uint8NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const uint8NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const uint8NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const uint8NDArray&);
# 226 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-ui16nda.h" 1







extern boolNDArray mx_el_lt (const octave_int16&, const uint16NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const uint16NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const uint16NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const uint16NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const uint16NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const uint16NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const uint16NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const uint16NDArray&);
# 227 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-i32nda.h" 1







extern boolNDArray mx_el_lt (const octave_int16&, const int32NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const int32NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const int32NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const int32NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const int32NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const int32NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const int32NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const int32NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const int32NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const int32NDArray&);
# 228 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-ui32nda.h" 1







extern boolNDArray mx_el_lt (const octave_int16&, const uint32NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const uint32NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const uint32NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const uint32NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const uint32NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const uint32NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const uint32NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const uint32NDArray&);
# 229 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-i64nda.h" 1







extern boolNDArray mx_el_lt (const octave_int16&, const int64NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const int64NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const int64NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const int64NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const int64NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const int64NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const int64NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const int64NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const int64NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const int64NDArray&);
# 230 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16-ui64nda.h" 1







extern boolNDArray mx_el_lt (const octave_int16&, const uint64NDArray&); extern boolNDArray mx_el_le (const octave_int16&, const uint64NDArray&); extern boolNDArray mx_el_ge (const octave_int16&, const uint64NDArray&); extern boolNDArray mx_el_gt (const octave_int16&, const uint64NDArray&); extern boolNDArray mx_el_eq (const octave_int16&, const uint64NDArray&); extern boolNDArray mx_el_ne (const octave_int16&, const uint64NDArray&);
extern boolNDArray mx_el_and (const octave_int16&, const uint64NDArray&); extern boolNDArray mx_el_or (const octave_int16&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const octave_int16&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const octave_int16&, const uint64NDArray&);
# 231 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-i8nda.h" 1







extern boolNDArray mx_el_lt (const octave_int32&, const int8NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const int8NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const int8NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const int8NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const int8NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const int8NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const int8NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const int8NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const int8NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const int8NDArray&);
# 232 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-ui8nda.h" 1







extern boolNDArray mx_el_lt (const octave_int32&, const uint8NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const uint8NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const uint8NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const uint8NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const uint8NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const uint8NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const uint8NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const uint8NDArray&);
# 233 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-i16nda.h" 1







extern boolNDArray mx_el_lt (const octave_int32&, const int16NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const int16NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const int16NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const int16NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const int16NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const int16NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const int16NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const int16NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const int16NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const int16NDArray&);
# 234 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-ui16nda.h" 1







extern boolNDArray mx_el_lt (const octave_int32&, const uint16NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const uint16NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const uint16NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const uint16NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const uint16NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const uint16NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const uint16NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const uint16NDArray&);
# 235 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-ui32nda.h" 1







extern boolNDArray mx_el_lt (const octave_int32&, const uint32NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const uint32NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const uint32NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const uint32NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const uint32NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const uint32NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const uint32NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const uint32NDArray&);
# 236 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-i64nda.h" 1







extern boolNDArray mx_el_lt (const octave_int32&, const int64NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const int64NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const int64NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const int64NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const int64NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const int64NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const int64NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const int64NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const int64NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const int64NDArray&);
# 237 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32-ui64nda.h" 1







extern boolNDArray mx_el_lt (const octave_int32&, const uint64NDArray&); extern boolNDArray mx_el_le (const octave_int32&, const uint64NDArray&); extern boolNDArray mx_el_ge (const octave_int32&, const uint64NDArray&); extern boolNDArray mx_el_gt (const octave_int32&, const uint64NDArray&); extern boolNDArray mx_el_eq (const octave_int32&, const uint64NDArray&); extern boolNDArray mx_el_ne (const octave_int32&, const uint64NDArray&);
extern boolNDArray mx_el_and (const octave_int32&, const uint64NDArray&); extern boolNDArray mx_el_or (const octave_int32&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const octave_int32&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const octave_int32&, const uint64NDArray&);
# 238 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-i8nda.h" 1







extern boolNDArray mx_el_lt (const octave_int64&, const int8NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const int8NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const int8NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const int8NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const int8NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const int8NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const int8NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const int8NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const int8NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const int8NDArray&);
# 239 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-ui8nda.h" 1







extern boolNDArray mx_el_lt (const octave_int64&, const uint8NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const uint8NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const uint8NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const uint8NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const uint8NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const uint8NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const uint8NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const uint8NDArray&);
# 240 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-i16nda.h" 1







extern boolNDArray mx_el_lt (const octave_int64&, const int16NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const int16NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const int16NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const int16NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const int16NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const int16NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const int16NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const int16NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const int16NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const int16NDArray&);
# 241 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-ui16nda.h" 1







extern boolNDArray mx_el_lt (const octave_int64&, const uint16NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const uint16NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const uint16NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const uint16NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const uint16NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const uint16NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const uint16NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const uint16NDArray&);
# 242 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-i32nda.h" 1







extern boolNDArray mx_el_lt (const octave_int64&, const int32NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const int32NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const int32NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const int32NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const int32NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const int32NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const int32NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const int32NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const int32NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const int32NDArray&);
# 243 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-ui32nda.h" 1







extern boolNDArray mx_el_lt (const octave_int64&, const uint32NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const uint32NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const uint32NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const uint32NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const uint32NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const uint32NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const uint32NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const uint32NDArray&);
# 244 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64-ui64nda.h" 1







extern boolNDArray mx_el_lt (const octave_int64&, const uint64NDArray&); extern boolNDArray mx_el_le (const octave_int64&, const uint64NDArray&); extern boolNDArray mx_el_ge (const octave_int64&, const uint64NDArray&); extern boolNDArray mx_el_gt (const octave_int64&, const uint64NDArray&); extern boolNDArray mx_el_eq (const octave_int64&, const uint64NDArray&); extern boolNDArray mx_el_ne (const octave_int64&, const uint64NDArray&);
extern boolNDArray mx_el_and (const octave_int64&, const uint64NDArray&); extern boolNDArray mx_el_or (const octave_int64&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const octave_int64&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const octave_int64&, const uint64NDArray&);
# 245 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-i8nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint8&, const int8NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const int8NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const int8NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const int8NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const int8NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const int8NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const int8NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const int8NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const int8NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const int8NDArray&);
# 246 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-i16nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint8&, const int16NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const int16NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const int16NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const int16NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const int16NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const int16NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const int16NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const int16NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const int16NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const int16NDArray&);
# 247 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-ui16nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint8&, const uint16NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const uint16NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const uint16NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const uint16NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const uint16NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const uint16NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const uint16NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const uint16NDArray&);
# 248 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-i32nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint8&, const int32NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const int32NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const int32NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const int32NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const int32NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const int32NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const int32NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const int32NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const int32NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const int32NDArray&);
# 249 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-ui32nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint8&, const uint32NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const uint32NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const uint32NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const uint32NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const uint32NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const uint32NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const uint32NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const uint32NDArray&);
# 250 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-i64nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint8&, const int64NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const int64NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const int64NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const int64NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const int64NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const int64NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const int64NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const int64NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const int64NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const int64NDArray&);
# 251 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8-ui64nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint8&, const uint64NDArray&); extern boolNDArray mx_el_le (const octave_uint8&, const uint64NDArray&); extern boolNDArray mx_el_ge (const octave_uint8&, const uint64NDArray&); extern boolNDArray mx_el_gt (const octave_uint8&, const uint64NDArray&); extern boolNDArray mx_el_eq (const octave_uint8&, const uint64NDArray&); extern boolNDArray mx_el_ne (const octave_uint8&, const uint64NDArray&);
extern boolNDArray mx_el_and (const octave_uint8&, const uint64NDArray&); extern boolNDArray mx_el_or (const octave_uint8&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const octave_uint8&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const octave_uint8&, const uint64NDArray&);
# 252 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-i8nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint16&, const int8NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const int8NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const int8NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const int8NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const int8NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const int8NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const int8NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const int8NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const int8NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const int8NDArray&);
# 253 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-ui8nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint16&, const uint8NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const uint8NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const uint8NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const uint8NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const uint8NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const uint8NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const uint8NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const uint8NDArray&);
# 254 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-i16nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint16&, const int16NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const int16NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const int16NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const int16NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const int16NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const int16NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const int16NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const int16NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const int16NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const int16NDArray&);
# 255 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-i32nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint16&, const int32NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const int32NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const int32NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const int32NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const int32NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const int32NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const int32NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const int32NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const int32NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const int32NDArray&);
# 256 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-ui32nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint16&, const uint32NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const uint32NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const uint32NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const uint32NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const uint32NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const uint32NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const uint32NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const uint32NDArray&);
# 257 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-i64nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint16&, const int64NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const int64NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const int64NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const int64NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const int64NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const int64NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const int64NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const int64NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const int64NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const int64NDArray&);
# 258 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16-ui64nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint16&, const uint64NDArray&); extern boolNDArray mx_el_le (const octave_uint16&, const uint64NDArray&); extern boolNDArray mx_el_ge (const octave_uint16&, const uint64NDArray&); extern boolNDArray mx_el_gt (const octave_uint16&, const uint64NDArray&); extern boolNDArray mx_el_eq (const octave_uint16&, const uint64NDArray&); extern boolNDArray mx_el_ne (const octave_uint16&, const uint64NDArray&);
extern boolNDArray mx_el_and (const octave_uint16&, const uint64NDArray&); extern boolNDArray mx_el_or (const octave_uint16&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const octave_uint16&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const octave_uint16&, const uint64NDArray&);
# 259 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-i8nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint32&, const int8NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const int8NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const int8NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const int8NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const int8NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const int8NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const int8NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const int8NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const int8NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const int8NDArray&);
# 260 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-ui8nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint32&, const uint8NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const uint8NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const uint8NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const uint8NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const uint8NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const uint8NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const uint8NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const uint8NDArray&);
# 261 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-i16nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint32&, const int16NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const int16NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const int16NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const int16NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const int16NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const int16NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const int16NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const int16NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const int16NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const int16NDArray&);
# 262 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-ui16nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint32&, const uint16NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const uint16NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const uint16NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const uint16NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const uint16NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const uint16NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const uint16NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const uint16NDArray&);
# 263 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-i32nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint32&, const int32NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const int32NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const int32NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const int32NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const int32NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const int32NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const int32NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const int32NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const int32NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const int32NDArray&);
# 264 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-i64nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint32&, const int64NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const int64NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const int64NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const int64NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const int64NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const int64NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const int64NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const int64NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const int64NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const int64NDArray&);
# 265 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32-ui64nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint32&, const uint64NDArray&); extern boolNDArray mx_el_le (const octave_uint32&, const uint64NDArray&); extern boolNDArray mx_el_ge (const octave_uint32&, const uint64NDArray&); extern boolNDArray mx_el_gt (const octave_uint32&, const uint64NDArray&); extern boolNDArray mx_el_eq (const octave_uint32&, const uint64NDArray&); extern boolNDArray mx_el_ne (const octave_uint32&, const uint64NDArray&);
extern boolNDArray mx_el_and (const octave_uint32&, const uint64NDArray&); extern boolNDArray mx_el_or (const octave_uint32&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const octave_uint32&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const octave_uint32&, const uint64NDArray&);
# 266 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-i8nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint64&, const int8NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const int8NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const int8NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const int8NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const int8NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const int8NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const int8NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const int8NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const int8NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const int8NDArray&);
# 267 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-ui8nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint64&, const uint8NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const uint8NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const uint8NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const uint8NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const uint8NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const uint8NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const uint8NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const uint8NDArray&);
# 268 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-i16nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint64&, const int16NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const int16NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const int16NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const int16NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const int16NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const int16NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const int16NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const int16NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const int16NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const int16NDArray&);
# 269 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-ui16nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint64&, const uint16NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const uint16NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const uint16NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const uint16NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const uint16NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const uint16NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const uint16NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const uint16NDArray&);
# 270 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-i32nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint64&, const int32NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const int32NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const int32NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const int32NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const int32NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const int32NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const int32NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const int32NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const int32NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const int32NDArray&);
# 271 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-ui32nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint64&, const uint32NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const uint32NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const uint32NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const uint32NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const uint32NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const uint32NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const uint32NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const uint32NDArray&);
# 272 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64-i64nda.h" 1







extern boolNDArray mx_el_lt (const octave_uint64&, const int64NDArray&); extern boolNDArray mx_el_le (const octave_uint64&, const int64NDArray&); extern boolNDArray mx_el_ge (const octave_uint64&, const int64NDArray&); extern boolNDArray mx_el_gt (const octave_uint64&, const int64NDArray&); extern boolNDArray mx_el_eq (const octave_uint64&, const int64NDArray&); extern boolNDArray mx_el_ne (const octave_uint64&, const int64NDArray&);
extern boolNDArray mx_el_and (const octave_uint64&, const int64NDArray&); extern boolNDArray mx_el_or (const octave_uint64&, const int64NDArray&); extern boolNDArray mx_el_and_not (const octave_uint64&, const int64NDArray&); extern boolNDArray mx_el_or_not (const octave_uint64&, const int64NDArray&);
# 273 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-ui8nda.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const uint8NDArray&);
# 274 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-i16nda.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const int16NDArray&);
# 275 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-ui16nda.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const uint16NDArray&);
# 276 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-i32nda.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const int32NDArray&);
# 277 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-ui32nda.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const uint32NDArray&);
# 278 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-i64nda.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const int64NDArray&);
# 279 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i8nda-ui64nda.h" 1







extern boolNDArray mx_el_lt (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const int8NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const int8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const int8NDArray&, const uint64NDArray&);
# 280 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-i8nda.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const int8NDArray&);
# 281 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-ui8nda.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const uint8NDArray&);
# 282 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-ui16nda.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const uint16NDArray&);
# 283 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-i32nda.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const int32NDArray&);
# 284 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-ui32nda.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const uint32NDArray&);
# 285 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-i64nda.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const int64NDArray&);
# 286 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i16nda-ui64nda.h" 1







extern boolNDArray mx_el_lt (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const int16NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const int16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const int16NDArray&, const uint64NDArray&);
# 287 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-i8nda.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const int8NDArray&);
# 288 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-ui8nda.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const uint8NDArray&);
# 289 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-i16nda.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const int16NDArray&);
# 290 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-ui16nda.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const uint16NDArray&);
# 291 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-ui32nda.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const uint32NDArray&);
# 292 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-i64nda.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const int64NDArray&);
# 293 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i32nda-ui64nda.h" 1







extern boolNDArray mx_el_lt (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const int32NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const int32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const int32NDArray&, const uint64NDArray&);
# 294 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-i8nda.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const int8NDArray&);
# 295 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-ui8nda.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const uint8NDArray&);
# 296 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-i16nda.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const int16NDArray&);
# 297 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-ui16nda.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const uint16NDArray&);
# 298 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-i32nda.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const int32NDArray&);
# 299 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-ui32nda.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const uint32NDArray&);
# 300 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-i64nda-ui64nda.h" 1







extern boolNDArray mx_el_lt (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const int64NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const int64NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const int64NDArray&, const uint64NDArray&);
# 301 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-i8nda.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const int8NDArray&);
# 302 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-i16nda.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const int16NDArray&);
# 303 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-ui16nda.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const uint16NDArray&);
# 304 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-i32nda.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const int32NDArray&);
# 305 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-ui32nda.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const uint32NDArray&);
# 306 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-i64nda.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const int64NDArray&);
# 307 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui8nda-ui64nda.h" 1







extern boolNDArray mx_el_lt (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const uint8NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const uint8NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const uint8NDArray&, const uint64NDArray&);
# 308 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-i8nda.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const int8NDArray&);
# 309 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-ui8nda.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const uint8NDArray&);
# 310 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-i16nda.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const int16NDArray&);
# 311 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-i32nda.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const int32NDArray&);
# 312 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-ui32nda.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const uint32NDArray&);
# 313 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-i64nda.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const int64NDArray&);
# 314 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui16nda-ui64nda.h" 1







extern boolNDArray mx_el_lt (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const uint16NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const uint16NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const uint16NDArray&, const uint64NDArray&);
# 315 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-i8nda.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const int8NDArray&);
# 316 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-ui8nda.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const uint8NDArray&);
# 317 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-i16nda.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const int16NDArray&);
# 318 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-ui16nda.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const uint16NDArray&);
# 319 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-i32nda.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const int32NDArray&);
# 320 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-i64nda.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const int64NDArray&);
# 321 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui32nda-ui64nda.h" 1







extern boolNDArray mx_el_lt (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_le (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ge (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_gt (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_eq (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_ne (const uint32NDArray&, const uint64NDArray&);
extern boolNDArray mx_el_and (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_and_not (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_or_not (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_and (const uint32NDArray&, const uint64NDArray&); extern boolNDArray mx_el_not_or (const uint32NDArray&, const uint64NDArray&);
# 322 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-i8nda.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const int8NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const int8NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const int8NDArray&);
# 323 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-ui8nda.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const uint8NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const uint8NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const uint8NDArray&);
# 324 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-i16nda.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const int16NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const int16NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const int16NDArray&);
# 325 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-ui16nda.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const uint16NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const uint16NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const uint16NDArray&);
# 326 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-i32nda.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const int32NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const int32NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const int32NDArray&);
# 327 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-ui32nda.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const uint32NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const uint32NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const uint32NDArray&);
# 328 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ui64nda-i64nda.h" 1







extern boolNDArray mx_el_lt (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_le (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_ge (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_gt (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_eq (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_ne (const uint64NDArray&, const int64NDArray&);
extern boolNDArray mx_el_and (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_or (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_and_not (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_or_not (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_and (const uint64NDArray&, const int64NDArray&); extern boolNDArray mx_el_not_or (const uint64NDArray&, const int64NDArray&);
# 329 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mx-ops.h" 2
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Matrix.h" 2
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-dld.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-dld.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-int.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-int.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-builtin.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-builtin.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-fcn.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-fcn.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-time.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-time.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ctime" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ctime" 3


# 1 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 1 3
# 15 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 51 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 3
  typedef long clock_t;
# 103 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 3
  extern __attribute__ ((__dllimport__)) int _daylight;
  extern __attribute__ ((__dllimport__)) long _dstbias;
  extern __attribute__ ((__dllimport__)) long _timezone;
  extern __attribute__ ((__dllimport__)) char * _tzname[2];

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_daylight(int *_Daylight);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_dstbias(long *_Daylight_savings_bias);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_timezone(long *_Timezone);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_tzname(size_t *_ReturnValue,char *_Buffer,size_t _SizeInBytes,int _Index);
  char *__attribute__((__cdecl__)) asctime(const struct tm *_Tm) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) asctime_s (char *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  char *__attribute__((__cdecl__)) _ctime32(const __time32_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ctime32_s (char *_Buf,size_t _SizeInBytes,const __time32_t *_Time);
  clock_t __attribute__((__cdecl__)) clock(void);
  double __attribute__((__cdecl__)) _difftime32(__time32_t _Time1,__time32_t _Time2);
  struct tm *__attribute__((__cdecl__)) _gmtime32(const __time32_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gmtime32_s (struct tm *_Tm,const __time32_t *_Time);
  struct tm *__attribute__((__cdecl__)) _localtime32(const __time32_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _localtime32_s (struct tm *_Tm,const __time32_t *_Time);
  size_t __attribute__((__cdecl__)) strftime(char * __restrict__ _Buf,size_t _SizeInBytes,const char * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strftime_l(char * __restrict__ _Buf,size_t _Max_size,const char * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdate(char *_Buffer) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strdate_s (char *_Buf,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtime(char *_Buffer) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strtime_s (char *_Buf ,size_t _SizeInBytes);
  __time32_t __attribute__((__cdecl__)) _time32(__time32_t *_Time);
  __time32_t __attribute__((__cdecl__)) _mktime32(struct tm *_Tm);
  __time32_t __attribute__((__cdecl__)) _mkgmtime32(struct tm *_Tm);


  void __attribute__((__cdecl__)) tzset(void) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _tzset(void);


  double __attribute__((__cdecl__)) _difftime64(__time64_t _Time1,__time64_t _Time2);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ctime64(const __time64_t *_Time) ;
  errno_t __attribute__((__cdecl__)) _ctime64_s (char *_Buf,size_t _SizeInBytes,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _gmtime64(const __time64_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gmtime64_s (struct tm *_Tm,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _localtime64(const __time64_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _localtime64_s (struct tm *_Tm,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _mktime64(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _mkgmtime64(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _time64(__time64_t *_Time);
  unsigned __attribute__((__cdecl__)) _getsystime(struct tm *_Tm);
  unsigned __attribute__((__cdecl__)) _setsystime(struct tm *_Tm,unsigned _MilliSec);
# 194 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 3
double __attribute__((__cdecl__)) difftime(time_t _Time1,time_t _Time2);
char *__attribute__((__cdecl__)) ctime(const time_t *_Time) ;
struct tm *__attribute__((__cdecl__)) gmtime(const time_t *_Time) ;
struct tm *__attribute__((__cdecl__)) localtime(const time_t *_Time) ;

time_t __attribute__((__cdecl__)) mktime(struct tm *_Tm);
time_t __attribute__((__cdecl__)) _mkgmtime(struct tm *_Tm);
time_t __attribute__((__cdecl__)) time(time_t *_Time);
# 231 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 3
inline __attribute__((__always_inline__)) errno_t __attribute__((__cdecl__)) localtime_s(struct tm *_Tm,const time_t *_Time) { return _localtime64_s(_Tm,_Time); }
inline __attribute__((__always_inline__)) errno_t __attribute__((__cdecl__)) gmtime_s(struct tm *_Tm, const time_t *_Time) { return _gmtime64_s(_Tm, _Time); }
inline __attribute__((__always_inline__)) errno_t __attribute__((__cdecl__)) ctime_s(char *_Buf,size_t _SizeInBytes,const time_t *_Time) { return _ctime64_s(_Buf,_SizeInBytes,_Time); }






  __attribute__ ((__dllimport__)) extern int daylight;
  __attribute__ ((__dllimport__)) extern long timezone;
  __attribute__ ((__dllimport__)) extern char *tzname[2];
  void __attribute__((__cdecl__)) tzset(void) ;



# 1 "C:\\Octave\\Octave-4.2.1\\include\\_timeval.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\_timeval.h" 3
struct timeval
{
 long tv_sec;
 long tv_usec;
};
# 247 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 2 3



struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

  extern int __attribute__((__cdecl__)) mingw_gettimeofday (struct timeval *p, struct timezone *z);



}


#pragma pack(pop)
# 284 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\sys/timeb.h" 1 3
# 15 "C:\\Octave\\Octave-4.2.1\\include\\sys/timeb.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 53 "C:\\Octave\\Octave-4.2.1\\include\\sys/timeb.h" 3
  struct __timeb32 {
    __time32_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };


  struct timeb {
    time_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };


  struct __timeb64 {
    __time64_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _ftime64(struct __timeb64 *_Time);



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _ftime(struct __timeb64 *);
# 102 "C:\\Octave\\Octave-4.2.1\\include\\sys/timeb.h" 3
  void __attribute__((__cdecl__)) ftime (struct timeb *);
# 119 "C:\\Octave\\Octave-4.2.1\\include\\sys/timeb.h" 3
}


#pragma pack(pop)


# 1 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/sys/timeb_s.h" 1 3
# 10 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/sys/timeb_s.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\sys/timeb.h" 1 3
# 11 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/sys/timeb_s.h" 2 3


extern "C" {
# 27 "C:\\Octave\\Octave-4.2.1\\include\\sec_api/sys/timeb_s.h" 3
}
# 125 "C:\\Octave\\Octave-4.2.1\\include\\sys/timeb.h" 2 3
# 285 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 2 3







# 1 "C:\\Octave\\Octave-4.2.1\\include\\pthread_time.h" 1 3
# 49 "C:\\Octave\\Octave-4.2.1\\include\\pthread_time.h" 3
typedef int clockid_t;
# 74 "C:\\Octave\\Octave-4.2.1\\include\\pthread_time.h" 3
extern "C" {
# 84 "C:\\Octave\\Octave-4.2.1\\include\\pthread_time.h" 3
int __attribute__((__cdecl__)) nanosleep(const struct timespec *request, struct timespec *remain);

int __attribute__((__cdecl__)) clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *request, struct timespec *remain);
int __attribute__((__cdecl__)) clock_getres(clockid_t clock_id, struct timespec *res);
int __attribute__((__cdecl__)) clock_gettime(clockid_t clock_id, struct timespec *tp);
int __attribute__((__cdecl__)) clock_settime(clockid_t clock_id, const struct timespec *tp);




}
# 293 "C:\\Octave\\Octave-4.2.1\\include\\time.h" 2 3
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ctime" 2 3
# 58 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-time.h" 2


namespace octave
{
  namespace sys
  {
    class base_tm;

    class

    time
    {
    public:

      time (void)
        : ot_unix_time (0), ot_usec (0) { stamp (); }

      time (time_t t)
        : ot_unix_time (t), ot_usec (0) { }

      time (time_t t, int us)
        : ot_unix_time (t), ot_usec ()
      {
        int rem, extra;

        if (us >= 0)
          {
            rem = us % 1000000;
            extra = (us - rem) / 1000000;
          }
        else
          {
            us = -us;
            rem = us % 1000000;
            extra = - (1 + (us - rem) / 1000000);
            rem = 1000000 - us % 1000000;
          }

        ot_usec = rem;
        ot_unix_time += extra;
      }

      time (double d);

      time (const base_tm& tm);

      time (const time& ot)
        : ot_unix_time (ot.ot_unix_time), ot_usec (ot.ot_usec) { }

      time& operator = (const time& ot)
      {
        if (this != &ot)
          {
            ot_unix_time = ot.ot_unix_time;
            ot_usec = ot.ot_usec;
          }

        return *this;
      }

      ~time (void) { }

      void stamp (void);

      double double_value (void) const { return ot_unix_time + ot_usec / 1e6; }

      time_t unix_time (void) const { return ot_unix_time; }

      long usec (void) const { return ot_usec; }

      std::string ctime (void) const;

    private:


      time_t ot_unix_time;


      long ot_usec;
    };

    inline bool
    operator == (const time& t1, const time& t2)
    {
      return (t1.unix_time () == t2.unix_time () && t1.usec () == t2.usec ());
    }

    inline bool
    operator != (const time& t1, const time& t2)
    {
      return ! (t1 == t2);
    }

    inline bool
    operator < (const time& t1, const time& t2)
    {
      if (t1.unix_time () < t2.unix_time ())
        return true;
      else if (t1.unix_time () > t2.unix_time ())
        return false;
      else if (t1.usec () < t2.usec ())
        return true;
      else
        return false;
    }

    inline bool
    operator <= (const time& t1, const time& t2)
    {
      return (t1 < t2 || t1 == t2);
    }

    inline bool
    operator > (const time& t1, const time& t2)
    {
      if (t1.unix_time () > t2.unix_time ())
        return true;
      else if (t1.unix_time () < t2.unix_time ())
        return false;
      else if (t1.usec () > t2.usec ())
        return true;
      else
        return false;
    }

    inline bool
    operator >= (const time& t1, const time& t2)
    {
      return (t1 > t2 || t1 == t2);
    }

    inline time
    operator + (const time& t1, const time& t2)
    {
      return time (t1.unix_time () + t2.unix_time (),
                   t1.usec () + t2.usec ());
    }

    class

    base_tm
    {
    public:

      base_tm (void)
        : m_usec (0), m_sec (0), m_min (0), m_hour (0),
          m_mday (0), m_mon (0), m_year (0), m_wday (0),
          m_yday (0), m_isdst (0), m_gmtoff (0), m_zone ("unknown")
      { }

      base_tm (const base_tm& tm)
        : m_usec (tm.m_usec), m_sec (tm.m_sec), m_min (tm.m_min),
          m_hour (tm.m_hour), m_mday (tm.m_mday), m_mon (tm.m_mon),
          m_year (tm.m_year), m_wday (tm.m_wday), m_yday (tm.m_yday),
          m_isdst (tm.m_isdst), m_gmtoff (tm.m_gmtoff), m_zone (tm.m_zone)
      { }

      base_tm& operator = (const base_tm& tm)
      {
        if (this != &tm)
          {
            m_usec = tm.m_usec;
            m_sec = tm.m_sec;
            m_min = tm.m_min;
            m_hour = tm.m_hour;
            m_mday = tm.m_mday;
            m_mon = tm.m_mon;
            m_year = tm.m_year;
            m_wday = tm.m_wday;
            m_yday = tm.m_yday;
            m_isdst = tm.m_isdst;
            m_gmtoff = tm.m_gmtoff;
            m_zone = tm.m_zone;
          }

        return *this;
      }

      virtual ~base_tm (void) { }

      int usec (void) const { return m_usec; }
      int sec (void) const { return m_sec; }
      int min (void) const { return m_min; }
      int hour (void) const { return m_hour; }
      int mday (void) const { return m_mday; }
      int mon (void) const { return m_mon; }
      int year (void) const { return m_year; }
      int wday (void) const { return m_wday; }
      int yday (void) const { return m_yday; }
      int isdst (void) const { return m_isdst; }
      long gmtoff (void) const { return m_gmtoff; }
      std::string zone (void) const { return m_zone; }

      base_tm& usec (int v);
      base_tm& sec (int v);
      base_tm& min (int v);
      base_tm& hour (int v);
      base_tm& mday (int v);
      base_tm& mon (int v);
      base_tm& year (int v);
      base_tm& wday (int v);
      base_tm& yday (int v);
      base_tm& isdst (int v);
      base_tm& gmtoff (long v);
      base_tm& zone (const std::string& s);

      std::string strftime (const std::string& fmt) const;

      std::string asctime (void) const
      { return strftime ("%a %b %d %H:%M:%S %Y\n"); }

    protected:


      int m_usec;


      int m_sec;


      int m_min;


      int m_hour;


      int m_mday;


      int m_mon;


      int m_year;


      int m_wday;


      int m_yday;


      int m_isdst;


      long m_gmtoff;


      std::string m_zone;

      void init (void *p);
    };

    class

    localtime : public base_tm
    {
    public:

      localtime (void)
        : base_tm () { init (time ()); }

      localtime (const time& ot)
        : base_tm () { init (ot); }

      localtime (const localtime& t)
        : base_tm (t) { }

      localtime& operator = (const localtime& t)
      {
        base_tm::operator = (t);
        return *this;
      }

      ~localtime (void) { }

    private:

      void init (const time& ot);
    };

    class

    gmtime : public base_tm
    {
    public:

      gmtime (void)
        : base_tm () { init (time ()); }

      gmtime (const time& ot)
        : base_tm () { init (ot); }

      gmtime& operator = (const gmtime& t)
      {
        base_tm::operator = (t);
        return *this;
      }

      ~gmtime (void) { }

    private:

      void init (const time& ot);
    };

    class

    strptime : public base_tm
    {
    public:

      strptime (const std::string& str, const std::string& fmt)
        : base_tm (), nchars (0)
      {
        init (str, fmt);
      }

      strptime (const strptime& s)
        : base_tm (s), nchars (s.nchars) { }

      strptime& operator = (const strptime& s)
      {
        base_tm::operator = (s);
        nchars = s.nchars;
        return *this;
      }

      int characters_converted (void) const { return nchars; }

      ~strptime (void) { }

    private:

      int nchars;

      void init (const std::string& str, const std::string& fmt);
    };

    class

    cpu_time
    {
    public:

      friend class resource_usage;

      cpu_time (void)
        : m_usr_sec (0), m_sys_sec (0), m_usr_usec (0), m_sys_usec (0)
      {
        stamp ();
      }

      cpu_time (const cpu_time& tm)
        : m_usr_sec (tm.m_usr_sec), m_sys_sec (tm.m_sys_sec),
          m_usr_usec (tm.m_usr_usec), m_sys_usec (tm.m_sys_usec)
      { }

      cpu_time& operator = (const cpu_time& tm)
      {
        if (&tm != this)
          {
            m_usr_sec = tm.m_usr_sec;
            m_sys_sec = tm.m_sys_sec;
            m_usr_usec = tm.m_usr_usec;
            m_sys_usec = tm.m_sys_usec;
          }

        return *this;
      }

      void stamp (void);

      double user (void) const
      {
        return (static_cast<double> (m_usr_sec)
                + static_cast<double> (m_sys_usec) * 1e-6);
      }

      double system (void) const
      {
        return (static_cast<double> (m_sys_sec)
                + static_cast<double> (m_sys_usec) * 1e-6);
      }

      time_t user_sec (void) const { return m_usr_sec; }
      long user_usec (void) const { return m_usr_usec; }

      time_t system_sec (void) const { return m_sys_sec; }
      long system_usec (void) const { return m_sys_usec; }

    private:

      time_t m_usr_sec;
      time_t m_sys_sec;

      long m_usr_usec;
      long m_sys_usec;

      cpu_time (time_t usr_sec, time_t sys_sec, long usr_usec, long sys_usec)
        : m_usr_sec (usr_sec), m_sys_sec (sys_sec),
          m_usr_usec (usr_usec), m_sys_usec (sys_usec)
      { }
    };

    class
    resource_usage
    {
    public:

      resource_usage (void)
        : m_cpu (), m_maxrss (0), m_ixrss (0), m_idrss (0),
          m_isrss (0), m_minflt (0), m_majflt (0), m_nswap (0),
          m_inblock (0), m_oublock (0), m_msgsnd (0), m_msgrcv (0),
          m_nsignals (0), m_nvcsw (0), m_nivcsw (0)
      {
        stamp ();
      }

      resource_usage (const resource_usage& ru)
        : m_cpu (ru.m_cpu), m_maxrss (ru.m_maxrss),
          m_ixrss (ru.m_ixrss), m_idrss (ru.m_idrss),
          m_isrss (ru.m_isrss), m_minflt (ru.m_minflt),
          m_majflt (ru.m_majflt), m_nswap (ru.m_nswap),
          m_inblock (ru.m_inblock), m_oublock (ru.m_oublock),
          m_msgsnd (ru.m_msgsnd), m_msgrcv (ru.m_msgrcv),
          m_nsignals (ru.m_nsignals), m_nvcsw (ru.m_nvcsw),
          m_nivcsw (ru.m_nivcsw)
      { }

      resource_usage& operator = (const resource_usage& ru)
      {
        if (&ru != this)
          {
            m_cpu = ru.m_cpu;

            m_maxrss = ru.m_maxrss;
            m_ixrss = ru.m_ixrss;
            m_idrss = ru.m_idrss;
            m_isrss = ru.m_isrss;
            m_minflt = ru.m_minflt;
            m_majflt = ru.m_majflt;
            m_nswap = ru.m_nswap;
            m_inblock = ru.m_inblock;
            m_oublock = ru.m_oublock;
            m_msgsnd = ru.m_msgsnd;
            m_msgrcv = ru.m_msgrcv;
            m_nsignals = ru.m_nsignals;
            m_nvcsw = ru.m_nvcsw;
            m_nivcsw = ru.m_nivcsw;
          }

        return *this;
      }

      void stamp (void);

      cpu_time cpu (void) const { return m_cpu; }

      long maxrss (void) const { return m_maxrss; }
      long ixrss (void) const { return m_ixrss; }
      long idrss (void) const { return m_idrss; }
      long isrss (void) const { return m_isrss; }
      long minflt (void) const { return m_minflt; }
      long majflt (void) const { return m_majflt; }
      long nswap (void) const { return m_nswap; }
      long inblock (void) const { return m_inblock; }
      long oublock (void) const { return m_oublock; }
      long msgsnd (void) const { return m_msgsnd; }
      long msgrcv (void) const { return m_msgrcv; }
      long nsignals (void) const { return m_nsignals; }
      long nvcsw (void) const { return m_nvcsw; }
      long nivcsw (void) const { return m_nivcsw; }

    private:

      cpu_time m_cpu;

      long m_maxrss;
      long m_ixrss;
      long m_idrss;
      long m_isrss;
      long m_minflt;
      long m_majflt;
      long m_nswap;
      long m_inblock;
      long m_oublock;
      long m_msgsnd;
      long m_msgrcv;
      long m_nsignals;
      long m_nvcsw;
      long m_nivcsw;
    };
  }
}



__attribute__ ((__deprecated__))
typedef octave::sys::time octave_time;

__attribute__ ((__deprecated__))
typedef octave::sys::base_tm octave_base_tm;

__attribute__ ((__deprecated__))
typedef octave::sys::localtime octave_localtime;

__attribute__ ((__deprecated__))
typedef octave::sys::gmtime octave_gmtime;

__attribute__ ((__deprecated__))
typedef octave::sys::strptime octave_strptime;
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-fcn.h" 2


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ovl.h" 1
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ovl.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h" 2





# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Range.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Range.h"
class

Range
{
public:

  Range (void)
    : rng_base (0), rng_limit (0), rng_inc (0), rng_numel (0), cache (1, 0) { }

  Range (const Range& r)
    : rng_base (r.rng_base), rng_limit (r.rng_limit), rng_inc (r.rng_inc),
      rng_numel (r.rng_numel), cache (r.cache) { }

  Range (double b, double l)
    : rng_base (b), rng_limit (l), rng_inc (1),
      rng_numel (numel_internal ()), cache ()
  {
    rng_limit = limit_internal ();
  }

  Range (double b, double l, double i)
    : rng_base (b), rng_limit (l), rng_inc (i),
      rng_numel (numel_internal ()), cache ()
  {
    rng_limit = limit_internal ();
  }


  Range (double b, double i, octave_idx_type n)
    : rng_base (b), rng_limit (b + (n-1) * i), rng_inc (i),
      rng_numel (n), cache ()
  {
    if (! octave::math::finite (b) || ! octave::math::finite (i)
        || ! octave::math::finite (rng_limit))
      rng_numel = -2;
    else
      {




        rng_limit = limit_internal ();
      }
  }

  double base (void) const { return rng_base; }
  double limit (void) const { return rng_limit; }
  double inc (void) const { return rng_inc; }

  __attribute__ ((__deprecated__))
  octave_idx_type nelem (void) const { return numel (); }

  octave_idx_type numel (void) const { return rng_numel; }

  bool is_empty (void) const { return numel () == 0; }

  bool all_elements_are_ints (void) const;

  Matrix matrix_value (void) const;

  double min (void) const;
  double max (void) const;

  void sort_internal (bool ascending = true);
  void sort_internal (Array<octave_idx_type>& sidx, bool ascending = true);

  Matrix diag (octave_idx_type k = 0) const;

  Range sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;

  Range sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
              sortmode mode = ASCENDING) const;

  sortmode is_sorted (sortmode mode = ASCENDING) const;



  double checkelem (octave_idx_type i) const;

  double elem (octave_idx_type i) const;

  Array<double> index (const idx_vector& i) const;

  void set_base (double b);

  void set_limit (double l);

  void set_inc (double i);

  friend std::ostream& operator << (std::ostream& os,
                                               const Range& r);
  friend std::istream& operator >> (std::istream& is, Range& r);

  friend Range operator - (const Range& r);
  friend Range operator + (double x, const Range& r);
  friend Range operator + (const Range& r, double x);
  friend Range operator - (double x, const Range& r);
  friend Range operator - (const Range& r, double x);
  friend Range operator * (double x, const Range& r);
  friend Range operator * (const Range& r, double x);

private:

  double rng_base;
  double rng_limit;
  double rng_inc;

  octave_idx_type rng_numel;

  mutable Matrix cache;

  octave_idx_type numel_internal (void) const;

  double limit_internal (void) const;

  void init (void);

  void clear_cache (void) const { cache.resize (0, 0); }

protected:


  Range (double b, double l, double i, octave_idx_type n)
    : rng_base (b), rng_limit (l), rng_inc (i),
      rng_numel (n), cache ()
  {
    if (! octave::math::finite (b) || ! octave::math::finite (i)
        || ! octave::math::finite (l))
      rng_numel = -2;
  }
};

extern Range operator - (const Range& r);

extern Range operator + (double x, const Range& r);

extern Range operator + (const Range& r, double x);

extern Range operator - (double x, const Range& r);

extern Range operator - (const Range& r, double x);

extern Range operator * (double x, const Range& r);

extern Range operator * (const Range& r, double x);
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/data-conv.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/data-conv.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mach-info.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/mach-info.h"
namespace octave
{
  class

  mach_info
  {
  protected:

    mach_info (void);

  public:

    enum float_format
    {
      flt_fmt_unknown,
      flt_fmt_ieee_little_endian,
      flt_fmt_ieee_big_endian,
    };

    static bool instance_ok (void);

    static float_format native_float_format (void);

    static bool words_big_endian (void);

    static bool words_little_endian (void);

    static float_format string_to_float_format (const std::string&);

    static std::string float_format_as_string (float_format);

  private:

    static mach_info *instance;

    static void cleanup_instance (void) { delete instance; instance = 0; }


    mutable float_format native_float_fmt;


    mutable bool big_chief;



    mach_info (const mach_info&);

    mach_info& operator = (const mach_info&);
  };
}



__attribute__ ((__deprecated__))
typedef octave::mach_info oct_mach_info;
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/data-conv.h" 2


class

oct_data_conv
{
public:

  enum data_type
  {
    dt_int8 = 0,
    dt_uint8 = 1,
    dt_int16 = 2,
    dt_uint16 = 3,
    dt_int32 = 4,
    dt_uint32 = 5,
    dt_int64 = 6,
    dt_uint64 = 7,
    dt_single = 8,
    dt_double = 9,
    dt_char = 10,
    dt_schar = 11,
    dt_uchar = 12,
    dt_logical = 13,
    dt_short = 14,
    dt_ushort = 15,
    dt_int = 16,
    dt_uint = 17,
    dt_long = 18,
    dt_ulong = 19,
    dt_longlong = 20,
    dt_ulonglong = 21,
    dt_float = 22,
    dt_unknown = 23
  };

  static size_t data_type_size (data_type dt);

  static data_type string_to_data_type (const std::string& s);

  static void string_to_data_type (const std::string& s, int& block_size,
                                   data_type& input_type,
                                   data_type& output_type);

  static void string_to_data_type (const std::string& s, int& block_size,
                                   data_type& output_type);

  static std::string data_type_as_string (data_type dt);
};





enum save_type
{
  LS_U_CHAR = 0,
  LS_U_SHORT = 1,
  LS_U_INT = 2,
  LS_CHAR = 3,
  LS_SHORT = 4,
  LS_INT = 5,
  LS_FLOAT = 6,
  LS_DOUBLE = 7,
  LS_U_LONG = 8,
  LS_LONG = 9
};

extern void
do_double_format_conversion (void *data, octave_idx_type len,
                             octave::mach_info::float_format from_fmt,
                             octave::mach_info::float_format to_fmt
                             = octave::mach_info::native_float_format ());

extern void
do_float_format_conversion (void *data, octave_idx_type len,
                            octave::mach_info::float_format from_fmt,
                            octave::mach_info::float_format to_fmt
                            = octave::mach_info::native_float_format ());

extern void
do_float_format_conversion (void *data, size_t sz, octave_idx_type len,
                            octave::mach_info::float_format from_fmt,
                            octave::mach_info::float_format to_fmt
                            = octave::mach_info::native_float_format ());

extern void
read_doubles (std::istream& is, double *data, save_type type,
              octave_idx_type len, bool swap, octave::mach_info::float_format fmt);

extern void
write_doubles (std::ostream& os, const double *data, save_type type,
               octave_idx_type len);

extern void
read_floats (std::istream& is, float *data, save_type type,
             octave_idx_type len, bool swap, octave::mach_info::float_format fmt);

extern void
write_floats (std::ostream& os, const float *data, save_type type,
              octave_idx_type len);

template <typename T>
inline bool
is_equivalent_type (oct_data_conv::data_type)
{
  return false;
}

template <>
inline bool
is_equivalent_type<int8_t> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_int8;
}

template <>
inline bool
is_equivalent_type<int16_t> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_int16;
}

template <>
inline bool
is_equivalent_type<int32_t> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_int32;
}

template <>
inline bool
is_equivalent_type<int64_t> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_int64;
}

template <>
inline bool
is_equivalent_type<uint8_t> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_uint8;
}

template <>
inline bool
is_equivalent_type<uint16_t> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_uint16;
}

template <>
inline bool
is_equivalent_type<uint32_t> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_uint32;
}

template <>
inline bool
is_equivalent_type<uint64_t> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_uint64;
}

template <>
inline bool
is_equivalent_type<octave_int8> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_int8;
}

template <>
inline bool
is_equivalent_type<octave_int16> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_int16;
}

template <>
inline bool
is_equivalent_type<octave_int32> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_int32;
}

template <>
inline bool
is_equivalent_type<octave_int64> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_int64;
}

template <>
inline bool
is_equivalent_type<octave_uint8> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_uint8;
}

template <>
inline bool
is_equivalent_type<octave_uint16> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_uint16;
}

template <>
inline bool
is_equivalent_type<octave_uint32> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_uint32;
}

template <>
inline bool
is_equivalent_type<octave_uint64> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_uint64;
}

template <>
inline bool
is_equivalent_type<double> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_double;
}

template <>
inline bool
is_equivalent_type<float> (oct_data_conv::data_type t)
{
  return t == oct_data_conv::dt_single || t == oct_data_conv::dt_float;
}
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h" 2








class Cell;
class mxArray;
class octave_map;
class octave_scalar_map;
class octave_stream;
class octave_function;
class octave_user_function;
class octave_fcn_handle;
class octave_fcn_inline;
class octave_value_list;
class octave_lvalue;


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h" 1
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h" 2
# 40 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/error.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/error.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdarg" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdarg" 3


# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stdarg.h" 1 3
# 30 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stdarg.h" 3
typedef __builtin_va_list va_list;
# 50 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 43 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdarg" 2 3
# 52 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdarg" 3
namespace std
{
  using ::va_list;
}
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/error.h" 2


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/unwind-prot.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/unwind-prot.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\stack" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\stack" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\deque" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\deque" 3





# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 1 3
# 66 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
namespace std
{
# 88 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
  inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < 512
     ? size_t(512 / __size) : size_t(1)); }
# 105 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator
    {
      typedef _Deque_iterator<_Tp, _Tp&, _Tp*> iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;

      static size_t _S_buffer_size() noexcept
      { return __deque_buf_size(sizeof(_Tp)); }

      typedef std::random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Ptr pointer;
      typedef _Ref reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp** _Map_pointer;
      typedef _Deque_iterator _Self;

      _Tp* _M_cur;
      _Tp* _M_first;
      _Tp* _M_last;
      _Map_pointer _M_node;

      _Deque_iterator(_Tp* __x, _Map_pointer __y) noexcept
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() noexcept
      : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) { }

      _Deque_iterator(const iterator& __x) noexcept
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const noexcept
      { return *_M_cur; }

      pointer
      operator->() const noexcept
      { return _M_cur; }

      _Self&
      operator++() noexcept
      {
 ++_M_cur;
 if (_M_cur == _M_last)
   {
     _M_set_node(_M_node + 1);
     _M_cur = _M_first;
   }
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 ++*this;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 if (_M_cur == _M_first)
   {
     _M_set_node(_M_node - 1);
     _M_cur = _M_last;
   }
 --_M_cur;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 --*this;
 return __tmp;
      }

      _Self&
      operator+=(difference_type __n) noexcept
      {
 const difference_type __offset = __n + (_M_cur - _M_first);
 if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
   _M_cur += __n;
 else
   {
     const difference_type __node_offset =
       __offset > 0 ? __offset / difference_type(_S_buffer_size())
                    : -difference_type((-__offset - 1)
           / _S_buffer_size()) - 1;
     _M_set_node(_M_node + __node_offset);
     _M_cur = _M_first + (__offset - __node_offset
     * difference_type(_S_buffer_size()));
   }
 return *this;
      }

      _Self
      operator+(difference_type __n) const noexcept
      {
 _Self __tmp = *this;
 return __tmp += __n;
      }

      _Self&
      operator-=(difference_type __n) noexcept
      { return *this += -__n; }

      _Self
      operator-(difference_type __n) const noexcept
      {
 _Self __tmp = *this;
 return __tmp -= __n;
      }

      reference
      operator[](difference_type __n) const noexcept
      { return *(*this + __n); }






      void
      _M_set_node(_Map_pointer __new_node) noexcept
      {
 _M_node = __new_node;
 _M_first = *__new_node;
 _M_last = _M_first + difference_type(_S_buffer_size());
      }
    };




  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return __x._M_cur == __y._M_cur; }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return __x._M_cur == __y._M_cur; }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return !(__x == __y); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return !(__x == __y); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
                                          : (__x._M_node < __y._M_node); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
                                   : (__x._M_node < __y._M_node); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return __y < __x; }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return __y < __x; }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return !(__y < __x); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return !(__y < __x); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return !(__x < __y); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return !(__x < __y); }





  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
 (_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 + (__y._M_last - __y._M_cur);
    }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    {
      return typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
 (_Deque_iterator<_Tp, _RefL, _PtrL>::_S_buffer_size())
 * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 + (__y._M_last - __y._M_cur);
    }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline _Deque_iterator<_Tp, _Ref, _Ptr>
    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
    noexcept
    { return __x + __n; }

  template<typename _Tp>
    void
    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>&,
  const _Deque_iterator<_Tp, _Tp&, _Tp*>&, const _Tp&);

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
         _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
         __result); }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::copy_backward(_Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__first),
    _Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__last),
    __result); }


  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    move(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
         _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
         __result); }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    move_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    move_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::move_backward(_Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__first),
    _Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__last),
    __result); }
# 443 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    class _Deque_base
    {
    public:
      typedef _Alloc allocator_type;

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Tp*> iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }

      _Deque_base(size_t __num_elements)
      : _M_impl()
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a, size_t __num_elements)
      : _M_impl(__a)
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a)
      : _M_impl(__a)
      { }


      _Deque_base(_Deque_base&& __x)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      {
 _M_initialize_map(0);
 if (__x._M_impl._M_map)
   {
     std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
     std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
     std::swap(this->_M_impl._M_map, __x._M_impl._M_map);
     std::swap(this->_M_impl._M_map_size, __x._M_impl._M_map_size);
   }
      }


      ~_Deque_base() noexcept;

    protected:
      typedef typename _Alloc::template rebind<_Tp*>::other _Map_alloc_type;

      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;




      struct _Deque_impl
      : public _Tp_alloc_type
      {
 _Tp** _M_map;
 size_t _M_map_size;
 iterator _M_start;
 iterator _M_finish;

 _Deque_impl()
 : _Tp_alloc_type(), _M_map(0), _M_map_size(0),
   _M_start(), _M_finish()
 { }

 _Deque_impl(const _Tp_alloc_type& __a) noexcept
 : _Tp_alloc_type(__a), _M_map(0), _M_map_size(0),
   _M_start(), _M_finish()
 { }


 _Deque_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)), _M_map(0), _M_map_size(0),
   _M_start(), _M_finish()
 { }

      };

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      _Map_alloc_type
      _M_get_map_allocator() const noexcept
      { return _Map_alloc_type(_M_get_Tp_allocator()); }

      _Tp*
      _M_allocate_node()
      {
 return _M_impl._Tp_alloc_type::allocate(__deque_buf_size(sizeof(_Tp)));
      }

      void
      _M_deallocate_node(_Tp* __p) noexcept
      {
 _M_impl._Tp_alloc_type::deallocate(__p, __deque_buf_size(sizeof(_Tp)));
      }

      _Tp**
      _M_allocate_map(size_t __n)
      { return _M_get_map_allocator().allocate(__n); }

      void
      _M_deallocate_map(_Tp** __p, size_t __n) noexcept
      { _M_get_map_allocator().deallocate(__p, __n); }

    protected:
      void _M_initialize_map(size_t);
      void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);
      void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish) noexcept;
      enum { _S_initial_map_size = 8 };

      _Deque_impl _M_impl;
    };

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() noexcept
    {
      if (this->_M_impl._M_map)
 {
   _M_destroy_nodes(this->_M_impl._M_start._M_node,
      this->_M_impl._M_finish._M_node + 1);
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 }
    }
# 584 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
      + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
        size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);






      _Tp** __nstart = (this->_M_impl._M_map
   + (this->_M_impl._M_map_size - __num_nodes) / 2);
      _Tp** __nfinish = __nstart + __num_nodes;

      try
 { _M_create_nodes(__nstart, __nfinish); }
      catch(...)
 {
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
   this->_M_impl._M_map = 0;
   this->_M_impl._M_map_size = 0;
   throw;
 }

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
     + __num_elements
     % __deque_buf_size(sizeof(_Tp)));
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)
    {
      _Tp** __cur;
      try
 {
   for (__cur = __nstart; __cur < __nfinish; ++__cur)
     *__cur = this->_M_allocate_node();
 }
      catch(...)
 {
   _M_destroy_nodes(__nstart, __cur);
   throw;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish) noexcept
    {
      for (_Tp** __n = __nstart; __n < __nfinish; ++__n)
 _M_deallocate_node(*__n);
    }
# 734 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class deque : protected _Deque_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Deque_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef typename _Base::iterator iterator;
      typedef typename _Base::const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      typedef pointer* _Map_pointer;

      static size_t _S_buffer_size() noexcept
      { return __deque_buf_size(sizeof(_Tp)); }


      using _Base::_M_initialize_map;
      using _Base::_M_create_nodes;
      using _Base::_M_destroy_nodes;
      using _Base::_M_allocate_node;
      using _Base::_M_deallocate_node;
      using _Base::_M_allocate_map;
      using _Base::_M_deallocate_map;
      using _Base::_M_get_Tp_allocator;





      using _Base::_M_impl;

    public:






      deque() : _Base() { }





      explicit
      deque(const allocator_type& __a)
      : _Base(__a, 0) { }
# 806 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      explicit
      deque(size_type __n)
      : _Base(__n)
      { _M_default_initialize(); }
# 819 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      deque(size_type __n, const value_type& __value,
     const allocator_type& __a = allocator_type())
      : _Base(__a, __n)
      { _M_fill_initialize(__value); }
# 846 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      deque(const deque& __x)
      : _Base(__x._M_get_Tp_allocator(), __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
        this->_M_impl._M_start,
        _M_get_Tp_allocator()); }
# 860 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      deque(deque&& __x)
      : _Base(std::move(__x)) { }
# 874 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      deque(initializer_list<value_type> __l,
     const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 899 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        deque(_InputIterator __first, _InputIterator __last,
       const allocator_type& __a = allocator_type())
 : _Base(__a)
        { _M_initialize_dispatch(__first, __last, __false_type()); }
# 922 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      ~deque() noexcept
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
# 932 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      deque&
      operator=(const deque& __x);
# 943 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      deque&
      operator=(deque&& __x) noexcept
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 964 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      deque&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 982 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 999 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        void
        assign(_InputIterator __first, _InputIterator __last)
        { _M_assign_dispatch(__first, __last, __false_type()); }
# 1026 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      allocator_type
      get_allocator() const noexcept
      { return _Base::get_allocator(); }






      iterator
      begin() noexcept
      { return this->_M_impl._M_start; }





      const_iterator
      begin() const noexcept
      { return this->_M_impl._M_start; }






      iterator
      end() noexcept
      { return this->_M_impl._M_finish; }






      const_iterator
      end() const noexcept
      { return this->_M_impl._M_finish; }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->_M_impl._M_start); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_start); }






      const_iterator
      cbegin() const noexcept
      { return this->_M_impl._M_start; }






      const_iterator
      cend() const noexcept
      { return this->_M_impl._M_finish; }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_start); }




      size_type
      size() const noexcept
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }


      size_type
      max_size() const noexcept
      { return _M_get_Tp_allocator().max_size(); }
# 1165 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      resize(size_type __new_size)
      {
 const size_type __len = size();
 if (__new_size > __len)
   _M_default_append(__new_size - __len);
 else if (__new_size < __len)
   _M_erase_at_end(this->_M_impl._M_start
     + difference_type(__new_size));
      }
# 1187 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 const size_type __len = size();
 if (__new_size > __len)
   insert(this->_M_impl._M_finish, __new_size - __len, __x);
 else if (__new_size < __len)
   _M_erase_at_end(this->_M_impl._M_start
     + difference_type(__new_size));
      }
# 1223 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      shrink_to_fit() noexcept
      { _M_shrink_to_fit(); }






      bool
      empty() const noexcept
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
# 1248 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      reference
      operator[](size_type __n) noexcept
      { return this->_M_impl._M_start[difference_type(__n)]; }
# 1263 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      { return this->_M_impl._M_start[difference_type(__n)]; }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("deque::_M_range_check: __n " "(which is %zu)>= this->size() " "(which is %zu)"),


       __n, this->size());
      }

    public:
# 1291 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 1309 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      { return *begin(); }





      const_reference
      front() const noexcept
      { return *begin(); }





      reference
      back() noexcept
      {
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      const_reference
      back() const noexcept
      {
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 1366 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      push_front(const value_type& __x)
      {
 if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   {
     this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1, __x);
     --this->_M_impl._M_start._M_cur;
   }
 else
   _M_push_front_aux(__x);
      }


      void
      push_front(value_type&& __x)
      { emplace_front(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_front(_Args&&... __args);
# 1397 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_last - 1)
   {
     this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __x);
     ++this->_M_impl._M_finish._M_cur;
   }
 else
   _M_push_back_aux(__x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);
# 1428 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      pop_front() noexcept
      {
 if (this->_M_impl._M_start._M_cur
     != this->_M_impl._M_start._M_last - 1)
   {
     this->_M_impl.destroy(this->_M_impl._M_start._M_cur);
     ++this->_M_impl._M_start._M_cur;
   }
 else
   _M_pop_front_aux();
      }
# 1449 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      pop_back() noexcept
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_first)
   {
     --this->_M_impl._M_finish._M_cur;
     this->_M_impl.destroy(this->_M_impl._M_finish._M_cur);
   }
 else
   _M_pop_back_aux();
      }
# 1472 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      template<typename... _Args>
        iterator
        emplace(const_iterator __position, _Args&&... __args);
# 1485 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1511 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1524 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      iterator
      insert(const_iterator __p, initializer_list<value_type> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1540 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(__position._M_const_cast(), __n, __x);
 return begin() + __offset;
      }
# 1574 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        iterator
        insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
        {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(__position._M_const_cast(),
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1620 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      iterator

      erase(const_iterator __position)



      { return _M_erase(__position._M_const_cast()); }
# 1644 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)



      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }
# 1661 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      swap(deque& __x) noexcept
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_map, __x._M_impl._M_map);
 std::swap(this->_M_impl._M_map_size, __x._M_impl._M_map_size);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(begin()); }

    protected:






      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
        {
   _M_initialize_map(static_cast<size_type>(__n));
   _M_fill_initialize(__x);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }
# 1723 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag);
# 1745 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      _M_fill_initialize(const value_type& __value);



      void
      _M_default_initialize();
# 1761 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
        {
   const size_type __len = std::distance(__first, __last);
   if (__len > size())
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       insert(end(), __mid, __last);
     }
   else
     _M_erase_at_end(std::copy(__first, __last, begin()));
 }



      void
      _M_fill_assign(size_type __n, const value_type& __val)
      {
 if (__n > size())
   {
     std::fill(begin(), end(), __val);
     insert(end(), __n - size(), __val);
   }
 else
   {
     _M_erase_at_end(begin() + difference_type(__n));
     std::fill(begin(), end(), __val);
   }
      }
# 1825 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      template<typename... _Args>
        void _M_push_back_aux(_Args&&... __args);

      template<typename... _Args>
        void _M_push_front_aux(_Args&&... __args);


      void _M_pop_back_aux();

      void _M_pop_front_aux();
# 1844 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos,
      _Integer __n, _Integer __x, __true_type)
        { _M_fill_insert(__pos, __n, __x); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos,
      _InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
          _M_range_insert_aux(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert_aux(iterator __pos, _InputIterator __first,
       _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert_aux(iterator __pos, _ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag);




      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);






      template<typename... _Args>
        iterator
        _M_insert_aux(iterator __pos, _Args&&... __args);



      void
      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);


      template<typename _ForwardIterator>
        void
        _M_insert_aux(iterator __pos,
        _ForwardIterator __first, _ForwardIterator __last,
        size_type __n);




      void
      _M_destroy_data_aux(iterator __first, iterator __last);



      template<typename _Alloc1>
        void
        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
        { _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
        const std::allocator<_Tp>&)
      {
 if (!__has_trivial_destructor(value_type))
   _M_destroy_data_aux(__first, __last);
      }


      void
      _M_erase_at_begin(iterator __pos)
      {
 _M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
 _M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
 this->_M_impl._M_start = __pos;
      }



      void
      _M_erase_at_end(iterator __pos)
      {
 _M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 _M_destroy_nodes(__pos._M_node + 1,
    this->_M_impl._M_finish._M_node + 1);
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __pos);

      iterator
      _M_erase(iterator __first, iterator __last);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();




      iterator
      _M_reserve_elements_at_front(size_type __n)
      {
 const size_type __vacancies = this->_M_impl._M_start._M_cur
                               - this->_M_impl._M_start._M_first;
 if (__n > __vacancies)
   _M_new_elements_at_front(__n - __vacancies);
 return this->_M_impl._M_start - difference_type(__n);
      }

      iterator
      _M_reserve_elements_at_back(size_type __n)
      {
 const size_type __vacancies = (this->_M_impl._M_finish._M_last
           - this->_M_impl._M_finish._M_cur) - 1;
 if (__n > __vacancies)
   _M_new_elements_at_back(__n - __vacancies);
 return this->_M_impl._M_finish + difference_type(__n);
      }

      void
      _M_new_elements_at_front(size_type __new_elements);

      void
      _M_new_elements_at_back(size_type __new_elements);
# 1995 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
 if (__nodes_to_add + 1 > this->_M_impl._M_map_size
     - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   _M_reallocate_map(__nodes_to_add, false);
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
 if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
           - this->_M_impl._M_map))
   _M_reallocate_map(__nodes_to_add, true);
      }

      void
      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);

    };
# 2027 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const deque<_Tp, _Alloc>& __x,
                         const deque<_Tp, _Alloc>& __y)
    { return __x.size() == __y.size()
             && std::equal(__x.begin(), __x.end(), __y.begin()); }
# 2045 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const deque<_Tp, _Alloc>& __x,
       const deque<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const deque<_Tp, _Alloc>& __x,
       const deque<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
    { __x.swap(__y); }




}
# 65 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\deque" 2 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/deque.tcc" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/deque.tcc" 3
namespace std
{



  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_default_initialize()
    {
      _Map_pointer __cur;
      try
        {
          for (__cur = this->_M_impl._M_start._M_node;
        __cur < this->_M_impl._M_finish._M_node;
        ++__cur)
            std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),
        _M_get_Tp_allocator());
          std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,
      this->_M_impl._M_finish._M_cur,
      _M_get_Tp_allocator());
        }
      catch(...)
        {
          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
   _M_get_Tp_allocator());
          throw;
        }
    }


  template <typename _Tp, typename _Alloc>
    deque<_Tp, _Alloc>&
    deque<_Tp, _Alloc>::
    operator=(const deque& __x)
    {
      const size_type __len = size();
      if (&__x != this)
 {
   if (__len >= __x.size())
     _M_erase_at_end(std::copy(__x.begin(), __x.end(),
          this->_M_impl._M_start));
   else
     {
       const_iterator __mid = __x.begin() + difference_type(__len);
       std::copy(__x.begin(), __mid, this->_M_impl._M_start);
       insert(this->_M_impl._M_finish, __mid, __x.end());
     }
 }
      return *this;
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      emplace_front(_Args&&... __args)
      {
 if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   {
     this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1,
        std::forward<_Args>(__args)...);
     --this->_M_impl._M_start._M_cur;
   }
 else
   _M_push_front_aux(std::forward<_Args>(__args)...);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_last - 1)
   {
     this->_M_impl.construct(this->_M_impl._M_finish._M_cur,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish._M_cur;
   }
 else
   _M_push_back_aux(std::forward<_Args>(__args)...);
      }



  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename deque<_Tp, _Alloc>::iterator
      deque<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 if (__position._M_cur == this->_M_impl._M_start._M_cur)
   {
     emplace_front(std::forward<_Args>(__args)...);
     return this->_M_impl._M_start;
   }
 else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
   {
     emplace_back(std::forward<_Args>(__args)...);
     iterator __tmp = this->_M_impl._M_finish;
     --__tmp;
     return __tmp;
   }
 else
   return _M_insert_aux(__position._M_const_cast(),
          std::forward<_Args>(__args)...);
      }


  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      if (__position._M_cur == this->_M_impl._M_start._M_cur)
 {
   push_front(__x);
   return this->_M_impl._M_start;
 }
      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 {
   push_back(__x);
   iterator __tmp = this->_M_impl._M_finish;
   --__tmp;
   return __tmp;
 }
      else
 return _M_insert_aux(__position._M_const_cast(), __x);
   }

  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      iterator __next = __position;
      ++__next;
      const difference_type __index = __position - begin();
      if (static_cast<size_type>(__index) < (size() >> 1))
 {
   if (__position != begin())
     std::move_backward(begin(), __position, __next);
   pop_front();
 }
      else
 {
   if (__next != end())
     std::move(__next, end(), __position);
   pop_back();
 }
      return begin() + __index;
    }

  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first == __last)
 return __first;
      else if (__first == begin() && __last == end())
 {
   clear();
   return end();
 }
      else
 {
   const difference_type __n = __last - __first;
   const difference_type __elems_before = __first - begin();
   if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)
     {
       if (__first != begin())
  std::move_backward(begin(), __first, __last);
       _M_erase_at_begin(begin() + __n);
     }
   else
     {
       if (__last != end())
  std::move(__last, end(), __first);
       _M_erase_at_end(end() - __n);
     }
   return begin() + __elems_before;
 }
    }

  template <typename _Tp, class _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
        iterator __cur = begin();
        for (; __first != __last && __cur != end(); ++__cur, ++__first)
          *__cur = *__first;
        if (__first == __last)
          _M_erase_at_end(__cur);
        else
          insert(end(), __first, __last);
      }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)
    {
      if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 {
   iterator __new_start = _M_reserve_elements_at_front(__n);
   try
     {
       std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,
       __x, _M_get_Tp_allocator());
       this->_M_impl._M_start = __new_start;
     }
   catch(...)
     {
       _M_destroy_nodes(__new_start._M_node,
          this->_M_impl._M_start._M_node);
       throw;
     }
 }
      else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   try
     {
       std::__uninitialized_fill_a(this->_M_impl._M_finish,
       __new_finish, __x,
       _M_get_Tp_allocator());
       this->_M_impl._M_finish = __new_finish;
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
      else
        _M_insert_aux(__pos, __n, __x);
    }


  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n)
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   try
     {
       std::__uninitialized_default_a(this->_M_impl._M_finish,
          __new_finish,
          _M_get_Tp_allocator());
       this->_M_impl._M_finish = __new_finish;
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
    }

  template <typename _Tp, typename _Alloc>
    bool
    deque<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      const difference_type __front_capacity
 = (this->_M_impl._M_start._M_cur - this->_M_impl._M_start._M_first);
      if (__front_capacity == 0)
 return false;

      const difference_type __back_capacity
 = (this->_M_impl._M_finish._M_last - this->_M_impl._M_finish._M_cur);
      if (__front_capacity + __back_capacity < _S_buffer_size())
 return false;

      return std::__shrink_to_fit_aux<deque>::_S_do_it(*this);
    }


  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_fill_initialize(const value_type& __value)
    {
      _Map_pointer __cur;
      try
        {
          for (__cur = this->_M_impl._M_start._M_node;
        __cur < this->_M_impl._M_finish._M_node;
        ++__cur)
            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
     __value, _M_get_Tp_allocator());
          std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
          this->_M_impl._M_finish._M_cur,
          __value, _M_get_Tp_allocator());
        }
      catch(...)
        {
          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
   _M_get_Tp_allocator());
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_initialize(_InputIterator __first, _InputIterator __last,
                          std::input_iterator_tag)
      {
        this->_M_initialize_map(0);
        try
          {
            for (; __first != __last; ++__first)

       emplace_back(*__first);



          }
        catch(...)
          {
            clear();
            throw;
          }
      }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
                          std::forward_iterator_tag)
      {
        const size_type __n = std::distance(__first, __last);
        this->_M_initialize_map(__n);

        _Map_pointer __cur_node;
        try
          {
            for (__cur_node = this->_M_impl._M_start._M_node;
                 __cur_node < this->_M_impl._M_finish._M_node;
                 ++__cur_node)
       {
  _ForwardIterator __mid = __first;
  std::advance(__mid, _S_buffer_size());
  std::__uninitialized_copy_a(__first, __mid, *__cur_node,
         _M_get_Tp_allocator());
  __first = __mid;
       }
            std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_finish._M_first,
     _M_get_Tp_allocator());
          }
        catch(...)
          {
            std::_Destroy(this->_M_impl._M_start,
     iterator(*__cur_node, __cur_node),
     _M_get_Tp_allocator());
            throw;
          }
      }


  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(_Args&&... __args)





      {
 _M_reserve_map_at_back();
 *(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 try
   {

     this->_M_impl.construct(this->_M_impl._M_finish._M_cur,
        std::forward<_Args>(__args)...);



     this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
      + 1);
     this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   }
 catch(...)
   {
     _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
     throw;
   }
      }


  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(_Args&&... __args)





      {
 _M_reserve_map_at_front();
 *(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 try
   {
     this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
            - 1);
     this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;

     this->_M_impl.construct(this->_M_impl._M_start._M_cur,
        std::forward<_Args>(__args)...);



   }
 catch(...)
   {
     ++this->_M_impl._M_start;
     _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
     throw;
   }
      }


  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
      this->_M_impl.destroy(this->_M_impl._M_finish._M_cur);
    }






  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_front_aux()
    {
      this->_M_impl.destroy(this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
    }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_insert_aux(iterator __pos,
                          _InputIterator __first, _InputIterator __last,
                          std::input_iterator_tag)
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_insert_aux(iterator __pos,
                          _ForwardIterator __first, _ForwardIterator __last,
                          std::forward_iterator_tag)
      {
        const size_type __n = std::distance(__first, __last);
        if (__pos._M_cur == this->_M_impl._M_start._M_cur)
   {
     iterator __new_start = _M_reserve_elements_at_front(__n);
     try
       {
  std::__uninitialized_copy_a(__first, __last, __new_start,
         _M_get_Tp_allocator());
  this->_M_impl._M_start = __new_start;
       }
     catch(...)
       {
  _M_destroy_nodes(__new_start._M_node,
     this->_M_impl._M_start._M_node);
  throw;
       }
   }
        else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
   {
     iterator __new_finish = _M_reserve_elements_at_back(__n);
     try
       {
  std::__uninitialized_copy_a(__first, __last,
         this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  this->_M_impl._M_finish = __new_finish;
       }
     catch(...)
       {
  _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
     __new_finish._M_node + 1);
  throw;
       }
   }
        else
          _M_insert_aux(__pos, __first, __last, __n);
      }

  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      typename deque<_Tp, _Alloc>::iterator
      deque<_Tp, _Alloc>::
      _M_insert_aux(iterator __pos, _Args&&... __args)
      {
 value_type __x_copy(std::forward<_Args>(__args)...);







 difference_type __index = __pos - this->_M_impl._M_start;
 if (static_cast<size_type>(__index) < size() / 2)
   {
     push_front(std::move(front()));
     iterator __front1 = this->_M_impl._M_start;
     ++__front1;
     iterator __front2 = __front1;
     ++__front2;
     __pos = this->_M_impl._M_start + __index;
     iterator __pos1 = __pos;
     ++__pos1;
     std::move(__front2, __pos1, __front1);
   }
 else
   {
     push_back(std::move(back()));
     iterator __back1 = this->_M_impl._M_finish;
     --__back1;
     iterator __back2 = __back1;
     --__back2;
     __pos = this->_M_impl._M_start + __index;
     std::move_backward(__pos, __back2, __back1);
   }
 *__pos = std::move(__x_copy);
 return __pos;
      }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)
    {
      const difference_type __elems_before = __pos - this->_M_impl._M_start;
      const size_type __length = this->size();
      value_type __x_copy = __x;
      if (__elems_before < difference_type(__length / 2))
 {
   iterator __new_start = _M_reserve_elements_at_front(__n);
   iterator __old_start = this->_M_impl._M_start;
   __pos = this->_M_impl._M_start + __elems_before;
   try
     {
       if (__elems_before >= difference_type(__n))
  {
    iterator __start_n = (this->_M_impl._M_start
     + difference_type(__n));
    std::__uninitialized_move_a(this->_M_impl._M_start,
           __start_n, __new_start,
           _M_get_Tp_allocator());
    this->_M_impl._M_start = __new_start;
    std::move(__start_n, __pos, __old_start);
    std::fill(__pos - difference_type(__n), __pos, __x_copy);
  }
       else
  {
    std::__uninitialized_move_fill(this->_M_impl._M_start,
       __pos, __new_start,
       this->_M_impl._M_start,
       __x_copy,
       _M_get_Tp_allocator());
    this->_M_impl._M_start = __new_start;
    std::fill(__old_start, __pos, __x_copy);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(__new_start._M_node,
          this->_M_impl._M_start._M_node);
       throw;
     }
 }
      else
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   iterator __old_finish = this->_M_impl._M_finish;
   const difference_type __elems_after =
     difference_type(__length) - __elems_before;
   __pos = this->_M_impl._M_finish - __elems_after;
   try
     {
       if (__elems_after > difference_type(__n))
  {
    iterator __finish_n = (this->_M_impl._M_finish
      - difference_type(__n));
    std::__uninitialized_move_a(__finish_n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::move_backward(__pos, __finish_n, __old_finish);
    std::fill(__pos, __pos + difference_type(__n), __x_copy);
  }
       else
  {
    std::__uninitialized_fill_move(this->_M_impl._M_finish,
       __pos + difference_type(__n),
       __x_copy, __pos,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::fill(__pos, __old_finish, __x_copy);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_insert_aux(iterator __pos,
                    _ForwardIterator __first, _ForwardIterator __last,
                    size_type __n)
      {
        const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
        const size_type __length = size();
        if (static_cast<size_type>(__elemsbefore) < __length / 2)
   {
     iterator __new_start = _M_reserve_elements_at_front(__n);
     iterator __old_start = this->_M_impl._M_start;
     __pos = this->_M_impl._M_start + __elemsbefore;
     try
       {
  if (__elemsbefore >= difference_type(__n))
    {
      iterator __start_n = (this->_M_impl._M_start
       + difference_type(__n));
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __start_n, __new_start,
      _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
      std::move(__start_n, __pos, __old_start);
      std::copy(__first, __last, __pos - difference_type(__n));
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, difference_type(__n) - __elemsbefore);
      std::__uninitialized_move_copy(this->_M_impl._M_start,
         __pos, __first, __mid,
         __new_start,
         _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
      std::copy(__mid, __last, __old_start);
    }
       }
     catch(...)
       {
  _M_destroy_nodes(__new_start._M_node,
     this->_M_impl._M_start._M_node);
  throw;
       }
   }
        else
        {
          iterator __new_finish = _M_reserve_elements_at_back(__n);
          iterator __old_finish = this->_M_impl._M_finish;
          const difference_type __elemsafter =
            difference_type(__length) - __elemsbefore;
          __pos = this->_M_impl._M_finish - __elemsafter;
          try
            {
              if (__elemsafter > difference_type(__n))
  {
    iterator __finish_n = (this->_M_impl._M_finish
      - difference_type(__n));
    std::__uninitialized_move_a(__finish_n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::move_backward(__pos, __finish_n, __old_finish);
    std::copy(__first, __last, __pos);
  }
              else
  {
    _ForwardIterator __mid = __first;
    std::advance(__mid, __elemsafter);
    std::__uninitialized_copy_move(__mid, __last, __pos,
       this->_M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::copy(__first, __mid, __pos);
  }
            }
          catch(...)
            {
              _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
              throw;
            }
        }
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
     __node < __last._M_node; ++__node)
  std::_Destroy(*__node, *__node + _S_buffer_size(),
         _M_get_Tp_allocator());

       if (__first._M_node != __last._M_node)
  {
    std::_Destroy(__first._M_cur, __first._M_last,
    _M_get_Tp_allocator());
    std::_Destroy(__last._M_first, __last._M_cur,
    _M_get_Tp_allocator());
  }
       else
  std::_Destroy(__first._M_cur, __last._M_cur,
         _M_get_Tp_allocator());
     }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_new_elements_at_front(size_type __new_elems)
    {
      if (this->max_size() - this->size() < __new_elems)
 __throw_length_error(("deque::_M_new_elements_at_front"));

      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
         / _S_buffer_size());
      _M_reserve_map_at_front(__new_nodes);
      size_type __i;
      try
        {
          for (__i = 1; __i <= __new_nodes; ++__i)
            *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
        }
      catch(...)
        {
          for (size_type __j = 1; __j < __i; ++__j)
            _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_new_elements_at_back(size_type __new_elems)
    {
      if (this->max_size() - this->size() < __new_elems)
 __throw_length_error(("deque::_M_new_elements_at_back"));

      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
         / _S_buffer_size());
      _M_reserve_map_at_back(__new_nodes);
      size_type __i;
      try
        {
          for (__i = 1; __i <= __new_nodes; ++__i)
            *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
        }
      catch(...)
        {
          for (size_type __j = 1; __j < __i; ++__j)
            _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
 = this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 {
   __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
      - __new_num_nodes) / 2
                  + (__add_at_front ? __nodes_to_add : 0);
   if (__new_nstart < this->_M_impl._M_start._M_node)
     std::copy(this->_M_impl._M_start._M_node,
        this->_M_impl._M_finish._M_node + 1,
        __new_nstart);
   else
     std::copy_backward(this->_M_impl._M_start._M_node,
          this->_M_impl._M_finish._M_node + 1,
          __new_nstart + __old_num_nodes);
 }
      else
 {
   size_type __new_map_size = this->_M_impl._M_map_size
                              + std::max(this->_M_impl._M_map_size,
      __nodes_to_add) + 2;

   _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
   __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
                  + (__add_at_front ? __nodes_to_add : 0);
   std::copy(this->_M_impl._M_start._M_node,
      this->_M_impl._M_finish._M_node + 1,
      __new_nstart);
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

   this->_M_impl._M_map = __new_map;
   this->_M_impl._M_map_size = __new_map_size;
 }

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
    }



  template<typename _Tp>
    void
    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,
  const _Deque_iterator<_Tp, _Tp&, _Tp*>& __last, const _Tp& __value)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;

      for (typename _Self::_Map_pointer __node = __first._M_node + 1;
           __node < __last._M_node; ++__node)
 std::fill(*__node, *__node + _Self::_S_buffer_size(), __value);

      if (__first._M_node != __last._M_node)
 {
   std::fill(__first._M_cur, __first._M_last, __value);
   std::fill(__last._M_first, __last._M_cur, __value);
 }
      else
 std::fill(__first._M_cur, __last._M_cur, __value);
    }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   const difference_type __clen
     = std::min(__len, std::min(__first._M_last - __first._M_cur,
           __result._M_last - __result._M_cur));
   std::copy(__first._M_cur, __first._M_cur + __clen, __result._M_cur);
   __first += __clen;
   __result += __clen;
   __len -= __clen;
 }
      return __result;
    }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   difference_type __llen = __last._M_cur - __last._M_first;
   _Tp* __lend = __last._M_cur;

   difference_type __rlen = __result._M_cur - __result._M_first;
   _Tp* __rend = __result._M_cur;

   if (!__llen)
     {
       __llen = _Self::_S_buffer_size();
       __lend = *(__last._M_node - 1) + __llen;
     }
   if (!__rlen)
     {
       __rlen = _Self::_S_buffer_size();
       __rend = *(__result._M_node - 1) + __rlen;
     }

   const difference_type __clen = std::min(__len,
        std::min(__llen, __rlen));
   std::copy_backward(__lend - __clen, __lend, __rend);
   __last -= __clen;
   __result -= __clen;
   __len -= __clen;
 }
      return __result;
    }


  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    move(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   const difference_type __clen
     = std::min(__len, std::min(__first._M_last - __first._M_cur,
           __result._M_last - __result._M_cur));
   std::move(__first._M_cur, __first._M_cur + __clen, __result._M_cur);
   __first += __clen;
   __result += __clen;
   __len -= __clen;
 }
      return __result;
    }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    move_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   difference_type __llen = __last._M_cur - __last._M_first;
   _Tp* __lend = __last._M_cur;

   difference_type __rlen = __result._M_cur - __result._M_first;
   _Tp* __rend = __result._M_cur;

   if (!__llen)
     {
       __llen = _Self::_S_buffer_size();
       __lend = *(__last._M_node - 1) + __llen;
     }
   if (!__rlen)
     {
       __rlen = _Self::_S_buffer_size();
       __rend = *(__result._M_node - 1) + __rlen;
     }

   const difference_type __clen = std::min(__len,
        std::min(__llen, __rlen));
   std::move_backward(__lend - __clen, __lend, __rend);
   __last -= __clen;
   __result -= __clen;
   __len -= __clen;
 }
      return __result;
    }



}
# 67 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\deque" 2 3
# 61 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\stack" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_stack.h" 1 3
# 65 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_stack.h" 3
namespace std
{
# 98 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_stack.h" 3
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class stack
    {

      typedef typename _Sequence::value_type _Sequence_value_type;




      template<typename _Tp1, typename _Seq1>
        friend bool
        operator==(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);

      template<typename _Tp1, typename _Seq1>
        friend bool
        operator<(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);

    public:
      typedef typename _Sequence::value_type value_type;
      typedef typename _Sequence::reference reference;
      typedef typename _Sequence::const_reference const_reference;
      typedef typename _Sequence::size_type size_type;
      typedef _Sequence container_type;

    protected:

      _Sequence c;

    public:
# 136 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_stack.h" 3
      explicit
      stack(const _Sequence& __c)
      : c(__c) { }

      explicit
      stack(_Sequence&& __c = _Sequence())
      : c(std::move(__c)) { }





      bool
      empty() const
      { return c.empty(); }


      size_type
      size() const
      { return c.size(); }





      reference
      top()
      {
                              ;
 return c.back();
      }





      const_reference
      top() const
      {
                              ;
 return c.back();
      }
# 188 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_stack.h" 3
      void
      push(const value_type& __x)
      { c.push_back(__x); }


      void
      push(value_type&& __x)
      { c.push_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace(_Args&&... __args)
 { c.emplace_back(std::forward<_Args>(__args)...); }
# 214 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_stack.h" 3
      void
      pop()
      {
                              ;
 c.pop_back();
      }


      void
      swap(stack& __s)
      noexcept(noexcept(swap(c, __s.c)))
      {
 using std::swap;
 swap(c, __s.c);
      }

    };
# 244 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_stack.h" 3
  template<typename _Tp, typename _Seq>
    inline bool
    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return __x.c == __y.c; }
# 262 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_stack.h" 3
  template<typename _Tp, typename _Seq>
    inline bool
    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return __x.c < __y.c; }


  template<typename _Tp, typename _Seq>
    inline bool
    operator!=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Seq>
    inline bool
    operator>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Seq>
    inline bool
    operator<=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Seq>
    inline bool
    operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Seq>
    inline void
    swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<typename _Tp, typename _Seq, typename _Alloc>
    struct uses_allocator<stack<_Tp, _Seq>, _Alloc>
    : public uses_allocator<_Seq, _Alloc>::type { };



}
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\stack" 2 3
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/unwind-prot.h" 2


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/action-container.h" 1
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/action-container.h"
class
action_container
{
public:



  class elem
  {
  public:
    elem (void) { }

    virtual void run (void) { }

    virtual ~elem (void) { }

    friend class action_container;

  private:



    elem (const elem&);

    elem& operator = (const elem&);
  };



  class fcn_elem : public elem
  {
  public:
    fcn_elem (void (*fptr) (void))
      : e_fptr (fptr) { }

    void run (void) { e_fptr (); }

  private:
    void (*e_fptr) (void);
  };




  template <typename T>
  class fcn_arg_elem : public elem
  {
  public:
    fcn_arg_elem (void (*fcn) (T), T arg)
      : e_fcn (fcn), e_arg (arg) { }

    void run (void) { e_fcn (e_arg); }

  private:



    fcn_arg_elem (const fcn_arg_elem&);

    fcn_arg_elem& operator = (const fcn_arg_elem&);

    void (*e_fcn) (T);
    T e_arg;
  };





  template <typename T>
  class fcn_crefarg_elem : public elem
  {
  public:
    fcn_crefarg_elem (void (*fcn) (const T&), const T& arg)
      : e_fcn (fcn), e_arg (arg) { }

    void run (void) { e_fcn (e_arg); }

  private:
    void (*e_fcn) (const T&);
    T e_arg;
  };



  template <typename T>
  class method_elem : public elem
  {
  public:
    method_elem (T *obj, void (T::*method) (void))
      : e_obj (obj), e_method (method) { }

    void run (void) { (e_obj->*e_method) (); }

  private:

    T *e_obj;
    void (T::*e_method) (void);



    method_elem (const method_elem&);

    method_elem operator = (const method_elem&);
  };



  template <typename T, typename A>
  class method_arg_elem : public elem
  {
  public:
    method_arg_elem (T *obj, void (T::*method) (A), A arg)
      : e_obj (obj), e_method (method), e_arg (arg) { }

    void run (void) { (e_obj->*e_method) (e_arg); }

  private:

    T *e_obj;
    void (T::*e_method) (A);
    A e_arg;



    method_arg_elem (const method_arg_elem&);

    method_arg_elem operator = (const method_arg_elem&);
  };



  template <typename T, typename A>
  class method_crefarg_elem : public elem
  {
  public:
    method_crefarg_elem (T *obj, void (T::*method) (const A&), const A& arg)
      : e_obj (obj), e_method (method), e_arg (arg) { }

    void run (void) { (e_obj->*e_method) (e_arg); }

  private:

    T *e_obj;
    void (T::*e_method) (const A&);
    A e_arg;



    method_crefarg_elem (const method_crefarg_elem&);

    method_crefarg_elem operator = (const method_crefarg_elem&);
  };



  template <typename T>
  class restore_var_elem : public elem
  {
  public:
    restore_var_elem (T& ref, const T& val)
      : e_ptr (&ref), e_val (val) { }

    void run (void) { *e_ptr = e_val; }

  private:



    restore_var_elem (const restore_var_elem&);

    restore_var_elem& operator = (const restore_var_elem&);

    T *e_ptr, e_val;
  };



  template <typename T>
  class delete_ptr_elem : public elem
  {
  public:
    delete_ptr_elem (T *ptr)
      : e_ptr (ptr) { }

    void run (void) { delete e_ptr; }

  private:

    T *e_ptr;



    delete_ptr_elem (const delete_ptr_elem&);

    delete_ptr_elem operator = (const delete_ptr_elem&);
  };

  action_container (void) { }

  virtual ~action_container (void) { }

  virtual void add (elem *new_elem) = 0;


  void add_fcn (void (*fcn) (void))
  {
    add (new fcn_elem (fcn));
  }


  template <typename T>
  void add_fcn (void (*action) (T), T val)
  {
    add (new fcn_arg_elem<T> (action, val));
  }


  template <typename T>
  void add_fcn (void (*action) (const T&), const T& val)
  {
    add (new fcn_crefarg_elem<T> (action, val));
  }


  template <typename T>
  void add_method (T *obj, void (T::*method) (void))
  {
    add (new method_elem<T> (obj, method));
  }


  template <typename T, typename A>
  void add_method (T *obj, void (T::*method) (A), A arg)
  {
    add (new method_arg_elem<T, A> (obj, method, arg));
  }


  template <typename T, typename A>
  void add_method (T *obj, void (T::*method) (const A&), const A& arg)
  {
    add (new method_crefarg_elem<T, A> (obj, method, arg));
  }



  template <typename T>
  void add_delete (T *obj)
  {
    add (new delete_ptr_elem<T> (obj));
  }


  template <typename T>
  void protect_var (T& var)
  {
    add (new restore_var_elem<T> (var, var));
  }


  template <typename T>
  void protect_var (T& var, const T& val)
  {
    add (new restore_var_elem<T> (var, val));
  }

  operator bool (void) const { return ! empty (); }

  virtual void run_first (void) = 0;

  void run (size_t num)
  {
    if (num > size ())
      num = size ();

    for (size_t i = 0; i < num; i++)
      run_first ();
  }

  void run (void) { run (size ()); }

  virtual void discard_first (void) = 0;

  void discard (size_t num)
  {
    if (num > size ())
      num = size ();

    for (size_t i = 0; i < num; i++)
      discard_first ();
  }

  void discard (void) { discard (size ()); }

  virtual size_t size (void) const = 0;

  bool empty (void) const { return size () == 0; }

private:



  action_container (const action_container&);

  action_container& operator = (const action_container&);
};
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/unwind-prot.h" 2

namespace octave
{
  class

  unwind_protect : public action_container
  {
  public:

    unwind_protect (void) : lifo () { }





    ~unwind_protect (void) { run (); }

    virtual void add (elem *new_elem)
    {
      lifo.push (new_elem);
    }

    __attribute__ ((__deprecated__))
    void add (void (*fcn) (void *), void *ptr = 0)
    {
      add (new fcn_arg_elem<void *> (fcn, ptr));
    }

    operator bool (void) const { return ! empty (); }

    __attribute__ ((__deprecated__))
    void run_top (void) { run_first (); }

    void run_first (void)
    {
      if (! empty ())
        {

          std::unique_ptr<elem> ptr (lifo.top ());
          lifo.pop ();
          ptr->run ();
        }
    }

    __attribute__ ((__deprecated__))
    void run_top (int num) { run (num); }

    __attribute__ ((__deprecated__))
    void discard_top (void) { discard_first (); }

    void discard_first (void)
    {
      if (! empty ())
        {
          elem *ptr = lifo.top ();
          lifo.pop ();
          delete ptr;
        }
    }

    __attribute__ ((__deprecated__))
    void discard_top (int num) { discard (num); }

    size_t size (void) const { return lifo.size (); }

  protected:

    std::stack<elem *> lifo;

  private:



    unwind_protect (const unwind_protect&);

    unwind_protect& operator = (const unwind_protect&);
  };





  class

  unwind_protect_safe : public unwind_protect
  {
  private:

    void warn_unhandled_exception (void) const;

  public:

    unwind_protect_safe (void) : unwind_protect () { }

    ~unwind_protect_safe (void)
    {
      while (! empty ())
        {
          try
            {
              run_first ();
            }
          catch (...)
            {
              warn_unhandled_exception ();
            }
        }
    }

  private:



    unwind_protect_safe (const unwind_protect_safe&);

    unwind_protect_safe& operator = (const unwind_protect_safe&);
  };
}



__attribute__ ((__deprecated__))
typedef octave::unwind_protect unwind_protect;

__attribute__ ((__deprecated__))
typedef octave::unwind_protect_safe unwind_protect_safe;
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/error.h" 2

class octave_map;
class octave_value_list;
namespace octave
{
  class execution_exception;
}




extern void reset_error_handler (void);

extern int warning_enabled (const std::string& id);

extern void
vmessage (const char *name, const char *fmt, va_list args);

extern void message (const char *name, const char *fmt, ...);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern
void vusage (const char *fmt, va_list args);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern
void usage (const char *fmt, ...);

extern void vwarning (const char *fmt, va_list args);
extern void warning (const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void verror (const char *fmt, va_list args);

__attribute__ ((__noreturn__)) extern
void error (const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void verror (octave::execution_exception&, const char *fmt, va_list args);
__attribute__ ((__noreturn__)) extern
void error (octave::execution_exception&, const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void verror_with_cfn (const char *fmt, va_list args);
__attribute__ ((__noreturn__)) extern
void error_with_cfn (const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void vparse_error (const char *fmt, va_list args);
__attribute__ ((__noreturn__)) extern
void parse_error (const char *fmt, ...);

extern void
vmessage_with_id (const char *id, const char *name,
                  const char *fmt, va_list args);

extern void
message_with_id (const char *id, const char *name, const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void vusage_with_id (const char *id, const char *fmt, va_list args);

__attribute__ ((__noreturn__)) extern
void usage_with_id (const char *id, const char *fmt, ...);

extern void
vwarning_with_id (const char *id, const char *fmt, va_list args);

extern void
warning_with_id (const char *id, const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void verror_with_id (const char *id, const char *fmt, va_list args);

__attribute__ ((__noreturn__)) extern
void error_with_id (const char *id, const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void verror_with_id_cfn (const char *id, const char *fmt, va_list args);

__attribute__ ((__noreturn__)) extern
void error_with_id_cfn (const char *id, const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void vparse_error_with_id (const char *id, const char *fmt, va_list args);

__attribute__ ((__noreturn__)) extern
void parse_error_with_id (const char *id, const char *fmt, ...);

__attribute__ ((__noreturn__)) extern
void panic (const char *fmt, ...);


extern void defun_usage_message (const std::string& msg);

extern octave_value_list
set_warning_state (const std::string& id, const std::string& state);

extern octave_value_list
set_warning_state (const octave_value_list& args);

extern void disable_warning (const std::string& id);
extern void initialize_default_warning_state (void);




extern bool Vdebug_on_error;



extern bool Vdebug_on_caught;



extern bool Vdebug_on_warning;


extern int error_state;


extern int warning_state;




extern int buffer_error_messages;



extern int in_try_catch;


extern bool discard_error_messages;


extern bool discard_warning_messages;


extern std::string last_error_message (void);
extern std::string last_error_id (void);
extern octave_map last_error_stack (void);
extern std::string last_warning_message (void);
extern std::string last_warning_id (void);

extern void interpreter_try (octave::unwind_protect&);
# 41 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-hdf5-types.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-hdf5-types.h"
extern bool check_hdf5_types (bool warn = true);




typedef int64_t octave_hdf5_id;
typedef int octave_hdf5_err;


extern "C" {





extern const octave_hdf5_id octave_H5E_DEFAULT;
extern const octave_hdf5_id octave_H5P_DEFAULT;
extern const octave_hdf5_id octave_H5S_ALL;


}
# 42 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h" 2

class Cell;
class mxArray;
class octave_map;
class octave_scalar_map;
class octave_value;
class octave_value_list;
class octave_stream;
class octave_function;
class octave_user_function;
class octave_user_script;
class octave_user_code;
class octave_fcn_handle;
class octave_fcn_inline;
class octave_value_list;
class octave_lvalue;

class tree_walker;

enum builtin_type_t
{
  btyp_double,
  btyp_float,
  btyp_complex,
  btyp_float_complex,
  btyp_int8,
  btyp_int16,
  btyp_int32,
  btyp_int64,
  btyp_uint8,
  btyp_uint16,
  btyp_uint32,
  btyp_uint64,
  btyp_bool,
  btyp_char,
  btyp_struct,
  btyp_cell,
  btyp_func_handle,
  btyp_unknown,
  btyp_num_types = btyp_unknown
};

extern std::string
btyp_class_name [btyp_num_types];

extern string_vector
get_builtin_classes (void);

inline bool btyp_isnumeric (builtin_type_t btyp)
{ return btyp <= btyp_uint64; }

inline bool btyp_isinteger (builtin_type_t btyp)
{ return btyp >= btyp_int8 && btyp <= btyp_uint64; }

inline bool btyp_isfloat (builtin_type_t btyp)
{ return btyp <= btyp_float_complex; }

inline bool btyp_isarray (builtin_type_t btyp)
{ return btyp <= btyp_char; }
# 112 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h"
extern
builtin_type_t btyp_mixed_numeric (builtin_type_t x, builtin_type_t y);

template <typename T>
struct class_to_btyp
{
  static const builtin_type_t btyp = btyp_unknown;
};
# 128 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h"
template <> struct class_to_btyp<double> { static const builtin_type_t btyp = btyp_double; };
template <> struct class_to_btyp<float> { static const builtin_type_t btyp = btyp_float; };
template <> struct class_to_btyp<Complex> { static const builtin_type_t btyp = btyp_complex; };
template <> struct class_to_btyp<FloatComplex> { static const builtin_type_t btyp = btyp_float_complex; };
template <> struct class_to_btyp<octave_int8> { static const builtin_type_t btyp = btyp_int8; };
template <> struct class_to_btyp<octave_int16> { static const builtin_type_t btyp = btyp_int16; };
template <> struct class_to_btyp<octave_int32> { static const builtin_type_t btyp = btyp_int32; };
template <> struct class_to_btyp<octave_int64> { static const builtin_type_t btyp = btyp_int64; };
template <> struct class_to_btyp<octave_uint8> { static const builtin_type_t btyp = btyp_uint8; };
template <> struct class_to_btyp<octave_uint16> { static const builtin_type_t btyp = btyp_uint16; };
template <> struct class_to_btyp<octave_uint32> { static const builtin_type_t btyp = btyp_uint32; };
template <> struct class_to_btyp<octave_uint64> { static const builtin_type_t btyp = btyp_uint64; };
template <> struct class_to_btyp<bool> { static const builtin_type_t btyp = btyp_bool; };
template <> struct class_to_btyp<char> { static const builtin_type_t btyp = btyp_char; };
# 184 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-base.h"
class

octave_base_value
{
public:

  typedef octave_base_value * (*type_conv_fcn) (const octave_base_value&);


  class type_conv_info
  {
  public:
    type_conv_info (type_conv_fcn f = 0, int t = -1)
      : _fcn (f), _type_id (t) { }

    operator type_conv_fcn (void) const { return _fcn; }

    octave_base_value * operator () (const octave_base_value &v) const
    { return (*_fcn) (v); }

    int type_id (void) const { return _type_id; }

  private:
    type_conv_fcn _fcn;
    int _type_id;
  };

  friend class octave_value;

  octave_base_value (void) : count (1) { }

  octave_base_value (const octave_base_value&) : count (1) { }

  virtual ~octave_base_value (void) { }


  virtual octave_base_value *
  clone (void) const { return new octave_base_value (*this); }


  virtual octave_base_value *
  empty_clone (void) const;




  virtual octave_base_value *
  unique_clone (void) { return clone (); }

  virtual type_conv_info
  numeric_conversion_function (void) const
  { return type_conv_info (); }

  virtual type_conv_info
  numeric_demotion_function (void) const
  { return type_conv_info (); }

  virtual octave_value squeeze (void) const;

  virtual octave_value full_value (void) const;

  virtual octave_value as_double (void) const;
  virtual octave_value as_single (void) const;

  virtual octave_value as_int8 (void) const;
  virtual octave_value as_int16 (void) const;
  virtual octave_value as_int32 (void) const;
  virtual octave_value as_int64 (void) const;

  virtual octave_value as_uint8 (void) const;
  virtual octave_value as_uint16 (void) const;
  virtual octave_value as_uint32 (void) const;
  virtual octave_value as_uint64 (void) const;

  virtual octave_base_value *try_narrowing_conversion (void) { return 0; }

  virtual void maybe_economize (void) { }

  virtual Matrix size (void);

  virtual octave_idx_type numel (const octave_value_list&);

  virtual octave_value
  subsref (const std::string& type,
           const std::list<octave_value_list>& idx);

  virtual octave_value_list
  subsref (const std::string& type,
           const std::list<octave_value_list>& idx,
           int nargout);

  virtual octave_value
  subsref (const std::string& type,
           const std::list<octave_value_list>& idx,
           bool auto_add);

  virtual octave_value_list
  subsref (const std::string& type,
           const std::list<octave_value_list>& idx,
           int nargout,
           const std::list<octave_lvalue> *lvalue_list);

  virtual octave_value
  do_index_op (const octave_value_list& idx, bool resize_ok = false);

  virtual octave_value_list
  do_multi_index_op (int nargout, const octave_value_list& idx);

  virtual octave_value_list
  do_multi_index_op (int nargout, const octave_value_list& idx,
                     const std::list<octave_lvalue> *lvalue_list);

  virtual void assign (const std::string&, const octave_value&) { }

  virtual octave_value
  subsasgn (const std::string& type,
            const std::list<octave_value_list>& idx,
            const octave_value& rhs);

  virtual octave_value
  undef_subsasgn (const std::string& type,
                  const std::list<octave_value_list>& idx,
                  const octave_value& rhs);

  virtual idx_vector index_vector (bool require_integers = false) const;

  virtual dim_vector dims (void) const { return dim_vector (); }

  octave_idx_type rows (void) const
  {
    const dim_vector dv = dims ();

    return dv(0);
  }

  octave_idx_type columns (void) const
  {
    const dim_vector dv = dims ();

    return dv(1);
  }

  virtual int ndims (void) const
  { return dims ().ndims (); }

  virtual octave_idx_type numel (void) const { return dims ().numel (); }

  __attribute__ ((__deprecated__))
  virtual octave_idx_type capacity (void) const
  { return numel (); }

  virtual size_t byte_size (void) const { return 0; }

  virtual octave_idx_type nnz (void) const;

  virtual octave_idx_type nzmax (void) const;

  virtual octave_idx_type nfields (void) const;

  virtual octave_value reshape (const dim_vector&) const;

  virtual octave_value permute (const Array<int>& vec, bool = false) const;

  virtual octave_value resize (const dim_vector&, bool fill = false) const;

  virtual MatrixType matrix_type (void) const;

  virtual MatrixType matrix_type (const MatrixType& typ) const;

  virtual bool is_defined (void) const { return false; }

  bool is_empty (void) const { return (dims ().any_zero ()); }

  virtual bool is_cell (void) const { return false; }

  virtual bool is_cellstr (void) const { return false; }

  virtual bool is_real_scalar (void) const { return false; }

  virtual bool is_real_matrix (void) const { return false; }

  virtual bool is_complex_scalar (void) const { return false; }

  virtual bool is_complex_matrix (void) const { return false; }

  virtual bool is_bool_scalar (void) const { return false; }

  virtual bool is_bool_matrix (void) const { return false; }

  virtual bool is_char_matrix (void) const { return false; }

  virtual bool is_diag_matrix (void) const { return false; }

  virtual bool is_perm_matrix (void) const { return false; }

  virtual bool is_string (void) const { return false; }

  virtual bool is_sq_string (void) const { return false; }

  virtual bool is_range (void) const { return false; }

  virtual bool is_map (void) const { return false; }

  virtual bool is_object (void) const { return false; }

  virtual bool is_classdef_object (void) const { return false; }

  virtual bool is_java (void) const { return false; }

  virtual bool is_cs_list (void) const { return false; }

  virtual bool is_magic_colon (void) const { return false; }

  virtual bool is_all_va_args (void) const { return false; }

  virtual octave_value all (int = 0) const;

  virtual octave_value any (int = 0) const;

  virtual builtin_type_t builtin_type (void) const { return btyp_unknown; }

  virtual bool is_double_type (void) const { return false; }

  virtual bool is_single_type (void) const { return false; }

  virtual bool is_float_type (void) const { return false; }

  virtual bool is_int8_type (void) const { return false; }

  virtual bool is_int16_type (void) const { return false; }

  virtual bool is_int32_type (void) const { return false; }

  virtual bool is_int64_type (void) const { return false; }

  virtual bool is_uint8_type (void) const { return false; }

  virtual bool is_uint16_type (void) const { return false; }

  virtual bool is_uint32_type (void) const { return false; }

  virtual bool is_uint64_type (void) const { return false; }

  virtual bool is_bool_type (void) const { return false; }

  virtual bool is_integer_type (void) const { return false; }

  virtual bool is_real_type (void) const { return false; }

  virtual bool is_complex_type (void) const { return false; }



  virtual bool is_scalar_type (void) const { return false; }

  virtual bool is_matrix_type (void) const { return false; }

  virtual bool is_numeric_type (void) const { return false; }

  virtual bool is_sparse_type (void) const { return false; }

  virtual bool is_true (void) const { return false; }

  virtual bool is_null_value (void) const { return false; }

  virtual bool is_constant (void) const { return false; }

  virtual bool is_function_handle (void) const { return false; }

  virtual bool is_anonymous_function (void) const { return false; }

  virtual bool is_inline_function (void) const { return false; }

  virtual bool is_function (void) const { return false; }

  virtual bool is_user_script (void) const { return false; }

  virtual bool is_user_function (void) const { return false; }

  virtual bool is_user_code (void) const { return false; }

  virtual bool is_builtin_function (void) const { return false; }

  virtual bool is_dld_function (void) const { return false; }

  virtual bool is_mex_function (void) const { return false; }

  virtual void erase_subfunctions (void) { }

  virtual short int short_value (bool = false, bool = false) const;

  virtual unsigned short int ushort_value (bool = false, bool = false) const;

  virtual int int_value (bool = false, bool = false) const;

  virtual unsigned int uint_value (bool = false, bool = false) const;

  virtual int nint_value (bool = false) const;

  virtual long int long_value (bool = false, bool = false) const;

  virtual unsigned long int ulong_value (bool = false, bool = false) const;

  virtual int64_t int64_value (bool = false, bool = false) const;

  virtual uint64_t uint64_value (bool = false, bool = false) const;

  virtual double double_value (bool = false) const;

  virtual float float_value (bool = false) const;

  virtual double scalar_value (bool frc_str_conv = false) const
  { return double_value (frc_str_conv); }

  virtual float float_scalar_value (bool frc_str_conv = false) const
  { return float_value (frc_str_conv); }

  virtual Cell cell_value (void) const;

  virtual Matrix matrix_value (bool = false) const;

  virtual FloatMatrix float_matrix_value (bool = false) const;

  virtual NDArray array_value (bool = false) const;

  virtual FloatNDArray float_array_value (bool = false) const;

  virtual Complex complex_value (bool = false) const;

  virtual FloatComplex float_complex_value (bool = false) const;

  virtual ComplexMatrix complex_matrix_value (bool = false) const;

  virtual FloatComplexMatrix float_complex_matrix_value (bool = false) const;

  virtual ComplexNDArray complex_array_value (bool = false) const;

  virtual FloatComplexNDArray float_complex_array_value (bool = false) const;

  virtual bool bool_value (bool = false) const;

  virtual boolMatrix bool_matrix_value (bool = false) const;

  virtual boolNDArray bool_array_value (bool = false) const;

  virtual charMatrix char_matrix_value (bool force = false) const;

  virtual charNDArray char_array_value (bool = false) const;

  virtual SparseMatrix sparse_matrix_value (bool = false) const;

  virtual SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;

  virtual SparseBoolMatrix sparse_bool_matrix_value (bool = false) const;

  virtual DiagMatrix diag_matrix_value (bool = false) const;

  virtual FloatDiagMatrix float_diag_matrix_value (bool = false) const;

  virtual ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;

  virtual FloatComplexDiagMatrix
  float_complex_diag_matrix_value (bool = false) const;

  virtual PermMatrix perm_matrix_value (void) const;

  virtual octave_int8 int8_scalar_value (void) const;

  virtual octave_int16 int16_scalar_value (void) const;

  virtual octave_int32 int32_scalar_value (void) const;

  virtual octave_int64 int64_scalar_value (void) const;

  virtual octave_uint8 uint8_scalar_value (void) const;

  virtual octave_uint16 uint16_scalar_value (void) const;

  virtual octave_uint32 uint32_scalar_value (void) const;

  virtual octave_uint64 uint64_scalar_value (void) const;

  virtual int8NDArray int8_array_value (void) const;

  virtual int16NDArray int16_array_value (void) const;

  virtual int32NDArray int32_array_value (void) const;

  virtual int64NDArray int64_array_value (void) const;

  virtual uint8NDArray uint8_array_value (void) const;

  virtual uint16NDArray uint16_array_value (void) const;

  virtual uint32NDArray uint32_array_value (void) const;

  virtual uint64NDArray uint64_array_value (void) const;

  virtual string_vector string_vector_value (bool pad = false) const;

  virtual std::string string_value (bool force = false) const;

  virtual Array<std::string> cellstr_value (void) const;

  virtual Range range_value (void) const;

  virtual octave_map map_value (void) const;

  virtual octave_scalar_map scalar_map_value (void) const;

  virtual string_vector map_keys (void) const;

  virtual size_t nparents (void) const;

  virtual std::list<std::string> parent_class_name_list (void) const;

  virtual string_vector parent_class_names (void) const;

  virtual octave_base_value *find_parent_class (const std::string&)
  { return 0; }

  virtual octave_base_value *unique_parent_class (const std::string&)
  { return 0; }

  virtual bool is_instance_of (const std::string&) const
  { return false; }

  virtual octave_function *function_value (bool silent = false);

  virtual octave_user_function *user_function_value (bool silent = false);

  virtual octave_user_script *user_script_value (bool silent = false);

  virtual octave_user_code *user_code_value (bool silent = false);

  virtual octave_fcn_handle *fcn_handle_value (bool silent = false);

  virtual octave_fcn_inline *fcn_inline_value (bool silent = false);

  virtual octave_value_list list_value (void) const;

  virtual octave_value convert_to_str (bool pad = false, bool force = false,
                                       char type = '\'') const;
  virtual octave_value
  convert_to_str_internal (bool pad, bool force, char type) const;

  virtual void convert_to_row_or_column_vector (void);




  virtual std::string xstring_value () const;

  virtual bool print_as_scalar (void) const { return false; }

  virtual void print (std::ostream& os, bool pr_as_read_syntax = false);

  virtual void
  print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;

  virtual bool
  print_name_tag (std::ostream& os, const std::string& name) const;

  virtual void
  print_with_name (std::ostream& output_buf, const std::string& name,
                   bool print_padding = true);

  virtual void short_disp (std::ostream& os) const { os << "..."; }

  virtual void print_info (std::ostream& os, const std::string& prefix) const;

  virtual bool save_ascii (std::ostream& os);

  virtual bool load_ascii (std::istream& is);

  virtual bool save_binary (std::ostream& os, bool& save_as_floats);

  virtual bool load_binary (std::istream& is, bool swap,
                            octave::mach_info::float_format fmt);

  virtual bool
  save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats);

  virtual bool
  load_hdf5 (octave_hdf5_id loc_id, const char *name);

  virtual int
  write (octave_stream& os, int block_size,
         oct_data_conv::data_type output_type, int skip,
         octave::mach_info::float_format flt_fmt) const;

  virtual void *mex_get_data (void) const { return 0; }

  virtual octave_idx_type *mex_get_ir (void) const { return 0; }

  virtual octave_idx_type *mex_get_jc (void) const { return 0; }

  virtual mxArray *as_mxArray (void) const;

  virtual octave_value diag (octave_idx_type k = 0) const;

  virtual octave_value diag (octave_idx_type m, octave_idx_type n) const;

  virtual octave_value sort (octave_idx_type dim = 0,
                             sortmode mode = ASCENDING) const;
  virtual octave_value sort (Array<octave_idx_type> &sidx,
                             octave_idx_type dim = 0,
                             sortmode mode = ASCENDING) const;

  virtual sortmode is_sorted (sortmode mode = UNSORTED) const;

  virtual Array<octave_idx_type>
  sort_rows_idx (sortmode mode = ASCENDING) const;

  virtual sortmode is_sorted_rows (sortmode mode = UNSORTED) const;

  virtual void lock (void);

  virtual void unlock (void);

  virtual bool islocked (void) const { return false; }

  virtual void dump (std::ostream& os) const;


  enum unary_mapper_t
  {
    umap_abs,
    umap_acos,
    umap_acosh,
    umap_angle,
    umap_arg,
    umap_asin,
    umap_asinh,
    umap_atan,
    umap_atanh,
    umap_cbrt,
    umap_ceil,
    umap_conj,
    umap_cos,
    umap_cosh,
    umap_erf,
    umap_erfinv,
    umap_erfcinv,
    umap_erfc,
    umap_erfcx,
    umap_erfi,
    umap_dawson,
    umap_exp,
    umap_expm1,
    umap_isfinite,
    umap_fix,
    umap_floor,
    umap_gamma,
    umap_imag,
    umap_isinf,
    umap_isna,
    umap_isnan,
    umap_lgamma,
    umap_log,
    umap_log2,
    umap_log10,
    umap_log1p,
    umap_real,
    umap_round,
    umap_roundb,
    umap_signum,
    umap_sin,
    umap_sinh,
    umap_sqrt,
    umap_tan,
    umap_tanh,
    umap_xisalnum,
    umap_xisalpha,
    umap_xisascii,
    umap_xiscntrl,
    umap_xisdigit,
    umap_xisgraph,
    umap_xislower,
    umap_xisprint,
    umap_xispunct,
    umap_xisspace,
    umap_xisupper,
    umap_xisxdigit,
    umap_xsignbit,
    umap_xtoascii,
    umap_xtolower,
    umap_xtoupper,
    umap_unknown,
    num_unary_mappers = umap_unknown
  };

  virtual octave_value map (unary_mapper_t) const;






  virtual octave_value
  fast_elem_extract (octave_idx_type n) const;




  virtual bool
  fast_elem_insert (octave_idx_type n, const octave_value& x);




  virtual bool
  fast_elem_insert_self (void *where, builtin_type_t btyp) const;


  void
  grab (void)
  {
    ++count;
  }


  void
  release (void)
  {
    if (--count == 0)
      delete this;
  }

protected:



  octave_value numeric_assign (const std::string& type,
                               const std::list<octave_value_list>& idx,
                               const octave_value& rhs);

  void reset_indent_level (void) const
  { curr_print_indent_level = 0; }

  void increment_indent_level (void) const
  { curr_print_indent_level += 2; }

  void decrement_indent_level (void) const
  { curr_print_indent_level -= 2; }

  int current_print_indent_level (void) const
  { return curr_print_indent_level; }

  void indent (std::ostream& os) const;

  void newline (std::ostream& os) const;

  void reset (void) const;





  octave_refcount<octave_idx_type> count;

  static const char *get_umap_name (unary_mapper_t);

  void warn_load (const char *type) const;
  void warn_save (const char *type) const;

private:

  void wrong_type_arg_error (void) const;

  static int curr_print_indent_level;
  static bool beginning_of_line;

  public: virtual int type_id (void) const { return t_id; } virtual std::string type_name (void) const { return t_name; } virtual std::string class_name (void) const { return c_name; } static int static_type_id (void) { return t_id; } static std::string static_type_name (void) { return t_name; } static std::string static_class_name (void) { return c_name; } static void register_type (void); private: static int t_id; static const std::string t_name; static const std::string c_name;
};



extern bool Vsparse_auto_mutate;




extern octave_value
make_idx_args (const std::string& type,
               const std::list<octave_value_list>& idx,
               const std::string& who);



extern bool called_from_builtin (void);
# 58 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h" 2



              octave_value do_colon_op (const octave_value& base,
                                        const octave_value& limit,
                                        bool is_for_cmd_expr = false);

              octave_value do_colon_op (const octave_value& base,
                                        const octave_value& increment,
                                        const octave_value& limit,
                                        bool is_for_cmd_expr = false);

class

octave_value
{
public:

  enum unary_op
  {
    op_not,
    op_uplus,
    op_uminus,
    op_transpose,
    op_hermitian,
    op_incr,
    op_decr,
    num_unary_ops,
    unknown_unary_op
  };

  enum binary_op
  {
    op_add,
    op_sub,
    op_mul,
    op_div,
    op_pow,
    op_ldiv,
    op_lt,
    op_le,
    op_eq,
    op_ge,
    op_gt,
    op_ne,
    op_el_mul,
    op_el_div,
    op_el_pow,
    op_el_ldiv,
    op_el_and,
    op_el_or,
    op_struct_ref,
    num_binary_ops,
    unknown_binary_op
  };

  enum compound_binary_op
  {

    op_trans_mul,
    op_mul_trans,
    op_herm_mul,
    op_mul_herm,
    op_trans_ldiv,
    op_herm_ldiv,
    op_el_not_and,
    op_el_not_or,
    op_el_and_not,
    op_el_or_not,
    num_compound_binary_ops,
    unknown_compound_binary_op
  };

  enum assign_op
  {
    op_asn_eq,
    op_add_eq,
    op_sub_eq,
    op_mul_eq,
    op_div_eq,
    op_ldiv_eq,
    op_pow_eq,
    op_el_mul_eq,
    op_el_div_eq,
    op_el_ldiv_eq,
    op_el_pow_eq,
    op_el_and_eq,
    op_el_or_eq,
    num_assign_ops,
    unknown_assign_op
  };

  static binary_op assign_op_to_binary_op (assign_op);

  static assign_op binary_op_to_assign_op (binary_op);

  static std::string unary_op_as_string (unary_op);
  static std::string unary_op_fcn_name (unary_op);

  static std::string binary_op_as_string (binary_op);
  static std::string binary_op_fcn_name (binary_op);

  static std::string binary_op_fcn_name (compound_binary_op);

  static std::string assign_op_as_string (assign_op);

  static octave_value empty_conv (const std::string& type,
                                  const octave_value& rhs = octave_value ());

  enum magic_colon { magic_colon_t };

  octave_value (void)
    : rep (nil_rep ())
  {
    rep->count++;
  }

  octave_value (short int i);
  octave_value (unsigned short int i);
  octave_value (int i);
  octave_value (unsigned int i);
  octave_value (long int i);
  octave_value (unsigned long int i);







  octave_value (long long int i);


  octave_value (unsigned long long int i);


  octave_value (octave::sys::time t);
  octave_value (double d);
  octave_value (float d);
  octave_value (const Array<octave_value>& a, bool is_cs_list = false);
  octave_value (const Cell& c, bool is_cs_list = false);
  octave_value (const Matrix& m, const MatrixType& t = MatrixType ());
  octave_value (const FloatMatrix& m, const MatrixType& t = MatrixType ());
  octave_value (const NDArray& nda);
  octave_value (const FloatNDArray& nda);
  octave_value (const Array<double>& m);
  octave_value (const Array<float>& m);
  octave_value (const DiagMatrix& d);
  octave_value (const DiagArray2<double>& d);
  octave_value (const DiagArray2<float>& d);
  octave_value (const DiagArray2<Complex>& d);
  octave_value (const DiagArray2<FloatComplex>& d);
  octave_value (const FloatDiagMatrix& d);
  octave_value (const RowVector& v);
  octave_value (const FloatRowVector& v);
  octave_value (const ColumnVector& v);
  octave_value (const FloatColumnVector& v);
  octave_value (const Complex& C);
  octave_value (const FloatComplex& C);
  octave_value (const ComplexMatrix& m, const MatrixType& t = MatrixType ());
  octave_value (const FloatComplexMatrix& m,
                const MatrixType& t = MatrixType ());
  octave_value (const ComplexNDArray& cnda);
  octave_value (const FloatComplexNDArray& cnda);
  octave_value (const Array<Complex>& m);
  octave_value (const Array<FloatComplex>& m);
  octave_value (const ComplexDiagMatrix& d);
  octave_value (const FloatComplexDiagMatrix& d);
  octave_value (const ComplexRowVector& v);
  octave_value (const FloatComplexRowVector& v);
  octave_value (const ComplexColumnVector& v);
  octave_value (const FloatComplexColumnVector& v);
  octave_value (const PermMatrix& p);
  octave_value (bool b);
  octave_value (const boolMatrix& bm, const MatrixType& t = MatrixType ());
  octave_value (const boolNDArray& bnda);
  octave_value (const Array<bool>& bnda);
  octave_value (char c, char type = '\'');
  octave_value (const char *s, char type = '\'');
  octave_value (const std::string& s, char type = '\'');
  octave_value (const string_vector& s, char type = '\'');
  octave_value (const charMatrix& chm, char type = '\'');
  octave_value (const charNDArray& chnda, char type = '\'');
  octave_value (const Array<char>& chnda, char type = '\'');

  __attribute__ ((__deprecated__))
  octave_value (const charMatrix& chm, bool is_string, char type = '\'');

  __attribute__ ((__deprecated__))
  octave_value (const charNDArray& chnda, bool is_string, char type = '\'');

  __attribute__ ((__deprecated__))
  octave_value (const Array<char>& chnda, bool is_string, char type = '\'');

  octave_value (const SparseMatrix& m, const MatrixType& t = MatrixType ());
  octave_value (const Sparse<double>& m, const MatrixType& t = MatrixType ());
  octave_value (const SparseComplexMatrix& m,
                const MatrixType& t = MatrixType ());
  octave_value (const Sparse<Complex>& m, const MatrixType& t = MatrixType ());
  octave_value (const SparseBoolMatrix& bm,
                const MatrixType& t = MatrixType ());
  octave_value (const Sparse<bool>& m, const MatrixType& t = MatrixType ());
  octave_value (const octave_int8& i);
  octave_value (const octave_int16& i);
  octave_value (const octave_int32& i);
  octave_value (const octave_int64& i);
  octave_value (const octave_uint8& i);
  octave_value (const octave_uint16& i);
  octave_value (const octave_uint32& i);
  octave_value (const octave_uint64& i);
  octave_value (const int8NDArray& inda);
  octave_value (const Array<octave_int8>& inda);
  octave_value (const int16NDArray& inda);
  octave_value (const Array<octave_int16>& inda);
  octave_value (const int32NDArray& inda);
  octave_value (const Array<octave_int32>& inda);
  octave_value (const int64NDArray& inda);
  octave_value (const Array<octave_int64>& inda);
  octave_value (const uint8NDArray& inda);
  octave_value (const Array<octave_uint8>& inda);
  octave_value (const uint16NDArray& inda);
  octave_value (const Array<octave_uint16>& inda);
  octave_value (const uint32NDArray& inda);
  octave_value (const Array<octave_uint32>& inda);
  octave_value (const uint64NDArray& inda);
  octave_value (const Array<octave_uint64>& inda);
  octave_value (const Array<octave_idx_type>& inda,
                bool zero_based = false, bool cache_index = false);
  octave_value (const Array<std::string>& cellstr);
  octave_value (const idx_vector& idx, bool lazy = true);
  octave_value (double base, double limit, double inc);
  octave_value (const Range& r, bool force_range = false);
  octave_value (const octave_map& m);
  octave_value (const octave_scalar_map& m);
  octave_value (const octave_map& m, const std::string& id,
                const std::list<std::string>& plist);
  octave_value (const octave_scalar_map& m, const std::string& id,
                const std::list<std::string>& plist);
  octave_value (const octave_value_list& m, bool = false);
  octave_value (octave_value::magic_colon);

  octave_value (octave_base_value *new_rep, bool borrow = false);

  __attribute__ ((__deprecated__))
  octave_value (octave_base_value *new_rep, int xcount);



  octave_value (const octave_value& a)
  {
    rep = a.rep;
    rep->count++;
  }



  octave_base_value *clone (void) const;

  octave_base_value *empty_clone (void) const
  { return rep->empty_clone (); }



  ~octave_value (void)
  {
    if (--rep->count == 0)
      delete rep;
  }

  void make_unique (void)
  {
    if (rep->count > 1)
      {
        octave_base_value *r = rep->unique_clone ();

        if (--rep->count == 0)
          delete rep;

        rep = r;
      }
  }




  void make_unique (int obsolete_copies)
  {
    if (rep->count > obsolete_copies + 1)
      {
        octave_base_value *r = rep->unique_clone ();

        if (--rep->count == 0)
          delete rep;

        rep = r;
      }
  }



  octave_value& operator = (const octave_value& a)
  {
    if (rep != a.rep)
      {
        if (--rep->count == 0)
          delete rep;

        rep = a.rep;
        rep->count++;
      }

    return *this;
  }

  octave_idx_type get_count (void) const { return rep->count; }

  octave_base_value::type_conv_info numeric_conversion_function (void) const
  { return rep->numeric_conversion_function (); }

  octave_base_value::type_conv_info numeric_demotion_function (void) const
  { return rep->numeric_demotion_function (); }

  void maybe_mutate (void);

  octave_value squeeze (void) const
  { return rep->squeeze (); }


  octave_value full_value (void) const
  { return rep->full_value (); }



  octave_value as_double (void) const { return rep->as_double (); }
  octave_value as_single (void) const { return rep->as_single (); }

  octave_value as_int8 (void) const { return rep->as_int8 (); }
  octave_value as_int16 (void) const { return rep->as_int16 (); }
  octave_value as_int32 (void) const { return rep->as_int32 (); }
  octave_value as_int64 (void) const { return rep->as_int64 (); }

  octave_value as_uint8 (void) const { return rep->as_uint8 (); }
  octave_value as_uint16 (void) const { return rep->as_uint16 (); }
  octave_value as_uint32 (void) const { return rep->as_uint32 (); }
  octave_value as_uint64 (void) const { return rep->as_uint64 (); }

  octave_base_value *try_narrowing_conversion (void)
  { return rep->try_narrowing_conversion (); }


  Matrix size (void)
  { return rep->size (); }

  octave_idx_type numel (const octave_value_list& idx)
  { return rep->numel (idx); }

  octave_value single_subsref (const std::string& type,
                               const octave_value_list& idx);

  octave_value subsref (const std::string& type,
                        const std::list<octave_value_list>& idx)
  { return rep->subsref (type, idx); }

  octave_value subsref (const std::string& type,
                        const std::list<octave_value_list>& idx,
                        bool auto_add)
  { return rep->subsref (type, idx, auto_add); }

  octave_value_list subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             int nargout);

  octave_value_list subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             int nargout,
                             const std::list<octave_lvalue> *lvalue_list);

  octave_value next_subsref (const std::string& type, const
                             std::list<octave_value_list>& idx,
                             size_t skip = 1);

  octave_value_list next_subsref (int nargout,
                                  const std::string& type, const
                                  std::list<octave_value_list>& idx,
                                  size_t skip = 1);

  octave_value_list next_subsref (int nargout,
                                  const std::string& type, const
                                  std::list<octave_value_list>& idx,
                                  const std::list<octave_lvalue> *lvalue_list,
                                  size_t skip = 1);

  octave_value next_subsref (bool auto_add, const std::string& type, const
                             std::list<octave_value_list>& idx,
                             size_t skip = 1);

  octave_value do_index_op (const octave_value_list& idx,
                            bool resize_ok = false)
  { return rep->do_index_op (idx, resize_ok); }

  octave_value_list
  do_multi_index_op (int nargout, const octave_value_list& idx);

  octave_value_list
  do_multi_index_op (int nargout, const octave_value_list& idx,
                     const std::list<octave_lvalue> *lvalue_list);

  octave_value subsasgn (const std::string& type,
                         const std::list<octave_value_list>& idx,
                         const octave_value& rhs);

  octave_value undef_subsasgn (const std::string& type,
                               const std::list<octave_value_list>& idx,
                               const octave_value& rhs);

  octave_value& assign (assign_op op, const std::string& type,
                        const std::list<octave_value_list>& idx,
                        const octave_value& rhs);

  octave_value& assign (assign_op, const octave_value& rhs);

  idx_vector index_vector (bool require_integers = false) const
  {
    return rep->index_vector (require_integers);
  }



  dim_vector dims (void) const
  { return rep->dims (); }

  octave_idx_type rows (void) const { return rep->rows (); }

  octave_idx_type columns (void) const { return rep->columns (); }

  octave_idx_type length (void) const;

  int ndims (void) const { return rep->ndims (); }

  bool all_zero_dims (void) const { return dims ().all_zero (); }

  octave_idx_type numel (void) const
  { return rep->numel (); }

  __attribute__ ((__deprecated__))
  octave_idx_type capacity (void) const
  { return rep->numel (); }

  size_t byte_size (void) const
  { return rep->byte_size (); }

  octave_idx_type nnz (void) const { return rep->nnz (); }

  octave_idx_type nzmax (void) const { return rep->nzmax (); }

  octave_idx_type nfields (void) const { return rep->nfields (); }

  octave_value reshape (const dim_vector& dv) const
  { return rep->reshape (dv); }

  octave_value permute (const Array<int>& vec, bool inv = false) const
  { return rep->permute (vec, inv); }

  octave_value ipermute (const Array<int>& vec) const
  { return rep->permute (vec, true); }

  octave_value resize (const dim_vector& dv, bool fill = false) const
  { return rep->resize (dv, fill);}

  MatrixType matrix_type (void) const
  { return rep->matrix_type (); }

  MatrixType matrix_type (const MatrixType& typ) const
  { return rep->matrix_type (typ); }




  bool is_defined (void) const
  { return rep->is_defined (); }

  bool is_undefined (void) const
  { return ! is_defined (); }

  bool is_empty (void) const
  { return rep->is_empty (); }

  bool is_cell (void) const
  { return rep->is_cell (); }

  bool is_cellstr (void) const
  { return rep->is_cellstr (); }

  bool is_real_scalar (void) const
  { return rep->is_real_scalar (); }

  bool is_real_matrix (void) const
  { return rep->is_real_matrix (); }

  bool is_complex_scalar (void) const
  { return rep->is_complex_scalar (); }

  bool is_complex_matrix (void) const
  { return rep->is_complex_matrix (); }

  bool is_bool_scalar (void) const
  { return rep->is_bool_scalar (); }

  bool is_bool_matrix (void) const
  { return rep->is_bool_matrix (); }

  bool is_char_matrix (void) const
  { return rep->is_char_matrix (); }

  bool is_diag_matrix (void) const
  { return rep->is_diag_matrix (); }

  bool is_perm_matrix (void) const
  { return rep->is_perm_matrix (); }

  bool is_string (void) const
  { return rep->is_string (); }

  bool is_sq_string (void) const
  { return rep->is_sq_string (); }

  bool is_dq_string (void) const
  { return rep->is_string () && ! rep->is_sq_string (); }

  bool is_range (void) const
  { return rep->is_range (); }

  bool is_map (void) const
  { return rep->is_map (); }

  bool is_object (void) const
  { return rep->is_object (); }

  bool is_classdef_object (void) const
  { return rep->is_classdef_object (); }

  bool is_java (void) const
  { return rep->is_java (); }

  bool is_cs_list (void) const
  { return rep->is_cs_list (); }

  bool is_magic_colon (void) const
  { return rep->is_magic_colon (); }

  bool is_null_value (void) const
  { return rep->is_null_value (); }



  octave_value all (int dim = 0) const
  { return rep->all (dim); }

  octave_value any (int dim = 0) const
  { return rep->any (dim); }

  builtin_type_t builtin_type (void) const
  { return rep->builtin_type (); }



  bool is_double_type (void) const
  { return rep->is_double_type (); }

  bool is_single_type (void) const
  { return rep->is_single_type (); }

  bool is_float_type (void) const
  { return rep->is_float_type (); }



  bool is_int8_type (void) const
  { return rep->is_int8_type (); }

  bool is_int16_type (void) const
  { return rep->is_int16_type (); }

  bool is_int32_type (void) const
  { return rep->is_int32_type (); }

  bool is_int64_type (void) const
  { return rep->is_int64_type (); }

  bool is_uint8_type (void) const
  { return rep->is_uint8_type (); }

  bool is_uint16_type (void) const
  { return rep->is_uint16_type (); }

  bool is_uint32_type (void) const
  { return rep->is_uint32_type (); }

  bool is_uint64_type (void) const
  { return rep->is_uint64_type (); }



  bool is_bool_type (void) const
  { return rep->is_bool_type (); }

  bool is_integer_type (void) const
  { return rep->is_integer_type (); }

  bool is_real_type (void) const
  { return rep->is_real_type (); }

  bool is_complex_type (void) const
  { return rep->is_complex_type (); }

  bool is_scalar_type (void) const
  { return rep->is_scalar_type (); }

  bool is_matrix_type (void) const
  { return rep->is_matrix_type (); }

  bool is_numeric_type (void) const
  { return rep->is_numeric_type (); }

  bool is_sparse_type (void) const
  { return rep->is_sparse_type (); }



  bool is_true (void) const
  { return rep->is_true (); }



  bool is_equal (const octave_value&) const;



  bool is_zero_by_zero (void) const
  { return (ndims () == 2 && rows () == 0 && columns () == 0); }

  bool is_constant (void) const
  { return rep->is_constant (); }

  bool is_function_handle (void) const
  { return rep->is_function_handle (); }

  bool is_anonymous_function (void) const
  { return rep->is_anonymous_function (); }

  bool is_inline_function (void) const
  { return rep->is_inline_function (); }

  bool is_function (void) const
  { return rep->is_function (); }

  bool is_user_script (void) const
  { return rep->is_user_script (); }

  bool is_user_function (void) const
  { return rep->is_user_function (); }

  bool is_user_code (void) const
  { return rep->is_user_code (); }

  bool is_builtin_function (void) const
  { return rep->is_builtin_function (); }

  bool is_dld_function (void) const
  { return rep->is_dld_function (); }

  bool is_mex_function (void) const
  { return rep->is_mex_function (); }

  void erase_subfunctions (void) { rep->erase_subfunctions (); }



  octave_value eval (void) { return *this; }

  short int
  short_value (bool req_int = false, bool frc_str_conv = false) const
  { return rep->short_value (req_int, frc_str_conv); }

  unsigned short int
  ushort_value (bool req_int = false, bool frc_str_conv = false) const
  { return rep->ushort_value (req_int, frc_str_conv); }

  int int_value (bool req_int = false, bool frc_str_conv = false) const
  { return rep->int_value (req_int, frc_str_conv); }

  unsigned int
  uint_value (bool req_int = false, bool frc_str_conv = false) const
  { return rep->uint_value (req_int, frc_str_conv); }

  int nint_value (bool frc_str_conv = false) const
  { return rep->nint_value (frc_str_conv); }

  long int
  long_value (bool req_int = false, bool frc_str_conv = false) const
  { return rep->long_value (req_int, frc_str_conv); }

  unsigned long int
  ulong_value (bool req_int = false, bool frc_str_conv = false) const
  { return rep->ulong_value (req_int, frc_str_conv); }

  int64_t
  int64_value (bool req_int = false, bool frc_str_conv = false) const
  { return rep->int64_value (req_int, frc_str_conv); }

  uint64_t
  uint64_value (bool req_int = false, bool frc_str_conv = false) const
  { return rep->uint64_value (req_int, frc_str_conv); }

  octave_idx_type
  idx_type_value (bool req_int = false, bool frc_str_conv = false) const;

  double double_value (bool frc_str_conv = false) const
  { return rep->double_value (frc_str_conv); }

  float float_value (bool frc_str_conv = false) const
  { return rep->float_value (frc_str_conv); }

  double scalar_value (bool frc_str_conv = false) const
  { return rep->scalar_value (frc_str_conv); }

  float float_scalar_value (bool frc_str_conv = false) const
  { return rep->float_scalar_value (frc_str_conv); }

  Matrix matrix_value (bool frc_str_conv = false) const
  { return rep->matrix_value (frc_str_conv); }

  FloatMatrix float_matrix_value (bool frc_str_conv = false) const
  { return rep->float_matrix_value (frc_str_conv); }

  NDArray array_value (bool frc_str_conv = false) const
  { return rep->array_value (frc_str_conv); }

  FloatNDArray float_array_value (bool frc_str_conv = false) const
  { return rep->float_array_value (frc_str_conv); }

  Complex complex_value (bool frc_str_conv = false) const
  { return rep->complex_value (frc_str_conv); }

  FloatComplex float_complex_value (bool frc_str_conv = false) const
  { return rep->float_complex_value (frc_str_conv); }

  ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
  { return rep->complex_matrix_value (frc_str_conv); }

  FloatComplexMatrix
  float_complex_matrix_value (bool frc_str_conv = false) const
  { return rep->float_complex_matrix_value (frc_str_conv); }

  ComplexNDArray complex_array_value (bool frc_str_conv = false) const
  { return rep->complex_array_value (frc_str_conv); }

  FloatComplexNDArray
  float_complex_array_value (bool frc_str_conv = false) const
  { return rep->float_complex_array_value (frc_str_conv); }

  bool bool_value (bool warn = false) const
  { return rep->bool_value (warn); }

  boolMatrix bool_matrix_value (bool warn = false) const
  { return rep->bool_matrix_value (warn); }

  boolNDArray bool_array_value (bool warn = false) const
  { return rep->bool_array_value (warn); }

  charMatrix char_matrix_value (bool frc_str_conv = false) const
  { return rep->char_matrix_value (frc_str_conv); }

  charNDArray char_array_value (bool frc_str_conv = false) const
  { return rep->char_array_value (frc_str_conv); }

  SparseMatrix sparse_matrix_value (bool frc_str_conv = false) const
  { return rep->sparse_matrix_value (frc_str_conv); }

  SparseComplexMatrix
  sparse_complex_matrix_value (bool frc_str_conv = false) const
  { return rep->sparse_complex_matrix_value (frc_str_conv); }

  SparseBoolMatrix sparse_bool_matrix_value (bool warn = false) const
  { return rep->sparse_bool_matrix_value (warn); }

  DiagMatrix diag_matrix_value (bool force = false) const
  { return rep->diag_matrix_value (force); }

  FloatDiagMatrix float_diag_matrix_value (bool force = false) const
  { return rep->float_diag_matrix_value (force); }

  ComplexDiagMatrix complex_diag_matrix_value (bool force = false) const
  { return rep->complex_diag_matrix_value (force); }

  FloatComplexDiagMatrix
  float_complex_diag_matrix_value (bool force = false) const
  { return rep->float_complex_diag_matrix_value (force); }

  PermMatrix perm_matrix_value (void) const
  { return rep->perm_matrix_value (); }

  octave_int8 int8_scalar_value (void) const
  { return rep->int8_scalar_value (); }

  octave_int16 int16_scalar_value (void) const
  { return rep->int16_scalar_value (); }

  octave_int32 int32_scalar_value (void) const
  { return rep->int32_scalar_value (); }

  octave_int64 int64_scalar_value (void) const
  { return rep->int64_scalar_value (); }

  octave_uint8 uint8_scalar_value (void) const
  { return rep->uint8_scalar_value (); }

  octave_uint16 uint16_scalar_value (void) const
  { return rep->uint16_scalar_value (); }

  octave_uint32 uint32_scalar_value (void) const
  { return rep->uint32_scalar_value (); }

  octave_uint64 uint64_scalar_value (void) const
  { return rep->uint64_scalar_value (); }

  int8NDArray int8_array_value (void) const
  { return rep->int8_array_value (); }

  int16NDArray int16_array_value (void) const
  { return rep->int16_array_value (); }

  int32NDArray int32_array_value (void) const
  { return rep->int32_array_value (); }

  int64NDArray int64_array_value (void) const
  { return rep->int64_array_value (); }

  uint8NDArray uint8_array_value (void) const
  { return rep->uint8_array_value (); }

  uint16NDArray uint16_array_value (void) const
  { return rep->uint16_array_value (); }

  uint32NDArray uint32_array_value (void) const
  { return rep->uint32_array_value (); }

  uint64NDArray uint64_array_value (void) const
  { return rep->uint64_array_value (); }

  std::string string_value (bool force = false) const
  { return rep->string_value (force); }

  string_vector string_vector_value (bool pad = false) const
  { return rep->string_vector_value (pad); }

  __attribute__ ((__deprecated__))
  string_vector all_strings (bool pad = false) const
  { return string_vector_value (pad); }

  Cell cell_value (void) const;

  Array<std::string> cellstr_value (void) const
  { return rep->cellstr_value (); }

  Range range_value (void) const
  { return rep->range_value (); }

  octave_map map_value (void) const;

  octave_scalar_map scalar_map_value (void) const;

  string_vector map_keys (void) const
  { return rep->map_keys (); }

  size_t nparents (void) const
  { return rep->nparents (); }

  std::list<std::string> parent_class_name_list (void) const
  { return rep->parent_class_name_list (); }

  string_vector parent_class_names (void) const
  { return rep->parent_class_names (); }

  octave_base_value *
  find_parent_class (const std::string& parent_class_name)
  { return rep->find_parent_class (parent_class_name); }

  bool is_instance_of (const std::string& cls_name) const
  { return rep->is_instance_of (cls_name); }

  octave_function *function_value (bool silent = false) const;

  octave_user_function *user_function_value (bool silent = false) const;

  octave_user_script *user_script_value (bool silent = false) const;

  octave_user_code *user_code_value (bool silent = false) const;

  octave_fcn_handle *fcn_handle_value (bool silent = false) const;

  octave_fcn_inline *fcn_inline_value (bool silent = false) const;

  octave_value_list list_value (void) const;

  ColumnVector column_vector_value (bool frc_str_conv = false,
                                    bool frc_vec_conv = false) const;

  ComplexColumnVector
  complex_column_vector_value (bool frc_str_conv = false,
                               bool frc_vec_conv = false) const;

  RowVector row_vector_value (bool frc_str_conv = false,
                              bool frc_vec_conv = false) const;

  ComplexRowVector
  complex_row_vector_value (bool frc_str_conv = false,
                            bool frc_vec_conv = false) const;

  FloatColumnVector float_column_vector_value (bool frc_str_conv = false,
                                               bool frc_vec_conv = false) const;

  FloatComplexColumnVector
  float_complex_column_vector_value (bool frc_str_conv = false,
                                     bool frc_vec_conv = false) const;

  FloatRowVector float_row_vector_value (bool frc_str_conv = false,
                                         bool frc_vec_conv = false) const;

  FloatComplexRowVector
  float_complex_row_vector_value (bool frc_str_conv = false,
                                  bool frc_vec_conv = false) const;

  Array<int> int_vector_value (bool req_int = false,
                               bool frc_str_conv = false,
                               bool frc_vec_conv = false) const;

  Array<octave_idx_type>
  octave_idx_type_vector_value (bool req_int = false,
                                bool frc_str_conv = false,
                                bool frc_vec_conv = false) const;

  Array<double> vector_value (bool frc_str_conv = false,
                              bool frc_vec_conv = false) const;

  Array<Complex> complex_vector_value (bool frc_str_conv = false,
                                       bool frc_vec_conv = false) const;

  Array<float> float_vector_value (bool frc_str_conv = false,
                                   bool frc_vec_conv = false) const;

  Array<FloatComplex>
  float_complex_vector_value (bool frc_str_conv = false,
                              bool frc_vec_conv = false) const;
# 1021 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h"
  short int xshort_value (const char *fmt, ...) const;

  unsigned short int xushort_value (const char *fmt, ...) const;

  int xint_value (const char *fmt, ...) const;

  unsigned int xuint_value (const char *fmt, ...) const;

  int xnint_value (const char *fmt, ...) const;

  long int xlong_value (const char *fmt, ...) const;

  unsigned long int xulong_value (const char *fmt, ...) const;

  int64_t xint64_value (const char *fmt, ...) const;

  uint64_t xuint64_value (const char *fmt, ...) const;

  octave_idx_type xidx_type_value (const char *fmt, ...) const;

  double xdouble_value (const char *fmt, ...) const;

  float xfloat_value (const char *fmt, ...) const;

  double xscalar_value (const char *fmt, ...) const;

  float xfloat_scalar_value (const char *fmt, ...) const;

  Matrix xmatrix_value (const char *fmt, ...) const;

  FloatMatrix xfloat_matrix_value (const char *fmt, ...) const;

  NDArray xarray_value (const char *fmt, ...) const;

  FloatNDArray xfloat_array_value (const char *fmt, ...) const;

  Complex xcomplex_value (const char *fmt, ...) const;

  FloatComplex xfloat_complex_value (const char *fmt, ...) const;

  ComplexMatrix xcomplex_matrix_value (const char *fmt, ...) const;

  FloatComplexMatrix xfloat_complex_matrix_value (const char *fmt, ...) const;

  ComplexNDArray xcomplex_array_value (const char *fmt, ...) const;

  FloatComplexNDArray xfloat_complex_array_value (const char *fmt, ...) const;

  bool xbool_value (const char *fmt, ...) const;

  boolMatrix xbool_matrix_value (const char *fmt, ...) const;

  boolNDArray xbool_array_value (const char *fmt, ...) const;

  charMatrix xchar_matrix_value (const char *fmt, ...) const;

  charNDArray xchar_array_value (const char *fmt, ...) const;

  SparseMatrix xsparse_matrix_value (const char *fmt, ...) const;

  SparseComplexMatrix xsparse_complex_matrix_value (const char *fmt, ...) const;

  SparseBoolMatrix xsparse_bool_matrix_value (const char *fmt, ...) const;

  DiagMatrix xdiag_matrix_value (const char *fmt, ...) const;

  FloatDiagMatrix xfloat_diag_matrix_value (const char *fmt, ...) const;

  ComplexDiagMatrix xcomplex_diag_matrix_value (const char *fmt, ...) const;

  FloatComplexDiagMatrix xfloat_complex_diag_matrix_value (const char *fmt, ...) const;

  PermMatrix xperm_matrix_value (const char *fmt, ...) const;

  octave_int8 xint8_scalar_value (const char *fmt, ...) const;

  octave_int16 xint16_scalar_value (const char *fmt, ...) const;

  octave_int32 xint32_scalar_value (const char *fmt, ...) const;

  octave_int64 xint64_scalar_value (const char *fmt, ...) const;

  octave_uint8 xuint8_scalar_value (const char *fmt, ...) const;

  octave_uint16 xuint16_scalar_value (const char *fmt, ...) const;

  octave_uint32 xuint32_scalar_value (const char *fmt, ...) const;

  octave_uint64 xuint64_scalar_value (const char *fmt, ...) const;

  int8NDArray xint8_array_value (const char *fmt, ...) const;

  int16NDArray xint16_array_value (const char *fmt, ...) const;

  int32NDArray xint32_array_value (const char *fmt, ...) const;

  int64NDArray xint64_array_value (const char *fmt, ...) const;

  uint8NDArray xuint8_array_value (const char *fmt, ...) const;

  uint16NDArray xuint16_array_value (const char *fmt, ...) const;

  uint32NDArray xuint32_array_value (const char *fmt, ...) const;

  uint64NDArray xuint64_array_value (const char *fmt, ...) const;

  std::string xstring_value (const char *fmt, ...) const;

  string_vector xstring_vector_value (const char *fmt, ...) const;

  Cell xcell_value (const char *fmt, ...) const;

  Array<std::string> xcellstr_value (const char *fmt, ...) const;

  Range xrange_value (const char *fmt, ...) const;

  octave_map xmap_value (const char *fmt, ...) const;

  octave_scalar_map xscalar_map_value (const char *fmt, ...) const;

  ColumnVector xcolumn_vector_value (const char *fmt, ...) const;

  ComplexColumnVector
  xcomplex_column_vector_value (const char *fmt, ...) const;

  RowVector xrow_vector_value (const char *fmt, ...) const;

  ComplexRowVector xcomplex_row_vector_value (const char *fmt, ...) const;

  FloatColumnVector xfloat_column_vector_value (const char *fmt, ...) const;

  FloatComplexColumnVector
  xfloat_complex_column_vector_value (const char *fmt, ...) const;

  FloatRowVector xfloat_row_vector_value (const char *fmt, ...) const;

  FloatComplexRowVector
  xfloat_complex_row_vector_value (const char *fmt, ...) const;

  Array<int> xint_vector_value (const char *fmt, ...) const;

  Array<octave_idx_type>
  xoctave_idx_type_vector_value (const char *fmt, ...) const;

  Array<double> xvector_value (const char *fmt, ...) const;

  Array<Complex> xcomplex_vector_value (const char *fmt, ...) const;

  Array<float> xfloat_vector_value (const char *fmt, ...) const;

  Array<FloatComplex> xfloat_complex_vector_value (const char *fmt, ...) const;

  octave_function *xfunction_value (const char *fmt, ...) const;
  octave_user_function *xuser_function_value (const char *fmt, ...) const;
  octave_user_script *xuser_script_value (const char *fmt, ...) const;
  octave_user_code *xuser_code_value (const char *fmt, ...) const;
  octave_fcn_handle *xfcn_handle_value (const char *fmt, ...) const;
  octave_fcn_inline *xfcn_inline_value (const char *fmt, ...) const;

  octave_value_list xlist_value (const char *fmt, ...) const;



  void maybe_economize (void)
  { rep->maybe_economize (); }





  octave_value storable_value (void) const;




  void make_storable_value (void);





  octave_value convert_to_str (bool pad = false, bool force = false,
                               char type = '\'') const
  { return rep->convert_to_str (pad, force, type); }

  octave_value
  convert_to_str_internal (bool pad, bool force, char type) const
  { return rep->convert_to_str_internal (pad, force, type); }

  void convert_to_row_or_column_vector (void)
  { rep->convert_to_row_or_column_vector (); }

  bool print_as_scalar (void) const
  { return rep->print_as_scalar (); }

  void print (std::ostream& os, bool pr_as_read_syntax = false)
  { rep->print (os, pr_as_read_syntax); }

  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const
  { rep->print_raw (os, pr_as_read_syntax); }

  bool print_name_tag (std::ostream& os, const std::string& name) const
  { return rep->print_name_tag (os, name); }

  void print_with_name (std::ostream& os, const std::string& name) const
  { rep->print_with_name (os, name, true); }

  void short_disp (std::ostream& os) const { rep->short_disp (os); }

  int type_id (void) const { return rep->type_id (); }

  std::string type_name (void) const { return rep->type_name (); }

  std::string class_name (void) const { return rep->class_name (); }



  friend octave_value do_unary_op (unary_op op,
                                                 const octave_value& a);

  octave_value& do_non_const_unary_op (unary_op op);

  octave_value& do_non_const_unary_op (unary_op op, const std::string& type,
                                       const std::list<octave_value_list>& idx);

  friend octave_value do_binary_op (binary_op op,
                                                  const octave_value& a,
                                                  const octave_value& b);

  friend octave_value do_binary_op (compound_binary_op op,
                                                  const octave_value& a,
                                                  const octave_value& b);

  friend octave_value do_cat_op (const octave_value& a,
                                               const octave_value& b,
                                               const Array<octave_idx_type>& ra_idx);

  friend octave_value do_colon_op (const octave_value& base,
                                                 const octave_value& limit,
                                                 bool is_for_cmd_expr)
  {
    return do_colon_op (base, octave_value (), limit, is_for_cmd_expr);
  }

  friend octave_value do_colon_op (const octave_value& base,
                                                 const octave_value& increment,
                                                 const octave_value& limit,
                                                 bool is_for_cmd_expr);

  const octave_base_value& get_rep (void) const { return *rep; }

  bool is_copy_of (const octave_value &val) const { return rep == val.rep; }

  void print_info (std::ostream& os,
                   const std::string& prefix = "") const;

  bool save_ascii (std::ostream& os) { return rep->save_ascii (os); }

  bool load_ascii (std::istream& is) { return rep->load_ascii (is); }

  bool save_binary (std::ostream& os, bool& save_as_floats)
  { return rep->save_binary (os, save_as_floats); }

  bool load_binary (std::istream& is, bool swap,
                    octave::mach_info::float_format fmt)
  { return rep->load_binary (is, swap, fmt); }

  bool save_hdf5 (octave_hdf5_id loc_id, const char *name,
                  bool save_as_floats)
  { return rep->save_hdf5 (loc_id, name, save_as_floats); }

  bool load_hdf5 (octave_hdf5_id loc_id, const char *name)
  { return rep->load_hdf5 (loc_id, name); }

  int write (octave_stream& os, int block_size,
             oct_data_conv::data_type output_type, int skip,
             octave::mach_info::float_format flt_fmt) const;

  octave_base_value *internal_rep (void) const { return rep; }



  void *mex_get_data (void) const { return rep->mex_get_data (); }

  octave_idx_type *mex_get_ir (void) const { return rep->mex_get_ir (); }

  octave_idx_type *mex_get_jc (void) const { return rep->mex_get_jc (); }

  mxArray *as_mxArray (void) const { return rep->as_mxArray (); }

  octave_value diag (octave_idx_type k = 0) const
  { return rep->diag (k); }

  octave_value diag (octave_idx_type m, octave_idx_type n) const
  { return rep->diag (m, n); }

  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
  { return rep->sort (dim, mode); }
  octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                     sortmode mode = ASCENDING) const
  { return rep->sort (sidx, dim, mode); }

  sortmode is_sorted (sortmode mode = UNSORTED) const
  { return rep->is_sorted (mode); }

  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
  { return rep->sort_rows_idx (mode); }

  sortmode is_sorted_rows (sortmode mode = UNSORTED) const
  { return rep->is_sorted_rows (mode); }

  void lock (void) { rep->lock (); }

  void unlock (void) { rep->unlock (); }

  bool islocked (void) const { return rep->islocked (); }

  void dump (std::ostream& os) const { rep->dump (os); }







  octave_value abs (void) const { return rep->map (octave_base_value::umap_abs); }
  octave_value acos (void) const { return rep->map (octave_base_value::umap_acos); }
  octave_value acosh (void) const { return rep->map (octave_base_value::umap_acosh); }
  octave_value angle (void) const { return rep->map (octave_base_value::umap_angle); }
  octave_value arg (void) const { return rep->map (octave_base_value::umap_arg); }
  octave_value asin (void) const { return rep->map (octave_base_value::umap_asin); }
  octave_value asinh (void) const { return rep->map (octave_base_value::umap_asinh); }
  octave_value atan (void) const { return rep->map (octave_base_value::umap_atan); }
  octave_value atanh (void) const { return rep->map (octave_base_value::umap_atanh); }
  octave_value cbrt (void) const { return rep->map (octave_base_value::umap_cbrt); }
  octave_value ceil (void) const { return rep->map (octave_base_value::umap_ceil); }
  octave_value conj (void) const { return rep->map (octave_base_value::umap_conj); }
  octave_value cos (void) const { return rep->map (octave_base_value::umap_cos); }
  octave_value cosh (void) const { return rep->map (octave_base_value::umap_cosh); }
  octave_value erf (void) const { return rep->map (octave_base_value::umap_erf); }
  octave_value erfinv (void) const { return rep->map (octave_base_value::umap_erfinv); }
  octave_value erfcinv (void) const { return rep->map (octave_base_value::umap_erfcinv); }
  octave_value erfc (void) const { return rep->map (octave_base_value::umap_erfc); }
  octave_value erfcx (void) const { return rep->map (octave_base_value::umap_erfcx); }
  octave_value erfi (void) const { return rep->map (octave_base_value::umap_erfi); }
  octave_value dawson (void) const { return rep->map (octave_base_value::umap_dawson); }
  octave_value exp (void) const { return rep->map (octave_base_value::umap_exp); }
  octave_value expm1 (void) const { return rep->map (octave_base_value::umap_expm1); }
  octave_value isfinite (void) const { return rep->map (octave_base_value::umap_isfinite); }
  octave_value fix (void) const { return rep->map (octave_base_value::umap_fix); }
  octave_value floor (void) const { return rep->map (octave_base_value::umap_floor); }
  octave_value gamma (void) const { return rep->map (octave_base_value::umap_gamma); }
  octave_value imag (void) const { return rep->map (octave_base_value::umap_imag); }
  octave_value isinf (void) const { return rep->map (octave_base_value::umap_isinf); }
  octave_value isna (void) const { return rep->map (octave_base_value::umap_isna); }
  octave_value isnan (void) const { return rep->map (octave_base_value::umap_isnan); }
  octave_value lgamma (void) const { return rep->map (octave_base_value::umap_lgamma); }
  octave_value log (void) const { return rep->map (octave_base_value::umap_log); }
  octave_value log2 (void) const { return rep->map (octave_base_value::umap_log2); }
  octave_value log10 (void) const { return rep->map (octave_base_value::umap_log10); }
  octave_value log1p (void) const { return rep->map (octave_base_value::umap_log1p); }
  octave_value real (void) const { return rep->map (octave_base_value::umap_real); }
  octave_value round (void) const { return rep->map (octave_base_value::umap_round); }
  octave_value roundb (void) const { return rep->map (octave_base_value::umap_roundb); }
  octave_value signum (void) const { return rep->map (octave_base_value::umap_signum); }
  octave_value sin (void) const { return rep->map (octave_base_value::umap_sin); }
  octave_value sinh (void) const { return rep->map (octave_base_value::umap_sinh); }
  octave_value sqrt (void) const { return rep->map (octave_base_value::umap_sqrt); }
  octave_value tan (void) const { return rep->map (octave_base_value::umap_tan); }
  octave_value tanh (void) const { return rep->map (octave_base_value::umap_tanh); }



  octave_value xisalnum (void) const { return rep->map (octave_base_value::umap_xisalnum); }
  octave_value xisalpha (void) const { return rep->map (octave_base_value::umap_xisalpha); }
  octave_value xisascii (void) const { return rep->map (octave_base_value::umap_xisascii); }
  octave_value xiscntrl (void) const { return rep->map (octave_base_value::umap_xiscntrl); }
  octave_value xisdigit (void) const { return rep->map (octave_base_value::umap_xisdigit); }
  octave_value xisgraph (void) const { return rep->map (octave_base_value::umap_xisgraph); }
  octave_value xislower (void) const { return rep->map (octave_base_value::umap_xislower); }
  octave_value xisprint (void) const { return rep->map (octave_base_value::umap_xisprint); }
  octave_value xispunct (void) const { return rep->map (octave_base_value::umap_xispunct); }
  octave_value xisspace (void) const { return rep->map (octave_base_value::umap_xisspace); }
  octave_value xisupper (void) const { return rep->map (octave_base_value::umap_xisupper); }
  octave_value xisxdigit (void) const { return rep->map (octave_base_value::umap_xisxdigit); }
  octave_value xsignbit (void) const { return rep->map (octave_base_value::umap_xsignbit); }
  octave_value xtoascii (void) const { return rep->map (octave_base_value::umap_xtoascii); }
  octave_value xtolower (void) const { return rep->map (octave_base_value::umap_xtolower); }
  octave_value xtoupper (void) const { return rep->map (octave_base_value::umap_xtoupper); }



  octave_value map (octave_base_value::unary_mapper_t umap) const
  { return rep->map (umap); }




  octave_value
  fast_elem_extract (octave_idx_type n) const
  { return rep->fast_elem_extract (n); }





  virtual bool
  fast_elem_insert (octave_idx_type n, const octave_value& x)
  {
    make_unique ();
    return rep->fast_elem_insert (n, x);
  }

protected:


  octave_base_value *rep;

private:

  static octave_base_value *nil_rep (void);

  assign_op unary_op_to_assign_op (unary_op op);

  binary_op op_eq_to_binary_op (assign_op op);



  octave_value (const octave_base_value *);

};



extern octave_value
do_unary_op (octave_value::unary_op op, const octave_value& a);

extern octave_value
do_binary_op (octave_value::binary_op op,
              const octave_value& a, const octave_value& b);

extern octave_value
do_binary_op (octave_value::compound_binary_op op,
              const octave_value& a, const octave_value& b);
# 1484 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h"
inline octave_value op_not (const octave_value& a) { return do_unary_op (octave_value::op_not, a); } inline octave_value operator ! (const octave_value& a) { return op_not (a); }
inline octave_value op_uplus (const octave_value& a) { return do_unary_op (octave_value::op_uplus, a); } inline octave_value operator + (const octave_value& a) { return op_uplus (a); }
inline octave_value op_uminus (const octave_value& a) { return do_unary_op (octave_value::op_uminus, a); } inline octave_value operator - (const octave_value& a) { return op_uminus (a); }

inline octave_value op_transpose (const octave_value& a) { return do_unary_op (octave_value::op_transpose, a); }
inline octave_value op_hermitian (const octave_value& a) { return do_unary_op (octave_value::op_hermitian, a); }
# 1514 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h"
inline octave_value op_add (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_add, a1, a2); } inline octave_value operator + (const octave_value& a1, const octave_value& a2) { return op_add (a1, a2); }
inline octave_value op_sub (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_sub, a1, a2); } inline octave_value operator - (const octave_value& a1, const octave_value& a2) { return op_sub (a1, a2); }
inline octave_value op_mul (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_mul, a1, a2); } inline octave_value operator * (const octave_value& a1, const octave_value& a2) { return op_mul (a1, a2); }
inline octave_value op_div (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_div, a1, a2); } inline octave_value operator / (const octave_value& a1, const octave_value& a2) { return op_div (a1, a2); }

inline octave_value op_pow (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_pow, a1, a2); }
inline octave_value op_ldiv (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_ldiv, a1, a2); }

inline octave_value op_lt (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_lt, a1, a2); } inline octave_value operator < (const octave_value& a1, const octave_value& a2) { return op_lt (a1, a2); }
inline octave_value op_le (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_le, a1, a2); } inline octave_value operator <= (const octave_value& a1, const octave_value& a2) { return op_le (a1, a2); }
inline octave_value op_eq (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_eq, a1, a2); } inline octave_value operator == (const octave_value& a1, const octave_value& a2) { return op_eq (a1, a2); }
inline octave_value op_ge (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_ge, a1, a2); } inline octave_value operator >= (const octave_value& a1, const octave_value& a2) { return op_ge (a1, a2); }
inline octave_value op_gt (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_gt, a1, a2); } inline octave_value operator > (const octave_value& a1, const octave_value& a2) { return op_gt (a1, a2); }
inline octave_value op_ne (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_ne, a1, a2); } inline octave_value operator != (const octave_value& a1, const octave_value& a2) { return op_ne (a1, a2); }

inline octave_value op_el_mul (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_el_mul, a1, a2); }
inline octave_value op_el_div (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_el_div, a1, a2); }
inline octave_value op_el_pow (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_el_pow, a1, a2); }
inline octave_value op_el_ldiv (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_el_ldiv, a1, a2); }
inline octave_value op_el_and (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_el_and, a1, a2); }
inline octave_value op_el_or (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_el_or, a1, a2); }

inline octave_value op_struct_ref (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_struct_ref, a1, a2); }
# 1545 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h"
inline octave_value op_trans_mul (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_trans_mul, a1, a2); }
inline octave_value op_mul_trans (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_mul_trans, a1, a2); }
inline octave_value op_herm_mul (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_herm_mul, a1, a2); }
inline octave_value op_mul_herm (const octave_value& a1, const octave_value& a2) { return do_binary_op (octave_value::op_mul_herm, a1, a2); }

extern void install_types (void);


template <typename Value>
inline Value octave_value_extract (const octave_value&)
{ (void) ((!!(false)) || (_assert("false","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h",1555),0)); }
# 1564 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h"
template <> inline double octave_value_extract<double> (const octave_value& v) { return v. scalar_value (); }
template <> inline float octave_value_extract<float> (const octave_value& v) { return v. float_scalar_value (); }
template <> inline Complex octave_value_extract<Complex> (const octave_value& v) { return v. complex_value (); }
template <> inline FloatComplex octave_value_extract<FloatComplex> (const octave_value& v) { return v. float_complex_value (); }
template <> inline bool octave_value_extract<bool> (const octave_value& v) { return v. bool_value (); }

template <> inline octave_int8 octave_value_extract<octave_int8> (const octave_value& v) { return v. int8_scalar_value (); }
template <> inline octave_int16 octave_value_extract<octave_int16> (const octave_value& v) { return v. int16_scalar_value (); }
template <> inline octave_int32 octave_value_extract<octave_int32> (const octave_value& v) { return v. int32_scalar_value (); }
template <> inline octave_int64 octave_value_extract<octave_int64> (const octave_value& v) { return v. int64_scalar_value (); }
template <> inline octave_uint8 octave_value_extract<octave_uint8> (const octave_value& v) { return v. uint8_scalar_value (); }
template <> inline octave_uint16 octave_value_extract<octave_uint16> (const octave_value& v) { return v. uint16_scalar_value (); }
template <> inline octave_uint32 octave_value_extract<octave_uint32> (const octave_value& v) { return v. uint32_scalar_value (); }
template <> inline octave_uint64 octave_value_extract<octave_uint64> (const octave_value& v) { return v. uint64_scalar_value (); }

template <> inline NDArray octave_value_extract<NDArray> (const octave_value& v) { return v. array_value (); }
template <> inline FloatNDArray octave_value_extract<FloatNDArray> (const octave_value& v) { return v. float_array_value (); }
template <> inline ComplexNDArray octave_value_extract<ComplexNDArray> (const octave_value& v) { return v. complex_array_value (); }
template <> inline FloatComplexNDArray octave_value_extract<FloatComplexNDArray> (const octave_value& v) { return v. float_complex_array_value (); }
template <> inline boolNDArray octave_value_extract<boolNDArray> (const octave_value& v) { return v. bool_array_value (); }

template <> inline charNDArray octave_value_extract<charNDArray> (const octave_value& v) { return v. char_array_value (); }
template <> inline int8NDArray octave_value_extract<int8NDArray> (const octave_value& v) { return v. int8_array_value (); }
template <> inline int16NDArray octave_value_extract<int16NDArray> (const octave_value& v) { return v. int16_array_value (); }
template <> inline int32NDArray octave_value_extract<int32NDArray> (const octave_value& v) { return v. int32_array_value (); }
template <> inline int64NDArray octave_value_extract<int64NDArray> (const octave_value& v) { return v. int64_array_value (); }
template <> inline uint8NDArray octave_value_extract<uint8NDArray> (const octave_value& v) { return v. uint8_array_value (); }
template <> inline uint16NDArray octave_value_extract<uint16NDArray> (const octave_value& v) { return v. uint16_array_value (); }
template <> inline uint32NDArray octave_value_extract<uint32NDArray> (const octave_value& v) { return v. uint32_array_value (); }
template <> inline uint64NDArray octave_value_extract<uint64NDArray> (const octave_value& v) { return v. uint64_array_value (); }

template <> inline Matrix octave_value_extract<Matrix> (const octave_value& v) { return v. matrix_value (); }
template <> inline FloatMatrix octave_value_extract<FloatMatrix> (const octave_value& v) { return v. float_matrix_value (); }
template <> inline ComplexMatrix octave_value_extract<ComplexMatrix> (const octave_value& v) { return v. complex_matrix_value (); }
template <> inline FloatComplexMatrix octave_value_extract<FloatComplexMatrix> (const octave_value& v) { return v. float_complex_matrix_value (); }
template <> inline boolMatrix octave_value_extract<boolMatrix> (const octave_value& v) { return v. bool_matrix_value (); }

template <> inline ColumnVector octave_value_extract<ColumnVector> (const octave_value& v) { return v. column_vector_value (); }
template <> inline FloatColumnVector octave_value_extract<FloatColumnVector> (const octave_value& v) { return v. float_column_vector_value (); }
template <> inline ComplexColumnVector octave_value_extract<ComplexColumnVector> (const octave_value& v) { return v. complex_column_vector_value (); }
template <> inline FloatComplexColumnVector octave_value_extract<FloatComplexColumnVector> (const octave_value& v) { return v. float_complex_column_vector_value (); }

template <> inline RowVector octave_value_extract<RowVector> (const octave_value& v) { return v. row_vector_value (); }
template <> inline FloatRowVector octave_value_extract<FloatRowVector> (const octave_value& v) { return v. float_row_vector_value (); }
template <> inline ComplexRowVector octave_value_extract<ComplexRowVector> (const octave_value& v) { return v. complex_row_vector_value (); }
template <> inline FloatComplexRowVector octave_value_extract<FloatComplexRowVector> (const octave_value& v) { return v. float_complex_row_vector_value (); }

template <> inline DiagMatrix octave_value_extract<DiagMatrix> (const octave_value& v) { return v. diag_matrix_value (); }
template <> inline FloatDiagMatrix octave_value_extract<FloatDiagMatrix> (const octave_value& v) { return v. float_diag_matrix_value (); }
template <> inline ComplexDiagMatrix octave_value_extract<ComplexDiagMatrix> (const octave_value& v) { return v. complex_diag_matrix_value (); }
template <> inline FloatComplexDiagMatrix octave_value_extract<FloatComplexDiagMatrix> (const octave_value& v) { return v. float_complex_diag_matrix_value (); }
template <> inline PermMatrix octave_value_extract<PermMatrix> (const octave_value& v) { return v. perm_matrix_value (); }

template <> inline SparseMatrix octave_value_extract<SparseMatrix> (const octave_value& v) { return v. sparse_matrix_value (); }
template <> inline SparseComplexMatrix octave_value_extract<SparseComplexMatrix> (const octave_value& v) { return v. sparse_complex_matrix_value (); }
template <> inline SparseBoolMatrix octave_value_extract<SparseBoolMatrix> (const octave_value& v) { return v. sparse_bool_matrix_value (); }
# 1630 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h"
template <> inline char octave_value_extract<char> (const octave_value&) { (void) ((!!(false)) || (_assert("false","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h",1630),0)); return 0; }
template <> inline octave_value octave_value_extract<octave_value> (const octave_value&) { (void) ((!!(false)) || (_assert("false","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov.h",1631),0)); return octave_value (); }
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ovl.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Cell.h" 1
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/Cell.h"
class octave_value_list;

class

Cell : public Array<octave_value>
{
public:

  Cell (void)
    : Array<octave_value> (dim_vector (0, 0)) { }

  Cell (const octave_value& val)
    : Array<octave_value> (dim_vector (1, 1), val) { }

  Cell (const octave_value_list& ovl);

  Cell (octave_idx_type n, octave_idx_type m,
        const octave_value& val = Matrix ())
    : Array<octave_value> (dim_vector (n, m), val) { }

  Cell (const dim_vector& dv, const octave_value& val = Matrix ())
    : Array<octave_value> (dv, val) { }

  Cell (const Array<octave_value>& c)
    : Array<octave_value> (c) { }

  Cell (const Array<octave_value>& c, octave_idx_type nr, octave_idx_type nc)
    : Array<octave_value> (c, dim_vector (nr, nc)) { }

  Cell (const string_vector& sv, bool trim = false);

  Cell (const std::list<std::string>& lst);

  Cell (const Array<std::string>& sa);

  Cell (const dim_vector& dv, const string_vector& sv, bool trim = false);

  Cell (const Cell& c)
    : Array<octave_value> (c) { }

  bool is_cellstr (void) const;

  Array<std::string> cellstr_value (void) const;

  using Array<octave_value>::index;

  Cell index (const octave_value_list& idx, bool resize_ok = false) const;

  using Array<octave_value>::delete_elements;

  void delete_elements (const octave_value_list& idx);

  using Array<octave_value>::assign;

  void assign (const octave_value_list& idx, const Cell& rhs,
               const octave_value& fill_val = Matrix ());

  Cell reshape (const dim_vector& new_dims) const
  { return Array<octave_value>::reshape (new_dims); }

  octave_idx_type nnz (void) const;

  Cell column (octave_idx_type i) const;


  boolMatrix all (int = 0) const { return boolMatrix (); }


  boolMatrix any (int = 0) const { return boolMatrix (); }

  Cell concat (const Cell& rb, const Array<octave_idx_type>& ra_idx);

  Cell& insert (const Cell& a, octave_idx_type r, octave_idx_type c);
  Cell& insert (const Cell& a, const Array<octave_idx_type>& ra_idx);


  bool any_element_is_nan (void) const { return false; }
  bool is_true (void) const { return false; }

  octave_value resize_fill_value (void) const;

  Cell diag (octave_idx_type k = 0) const;

  Cell diag (octave_idx_type m, octave_idx_type n) const;

  Cell xisalnum (void) const { return map (&octave_value::xisalnum); }
  Cell xisalpha (void) const { return map (&octave_value::xisalpha); }
  Cell xisascii (void) const { return map (&octave_value::xisascii); }
  Cell xiscntrl (void) const { return map (&octave_value::xiscntrl); }
  Cell xisdigit (void) const { return map (&octave_value::xisdigit); }
  Cell xisgraph (void) const { return map (&octave_value::xisgraph); }
  Cell xislower (void) const { return map (&octave_value::xislower); }
  Cell xisprint (void) const { return map (&octave_value::xisprint); }
  Cell xispunct (void) const { return map (&octave_value::xispunct); }
  Cell xisspace (void) const { return map (&octave_value::xisspace); }
  Cell xisupper (void) const { return map (&octave_value::xisupper); }
  Cell xisxdigit (void) const { return map (&octave_value::xisxdigit); }
  Cell xtoascii (void) const { return map (&octave_value::xtoascii); }
  Cell xtolower (void) const { return map (&octave_value::xtolower); }
  Cell xtoupper (void) const { return map (&octave_value::xtoupper); }

private:

  typedef octave_value (octave_value::*ctype_mapper) (void) const;

  Cell map (ctype_mapper) const;
};

template <>
inline Cell octave_value_extract<Cell> (const octave_value& v)
{ return v.cell_value (); }
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ovl.h" 2

class

octave_value_list
{
public:

  octave_value_list (void)
    : data (), names () { }

  explicit octave_value_list (octave_idx_type n)
    : data (dim_vector (1, n)), names () { }

  octave_value_list (octave_idx_type n, const octave_value& val)
    : data (dim_vector (1, n), val), names () { }

  octave_value_list (const octave_value& tc)
    : data (dim_vector (1, 1), tc), names () { }

  template<template <typename...> class OV_Container>
  octave_value_list (const OV_Container<octave_value>& args)
    : data (args, dim_vector (1, args.size ())), names () { }

  octave_value_list (const Array<octave_value>& d)
    : data (d.as_row ()), names () { }

  octave_value_list (const Cell& tc)
    : data (tc.as_row ()), names () { }

  octave_value_list (const octave_value_list& obj)
    : data (obj.data), names (obj.names) { }


  octave_value_list (const std::list<octave_value_list>&);

  ~octave_value_list (void) { }

  octave_value_list& operator = (const octave_value_list& obj)
  {
    if (this != &obj)
      {
        data = obj.data;
        names = obj.names;
      }

    return *this;
  }

  Array<octave_value> array_value (void) const { return data; }

  Cell cell_value (void) const { return array_value (); }



  octave_value& operator () (octave_idx_type n) { return elem (n); }

  const octave_value& operator () (octave_idx_type n) const { return elem (n); }

  octave_idx_type length (void) const { return data.numel (); }

  bool empty (void) const { return length () == 0; }

  void resize (octave_idx_type n, const octave_value& rfv = octave_value ())
  {
    data.resize (dim_vector (1, n), rfv);
  }

  octave_value_list& prepend (const octave_value& val);

  octave_value_list& append (const octave_value& val);

  octave_value_list& append (const octave_value_list& lst);

  octave_value_list& reverse (void);

  octave_value_list
  slice (octave_idx_type offset, octave_idx_type len, bool tags = false) const
  {




    octave_value_list retval
      = data.linear_slice (offset, std::min (offset + len, length ()));

    if (tags && len > 0 && names.numel () > 0)
      retval.names = names.linear_slice (offset, std::min (offset + len,
                                                           names.numel ()));

    return retval;
  }

  octave_value_list
  splice (octave_idx_type offset, octave_idx_type len,
          const octave_value_list& lst = octave_value_list ()) const;

  bool all_strings_p (void) const;

  bool all_scalars (void) const;

  bool any_cell (void) const;

  bool has_magic_colon (void) const;

  string_vector make_argv (const std::string& = "") const;

  void stash_name_tags (const string_vector& nm) { names = nm; }

  string_vector name_tags (void) const { return names; }

  void make_storable_values (void);

  octave_value& xelem (octave_idx_type i) { return data.xelem (i); }

  void clear (void) { data.clear (); }

private:

  Array<octave_value> data;



  string_vector names;

  octave_value& elem (octave_idx_type n)
  {
    if (n >= length ())
      resize (n + 1);

    return data(n);
  }

  const octave_value& elem (octave_idx_type n) const
  { return data(n); }

};
# 188 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ovl.h"
template<typename... OV_Args>
inline octave_value_list
ovl (const OV_Args&... args)
{
  return octave_value_list (std::initializer_list<octave_value> ({args...}));
}
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-fcn.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-typeinfo.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-typeinfo.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-map.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-map.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\map" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\map" 3

# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 1 3
# 70 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 3
namespace std
{
# 90 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
# 147 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 3
      __gnu_cxx::__aligned_buffer<_Val> _M_storage;

      _Val*
      _M_valptr()
      { return _M_storage._M_ptr(); }

      const _Val*
      _M_valptr() const
      { return _M_storage._M_ptr(); }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x) noexcept
      : _M_node(__x) { }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Link_type __x) noexcept
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it) noexcept
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(static_cast<typename iterator::_Link_type>
   (const_cast<typename iterator::_Base_ptr>(_M_node))); }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Rb_tree_node<_Val> >::other _Node_allocator;

      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator() noexcept
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const noexcept
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }

      void
      _M_put_node(_Link_type __p) noexcept
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
# 413 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 3
      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   try
     {
       ::new(__tmp) _Rb_tree_node<_Val>;
       _Alloc_traits::construct(_M_get_Node_allocator(),
           __tmp->_M_valptr(),
           std::forward<_Args>(__args)...);
     }
   catch(...)
     {
       _M_put_node(__tmp);
       throw;
     }
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p) noexcept
      {
 _Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 __p->~_Rb_tree_node<_Val>();
 _M_put_node(__p);
      }


      _Link_type
      _M_clone_node(_Const_Link_type __x)
      {
 _Link_type __tmp = _M_create_node(*__x->_M_valptr());
 __tmp->_M_color = __x->_M_color;
 __tmp->_M_left = 0;
 __tmp->_M_right = 0;
 return __tmp;
      }

    protected:
      template<typename _Key_compare,
        bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }


   _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
   : _Node_allocator(std::move(__a)), _M_key_compare(__comp),
     _M_header(), _M_node_count(0)
   { _M_initialize(); }


 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root() noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost() noexcept
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const noexcept
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost() noexcept
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const noexcept
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin() noexcept
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const noexcept
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() noexcept
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const noexcept
      { return reinterpret_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return *__x->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:
      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);


      template<typename _Arg>
        iterator
        _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v);

      iterator
      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);

      iterator
      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);

      iterator
      _M_insert_equal_lower_node(_Link_type __z);
# 640 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 3
      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare,
         _Alloc_traits::_S_select_on_copy(__x._M_get_Node_allocator()))
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }


      _Rb_tree(const allocator_type& __a)
      : _M_impl(_Compare(), _Node_allocator(__a))
      { }

      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }

      _Rb_tree(_Rb_tree&& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   _M_move_data(__x, std::true_type());
      }

      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
      : _Rb_tree(std::move(__x), _Node_allocator(__a))
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);


      ~_Rb_tree() noexcept
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin() noexcept
      {
 return iterator(static_cast<_Link_type>
   (this->_M_impl._M_header._M_left));
      }

      const_iterator
      begin() const noexcept
      {
 return const_iterator(static_cast<_Const_Link_type>
         (this->_M_impl._M_header._M_left));
      }

      iterator
      end() noexcept
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }

      const_iterator
      end() const noexcept
      {
 return const_iterator(static_cast<_Const_Link_type>
         (&this->_M_impl._M_header));
      }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      bool
      empty() const noexcept
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const noexcept
      { return _M_impl._M_node_count; }

      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }

      void

      swap(_Rb_tree& __t) noexcept(_Alloc_traits::_S_nothrow_swap());






      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_unique_(const_iterator __position, _Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal_(const_iterator __position, _Arg&& __x);

      template<typename... _Args>
 pair<iterator, bool>
 _M_emplace_unique(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_equal(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
# 832 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 3
      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      {
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      {
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 880 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 902 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear() noexcept
      {
        _M_erase(_M_begin());
        _M_leftmost() = _M_end();
        _M_root() = 0;
        _M_rightmost() = _M_end();
        _M_impl._M_node_count = 0;
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      bool
      __rb_verify() const;


      bool
      _M_move_assign(_Rb_tree&);

    private:

      void
      _M_move_data(_Rb_tree&, std::true_type);



      void
      _M_move_data(_Rb_tree&, std::false_type);

    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
    : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
    {
      using __eq = integral_constant<bool, _Alloc_traits::_S_always_equal()>;
      if (__x._M_root() != 0)
 _M_move_data(__x, __eq());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::true_type)
    {
      _M_root() = __x._M_root();
      _M_leftmost() = __x._M_leftmost();
      _M_rightmost() = __x._M_rightmost();
      _M_root()->_M_parent = _M_end();

      __x._M_root() = 0;
      __x._M_leftmost() = __x._M_end();
      __x._M_rightmost() = __x._M_end();

      this->_M_impl._M_node_count = __x._M_impl._M_node_count;
      __x._M_impl._M_node_count = 0;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
   _M_move_data(__x, std::true_type());
      else
 {
   _M_root() = _M_copy(__x._M_begin(), _M_end());
   _M_leftmost() = _S_minimum(_M_root());
   _M_rightmost() = _S_maximum(_M_root());
   _M_impl._M_node_count = __x._M_impl._M_node_count;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x)
    {
      _M_impl._M_key_compare = __x._M_impl._M_key_compare;
      if (_Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal()
   || _M_get_Node_allocator() == __x._M_get_Node_allocator())
 {
   clear();
   if (__x._M_root() != 0)
     _M_move_data(__x, std::true_type());
   std::__alloc_on_move(_M_get_Node_allocator(),
          __x._M_get_Node_allocator());
   return true;
 }
      return false;
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree& __x)
    {
      if (this != &__x)
 {

   clear();

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       auto& __this_alloc = this->_M_get_Node_allocator();
       auto& __that_alloc = __x._M_get_Node_allocator();
       if (!_Alloc_traits::_S_always_equal()
    && __this_alloc != __that_alloc)
  {
    std::__alloc_on_copy(__this_alloc, __that_alloc);
  }
     }

   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end());
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_(_Base_ptr __x, _Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_KeyOfValue()(__v),
            _S_key(__p)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    _M_copy(_Const_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      try
 {
   if (__x->_M_right)
     __top->_M_right = _M_copy(_S_right(__x), __top);
   __p = __top;
   __x = _S_left(__x);

   while (__x != 0)
     {
       _Link_type __y = _M_clone_node(__x);
       __p->_M_left = __y;
       __y->_M_parent = __p;
       if (__x->_M_right)
  __y->_M_right = _M_copy(_S_right(__x), __y);
       __p = __y;
       __x = _S_left(__x);
     }
 }
      catch(...)
 {
   _M_erase(__top);
   throw;
 }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_destroy_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)

    noexcept(_Alloc_traits::_S_nothrow_swap())

    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();

       __t._M_root() = 0;
       __t._M_leftmost() = __t._M_end();
       __t._M_rightmost() = __t._M_end();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();

   _M_root() = 0;
   _M_leftmost() = _M_end();
   _M_rightmost() = _M_end();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
 }

      std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);

      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
    __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 return _Res(_M_insert_(__res.first, __res.second,
          std::forward<_Arg>(__v)),
      true);

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      return _M_insert_(__res.first, __res.second, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__pos._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique_(const_iterator __position, _Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v));
      return iterator(static_cast<_Link_type>(__res.first));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(0, 0);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_(const_iterator __position, _Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v));

      return _M_insert_equal_lower(std::forward<_Arg>(__v));
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_S_key(__z),
            _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _S_key(__z)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_lower_node(_Link_type __z)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower_node(__y, __z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_unique(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     typedef pair<iterator, bool> _Res;
     auto __res = _M_get_insert_unique_pos(_S_key(__z));
     if (__res.second)
       return _Res(_M_insert_node(__res.first, __res.second, __z), true);

     _M_destroy_node(__z);
     return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
   }
 catch(...)
   {
     _M_destroy_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_equal(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_equal_pos(_S_key(__z));
     return _M_insert_node(__res.first, __res.second, __z);
   }
 catch(...)
   {
     _M_destroy_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     _M_destroy_node(__z);
     return iterator(static_cast<_Link_type>(__res.first));
   }
 catch(...)
   {
     _M_destroy_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     return _M_insert_equal_lower_node(__z);
   }
 catch(...)
   {
     _M_destroy_node(__z);
     throw;
   }
      }


  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 61 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\map" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 1 3
# 66 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
namespace std
{
# 94 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()
      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 182 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 193 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      map(map&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 208 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      map(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      map(const map& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      map(map&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      map(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 252 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 269 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 292 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 308 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      map&
      operator=(map&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_t._M_move_assign(__x._M_t))
   {


     clear();
     insert(std::__make_move_if_noexcept_iterator(__x.begin()),
     std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
 return *this;
      }
# 334 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }






      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 490 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))

   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
         std::tuple<const key_type&>(__k),
         std::tuple<>());



 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::tuple<>());
 return (*__i).second;
      }
# 535 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 573 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 603 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 628 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
# 649 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 677 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_unique_(__position,
     std::forward<_Pair>(__x)); }
# 703 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 724 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 760 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 780 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 812 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      void
      swap(map& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 858 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 873 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 885 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 900 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 915 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 954 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 973 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 998 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1015 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\map" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 1 3
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
namespace std
{
# 92 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      multimap()
      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 180 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 191 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      multimap(multimap&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 205 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multimap(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      multimap(const multimap& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      multimap(multimap&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      multimap(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 248 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 264 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 287 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 303 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      multimap&
      operator=(multimap&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_t._M_move_assign(__x._M_t))
   {


     clear();
     insert(std::__make_move_if_noexcept_iterator(__x.begin()),
     std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
 return *this;
      }
# 329 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }




      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 488 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 515 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 536 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(_Pair&& __x)
        { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }
# 569 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_equal_(__position,
           std::forward<_Pair>(__x)); }
# 596 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 609 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 630 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 666 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 687 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 722 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      void
      swap(multimap& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 768 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 783 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }






      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 807 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 822 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 859 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 876 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 901 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 918 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\map" 2 3
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-map.h" 2




class string_vector;


class
octave_fields
{
  class fields_rep : public std::map<std::string, octave_idx_type>
  {
  public:
    fields_rep (void) : std::map<std::string, octave_idx_type> (), count (1) { }
    fields_rep (const fields_rep& other)
      : std::map<std::string, octave_idx_type> (other), count (1) { }

    octave_refcount<int> count;

  private:
    fields_rep& operator = (const fields_rep&);
  };

  fields_rep *rep;

  static fields_rep *nil_rep (void);

public:

  octave_fields (void) : rep (nil_rep ()) { rep->count++; }
  octave_fields (const string_vector&);
  octave_fields (const char * const *);

  ~octave_fields (void)
  {
    if (--rep->count == 0)
      delete rep;
  }

  void make_unique (void)
  {
    if (rep->count > 1)
      {
        fields_rep *r = new fields_rep (*rep);

        if (--rep->count == 0)
          delete rep;

        rep = r;
      }
  }

  octave_fields (const octave_fields& o) : rep (o.rep) { rep->count++; }

  octave_fields&
  operator = (const octave_fields& o)
  {
    o.rep->count++;
    if (--rep->count == 0)
      delete rep;
    rep = o.rep;

    return *this;
  }



  typedef std::map<std::string, octave_idx_type>::const_iterator const_iterator;
  typedef const_iterator iterator;

  const_iterator begin (void) const { return rep->begin (); }
  const_iterator end (void) const { return rep->end (); }

  std::string key (const_iterator p) const { return p->first; }
  octave_idx_type index (const_iterator p) const { return p->second; }

  const_iterator seek (const std::string& k) const
  { return rep->find (k); }




  octave_idx_type nfields (void) const { return rep->size (); }


  bool isfield (const std::string& name) const;


  octave_idx_type getfield (const std::string& name) const;

  octave_idx_type getfield (const std::string& name);

  octave_idx_type rmfield (const std::string& name);



  void orderfields (Array<octave_idx_type>& perm);




  bool equal_up_to_order (const octave_fields& other,
                          octave_idx_type* perm) const;

  bool equal_up_to_order (const octave_fields& other,
                          Array<octave_idx_type>& perm) const;

  bool is_same (const octave_fields& other) const
  { return rep == other.rep; }


  string_vector fieldnames (void) const;

  void clear (void)
  {
    *this = octave_fields ();
  }
};

class
octave_scalar_map
{
public:

  octave_scalar_map (const octave_fields& k)
    : xkeys (k), xvals (k.nfields ()) { }

  octave_scalar_map (void) : xkeys (), xvals () { }

  octave_scalar_map (const string_vector& k)
    : xkeys (k), xvals (k.numel ()) { }

  octave_scalar_map (const octave_scalar_map& m)
    : xkeys (m.xkeys), xvals(m.xvals) { }

  octave_scalar_map& operator = (const octave_scalar_map& m)
  {
    xkeys = m.xkeys;
    xvals = m.xvals;

    return *this;
  }




  typedef octave_fields::const_iterator const_iterator;
  typedef const_iterator iterator;

  const_iterator begin (void) const { return xkeys.begin (); }
  const_iterator end (void) const { return xkeys.end (); }

  const_iterator seek (const std::string& k) const { return xkeys.seek (k); }

  std::string key (const_iterator p) const
  { return xkeys.key (p); }
  octave_idx_type index (const_iterator p) const
  { return xkeys.index (p); }

  const octave_value& contents (const_iterator p) const
  { return xvals[xkeys.index (p)]; }

  octave_value& contents (iterator p)
  { return xvals[xkeys.index (p)]; }

  const octave_value& contents (octave_idx_type i) const
  { return xvals[i]; }

  octave_value& contents (octave_idx_type i)
  { return xvals[i]; }


  octave_idx_type nfields (void) const { return xkeys.nfields (); }


  bool isfield (const std::string& name) const
  { return xkeys.isfield (name); }

  bool contains (const std::string& name) const
  { return isfield (name); }

  string_vector fieldnames (void) const
  { return xkeys.fieldnames (); }

  string_vector keys (void) const
  { return fieldnames (); }


  octave_value getfield (const std::string& key) const;


  void setfield (const std::string& key, const octave_value& val);
  void assign (const std::string& k, const octave_value& val)
  { setfield (k, val); }


  void rmfield (const std::string& key);
  void del (const std::string& k) { rmfield (k); }


  octave_scalar_map orderfields (void) const;
  octave_scalar_map orderfields (Array<octave_idx_type>& perm) const;
  octave_scalar_map orderfields (const octave_scalar_map& other,
                                 Array<octave_idx_type>& perm) const;


  octave_value contents (const std::string& k) const;
  octave_value& contents (const std::string& k);

  void clear (void)
  {
    xkeys.clear ();
    xvals.clear ();
  }

  friend class octave_map;

private:

  octave_fields xkeys;
  std::vector<octave_value> xvals;

};

template <>
inline octave_scalar_map
octave_value_extract<octave_scalar_map> (const octave_value& v)
{ return v.scalar_map_value (); }

class
octave_map
{
public:

  octave_map (const octave_fields& k)
    : xkeys (k), xvals (k.nfields ()), dimensions () { }

  octave_map (const dim_vector& dv, const octave_fields& k)
    : xkeys (k), xvals (k.nfields (), Cell (dv)), dimensions (dv) { }

  typedef octave_scalar_map element_type;

  octave_map (void) : xkeys (), xvals (), dimensions () { }

  octave_map (const dim_vector& dv) : xkeys (), xvals (), dimensions (dv) { }

  octave_map (const string_vector& k)
    : xkeys (k), xvals (k.numel (), Cell (1, 1)), dimensions (1, 1) { }

  octave_map (const dim_vector& dv, const string_vector& k)
    : xkeys (k), xvals (k.numel (), Cell (dv)), dimensions (dv) { }

  octave_map (const octave_map& m)
    : xkeys (m.xkeys), xvals (m.xvals), dimensions (m.dimensions) { }

  octave_map (const octave_scalar_map& m);

  octave_map& operator = (const octave_map& m)
  {
    xkeys = m.xkeys;
    xvals = m.xvals;
    dimensions = m.dimensions;

    return *this;
  }




  typedef octave_fields::const_iterator const_iterator;
  typedef const_iterator iterator;

  const_iterator begin (void) const { return xkeys.begin (); }
  const_iterator end (void) const { return xkeys.end (); }

  const_iterator seek (const std::string& k) const { return xkeys.seek (k); }

  std::string key (const_iterator p) const
  { return xkeys.key (p); }
  octave_idx_type index (const_iterator p) const
  { return xkeys.index (p); }

  const Cell& contents (const_iterator p) const
  { return xvals[xkeys.index (p)]; }

  Cell& contents (iterator p)
  { return xvals[xkeys.index (p)]; }

  const Cell& contents (octave_idx_type i) const
  { return xvals[i]; }

  Cell& contents (octave_idx_type i)
  { return xvals[i]; }


  octave_idx_type nfields (void) const { return xkeys.nfields (); }


  bool isfield (const std::string& name) const
  { return xkeys.isfield (name); }

  bool contains (const std::string& name) const
  { return isfield (name); }

  string_vector fieldnames (void) const
  { return xkeys.fieldnames (); }

  string_vector keys (void) const
  { return fieldnames (); }


  Cell getfield (const std::string& key) const;



  void setfield (const std::string& key, const Cell& val);
  void assign (const std::string& k, const Cell& val)
  { setfield (k, val); }


  void rmfield (const std::string& key);
  void del (const std::string& k) { rmfield (k); }


  octave_map orderfields (void) const;
  octave_map orderfields (Array<octave_idx_type>& perm) const;
  octave_map orderfields (const octave_map& other,
                          Array<octave_idx_type>& perm) const;


  Cell contents (const std::string& k) const;
  Cell& contents (const std::string& k);

  void clear (void)
  {
    xkeys.clear ();
    xvals.clear ();
  }


  octave_idx_type numel (void) const { return dimensions.numel (); }
  octave_idx_type length (void) const { return numel (); }
  bool is_empty (void) const { return dimensions.any_zero (); }

  octave_idx_type rows (void) const { return dimensions(0); }
  octave_idx_type cols (void) const { return dimensions(1); }
  octave_idx_type columns (void) const { return dimensions(1); }


  octave_scalar_map checkelem (octave_idx_type n) const;
  octave_scalar_map checkelem (octave_idx_type i, octave_idx_type j) const;

  octave_scalar_map
  checkelem (const Array<octave_idx_type>& ra_idx) const;

  octave_scalar_map operator () (octave_idx_type n) const
  { return checkelem (n); }
  octave_scalar_map operator () (octave_idx_type i, octave_idx_type j) const
  { return checkelem (i, j); }

  octave_scalar_map
  operator () (const Array<octave_idx_type>& ra_idx) const
  { return checkelem (ra_idx); }

  octave_map squeeze (void) const;

  octave_map permute (const Array<int>& vec, bool inv = false) const;

  dim_vector dims (void) const { return dimensions; }

  int ndims (void) const { return dimensions.ndims (); }

  octave_map transpose (void) const;

  octave_map reshape (const dim_vector& dv) const;

  void resize (const dim_vector& dv, bool fill = false);

  static octave_map
  cat (int dim, octave_idx_type n, const octave_scalar_map *map_list);

  static octave_map
  cat (int dim, octave_idx_type n, const octave_map *map_list);

  octave_map index (const idx_vector& i, bool resize_ok = false) const;

  octave_map index (const idx_vector& i, const idx_vector& j,
                    bool resize_ok = false) const;

  octave_map index (const Array<idx_vector>& ia,
                    bool resize_ok = false) const;

  octave_map index (const octave_value_list&, bool resize_ok = false) const;

  octave_map column (octave_idx_type k) const;
  octave_map page (octave_idx_type k) const;

  void assign (const idx_vector& i, const octave_map& rhs);

  void assign (const idx_vector& i, const idx_vector& j, const octave_map& rhs);

  void assign (const Array<idx_vector>& ia, const octave_map& rhs);

  void assign (const octave_value_list&, const octave_map& rhs);

  void assign (const octave_value_list& idx, const std::string& k,
               const Cell& rhs);

  void delete_elements (const idx_vector& i);

  void delete_elements (int dim, const idx_vector& i);

  void delete_elements (const Array<idx_vector>& ia);

  void delete_elements (const octave_value_list&);

  octave_map concat (const octave_map& rb,
                     const Array<octave_idx_type>& ra_idx);


  octave_scalar_map fast_elem_extract (octave_idx_type n) const;


  bool fast_elem_insert (octave_idx_type n, const octave_scalar_map& rhs);

private:

  octave_fields xkeys;
  std::vector<Cell> xvals;
  dim_vector dimensions;

  void optimize_dimensions (void);
  void extract_scalar (octave_scalar_map& dest,
                       octave_idx_type index) const;
  static void do_cat (int dim, octave_idx_type n,
                      const octave_scalar_map *map_list, octave_map& retval);
  static void do_cat (int dim, octave_idx_type n,
                      const octave_map *map_list, octave_map& retval);
};

template <>
inline octave_map octave_value_extract<octave_map> (const octave_value& v)
{ return v.map_value (); }
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-typeinfo.h" 2


class string_vector;

class

octave_value_typeinfo
{
public:

  typedef octave_value (*unary_class_op_fcn) (const octave_value&);

  typedef octave_value (*unary_op_fcn) (const octave_base_value&);

  typedef void (*non_const_unary_op_fcn) (octave_base_value&);

  typedef octave_value (*binary_class_op_fcn)
    (const octave_value&, const octave_value&);

  typedef octave_value (*binary_op_fcn)
    (const octave_base_value&, const octave_base_value&);

  typedef octave_value (*cat_op_fcn)
    (octave_base_value&, const octave_base_value&,
     const Array<octave_idx_type>& ra_idx);

  typedef octave_value (*assign_op_fcn)
    (octave_base_value&, const octave_value_list&, const octave_base_value&);

  typedef octave_value (*assignany_op_fcn)
    (octave_base_value&, const octave_value_list&, const octave_value&);

  static bool instance_ok (void);

  static int register_type (const std::string&, const std::string&,
                            const octave_value&);

  static bool register_unary_class_op (octave_value::unary_op,
                                       unary_class_op_fcn);

  static bool register_unary_op (octave_value::unary_op, int, unary_op_fcn);

  static bool register_non_const_unary_op (octave_value::unary_op, int,
                                           non_const_unary_op_fcn);

  static bool register_binary_class_op (octave_value::binary_op,
                                        binary_class_op_fcn);

  static bool register_binary_op (octave_value::binary_op, int, int,
                                  binary_op_fcn);

  static bool register_binary_class_op (octave_value::compound_binary_op,
                                        binary_class_op_fcn);

  static bool register_binary_op (octave_value::compound_binary_op, int, int,
                                  binary_op_fcn);

  static bool register_cat_op (int, int, cat_op_fcn);

  static bool register_assign_op (octave_value::assign_op, int, int,
                                  assign_op_fcn);

  static bool register_assignany_op (octave_value::assign_op, int,
                                     assignany_op_fcn);

  static bool register_pref_assign_conv (int, int, int);

  static bool
  register_widening_op (int, int, octave_base_value::type_conv_fcn);

  static octave_value
  lookup_type (const std::string& nm)
  {
    return instance->do_lookup_type (nm);
  }

  static unary_class_op_fcn
  lookup_unary_class_op (octave_value::unary_op op)
  {
    return instance->do_lookup_unary_class_op (op);
  }

  static unary_op_fcn
  lookup_unary_op (octave_value::unary_op op, int t)
  {
    return instance->do_lookup_unary_op (op, t);
  }

  static non_const_unary_op_fcn
  lookup_non_const_unary_op (octave_value::unary_op op, int t)
  {
    return instance->do_lookup_non_const_unary_op (op, t);
  }

  static binary_class_op_fcn
  lookup_binary_class_op (octave_value::binary_op op)
  {
    return instance->do_lookup_binary_class_op (op);
  }

  static binary_op_fcn
  lookup_binary_op (octave_value::binary_op op, int t1, int t2)
  {
    return instance->do_lookup_binary_op (op, t1, t2);
  }

  static binary_class_op_fcn
  lookup_binary_class_op (octave_value::compound_binary_op op)
  {
    return instance->do_lookup_binary_class_op (op);
  }

  static binary_op_fcn
  lookup_binary_op (octave_value::compound_binary_op op, int t1, int t2)
  {
    return instance->do_lookup_binary_op (op, t1, t2);
  }

  static cat_op_fcn
  lookup_cat_op (int t1, int t2)
  {
    return instance->do_lookup_cat_op (t1, t2);
  }

  static assign_op_fcn
  lookup_assign_op (octave_value::assign_op op, int t_lhs, int t_rhs)
  {
    return instance->do_lookup_assign_op (op, t_lhs, t_rhs);
  }

  static assignany_op_fcn
  lookup_assignany_op (octave_value::assign_op op, int t_lhs)
  {
    return instance->do_lookup_assignany_op (op, t_lhs);
  }

  static int
  lookup_pref_assign_conv (int t_lhs, int t_rhs)
  {
    return instance->do_lookup_pref_assign_conv (t_lhs, t_rhs);
  }

  static octave_base_value::type_conv_fcn
  lookup_widening_op (int t, int t_result)
  {
    return instance->do_lookup_widening_op (t, t_result);
  }

  static string_vector installed_type_names (void)
  {
    return instance->do_installed_type_names ();
  }

  static octave_scalar_map installed_type_info (void)
  {
    return instance->do_installed_type_info ();
  }

protected:

  octave_value_typeinfo (void)
    : num_types (0), types (dim_vector (init_tab_sz, 1), ""),
      vals (dim_vector (init_tab_sz, 1)),
      unary_class_ops (dim_vector (octave_value::num_unary_ops, 1), 0),
      unary_ops (dim_vector (octave_value::num_unary_ops, init_tab_sz), 0),
      non_const_unary_ops (dim_vector (octave_value::num_unary_ops, init_tab_sz), 0),
      binary_class_ops (dim_vector (octave_value::num_binary_ops, 1), 0),
      binary_ops (dim_vector (octave_value::num_binary_ops, init_tab_sz, init_tab_sz), 0),
      compound_binary_class_ops (dim_vector (octave_value::num_compound_binary_ops, 1), 0),
      compound_binary_ops (dim_vector (octave_value::num_compound_binary_ops, init_tab_sz, init_tab_sz), 0),
      cat_ops (dim_vector (init_tab_sz, init_tab_sz), 0),
      assign_ops (dim_vector (octave_value::num_assign_ops, init_tab_sz, init_tab_sz), 0),
      assignany_ops (dim_vector (octave_value::num_assign_ops, init_tab_sz), 0),
      pref_assign_conv (dim_vector (init_tab_sz, init_tab_sz), -1),
      widening_ops (dim_vector (init_tab_sz, init_tab_sz), 0) { }

  ~octave_value_typeinfo (void) { }

private:

  static const int init_tab_sz;

  static octave_value_typeinfo *instance;

  static void cleanup_instance (void) { delete instance; instance = 0; }

  int num_types;

  Array<std::string> types;

  Array<octave_value> vals;

  Array<void *> unary_class_ops;

  Array<void *> unary_ops;

  Array<void *> non_const_unary_ops;

  Array<void *> binary_class_ops;

  Array<void *> binary_ops;

  Array<void *> compound_binary_class_ops;

  Array<void *> compound_binary_ops;

  Array<void *> cat_ops;

  Array<void *> assign_ops;

  Array<void *> assignany_ops;

  Array<int> pref_assign_conv;

  Array<void *> widening_ops;

  int do_register_type (const std::string&, const std::string&,
                        const octave_value&);

  bool do_register_unary_class_op (octave_value::unary_op, unary_class_op_fcn);

  bool do_register_unary_op (octave_value::unary_op, int, unary_op_fcn);

  bool do_register_non_const_unary_op (octave_value::unary_op, int,
                                       non_const_unary_op_fcn);

  bool do_register_binary_class_op (octave_value::binary_op,
                                    binary_class_op_fcn);

  bool do_register_binary_op (octave_value::binary_op, int, int,
                              binary_op_fcn);

  bool do_register_binary_class_op (octave_value::compound_binary_op,
                                    binary_class_op_fcn);

  bool do_register_binary_op (octave_value::compound_binary_op, int, int,
                              binary_op_fcn);

  bool do_register_cat_op (int, int, cat_op_fcn);

  bool do_register_assign_op (octave_value::assign_op, int, int,
                              assign_op_fcn);

  bool do_register_assignany_op (octave_value::assign_op, int,
                                 assignany_op_fcn);

  bool do_register_pref_assign_conv (int, int, int);

  bool do_register_widening_op (int, int, octave_base_value::type_conv_fcn);

  octave_value do_lookup_type (const std::string& nm);

  unary_class_op_fcn do_lookup_unary_class_op (octave_value::unary_op);

  unary_op_fcn do_lookup_unary_op (octave_value::unary_op, int);

  non_const_unary_op_fcn do_lookup_non_const_unary_op
    (octave_value::unary_op, int);

  binary_class_op_fcn do_lookup_binary_class_op (octave_value::binary_op);

  binary_op_fcn do_lookup_binary_op (octave_value::binary_op, int, int);

  binary_class_op_fcn do_lookup_binary_class_op (octave_value::compound_binary_op);

  binary_op_fcn do_lookup_binary_op (octave_value::compound_binary_op,
                                     int, int);

  cat_op_fcn do_lookup_cat_op (int, int);

  assign_op_fcn do_lookup_assign_op (octave_value::assign_op, int, int);

  assignany_op_fcn do_lookup_assignany_op (octave_value::assign_op, int);

  int do_lookup_pref_assign_conv (int, int);

  octave_base_value::type_conv_fcn do_lookup_widening_op (int, int);

  string_vector do_installed_type_names (void) const;

  octave_scalar_map do_installed_type_info (void) const;

  octave_scalar_map unary_ops_map (void) const;
  octave_scalar_map non_const_unary_ops_map (void) const;
  octave_scalar_map binary_ops_map (void) const;
  octave_scalar_map compound_binary_ops_map (void) const;
  octave_scalar_map assign_ops_map (void) const;
  octave_scalar_map assignany_ops_map (void) const;



  octave_value_typeinfo (const octave_value_typeinfo&);

  octave_value_typeinfo& operator = (const octave_value_typeinfo&);
};
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-fcn.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\set" 1 3
# 59 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\set" 3


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 1 3
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
namespace std
{
# 88 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
  template<typename _Key, typename _Compare = std::less<_Key>,
    typename _Alloc = std::allocator<_Key> >
    class set
    {

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:



      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;


    private:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;
      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;






      set()
      : _M_t() { }






      explicit
      set(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 165 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_unique(__first, __last); }
# 182 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 196 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      set(const set& __x)
      : _M_t(__x._M_t) { }
# 207 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      set(set&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 221 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      set(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      set(const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a)) { }


      set(const set& __x, const allocator_type& __a)
      : _M_t(__x._M_t, _Key_alloc_type(__a)) { }


      set(set&& __x, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__x._M_t), _Key_alloc_type(__a)) { }


      set(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        set(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Key_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 262 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      set&
      operator=(const set& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 278 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      set&
      operator=(set&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_t._M_move_assign(__x._M_t))
   {


     clear();
     insert(std::__make_move_if_noexcept_iterator(__x._M_t.begin()),
     std::__make_move_if_noexcept_iterator(__x._M_t.end()));
     __x.clear();
   }
       return *this;
      }
# 304 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      set&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 428 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      void
      swap(set& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }
# 450 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 476 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 498 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(__x);
 return std::pair<iterator, bool>(__p.first, __p.second);
      }


      std::pair<iterator, bool>
      insert(value_type&& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(std::move(__x));
 return std::pair<iterator, bool>(__p.first, __p.second);
      }
# 535 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_unique_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }
# 554 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_unique(__first, __last); }
# 567 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 588 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 619 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 640 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 668 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 682 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 700 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 721 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 737 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 762 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);

      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);
    };
# 791 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 808 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\set" 2 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 1 3
# 64 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
namespace std
{
# 90 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
  template <typename _Key, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<_Key> >
    class multiset
    {

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:

      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;





      multiset()
      : _M_t() { }






      explicit
      multiset(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 162 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 178 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 192 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      multiset(const multiset& __x)
      : _M_t(__x._M_t) { }
# 203 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      multiset(multiset&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 217 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      multiset(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multiset(const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a)) { }


      multiset(const multiset& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Key_alloc_type(__a)) { }


      multiset(multiset&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Key_alloc_type(__a)) { }


      multiset(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Key_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 258 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      multiset&
      operator=(const multiset& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 274 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      multiset&
      operator=(multiset&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_t._M_move_assign(__x._M_t))
   {


     clear();
     insert(std::__make_move_if_noexcept_iterator(__x._M_t.begin()),
     std::__make_move_if_noexcept_iterator(__x._M_t.end()));
     __x.clear();
   }
 return *this;
      }
# 300 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      multiset&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 424 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      void
      swap(multiset& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }
# 445 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 471 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 491 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }
# 521 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_equal_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }
# 539 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 552 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 573 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 604 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 625 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 653 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 664 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 682 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 703 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 719 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 744 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _K1, typename _C1, typename _A1>
        friend bool
        operator==(const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);

      template<typename _K1, typename _C1, typename _A1>
        friend bool
        operator< (const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);
    };
# 775 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 792 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multiset<_Key, _Compare, _Alloc>& __x,
       const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multiset<_Key,_Compare,_Alloc>& __x,
       const multiset<_Key,_Compare,_Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(multiset<_Key, _Compare, _Alloc>& __x,
  multiset<_Key, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 63 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\set" 2 3
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h" 2


# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/glob-match.h" 1
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/glob-match.h"
class

glob_match
{
public:

  enum opts
  {
    pathname = 1,
    noescape = 2,
    period = 4
  };

  glob_match (const std::string& p,
              unsigned int xopts = pathname | noescape | period)
    : pat (p), fnmatch_flags (opts_to_fnmatch_flags (xopts)) { }

  glob_match (const string_vector& p = string_vector (),
              unsigned int xopts = pathname | noescape | period)
    : pat (p), fnmatch_flags (opts_to_fnmatch_flags (xopts)) { }

  glob_match (const glob_match& gm)
    : pat (gm.pat), fnmatch_flags (gm.fnmatch_flags) { }

  glob_match& operator = (const glob_match& gm)
  {
    if (this != &gm)
      {
        pat = gm.pat;
        fnmatch_flags = gm.fnmatch_flags;
      }
    return *this;
  }

  ~glob_match (void) { }

  void set_pattern (const std::string& p) { pat = p; }

  void set_pattern (const string_vector& p) { pat = p; }

  bool match (const std::string& str) const;

  Array<bool> match (const string_vector& str) const
  {
    int n = str.numel ();

    Array<bool> retval (dim_vector (n, 1));

    for (int i = 0; i < n; i++)
      retval(i) = match (str[i]);

    return retval;
  }




  string_vector glob (void) const;

private:


  string_vector pat;


  int fnmatch_flags;

  int opts_to_fnmatch_flags (unsigned int xopts) const;
};
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-regexp.h" 1
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-regexp.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/base-list.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/base-list.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdlib" 3
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/base-list.h" 2



namespace octave
{
  template <typename elt_type>
  class
  base_list
  {
  public:

    typedef typename std::list<elt_type>::iterator iterator;
    typedef typename std::list<elt_type>::const_iterator const_iterator;

    typedef typename std::list<elt_type>::reverse_iterator reverse_iterator;
    typedef typename std::list<elt_type>::const_reverse_iterator
                                                     const_reverse_iterator;

    bool empty (void) const { return lst.empty (); }

    size_t size (void) const { return lst.size (); }
    size_t length (void) const { return size (); }

    iterator erase (iterator pos) { return lst.erase (pos); }

    template <typename P>
    void remove_if (P pred)
    {
      lst.remove_if (pred);
# 79 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/base-list.h"
    }

    void clear (void) { lst.clear (); }

    iterator begin (void) { return iterator (lst.begin ()); }
    const_iterator begin (void) const { return const_iterator (lst.begin ()); }

    iterator end (void) { return iterator (lst.end ()); }
    const_iterator end (void) const { return const_iterator (lst.end ()); }

    reverse_iterator rbegin (void) { return reverse_iterator (lst.rbegin ()); }
    const_reverse_iterator rbegin (void) const
    { return const_reverse_iterator (lst.rbegin ()); }

    reverse_iterator rend (void) { return reverse_iterator (lst.rend ()); }
    const_reverse_iterator rend (void) const
    { return const_reverse_iterator (lst.rend ()); }

    elt_type& front (void) { return lst.front (); }
    elt_type& back (void) { return lst.back (); }

    const elt_type& front (void) const { return lst.front (); }
    const elt_type& back (void) const { return lst.back (); }

    void push_front (const elt_type& s) { lst.push_front (s); }
    void push_back (const elt_type& s) { lst.push_back (s); }

    void pop_front (void) { lst.pop_front (); }
    void pop_back (void) { lst.pop_back (); }


    void append (const elt_type& s) { lst.push_back (s); }

    base_list (void) : lst () { }

    base_list (const std::list<elt_type>& l) : lst (l) { }

    base_list (const base_list& bl) : lst (bl.lst) { }

    base_list& operator = (const base_list& bl)
    {
      if (this != &bl)
        {
          lst = bl.lst;
        }
      return *this;
    }

    virtual ~base_list (void) { }

  private:

    std::list<elt_type> lst;
  };
}
# 36 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-regexp.h" 2


namespace octave
{
  class

  regexp
  {
  public:

    class opts;
    class match_data;

    regexp (const std::string& pat = "",
            const regexp::opts& opt = regexp::opts (),
            const std::string& w = "regexp")
      : pattern (pat), options (opt), data (0), named_pats (),
        nnames (0), named_idx (), who (w)
    {
      compile_internal ();
    }

    regexp (const regexp& rx)
      : pattern (rx.pattern), data (rx.data), named_pats (rx.named_pats),
        nnames (rx.nnames), named_idx (rx.named_idx)
    { }

    regexp& operator = (const regexp& rx)
    {
      if (this != &rx)
        {
          pattern = rx.pattern;
          data = rx.data;
          named_pats = rx.named_pats;
          nnames = rx.nnames;
          named_idx = rx.named_idx;
        }

      return *this;
    }

    ~regexp (void) { free (); }

    void compile (const std::string& pat,
                  const regexp::opts& opt = regexp::opts ())
    {
      pattern = pat;
      options = opt;
      compile_internal ();
    }

    match_data match (const std::string& buffer);

    bool is_match (const std::string& buffer);

    Array<bool> is_match (const string_vector& buffer);

    std::string replace (const std::string& buffer,
                         const std::string& replacement);

    static regexp::match_data
    match (const std::string& pat, const std::string& buffer,
           const regexp::opts& opt = regexp::opts (),
           const std::string& who = "regexp")
    {
      regexp rx (pat, opt, who);

      return rx.match (buffer);
    }

    static bool
    is_match (const std::string& pat, const std::string& buffer,
              const regexp::opts& opt = regexp::opts (),
              const std::string& who = "regexp")
    {
      regexp rx (pat, opt, who);

      return rx.is_match (buffer);
    }

    static Array<bool>
    is_match (const std::string& pat, const string_vector& buffer,
              const regexp::opts& opt = regexp::opts (),
              const std::string& who = "regexp")
    {
      regexp rx (pat, opt, who);

      return rx.is_match (buffer);
    }

    static std::string
    replace (const std::string& pat, const std::string& buffer,
             const std::string& replacement,
             const regexp::opts& opt = regexp::opts (),
             const std::string& who = "regexp")
    {
      regexp rx (pat, opt, who);

      return rx.replace (buffer, replacement);
    }

    class opts
    {
    public:

      opts (void)
        : x_case_insensitive (false), x_dotexceptnewline (false),
          x_emptymatch (false), x_freespacing (false), x_lineanchors (false),
          x_once (false) { }

      opts (const opts& o)
        : x_case_insensitive (o.x_case_insensitive),
          x_dotexceptnewline (o.x_dotexceptnewline),
          x_emptymatch (o.x_emptymatch),
          x_freespacing (o.x_freespacing),
          x_lineanchors (o.x_lineanchors),
          x_once (o.x_once)
      { }

      opts& operator = (const opts& o)
      {
        if (this != &o)
          {
            x_case_insensitive = o.x_case_insensitive;
            x_dotexceptnewline = o.x_dotexceptnewline;
            x_emptymatch = o.x_emptymatch;
            x_freespacing = o.x_freespacing;
            x_lineanchors = o.x_lineanchors;
            x_once = o.x_once;
          }

        return *this;
      }

      ~opts (void) { }

      void case_insensitive (bool val) { x_case_insensitive = val; }
      void dotexceptnewline (bool val) { x_dotexceptnewline = val; }
      void emptymatch (bool val) { x_emptymatch = val; }
      void freespacing (bool val) { x_freespacing = val; }
      void lineanchors (bool val) { x_lineanchors = val; }
      void once (bool val) { x_once = val; }

      bool case_insensitive (void) const { return x_case_insensitive; }
      bool dotexceptnewline (void) const { return x_dotexceptnewline; }
      bool emptymatch (void) const { return x_emptymatch; }
      bool freespacing (void) const { return x_freespacing; }
      bool lineanchors (void) const { return x_lineanchors; }
      bool once (void) const { return x_once; }

    private:

      bool x_case_insensitive;
      bool x_dotexceptnewline;
      bool x_emptymatch;
      bool x_freespacing;
      bool x_lineanchors;
      bool x_once;
    };

    class match_element
    {
    public:

      match_element (const string_vector& nt, const string_vector& t,
                     const std::string& ms, const Matrix& te,
                     double s, double e)
        : x_match_string (ms), x_named_tokens (nt), x_tokens (t),
          x_token_extents (te), x_start (s), x_end (e)
      { }

      match_element (const match_element &a)
        : x_match_string (a.x_match_string),
          x_named_tokens (a.x_named_tokens), x_tokens (a.x_tokens),
          x_token_extents (a.x_token_extents),
          x_start (a.x_start), x_end (a.x_end)
      { }

      std::string match_string (void) const { return x_match_string; }
      string_vector named_tokens (void) const { return x_named_tokens; }
      string_vector tokens (void) const { return x_tokens; }
      Matrix token_extents (void) const { return x_token_extents; }
      double start (void) const { return x_start; }
      double end (void) const { return x_end; }

    private:

      std::string x_match_string;
      string_vector x_named_tokens;
      string_vector x_tokens;
      Matrix x_token_extents;
      double x_start;
      double x_end;
    };

    class match_data : public base_list<match_element>
    {
    public:

      match_data (void)
        : base_list<match_element> (), named_pats ()
      { }

      match_data (const std::list<match_element>& l, const string_vector& np)
        : base_list<match_element> (l), named_pats (np)
      { }

      match_data (const match_data& rx_lst)
        : base_list<match_element> (rx_lst),
          named_pats (rx_lst.named_pats)
      { }

      match_data& operator = (const match_data& rx_lst)
      {
        if (this != &rx_lst)
          {
            base_list<match_element>::operator = (rx_lst);
            named_pats = rx_lst.named_pats;
          }

        return *this;
      }

      ~match_data (void) { }

      string_vector named_patterns (void) { return named_pats; }

    private:

      string_vector named_pats;
    };

  private:


    std::string pattern;

    opts options;


    void *data;

    std::string m;
    string_vector named_pats;
    int nnames;
    Array<int> named_idx;
    std::string who;

    void free (void);

    void compile_internal (void);
  };
}



__attribute__ ((__deprecated__))
typedef octave::regexp regexp;

__attribute__ ((__deprecated__))
inline regexp::match_data
regexp_match (const std::string& pat,
              const std::string& buffer,
              const regexp::opts& opt = regexp::opts (),
              const std::string& who = "regexp")
{
  return octave::regexp::match (pat, buffer, opt, who);
}

__attribute__ ((__deprecated__))
inline bool
is_regexp_match (const std::string& pat,
                 const std::string& buffer,
                 const regexp::opts& opt = regexp::opts (),
                 const std::string& who = "regexp")
{
  return octave::regexp::is_match (pat, buffer, opt, who);
}

__attribute__ ((__deprecated__))
inline Array<bool>
is_regexp_match (const std::string& pat,
                 const string_vector& buffer,
                 const regexp::opts& opt = regexp::opts (),
                 const std::string& who = "regexp")
{
  return octave::regexp::is_match (pat, buffer, opt, who);
}

__attribute__ ((__deprecated__))
inline std::string
regexp_replace (const std::string& pat,
                const std::string& buffer,
                const std::string& replacement,
                const regexp::opts& opt = regexp::opts (),
                const std::string& who = "regexp")
{
  return octave::regexp::replace (pat, buffer, replacement, opt, who);
}
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h" 2

class tree_argument_list;
class octave_user_function;



# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/workspace-element.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/workspace-element.h"
class workspace_element
{
public:

  workspace_element (char scope_arg = 'l',
                     const std::string& symbol_arg = "<name>",
                     const std::string& class_name_arg = "<class>",
                     const std::string& value_arg = "<value>",
                     const std::string& dimension_arg = "<dimension>",
                     bool complex_flag_arg = false)
    : xscope (scope_arg), xsymbol (symbol_arg),
      xclass_name (class_name_arg), xvalue (value_arg),
      xdimension (dimension_arg), xcomplex_flag (complex_flag_arg)
  { }

  workspace_element (const workspace_element& ws_elt)
    : xscope (ws_elt.xscope), xsymbol (ws_elt.xsymbol),
      xclass_name (ws_elt.xclass_name), xvalue (ws_elt.xvalue),
      xdimension (ws_elt.xdimension), xcomplex_flag (ws_elt.xcomplex_flag)
  { }

  workspace_element operator = (const workspace_element& ws_elt)
  {
    if (this != &ws_elt)
      {
        xscope = ws_elt.xscope;
        xsymbol = ws_elt.xsymbol;
        xclass_name = ws_elt.xclass_name;
        xvalue = ws_elt.xvalue;
        xdimension = ws_elt.xdimension;
        xcomplex_flag = ws_elt.xcomplex_flag;
      }

    return *this;
  }

  ~workspace_element (void) { }

  char scope (void) const { return xscope; }

  std::string symbol (void) const { return xsymbol; }

  std::string class_name (void) const { return xclass_name; }

  std::string value (void) const { return xvalue; }

  std::string dimension (void) const { return xdimension; }

  bool complex_flag (void) const { return xcomplex_flag; }

private:


  char xscope;
  std::string xsymbol;
  std::string xclass_name;
  std::string xvalue;
  std::string xdimension;
  bool xcomplex_flag;
};
# 43 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h" 2



class

symbol_table
{
public:

  static octave_value dummy_octave_value;

  typedef int scope_id;
  typedef size_t context_id;

  class
  scope_id_cache
  {
  protected:

    typedef std::set<scope_id>::iterator set_iterator;
    typedef std::set<scope_id>::const_iterator set_const_iterator;




    scope_id_cache (void) : next_available (2), in_use (), free_list () { }

  public:

    ~scope_id_cache (void) { }

    static scope_id alloc (void)
    {
      return instance_ok () ? instance->do_alloc () : -1;
    }

    static void free (scope_id scope)
    {
      if (instance_ok ())
        return instance->do_free (scope);
    }

    static std::list<scope_id> scopes (void)
    {
      return instance_ok () ? instance->do_scopes () : std::list<scope_id> ();
    }

    static void create_instance (void);

    static bool instance_ok (void)
    {
      bool retval = true;

      if (! instance)
        create_instance ();

      if (! instance)
        error ("unable to create scope_id_cache object!");

      return retval;
    }

  private:



    scope_id_cache (const scope_id_cache&);

    scope_id_cache& operator = (const scope_id_cache&);

    static scope_id_cache *instance;

    static void cleanup_instance (void) { delete instance; instance = 0; }


    scope_id next_available;


    std::set<scope_id> in_use;


    std::set<scope_id> free_list;

    scope_id do_alloc (void)
    {
      scope_id retval;

      set_iterator p = free_list.begin ();

      if (p != free_list.end ())
        {
          retval = *p;
          free_list.erase (p);
        }
      else
        retval = next_available++;

      in_use.insert (retval);

      return retval;
    }

    void do_free (scope_id scope)
    {
      set_iterator p = in_use.find (scope);

      if (p == in_use.end ())
        error ("free_scope: scope %d not found!", scope);

      in_use.erase (p);
      free_list.insert (scope);
    }

    std::list<scope_id> do_scopes (void) const
    {
      std::list<scope_id> retval;

      for (set_const_iterator p = in_use.begin (); p != in_use.end (); p++)
        retval.push_back (*p);

      retval.sort ();

      return retval;
    }
  };

  class fcn_info;

  class
  symbol_record
  {
  public:


    static const unsigned int local = 1;



    static const unsigned int automatic = 2;


    static const unsigned int formal = 4;


    static const unsigned int hidden = 8;


    static const unsigned int inherited = 16;


    static const unsigned int global = 32;


    static const unsigned int persistent = 64;



    static const unsigned int added_static = 128;

  private:

    class
    symbol_record_rep
    {
    public:

      symbol_record_rep (scope_id s, const std::string& nm,
                         const octave_value& v, unsigned int sc)
        : decl_scope (s), curr_fcn (0), name (nm), value_stack (),
          storage_class (sc), finfo (), valid (true), count (1)
      {
        value_stack.push_back (v);
      }

      void assign (const octave_value& value,
                   context_id context = xdefault_context)
      {
        varref (context) = value;
      }

      void assign (octave_value::assign_op op,
                   const std::string& type,
                   const std::list<octave_value_list>& idx,
                   const octave_value& value,
                   context_id context = xdefault_context)
      {
        varref(context).assign (op, type, idx, value);
      }

      void assign (octave_value::assign_op op, const octave_value& value,
                   context_id context = xdefault_context)
      {
        varref(context).assign (op, value);
      }

      void do_non_const_unary_op (octave_value::unary_op op,
                                  context_id context = xdefault_context)
      {
        varref(context).do_non_const_unary_op (op);
      }

      void do_non_const_unary_op (octave_value::unary_op op,
                                  const std::string& type,
                                  const std::list<octave_value_list>& idx,
                                  context_id context = xdefault_context)
      {
        varref(context).do_non_const_unary_op (op, type, idx);
      }

      octave_value& varref (context_id context = xdefault_context)
      {



        if (is_global ())
          {
            symbol_table::global_table_iterator p
              = symbol_table::global_table.find (name);

            return (p == symbol_table::global_table.end ())
                   ? symbol_table::global_table[name] : p->second;
          }
        else if (is_persistent ())
          {
            symbol_table *inst
              = symbol_table::get_instance (symbol_table::current_scope ());

            return inst ? inst->do_persistent_varref (name) : dummy_octave_value;
          }
        else
          {
            if (context == xdefault_context)
              context = active_context ();

            context_id n = value_stack.size ();
            while (n++ <= context)
              value_stack.push_back (octave_value ());

            return value_stack[context];
          }
      }

      octave_value varval (context_id context = xdefault_context) const
      {
        if (is_global ())
          return symbol_table::global_varval (name);
        else if (is_persistent ())
          return symbol_table::persistent_varval (name);
        else
          {
            if (context == xdefault_context)
              context = active_context ();

            if (context < value_stack.size ())
              return value_stack[context];
            else
              return octave_value ();
          }
      }

      void push_context (scope_id s)
      {
        if (! (is_persistent () || is_global ())
            && s == scope ())
          value_stack.push_back (octave_value ());
      }
# 324 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h"
      size_t pop_context (scope_id s)
      {
        size_t retval = 1;

        if (! (is_persistent () || is_global ())
            && s == scope ())
          {
            value_stack.pop_back ();
            retval = value_stack.size ();
          }

        return retval;
      }

      void clear (void) { clear (scope ()); }

      void clear (scope_id s)
      {
        if (! (is_hidden () || is_inherited ())
            && s == scope ())
          {
            if (is_global ())
              unmark_global ();

            if (is_persistent ())
              {
                symbol_table::persistent_assign (name, varval ());

                unmark_persistent ();
              }

            assign (octave_value ());
          }
      }

      bool is_defined (context_id context = xdefault_context) const
      {
        if (context == xdefault_context)
          context = active_context ();

        return varval (context).is_defined ();
      }

      bool is_valid (void) const
      {
        return valid;
      }

      bool is_variable (context_id context) const
      {
        if (context == xdefault_context)
          context = active_context ();

        return (! is_local () || is_defined (context));
      }

      bool is_local (void) const { return storage_class & local; }
      bool is_automatic (void) const { return storage_class & automatic; }
      bool is_formal (void) const { return storage_class & formal; }
      bool is_hidden (void) const { return storage_class & hidden; }
      bool is_inherited (void) const { return storage_class & inherited; }
      bool is_global (void) const { return storage_class & global; }
      bool is_persistent (void) const { return storage_class & persistent; }
      bool is_added_static (void) const {return storage_class & added_static; }

      void mark_local (void) { storage_class |= local; }
      void mark_automatic (void) { storage_class |= automatic; }
      void mark_formal (void) { storage_class |= formal; }
      void mark_hidden (void) { storage_class |= hidden; }
      void mark_inherited (void) { storage_class |= inherited; }
      void mark_global (void)
      {
        if (is_persistent ())
          error ("can't make persistent variable %s global", name.c_str ());

        storage_class |= global;
      }
      void mark_persistent (void)
      {
        if (is_global ())
          error ("can't make global variable %s persistent", name.c_str ());

        storage_class |= persistent;
      }
      void mark_added_static (void) { storage_class |= added_static; }

      void unmark_local (void) { storage_class &= ~local; }
      void unmark_automatic (void) { storage_class &= ~automatic; }
      void unmark_formal (void) { storage_class &= ~formal; }
      void unmark_hidden (void) { storage_class &= ~hidden; }
      void unmark_inherited (void) { storage_class &= ~inherited; }
      void unmark_global (void) { storage_class &= ~global; }
      void unmark_persistent (void) { storage_class &= ~persistent; }
      void unmark_added_static (void) { storage_class &= ~added_static; }

      void init_persistent (void)
      {
        if (! is_defined ())
          {
            mark_persistent ();

            assign (symbol_table::persistent_varval (name));
          }



      }

      void invalidate (void)
      {
        valid = false;
      }

      void erase_persistent (void)
      {
        unmark_persistent ();
        symbol_table::erase_persistent (name);
      }

                    context_id active_context (void) const;

      scope_id scope (void) const { return decl_scope; }

      void set_curr_fcn (octave_user_function *fcn)
      {
        curr_fcn = fcn;
      }

      symbol_record_rep *dup (scope_id new_scope) const
      {
        return new symbol_record_rep (new_scope, name, varval (),
                                      storage_class);
      }

      void dump (std::ostream& os, const std::string& prefix) const;

      scope_id decl_scope;

      octave_user_function* curr_fcn;

      std::string name;

      std::deque<octave_value> value_stack;

      unsigned int storage_class;

      fcn_info *finfo;

      bool valid;

      octave_refcount<size_t> count;

    private:



      symbol_record_rep (const symbol_record_rep& ov);

      symbol_record_rep& operator = (const symbol_record_rep&);
    };

  public:

    symbol_record (scope_id s = xcurrent_scope,
                   const std::string& nm = "",
                   const octave_value& v = octave_value (),
                   unsigned int sc = local)
      : rep (new symbol_record_rep (s, nm, v, sc)) { }

    symbol_record (const symbol_record& sr)
      : rep (sr.rep)
    {
      rep->count++;
    }

    symbol_record& operator = (const symbol_record& sr)
    {
      if (this != &sr)
        {
          if (--rep->count == 0)
            delete rep;

          rep = sr.rep;
          rep->count++;
        }

      return *this;
    }

    ~symbol_record (void)
    {
      if (--rep->count == 0)
        delete rep;
    }

    symbol_record dup (scope_id new_scope) const
    {
      return symbol_record (rep->dup (new_scope));
    }

    const std::string& name (void) const { return rep->name; }

    void rename (const std::string& new_name) { rep->name = new_name; }

    octave_value
    find (const octave_value_list& args = octave_value_list ()) const;

    void assign (const octave_value& value,
                 context_id context = xdefault_context)
    {
      rep->assign (value, context);
    }

    void assign (octave_value::assign_op op,
                 const std::string& type,
                 const std::list<octave_value_list>& idx,
                 const octave_value& value,
                 context_id context = xdefault_context)
    {
      rep->assign (op, type, idx, value, context);
    }

    void assign (octave_value::assign_op op, const octave_value& value,
                 context_id context = xdefault_context)
    {
      rep->assign (op, value, context);
    }

    void do_non_const_unary_op (octave_value::unary_op op)
    {
      rep->do_non_const_unary_op (op);
    }

    void do_non_const_unary_op (octave_value::unary_op op,
                                const std::string& type,
                                const std::list<octave_value_list>& idx)
    {
      rep->do_non_const_unary_op (op, type, idx);
    }


    octave_value& varref (context_id context = xdefault_context)
    {
      return rep->varref (context);
    }

    octave_value varval (context_id context = xdefault_context) const
    {
      return rep->varval (context);
    }

    void push_context (scope_id s) { rep->push_context (s); }

    size_t pop_context (scope_id s) { return rep->pop_context (s); }

    void clear (void) { rep->clear (); }

    void clear (scope_id s) { rep->clear (s); }

    bool is_defined (context_id context = xdefault_context) const
    {
      return rep->is_defined (context);
    }

    bool is_undefined (context_id context = xdefault_context) const
    {
      return ! rep->is_defined (context);
    }

    bool is_valid (void) const
    {
      return rep->is_valid ();
    }

    bool is_variable (context_id context = xdefault_context) const
    {
      return rep->is_variable (context);
    }

    bool is_local (void) const { return rep->is_local (); }
    bool is_automatic (void) const { return rep->is_automatic (); }
    bool is_formal (void) const { return rep->is_formal (); }
    bool is_global (void) const { return rep->is_global (); }
    bool is_hidden (void) const { return rep->is_hidden (); }
    bool is_inherited (void) const { return rep->is_inherited (); }
    bool is_persistent (void) const { return rep->is_persistent (); }
    bool is_added_static (void) const { return rep->is_added_static (); }

    void mark_local (void) { rep->mark_local (); }
    void mark_automatic (void) { rep->mark_automatic (); }
    void mark_formal (void) { rep->mark_formal (); }
    void mark_hidden (void) { rep->mark_hidden (); }
    void mark_inherited (void) { rep->mark_inherited (); }
    void mark_global (void) { rep->mark_global (); }
    void mark_persistent (void) { rep->mark_persistent (); }
    void mark_added_static (void) { rep->mark_added_static (); }

    void unmark_local (void) { rep->unmark_local (); }
    void unmark_automatic (void) { rep->unmark_automatic (); }
    void unmark_formal (void) { rep->unmark_formal (); }
    void unmark_hidden (void) { rep->unmark_hidden (); }
    void unmark_inherited (void) { rep->unmark_inherited (); }
    void unmark_global (void) { rep->unmark_global (); }
    void unmark_persistent (void) { rep->unmark_persistent (); }
    void unmark_added_static (void) { rep->unmark_added_static (); }

    void init_persistent (void) { rep->init_persistent (); }

    void erase_persistent (void) { rep->erase_persistent (); }

    void invalidate (void) { rep->invalidate (); }

    context_id active_context (void) const { return rep->active_context (); }

    scope_id scope (void) const { return rep->scope (); }

    unsigned int xstorage_class (void) const { return rep->storage_class; }

    void set_curr_fcn (octave_user_function *fcn) { rep->set_curr_fcn (fcn); }

    void
    dump (std::ostream& os, const std::string& prefix = "") const
    {
      rep->dump (os, prefix);
    }

  private:

    symbol_record_rep *rep;

    symbol_record (symbol_record_rep *new_rep) : rep (new_rep) { }
  };

  static symbol_record dummy_symbol_record;



  class
  symbol_reference
  {
  public:

    symbol_reference (void) : scope (-1) { }

    symbol_reference (const symbol_record& record,
                      scope_id curr_scope = symbol_table::current_scope ())
      : scope (curr_scope), sym (record)
    { }

    symbol_reference (const symbol_reference& ref)
      : scope (ref.scope), sym (ref.sym)
    { }

    symbol_reference& operator = (const symbol_reference& ref)
    {
      if (this != &ref)
        {
          scope = ref.scope;
          sym = ref.sym;
        }
      return *this;
    }

    bool is_black_hole (void) const { return scope < 0; }


    const std::string& name (void) const { return sym.name (); }

    symbol_record *operator-> (void)
    {
      update ();
      return &sym;
    }

    symbol_record *operator-> (void) const
    {
      update ();
      return &sym;
    }



    struct comparator
    {
      bool operator ()(const symbol_reference& lhs,
                       const symbol_reference& rhs) const
      {
        return lhs.name () < rhs.name ();
      }
    };
  private:

    void update (void) const
    {
      scope_id curr_scope = symbol_table::current_scope ();

      if (scope != curr_scope || ! sym.is_valid ())
        {
          scope = curr_scope;
          sym = symbol_table::insert (sym.name ());
        }
    }

    mutable scope_id scope;
    mutable symbol_record sym;
  };

  class
  fcn_info
  {
  public:

    typedef std::map<std::string, std::string> dispatch_map_type;

    typedef std::map<scope_id, octave_value>::const_iterator
      scope_val_const_iterator;
    typedef std::map<scope_id, octave_value>::iterator scope_val_iterator;

    typedef std::map<std::string, octave_value>::const_iterator
      str_val_const_iterator;
    typedef std::map<std::string, octave_value>::iterator str_val_iterator;

    typedef dispatch_map_type::const_iterator dispatch_map_const_iterator;
    typedef dispatch_map_type::iterator dispatch_map_iterator;

  private:

    class
    fcn_info_rep
    {
    public:

      fcn_info_rep (const std::string& nm)
        : name (nm), package_name (), subfunctions (), private_functions (),
          class_constructors (), class_methods (), dispatch_map (),
          cmdline_function (), autoload_function (), function_on_path (),
          built_in_function (), count (1)
      {
        size_t pos = name.rfind ('.');

        if (pos != std::string::npos)
          {
            package_name = name.substr (0, pos);
            name = name.substr (pos+1);
          }
      }

      octave_value load_private_function (const std::string& dir_name);

      octave_value load_class_constructor (void);

      octave_value load_class_method (const std::string& dispatch_type);

      octave_value find (const octave_value_list& args, bool local_funcs);

      octave_value builtin_find (void);

      octave_value find_method (const std::string& dispatch_type);

      octave_value find_autoload (void);

      octave_value find_package (void);

      octave_value find_user_function (void);

      bool is_user_function_defined (void) const
      {
        return function_on_path.is_defined ();
      }

      octave_value find_function (const octave_value_list& args,
                                  bool local_funcs)
      {
        return find (args, local_funcs);
      }

      void lock_subfunction (scope_id scope)
      {
        scope_val_iterator p = subfunctions.find (scope);

        if (p != subfunctions.end ())
          p->second.lock ();
      }

      void unlock_subfunction (scope_id scope)
      {
        scope_val_iterator p = subfunctions.find (scope);

        if (p != subfunctions.end ())
          p->second.unlock ();
      }

      std::pair<std::string, octave_value>
      subfunction_defined_in_scope (scope_id scope) const
      {
        scope_val_const_iterator p = subfunctions.find (scope);

        return p == subfunctions.end ()
               ? std::pair<std::string, octave_value> ()
               : std::pair<std::string, octave_value> (name, p->second);
      }

      void erase_subfunction (scope_id scope)
      {
        scope_val_iterator p = subfunctions.find (scope);

        if (p != subfunctions.end ())
          subfunctions.erase (p);
      }

      void mark_subfunction_in_scope_as_private (scope_id scope,
                                                 const std::string& class_name);

      void install_cmdline_function (const octave_value& f)
      {
        cmdline_function = f;
      }

      void install_subfunction (const octave_value& f, scope_id scope)
      {
        subfunctions[scope] = f;
      }

      void install_user_function (const octave_value& f)
      {
        function_on_path = f;
      }

      void install_built_in_function (const octave_value& f)
      {
        built_in_function = f;
      }

      template <typename T>
      void
      clear_map (std::map<T, octave_value>& map, bool force = false)
      {
        typename std::map<T, octave_value>::iterator p = map.begin ();

        while (p != map.end ())
          {
            if (force || ! p->second.islocked ())
              map.erase (p++);
            else
              p++;
          }
      }

      void clear_autoload_function (bool force = false)
      {
        if (force || ! autoload_function.islocked ())
          autoload_function = octave_value ();
      }



      void clear_user_function (bool force = false)
      {
        clear_autoload_function (force);

        if (force || ! function_on_path.islocked ())
          function_on_path = octave_value ();

        if (force || ! cmdline_function.islocked ())
          cmdline_function = octave_value ();
      }

      void clear_mex_function (void)
      {
        if (function_on_path.is_mex_function ())
          clear_user_function ();
      }

      void clear_package (void)
      {
        package = octave_value ();
      }

      void clear (bool force = false)
      {
        clear_map (subfunctions, force);
        clear_map (private_functions, force);
        clear_map (class_constructors, force);
        clear_map (class_methods, force);

        clear_autoload_function (force);
        clear_user_function (force);
        clear_package ();
      }

      void add_dispatch (const std::string& type, const std::string& fname)
      {
        dispatch_map[type] = fname;
      }

      void clear_dispatch (const std::string& type)
      {
        dispatch_map_iterator p = dispatch_map.find (type);

        if (p != dispatch_map.end ())
          dispatch_map.erase (p);
      }

      void print_dispatch (std::ostream& os) const;

      std::string help_for_dispatch (void) const;

      dispatch_map_type get_dispatch (void) const { return dispatch_map; }

      void dump (std::ostream& os, const std::string& prefix) const;

      std::string full_name (void) const
      {
        if (package_name.empty ())
          return name;
        else
          return package_name + "." + name;
      }

      std::string name;

      std::string package_name;


      std::map<scope_id, octave_value> subfunctions;


      std::map<std::string, octave_value> private_functions;


      std::map<std::string, octave_value> class_constructors;


      std::map<std::string, octave_value> class_methods;


      dispatch_map_type dispatch_map;

      octave_value cmdline_function;

      octave_value autoload_function;

      octave_value function_on_path;

      octave_value package;

      octave_value built_in_function;

      octave_refcount<size_t> count;

    private:

      octave_value xfind (const octave_value_list& args, bool local_funcs);

      octave_value x_builtin_find (void);



      fcn_info_rep (const fcn_info_rep&);

      fcn_info_rep& operator = (const fcn_info_rep&);
    };

  public:

    fcn_info (const std::string& nm = "")
      : rep (new fcn_info_rep (nm)) { }

    fcn_info (const fcn_info& fi) : rep (fi.rep)
    {
      rep->count++;
    }

    fcn_info& operator = (const fcn_info& fi)
    {
      if (this != &fi)
        {
          if (--rep->count == 0)
            delete rep;

          rep = fi.rep;
          rep->count++;
        }

      return *this;
    }

    ~fcn_info (void)
    {
      if (--rep->count == 0)
        delete rep;
    }

    octave_value find (const octave_value_list& args = octave_value_list (),
                       bool local_funcs = true)
    {
      return rep->find (args, local_funcs);
    }

    octave_value builtin_find (void)
    {
      return rep->builtin_find ();
    }

    octave_value find_method (const std::string& dispatch_type) const
    {
      return rep->find_method (dispatch_type);
    }

    octave_value find_built_in_function (void) const
    {
      return rep->built_in_function;
    }

    octave_value find_cmdline_function (void) const
    {
      return rep->cmdline_function;
    }

    octave_value find_autoload (void)
    {
      return rep->find_autoload ();
    }

    octave_value find_user_function (void)
    {
      return rep->find_user_function ();
    }

    bool is_user_function_defined (void) const
    {
      return rep->is_user_function_defined ();
    }

    octave_value find_function (const octave_value_list& args
                                = octave_value_list (),
                                bool local_funcs = true)
    {
      return rep->find_function (args, local_funcs);
    }

    void lock_subfunction (scope_id scope)
    {
      rep->lock_subfunction (scope);
    }

    void unlock_subfunction (scope_id scope)
    {
      rep->unlock_subfunction (scope);
    }

    std::pair<std::string, octave_value>
    subfunction_defined_in_scope (scope_id scope = xcurrent_scope) const
    {
      return rep->subfunction_defined_in_scope (scope);
    }

    void erase_subfunction (scope_id scope)
    {
      rep->erase_subfunction (scope);
    }

    void mark_subfunction_in_scope_as_private (scope_id scope,
                                               const std::string& class_name)
    {
      rep->mark_subfunction_in_scope_as_private (scope, class_name);
    }

    void install_cmdline_function (const octave_value& f)
    {
      rep->install_cmdline_function (f);
    }

    void install_subfunction (const octave_value& f, scope_id scope)
    {
      rep->install_subfunction (f, scope);
    }

    void install_user_function (const octave_value& f)
    {
      rep->install_user_function (f);
    }

    void install_built_in_function (const octave_value& f)
    {
      rep->install_built_in_function (f);
    }

    void clear (bool force = false) { rep->clear (force); }

    void clear_user_function (bool force = false)
    {
      rep->clear_user_function (force);
    }

    void clear_autoload_function (bool force = false)
    {
      rep->clear_autoload_function (force);
    }

    void clear_mex_function (void) { rep->clear_mex_function (); }

    void add_dispatch (const std::string& type, const std::string& fname)
    {
      rep->add_dispatch (type, fname);
    }

    void clear_dispatch (const std::string& type)
    {
      rep->clear_dispatch (type);
    }

    void print_dispatch (std::ostream& os) const
    {
      rep->print_dispatch (os);
    }

    std::string help_for_dispatch (void) const
    { return rep->help_for_dispatch (); }

    dispatch_map_type get_dispatch (void) const
    {
      return rep->get_dispatch ();
    }

    void
    dump (std::ostream& os, const std::string& prefix = "") const
    {
      rep->dump (os, prefix);
    }

  private:

    fcn_info_rep *rep;
  };

  static scope_id global_scope (void) { return xglobal_scope; }
  static scope_id top_scope (void) { return xtop_scope; }

  static scope_id current_scope (void) { return xcurrent_scope; }

  static context_id current_context (void) { return xcurrent_context; }

  static scope_id alloc_scope (void) { return scope_id_cache::alloc (); }

  static void set_scope (scope_id scope)
  {
    if (scope == xglobal_scope)
      error ("can't set scope to global");

    if (scope != xcurrent_scope)
      {
        all_instances_iterator p = all_instances.find (scope);

        if (p == all_instances.end ())
          {
            symbol_table *inst = new symbol_table (scope);

            if (inst)
              all_instances[scope] = instance = inst;
          }
        else
          instance = p->second;

        xcurrent_scope = scope;
        xcurrent_context = 0;
      }
  }

  static void set_scope_and_context (scope_id scope, context_id context)
  {
    if (scope == xglobal_scope)
      error ("can't set scope to global");

    if (scope != xcurrent_scope)
      {
        all_instances_iterator p = all_instances.find (scope);

        if (p == all_instances.end ())
          error ("scope not found!");

        instance = p->second;

        xcurrent_scope = scope;

        xcurrent_context = context;
      }
    else
      xcurrent_context = context;
  }

  static void erase_scope (scope_id scope)
  {
    (void) ((!!(scope != xglobal_scope)) || (_assert("scope != xglobal_scope","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h",1217),0));

    erase_subfunctions_in_scope (scope);

    all_instances_iterator p = all_instances.find (scope);

    if (p != all_instances.end ())
      {
        delete p->second;

        all_instances.erase (p);

        free_scope (scope);
      }
  }

  static void erase_subfunctions_in_scope (scope_id scope)
  {
    for (fcn_table_iterator q = fcn_table.begin (); q != fcn_table.end (); q++)
      q->second.erase_subfunction (scope);
  }

  static void
  mark_subfunctions_in_scope_as_private (scope_id scope,
                                         const std::string& class_name)
  {
    for (fcn_table_iterator q = fcn_table.begin (); q != fcn_table.end (); q++)
      q->second.mark_subfunction_in_scope_as_private (scope, class_name);
  }

  static scope_id dup_scope (scope_id scope)
  {
    scope_id retval = -1;

    symbol_table *inst = get_instance (scope);

    if (inst)
      {
        scope_id new_scope = alloc_scope ();

        symbol_table *new_symbol_table = new symbol_table (scope);

        if (new_symbol_table)
          {
            all_instances[new_scope] = new_symbol_table;

            inst->do_dup_scope (*new_symbol_table);

            retval = new_scope;
          }
      }

    return retval;
  }

  static std::list<scope_id> scopes (void)
  {
    return scope_id_cache::scopes ();
  }

  static symbol_record
  find_symbol (const std::string& name, scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_find_symbol (name) :
      symbol_record (scope);
  }

  static void
  inherit (scope_id scope, scope_id donor_scope, context_id donor_context)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      {
        symbol_table *donor_symbol_table = get_instance (donor_scope);

        if (donor_symbol_table)
          inst->do_inherit (*donor_symbol_table, donor_context);
      }
  }

  static bool at_top_level (void) { return xcurrent_scope == xtop_scope; }


  static octave_value
  find (const std::string& name,
        const octave_value_list& args = octave_value_list (),
        bool skip_variables = false,
        bool local_funcs = true);

  static octave_value builtin_find (const std::string& name);


  static symbol_record& insert (const std::string& name,
                                scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_insert (name) : symbol_table::dummy_symbol_record;
  }

  static void rename (const std::string& old_name,
                      const std::string& new_name,
                      scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_rename (old_name, new_name);
  }

  static void assign (const std::string& name,
                      const octave_value& value = octave_value (),
                      scope_id scope = xcurrent_scope,
                      context_id context = xdefault_context,
                      bool force_add = false)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_assign (name, value, context, force_add);
  }

  __attribute__ ((__deprecated__))
  static octave_value&
  varref (const std::string& name, scope_id scope = xcurrent_scope,
          context_id context = xdefault_context, bool force_add = false)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_varref (name, context, force_add) : dummy_octave_value;
  }




  static void force_assign (const std::string& name,
                            const octave_value& value = octave_value (),
                            scope_id scope = xcurrent_scope,
                            context_id context = xdefault_context)
  {
    assign (name, value, scope, context, true);
  }

  __attribute__ ((__deprecated__))
  static octave_value&
  force_varref (const std::string& name, scope_id scope = xcurrent_scope,
                context_id context = xdefault_context)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_varref (name, context, true) : dummy_octave_value;
  }

  static octave_value varval (const std::string& name,
                              scope_id scope = xcurrent_scope,
                              context_id context = xdefault_context)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_varval (name, context) : octave_value ();
  }

  static void
  global_assign (const std::string& name,
                 const octave_value& value = octave_value ())

  {
    global_table_iterator p = global_table.find (name);

    if (p == global_table.end ())
      global_table[name] = value;
    else
      p->second = value;
  }

  __attribute__ ((__deprecated__))
  static octave_value&
  global_varref (const std::string& name)

  {
    global_table_iterator p = global_table.find (name);

    return (p == global_table.end ()) ? global_table[name] : p->second;
  }

  static octave_value
  global_varval (const std::string& name)
  {
    global_table_const_iterator p = global_table.find (name);

    return (p != global_table.end ()) ? p->second : octave_value ();
  }

  static void
  top_level_assign (const std::string& name,
                    const octave_value& value = octave_value ())
  {
    assign (name, value, top_scope (), 0);
  }

  __attribute__ ((__deprecated__))
  static octave_value&
  top_level_varref (const std::string& name)
  {
    symbol_table *inst = get_instance (top_scope ());

    return inst ? inst->do_varref (name, 0, true) : dummy_octave_value;
  }

  static octave_value
  top_level_varval (const std::string& name)
  {
    return varval (name, top_scope (), 0);
  }

  static void
  persistent_assign (const std::string& name, scope_id scope,
                     const octave_value& value = octave_value ())
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_persistent_assign (name, value);
  }

  static void
  persistent_assign (const std::string& name,
                     const octave_value& value = octave_value ())
  {
    persistent_assign (name, xcurrent_scope, value);
  }

  __attribute__ ((__deprecated__))
  static octave_value&
  persistent_varref (const std::string& name)
  {
    symbol_table *inst = get_instance (xcurrent_scope);

    return inst ? inst->do_persistent_varref (name) : dummy_octave_value;
  }

  static octave_value persistent_varval (const std::string& name,
                                         scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_persistent_varval (name) : octave_value ();
  }

  static void erase_persistent (const std::string& name,
                                scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_erase_persistent (name);
  }

  static bool is_variable (const std::string& name,
                           scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_is_variable (name) : false;
  }

  static bool
  is_built_in_function_name (const std::string& name)
  {
    octave_value val = find_built_in_function (name);

    return val.is_defined ();
  }

  static octave_value
  find_method (const std::string& name, const std::string& dispatch_type)
  {
    fcn_table_const_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        octave_value fcn = p->second.find_method (dispatch_type);

        if (! fcn.is_defined ())
          fcn = find_submethod (name, dispatch_type);

        return fcn;
      }
    else
      {
        fcn_info finfo (name);

        octave_value fcn = finfo.find_method (dispatch_type);

        if (! fcn.is_defined ())
          fcn = find_submethod (name, dispatch_type);

        if (fcn.is_defined ())
          fcn_table[name] = finfo;

        return fcn;
      }
  }

  static octave_value
  find_submethod (const std::string& name, const std::string& dispatch_type);

  static octave_value
  find_built_in_function (const std::string& name)
  {
    fcn_table_const_iterator p = fcn_table.find (name);

    return (p != fcn_table.end ())
           ? p->second.find_built_in_function () : octave_value ();
  }

  static octave_value
  find_autoload (const std::string& name)
  {
    fcn_table_iterator p = fcn_table.find (name);

    return (p != fcn_table.end ())
           ? p->second.find_autoload () : octave_value ();
  }

  static octave_value
  find_function (const std::string& name,
                 const octave_value_list& args = octave_value_list (),
                 bool local_funcs = true);

  static octave_value find_user_function (const std::string& name)
  {
    fcn_table_iterator p = fcn_table.find (name);

    return (p != fcn_table.end ())
           ? p->second.find_user_function () : octave_value ();
  }

  static octave_value find_cmdline_function (const std::string& name)
  {
    fcn_table_iterator p = fcn_table.find (name);

    return (p != fcn_table.end ())
           ? p->second.find_cmdline_function () : octave_value ();
  }

  static void install_cmdline_function (const std::string& name,
                                        const octave_value& fcn)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.install_cmdline_function (fcn);
      }
    else
      {
        fcn_info finfo (name);

        finfo.install_cmdline_function (fcn);

        fcn_table[name] = finfo;
      }
  }




  static void install_subfunction (const std::string& name,
                                   const octave_value& fcn,
                                   scope_id scope)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.install_subfunction (fcn, scope);
      }
    else
      {
        fcn_info finfo (name);

        finfo.install_subfunction (fcn, scope);

        fcn_table[name] = finfo;
      }
  }

  static void install_nestfunction (const std::string& name,
                                    const octave_value& fcn,
                                    scope_id parent_scope);

  static void update_nest (scope_id scope)
  {
    symbol_table *inst = get_instance (scope);
    if (inst)
      inst->do_update_nest ();
  }

  static void install_user_function (const std::string& name,
                                     const octave_value& fcn)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.install_user_function (fcn);
      }
    else
      {
        fcn_info finfo (name);

        finfo.install_user_function (fcn);

        fcn_table[name] = finfo;
      }
  }

  static void install_built_in_function (const std::string& name,
                                         const octave_value& fcn)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.install_built_in_function (fcn);
      }
    else
      {
        fcn_info finfo (name);

        finfo.install_built_in_function (fcn);

        fcn_table[name] = finfo;
      }
  }

  static void clear (const std::string& name)
  {
    clear_variable (name);
  }

  static void clear_all (bool force = false)
  {
    clear_variables ();

    clear_global_pattern ("*");

    clear_functions (force);
  }





  static void clear_variables (scope_id scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_clear_variables ();
  }

  static void clear_variables (void)
  {
    clear_variables (xcurrent_scope);
  }

  static void clear_objects (scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_clear_objects ();
  }

  static void clear_functions (bool force = false)
  {
    for (fcn_table_iterator p = fcn_table.begin (); p != fcn_table.end (); p++)
      p->second.clear (force);
  }

  static void clear_function (const std::string& name)
  {
    clear_user_function (name);
  }

  static void clear_global (const std::string& name,
                            scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_clear_global (name);
  }

  static void clear_variable (const std::string& name,
                              scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_clear_variable (name);
  }

  static void clear_symbol (const std::string& name)
  {


    clear_variable (name);
    clear_function (name);
  }

  static void clear_function_pattern (const std::string& pat)
  {
    glob_match pattern (pat);

    for (fcn_table_iterator p = fcn_table.begin (); p != fcn_table.end (); p++)
      {
        if (pattern.match (p->first))
          p->second.clear_user_function ();
      }
  }

  static void clear_global_pattern (const std::string& pat,
                                    scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_clear_global_pattern (pat);
  }

  static void clear_variable_pattern (const std::string& pat,
                                      scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_clear_variable_pattern (pat);
  }

  static void clear_variable_regexp (const std::string& pat,
                                     scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_clear_variable_regexp (pat);
  }

  static void clear_symbol_pattern (const std::string& pat)
  {


    clear_variable_pattern (pat);
    clear_function_pattern (pat);
  }

  static void clear_user_function (const std::string& name)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.clear_user_function ();
      }



  }


  static void clear_dld_function (const std::string& name)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.clear_autoload_function ();
        finfo.clear_user_function ();
      }
  }

  static void clear_mex_functions (void)
  {
    for (fcn_table_iterator p = fcn_table.begin (); p != fcn_table.end (); p++)
      {
        fcn_info& finfo = p->second;

        finfo.clear_mex_function ();
      }
  }

  static bool set_class_relationship (const std::string& sup_class,
                                      const std::string& inf_class);

  static bool is_superiorto (const std::string& a, const std::string& b);

  static void alias_built_in_function (const std::string& alias,
                                       const std::string& name)
  {
    octave_value fcn = find_built_in_function (name);

    if (fcn.is_defined ())
      {
        fcn_info finfo (alias);

        finfo.install_built_in_function (fcn);

        fcn_table[alias] = finfo;
      }
    else
      panic ("alias: '%s' is undefined", name.c_str ());
  }

  static void add_dispatch (const std::string& name, const std::string& type,
                            const std::string& fname)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.add_dispatch (type, fname);
      }
    else
      {
        fcn_info finfo (name);

        finfo.add_dispatch (type, fname);

        fcn_table[name] = finfo;
      }
  }

  static void clear_dispatch (const std::string& name, const std::string& type)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.clear_dispatch (type);
      }
  }

  static void print_dispatch (std::ostream& os, const std::string& name)
  {
    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        finfo.print_dispatch (os);
      }
  }

  static fcn_info::dispatch_map_type get_dispatch (const std::string& name)
  {
    fcn_info::dispatch_map_type retval;

    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        retval = finfo.get_dispatch ();
      }

    return retval;
  }

  static std::string help_for_dispatch (const std::string& name)
  {
    std::string retval;

    fcn_table_iterator p = fcn_table.find (name);

    if (p != fcn_table.end ())
      {
        fcn_info& finfo = p->second;

        retval = finfo.help_for_dispatch ();
      }

    return retval;
  }

  static void push_context (scope_id scope = xcurrent_scope)
  {
    if (scope == xglobal_scope || scope == xtop_scope)
      error ("invalid call to symtab::push_context");

    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_push_context ();
  }





  static void pop_context (scope_id scope)
  {
    if (scope == xglobal_scope || scope == xtop_scope)
      error ("invalid call to symtab::pop_context");

    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_pop_context ();
  }

  static void pop_context (void) { pop_context (xcurrent_scope); }



  static void pop_context (void *) { pop_context (); }

  static void mark_automatic (const std::string& name,
                              scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_mark_automatic (name);
  }

  static void mark_hidden (const std::string& name,
                           scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_mark_hidden (name);
  }

  static void mark_global (const std::string& name,
                           scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    if (inst)
      inst->do_mark_global (name);
  }


  static std::list<symbol_record>
  all_variables (scope_id scope = xcurrent_scope,
                 context_id context = xdefault_context,
                 bool defined_only = true,
                 unsigned int exclude = symbol_record::hidden)
  {
    symbol_table *inst = get_instance (scope);

    return inst
           ? inst->do_all_variables (context, defined_only, exclude)
           : std::list<symbol_record> ();
  }

  static std::list<symbol_record> glob (const std::string& pattern,
                                        scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_glob (pattern) : std::list<symbol_record> ();
  }

  static std::list<symbol_record> regexp (const std::string& pattern,
                                          scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_regexp (pattern) : std::list<symbol_record> ();
  }

  static std::list<symbol_record> glob_variables (const std::string& pattern,
                                                  scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_glob (pattern, true) : std::list<symbol_record> ();
  }

  static std::list<symbol_record> regexp_variables (const std::string& pattern,
                                                    scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_regexp (pattern, true) : std::list<symbol_record> ();
  }

  static std::list<symbol_record>
  glob_global_variables (const std::string& pattern)
  {
    std::list<symbol_record> retval;

    glob_match pat (pattern);

    for (global_table_const_iterator p = global_table.begin ();
         p != global_table.end (); p++)
      {




        if (pat.match (p->first))
          retval.push_back (symbol_record (xglobal_scope,
                                           p->first, p->second,
                                           symbol_record::global));
      }

    return retval;
  }

  static std::list<symbol_record>
  regexp_global_variables (const std::string& pattern)
  {
    std::list<symbol_record> retval;

    octave::regexp pat (pattern);

    for (global_table_const_iterator p = global_table.begin ();
         p != global_table.end (); p++)
      {




        if (pat.is_match (p->first))
          retval.push_back (symbol_record (xglobal_scope,
                                           p->first, p->second,
                                           symbol_record::global));
      }

    return retval;
  }

  static std::list<symbol_record> glob_variables (const string_vector& patterns)
  {
    std::list<symbol_record> retval;

    size_t len = patterns.numel ();

    for (size_t i = 0; i < len; i++)
      {
        std::list<symbol_record> tmp = glob_variables (patterns[i]);

        retval.insert (retval.begin (), tmp.begin (), tmp.end ());
      }

    return retval;
  }

  static std::list<symbol_record> regexp_variables
    (const string_vector& patterns)
  {
    std::list<symbol_record> retval;

    size_t len = patterns.numel ();

    for (size_t i = 0; i < len; i++)
      {
        std::list<symbol_record> tmp = regexp_variables (patterns[i]);

        retval.insert (retval.begin (), tmp.begin (), tmp.end ());
      }

    return retval;
  }

  static std::list<std::string> user_function_names (void)
  {
    std::list<std::string> retval;

    for (fcn_table_iterator p = fcn_table.begin ();
         p != fcn_table.end (); p++)
      {
        if (p->second.is_user_function_defined ())
          retval.push_back (p->first);
      }

    if (! retval.empty ())
      retval.sort ();

    return retval;
  }

  static std::list<std::string> global_variable_names (void)
  {
    std::list<std::string> retval;

    for (global_table_const_iterator p = global_table.begin ();
         p != global_table.end (); p++)
      retval.push_back (p->first);

    retval.sort ();

    return retval;
  }

  static std::list<std::string> top_level_variable_names (void)
  {
    symbol_table *inst = get_instance (xtop_scope);

    return inst ? inst->do_variable_names () : std::list<std::string> ();
  }

  static std::list<std::string> variable_names (scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst ? inst->do_variable_names () : std::list<std::string> ();
  }

  static std::list<std::string> built_in_function_names (void)
  {
    std::list<std::string> retval;

    for (fcn_table_const_iterator p = fcn_table.begin ();
         p != fcn_table.end (); p++)
      {
        octave_value fcn = p->second.find_built_in_function ();

        if (fcn.is_defined ())
          retval.push_back (p->first);
      }

    if (! retval.empty ())
      retval.sort ();

    return retval;
  }

  static std::list<std::string> cmdline_function_names (void)
  {
    std::list<std::string> retval;

    for (fcn_table_const_iterator p = fcn_table.begin ();
         p != fcn_table.end (); p++)
      {
        octave_value fcn = p->second.find_cmdline_function ();

        if (fcn.is_defined ())
          retval.push_back (p->first);
      }

    if (! retval.empty ())
      retval.sort ();

    return retval;
  }

  static bool is_local_variable (const std::string& name,
                                 scope_id scope = xcurrent_scope)
  {
    if (scope == xglobal_scope)
      return false;
    else
      {
        symbol_table *inst = get_instance (scope);

        return inst ? inst->do_is_local_variable (name) : false;
      }
  }

  static bool is_global (const std::string& name,
                         scope_id scope = xcurrent_scope)
  {
    if (scope == xglobal_scope)
      return true;
    else
      {
        symbol_table *inst = get_instance (scope);

        return inst ? inst->do_is_global (name) : false;
      }
  }

  static std::list<workspace_element> workspace_info (scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);

    return inst
           ? inst->do_workspace_info () : std::list<workspace_element> ();
  }

  static void dump (std::ostream& os, scope_id scope = xcurrent_scope);

  static void dump_global (std::ostream& os);

  static void dump_functions (std::ostream& os);

  static void cache_name (scope_id scope, const std::string& name)
  {
    symbol_table *inst = get_instance (scope, false);

    if (inst)
      inst->do_cache_name (name);
  }

  static void lock_subfunctions (scope_id scope = xcurrent_scope)
  {
    for (fcn_table_iterator p = fcn_table.begin ();
         p != fcn_table.end (); p++)
      p->second.lock_subfunction (scope);
  }

  static void unlock_subfunctions (scope_id scope = xcurrent_scope)
  {
    for (fcn_table_iterator p = fcn_table.begin ();
         p != fcn_table.end (); p++)
      p->second.unlock_subfunction (scope);
  }

  static std::map<std::string, octave_value>
  subfunctions_defined_in_scope (scope_id scope = xcurrent_scope)
  {
    std::map<std::string, octave_value> retval;

    for (fcn_table_const_iterator p = fcn_table.begin ();
         p != fcn_table.end (); p++)
      {
        std::pair<std::string, octave_value> tmp
          = p->second.subfunction_defined_in_scope (scope);

        std::string nm = tmp.first;

        if (! nm.empty ())
          retval[nm] = tmp.second;
      }

    return retval;
  }

  static void free_scope (scope_id scope)
  {
    if (scope == xglobal_scope || scope == xtop_scope)
      error ("can't free global or top-level scopes!");

    symbol_table::scope_id_cache::free (scope);
  }

  static void stash_dir_name_for_subfunctions (scope_id scope,
                                               const std::string& dir_name);

  static void add_to_parent_map (const std::string& classname,
                                 const std::list<std::string>& parent_list)
  {
    parent_map[classname] = parent_list;
  }

  static std::list<std::string>
  parent_classes (const std::string& dispatch_type)
  {
    std::list<std::string> retval;

    const_parent_map_iterator it = parent_map.find (dispatch_type);

    if (it != parent_map.end ())
      retval = it->second;

    for (std::list<std::string>::const_iterator lit = retval.begin ();
         lit != retval.end (); lit++)
      {




        std::list<std::string> parents = parent_classes (*lit);

        if (! parents.empty ())
          retval.insert (retval.end (), parents.begin (), parents.end ());
      }

    return retval;
  }

  static octave_user_function *get_curr_fcn (scope_id scope = xcurrent_scope)
  {
    symbol_table *inst = get_instance (scope);
    return inst->curr_fcn;
  }

  static void set_curr_fcn (octave_user_function *curr_fcn,
                            scope_id scope = xcurrent_scope)
  {
    (void) ((!!(scope != xtop_scope && scope != xglobal_scope)) || (_assert("scope != xtop_scope && scope != xglobal_scope","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h",2325),0));
    symbol_table *inst = get_instance (scope);




    (void) ((!!(inst->curr_fcn == 0 || curr_fcn == 0)) || (_assert("inst->curr_fcn == 0 || curr_fcn == 0","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h",2331),0));
    inst->curr_fcn = curr_fcn;
  }

  static void cleanup (void);

private:



  symbol_table (const symbol_table&);

  symbol_table& operator = (const symbol_table&);

  typedef std::map<std::string, symbol_record>::const_iterator
    table_const_iterator;
  typedef std::map<std::string, symbol_record>::iterator
    table_iterator;

  typedef std::map<std::string, octave_value>::const_iterator
    global_table_const_iterator;
  typedef std::map<std::string, octave_value>::iterator
    global_table_iterator;

  typedef std::map<std::string, octave_value>::const_iterator
    persistent_table_const_iterator;
  typedef std::map<std::string, octave_value>::iterator
    persistent_table_iterator;

  typedef std::map<scope_id, symbol_table*>::const_iterator
    all_instances_const_iterator;
  typedef std::map<scope_id, symbol_table*>::iterator
    all_instances_iterator;

  typedef std::map<std::string, fcn_info>::const_iterator
    fcn_table_const_iterator;
  typedef std::map<std::string, fcn_info>::iterator
    fcn_table_iterator;


  scope_id my_scope;



  std::string table_name;


  std::map<std::string, symbol_record> table;


  std::vector<symbol_table*> nest_children;


  symbol_table *nest_parent;


  octave_user_function *curr_fcn;


  bool static_workspace;


  static std::map<std::string, octave_value> global_table;


  std::map<std::string, octave_value> persistent_table;


  static symbol_table *instance;


  static std::map<scope_id, symbol_table*> all_instances;



  static std::map<std::string, fcn_info> fcn_table;



  static std::map<std::string, std::set<std::string> > class_precedence_table;

  typedef std::map<std::string, std::set<std::string> >::const_iterator
    class_precedence_table_const_iterator;
  typedef std::map<std::string, std::set<std::string> >::iterator
    class_precedence_table_iterator;


  static std::map<std::string, std::list<std::string> > parent_map;

  typedef std::map<std::string, std::list<std::string> >::const_iterator
    const_parent_map_iterator;
  typedef std::map<std::string, std::list<std::string> >::iterator
    parent_map_iterator;

  static const scope_id xglobal_scope;
  static const scope_id xtop_scope;

  static scope_id xcurrent_scope;

  static context_id xcurrent_context;

  static const context_id xdefault_context = static_cast<context_id> (-1);

  symbol_table (scope_id scope)
    : my_scope (scope), table_name (), table (), nest_children (),
      nest_parent (0), curr_fcn (0), static_workspace (false),
      persistent_table () { }

  ~symbol_table (void) { }

  static symbol_table *get_instance (scope_id scope, bool create = true)
  {
    symbol_table *retval = 0;

    bool ok = true;

    if (scope != xglobal_scope)
      {
        if (scope == xcurrent_scope)
          {
            if (! instance && create)
              {
                symbol_table *inst = new symbol_table (scope);

                if (inst)
                  {
                    all_instances[scope] = instance = inst;

                    if (scope == xtop_scope)
                      instance->do_cache_name ("top-level");
                  }
              }

            if (! instance)
              ok = false;

            retval = instance;
          }
        else
          {
            all_instances_iterator p = all_instances.find (scope);

            if (p == all_instances.end ())
              {
                if (create)
                  {
                    retval = new symbol_table (scope);

                    if (retval)
                      all_instances[scope] = retval;
                    else
                      ok = false;
                  }
                else
                  ok = false;
              }
            else
              retval = p->second;
          }
      }

    if (! ok)
      error ("unable to %s symbol_table object for scope %d!",
             create ? "create" : "find", scope);

    return retval;
  }

  void add_nest_child (symbol_table& st)
  {
    (void) ((!!(! st.nest_parent)) || (_assert("! st.nest_parent","C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/symtab.h",2501),0));
    nest_children.push_back (&st);
    st.nest_parent = this;
  }

  void insert_symbol_record (const symbol_record& sr)
  {
    table[sr.name ()] = sr;
  }

  void
  do_dup_scope (symbol_table& new_symbol_table) const
  {
    for (table_const_iterator p = table.begin (); p != table.end (); p++)
      new_symbol_table.insert_symbol_record (p->second.dup (new_symbol_table
                                                            .my_scope));
  }

  symbol_record do_find_symbol (const std::string& name)
  {
    table_iterator p = table.find (name);

    if (p == table.end ())
      return do_insert (name);
    else
      return p->second;
  }

  void do_inherit (symbol_table& donor_table, context_id donor_context)
  {
    for (table_iterator p = table.begin (); p != table.end (); p++)
      {
        symbol_record& sr = p->second;

        if (! (sr.is_automatic () || sr.is_formal ()))
          {
            std::string nm = sr.name ();

            if (nm != "__retval__")
              {
                octave_value val = donor_table.do_varval (nm, donor_context);

                if (val.is_defined ())
                  {
                    sr.assign (val, 0);

                    sr.mark_inherited ();
                  }
              }
          }
      }
  }

  static fcn_info *get_fcn_info (const std::string& name)
  {
    fcn_table_iterator p = fcn_table.find (name);
    return p != fcn_table.end () ? &p->second : 0;
  }

  octave_value
  do_find (const std::string& name, const octave_value_list& args,
           bool skip_variables, bool local_funcs);

  octave_value do_builtin_find (const std::string& name);

  symbol_record& do_insert (const std::string& name, bool force_add = false)
  {
    table_iterator p = table.find (name);

    if (p == table.end ())
      {
        symbol_record ret (my_scope, name);

        if (nest_parent && nest_parent->look_nonlocal (name, ret))
          return table[name] = ret;
        else
          {
            if (static_workspace && ! force_add)
              ret.mark_added_static ();

            return table[name] = ret;
          }
      }
    else
      return p->second;
  }

  void do_rename (const std::string& old_name, const std::string& new_name)
  {
    table_iterator p = table.find (old_name);

    if (p != table.end ())
      {
        symbol_record sr = p->second;

        sr.rename (new_name);

        table.erase (p);

        table[new_name] = sr;
      }
  }

  void do_assign (const std::string& name, const octave_value& value,
                  context_id context, bool force_add)
  {
    table_iterator p = table.find (name);

    if (p == table.end ())
      {
        symbol_record& sr = do_insert (name, force_add);

        sr.assign (value, context);
      }
    else
      p->second.assign (value, context);
  }



  octave_value& do_varref (const std::string& name, context_id context,
                           bool force_add)
  {
    table_iterator p = table.find (name);

    if (p == table.end ())
      {
        symbol_record& sr = do_insert (name, force_add);

        return sr.varref (context);
      }
    else
      return p->second.varref (context);
  }

  octave_value do_varval (const std::string& name, context_id context) const
  {
    table_const_iterator p = table.find (name);

    return (p != table.end ()) ? p->second.varval (context) : octave_value ();
  }

  void do_persistent_assign (const std::string& name, const octave_value& value)
  {
    persistent_table_iterator p = persistent_table.find (name);

    if (p == persistent_table.end ())
      persistent_table[name] = value;
    else
      p->second = value;
  }



  octave_value& do_persistent_varref (const std::string& name)
  {
    persistent_table_iterator p = persistent_table.find (name);

    return (p == persistent_table.end ())
           ? persistent_table[name] : p->second;
  }

  octave_value do_persistent_varval (const std::string& name)
  {
    persistent_table_const_iterator p = persistent_table.find (name);

    return (p != persistent_table.end ()) ? p->second : octave_value ();
  }

  void do_erase_persistent (const std::string& name)
  {
    persistent_table_iterator p = persistent_table.find (name);

    if (p != persistent_table.end ())
      persistent_table.erase (p);
  }

  bool do_is_variable (const std::string& name) const
  {
    bool retval = false;

    table_const_iterator p = table.find (name);

    if (p != table.end ())
      {
        const symbol_record& sr = p->second;

        retval = sr.is_variable ();
      }

    return retval;
  }

  void do_push_context (void)
  {
    for (table_iterator p = table.begin (); p != table.end (); p++)
      p->second.push_context (my_scope);
  }

  void do_pop_context (void)
  {
    table_iterator p = table.begin ();

    while (p != table.end ())
      {
        if (p->second.pop_context (my_scope) == 0)
          table.erase (p++);
        else
          p++;
      }
  }

  void do_clear_variables (void)
  {
    for (table_iterator p = table.begin (); p != table.end (); p++)
      p->second.clear (my_scope);
  }

  void do_clear_objects (void)
  {
    for (table_iterator p = table.begin (); p != table.end (); p++)
      {
        symbol_record& sr = p->second;
        octave_value val = sr.varval ();
        if (val.is_object ())
          p->second.clear (my_scope);
      }
  }

  void do_clear_global (const std::string& name)
  {
    table_iterator p = table.find (name);

    if (p != table.end ())
      {
        symbol_record& sr = p->second;

        if (sr.is_global ())
          sr.unmark_global ();
      }

    global_table_iterator q = global_table.find (name);

    if (q != global_table.end ())
      global_table.erase (q);

  }

  void do_clear_variable (const std::string& name)
  {
    table_iterator p = table.find (name);

    if (p != table.end ())
      p->second.clear (my_scope);
  }

  void do_clear_global_pattern (const std::string& pat)
  {
    glob_match pattern (pat);

    for (table_iterator p = table.begin (); p != table.end (); p++)
      {
        symbol_record& sr = p->second;

        if (sr.is_global () && pattern.match (sr.name ()))
          sr.unmark_global ();
      }

    global_table_iterator q = global_table.begin ();

    while (q != global_table.end ())
      {
        if (pattern.match (q->first))
          global_table.erase (q++);
        else
          q++;
      }
  }

  void do_clear_variable_pattern (const std::string& pat)
  {
    glob_match pattern (pat);

    for (table_iterator p = table.begin (); p != table.end (); p++)
      {
        symbol_record& sr = p->second;

        if (sr.is_defined () || sr.is_global ())
          {
            if (pattern.match (sr.name ()))
              sr.clear (my_scope);
          }
      }
  }

  void do_clear_variable_regexp (const std::string& pat)
  {
    octave::regexp pattern (pat);

    for (table_iterator p = table.begin (); p != table.end (); p++)
      {
        symbol_record& sr = p->second;

        if (sr.is_defined () || sr.is_global ())
          {
            if (pattern.is_match (sr.name ()))
              sr.clear (my_scope);
          }
      }
  }

  void do_mark_automatic (const std::string& name)
  {
    do_insert (name).mark_automatic ();
  }

  void do_mark_hidden (const std::string& name)
  {
    do_insert (name).mark_hidden ();
  }

  void do_mark_global (const std::string& name)
  {
    do_insert (name).mark_global ();
  }

  std::list<symbol_record>
  do_all_variables (context_id context, bool defined_only,
                    unsigned int exclude) const
  {
    std::list<symbol_record> retval;

    for (table_const_iterator p = table.begin (); p != table.end (); p++)
      {
        const symbol_record& sr = p->second;

        if ((defined_only && ! sr.is_defined (context))
            || (sr.xstorage_class () & exclude))
          continue;

        retval.push_back (sr);
      }

    return retval;
  }

  std::list<symbol_record> do_glob (const std::string& pattern,
                                    bool vars_only = false) const
  {
    std::list<symbol_record> retval;

    glob_match pat (pattern);

    for (table_const_iterator p = table.begin (); p != table.end (); p++)
      {
        if (pat.match (p->first))
          {
            const symbol_record& sr = p->second;

            if (vars_only && ! sr.is_variable ())
              continue;

            retval.push_back (sr);
          }
      }

    return retval;
  }

  std::list<symbol_record> do_regexp (const std::string& pattern,
                                      bool vars_only = false) const
  {
    std::list<symbol_record> retval;

    octave::regexp pat (pattern);

    for (table_const_iterator p = table.begin (); p != table.end (); p++)
      {
        if (pat.is_match (p->first))
          {
            const symbol_record& sr = p->second;

            if (vars_only && ! sr.is_variable ())
              continue;

            retval.push_back (sr);
          }
      }

    return retval;
  }

  std::list<std::string> do_variable_names (void)
  {
    std::list<std::string> retval;

    for (table_const_iterator p = table.begin (); p != table.end (); p++)
      {
        if (p->second.is_variable ())
          retval.push_back (p->first);
      }

    retval.sort ();

    return retval;
  }

  bool do_is_local_variable (const std::string& name) const
  {
    table_const_iterator p = table.find (name);

    return (p != table.end ()
            && ! p->second.is_global ()
            && p->second.is_defined ());
  }

  bool do_is_global (const std::string& name) const
  {
    table_const_iterator p = table.find (name);

    return p != table.end () && p->second.is_global ();
  }

  std::list<workspace_element> do_workspace_info (void) const;

  void do_dump (std::ostream& os);

  void do_cache_name (const std::string& name) { table_name = name; }

  void do_update_nest (void);

  bool look_nonlocal (const std::string& name, symbol_record& result)
  {
    table_iterator p = table.find (name);
    if (p == table.end ())
      {
        if (nest_parent)
          return nest_parent->look_nonlocal (name, result);
      }
    else if (! p->second.is_automatic ())
      {
        result = p->second;
        return true;
      }

    return false;
  }
};

extern bool out_of_date_check (octave_value& function,
                               const std::string& dispatch_type = "",
                               bool check_relative = true);

extern std::string
get_dispatch_type (const octave_value_list& args);
extern std::string
get_dispatch_type (const octave_value_list& args, builtin_type_t& builtin_type);
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-fcn.h" 2

class tree_walker;



class

octave_function : public octave_base_value
{
public:

  octave_function (void)
    : relative (false), locked (false), private_function (false),
      xdispatch_class (), xpackage_name (), my_name (), my_dir_name (),
      doc () { }

  ~octave_function (void) { }

  octave_base_value *clone (void) const;
  octave_base_value *empty_clone (void) const;

  bool is_defined (void) const { return true; }

  bool is_function (void) const { return true; }

  virtual bool is_system_fcn_file (void) const { return false; }

  virtual std::string fcn_file_name (void) const { return ""; }

  virtual std::string src_file_name (void) const { return ""; }


  virtual std::string profiler_name (void) const { return name (); }

  virtual std::string parent_fcn_name (void) const { return ""; }

  virtual symbol_table::scope_id parent_fcn_scope (void) const { return -1; }

  virtual void mark_fcn_file_up_to_date (const octave::sys::time&) { }

  virtual symbol_table::scope_id scope (void) { return -1; }

  virtual octave::sys::time time_parsed (void) const
  { return octave::sys::time (static_cast<time_t> (0)); }

  virtual octave::sys::time time_checked (void) const
  { return octave::sys::time (static_cast<time_t> (0)); }

  virtual bool is_subfunction (void) const { return false; }

  virtual bool is_class_constructor (const std::string& = "") const
  { return false; }

  virtual bool
  is_classdef_constructor (const std::string& = "") const
  { return false; }

  virtual bool is_class_method (const std::string& = "") const
  { return false; }

  virtual bool takes_varargs (void) const { return false; }

  virtual bool takes_var_return (void) const { return false; }

  void stash_dispatch_class (const std::string& nm) { xdispatch_class = nm; }

  std::string dispatch_class (void) const { return xdispatch_class; }

  void stash_package_name (const std::string& pack) { xpackage_name = pack; }

  std::string package_name (void) const { return xpackage_name; }

  virtual void
  mark_as_private_function (const std::string& cname = "")
  {
    private_function = true;
    xdispatch_class = cname;
  }

  bool is_private_function (void) const { return private_function; }

  bool is_private_function_of_class (const std::string& nm) const
  { return private_function && xdispatch_class == nm; }

  virtual bool
  is_anonymous_function_of_class (const std::string& = "") const
  { return false; }

  std::string dir_name (void) const { return my_dir_name; }

  void stash_dir_name (const std::string& dir) { my_dir_name = dir; }

  void lock (void)
  {
    this->lock_subfunctions ();
    locked = true;
  }

  void unlock (void)
  {
    this->unlock_subfunctions ();
    locked = false;
  }

  bool islocked (void) const { return locked; }

  virtual void lock_subfunctions (void) { }

  virtual void unlock_subfunctions (void) { }

  virtual void maybe_relocate_end (void) { }


  virtual bool has_subfunctions (void) const { return false; }

  virtual void stash_subfunction_names (const std::list<std::string>&) { }

  virtual std::list<std::string> subfunction_names (void) const
  {
    return std::list<std::string> ();
  }

  void mark_relative (void) { relative = true; }

  bool is_relative (void) const { return relative; }

  std::string name (void) const { return my_name; }

  std::string canonical_name (void) const
  {
    if (xpackage_name.empty ())
      return my_name;
    else
      return xpackage_name + "." + my_name;
  }

  void document (const std::string& ds) { doc = ds; }

  std::string doc_string (void) const { return doc; }

  virtual void unload (void) { }

  virtual void accept (tree_walker&) { }

  virtual bool is_postfix_index_handled (char type) const
  { return (type == '(' || type == '{'); }

protected:

  octave_function (const std::string& nm,
                   const std::string& ds = "")
    : relative (false), locked (false), private_function (false),
      xdispatch_class (), my_name (nm), my_dir_name (), doc (ds) { }


  bool relative;


  bool locked;


  bool private_function;




  std::string xdispatch_class;



  std::string xpackage_name;


  std::string my_name;



  std::string my_dir_name;


  std::string doc;

private:



  octave_function (const octave_function& f);

  octave_function& operator = (const octave_function& f);

};
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-builtin.h" 2


class octave_value;
class octave_value_list;
class jit_type;



class

octave_builtin : public octave_function
{
public:

  octave_builtin (void) : octave_function (), f (0), file (), jtype (0) { }

  typedef octave_value_list (*fcn) (const octave_value_list&, int);

  octave_builtin (fcn ff, const std::string& nm = "",
                  const std::string& ds = "")
    : octave_function (nm, ds), f (ff), file (), jtype (0) { }

  octave_builtin (fcn ff, const std::string& nm, const std::string& fnm,
                  const std::string& ds)
    : octave_function (nm, ds), f (ff), file (fnm), jtype (0) { }

  ~octave_builtin (void) { }

  std::string src_file_name (void) const { return file; }

  octave_value subsref (const std::string& type,
                        const std::list<octave_value_list>& idx)
  {
    octave_value_list tmp = subsref (type, idx, 1);
    return tmp.length () > 0 ? tmp(0) : octave_value ();
  }

  octave_value_list subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             int nargout);

  octave_value_list subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             int nargout,
                             const std::list<octave_lvalue>* lvalue_list);

  octave_function *function_value (bool = false) { return this; }

  bool is_builtin_function (void) const { return true; }

  octave_value_list
  do_multi_index_op (int nargout, const octave_value_list& args);

  octave_value_list
  do_multi_index_op (int nargout, const octave_value_list& args,
                     const std::list<octave_lvalue>* lvalue_list);

  jit_type *to_jit (void) const;

  void stash_jit (jit_type& type);

  fcn function (void) const;

  static const std::list<octave_lvalue> *curr_lvalue_list;

protected:


  fcn f;


  std::string file;


  jit_type *jtype;

private:



  octave_builtin (const octave_builtin& ob);

  octave_builtin& operator = (const octave_builtin& ob);

  public: int type_id (void) const { return t_id; } std::string type_name (void) const { return t_name; } std::string class_name (void) const { return c_name; } static int static_type_id (void) { return t_id; } static std::string static_type_name (void) { return t_name; } static std::string static_class_name (void) { return c_name; } static void register_type (void); private: static int t_id; static const std::string t_name; static const std::string c_name;
};
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-int.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-dld-fcn.h" 1
# 30 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-dld-fcn.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-shlib.h" 1
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/oct-shlib.h"
namespace octave
{
  class

  dynamic_library
  {
  public:

    typedef std::string (*name_mangler) (const std::string&);
    typedef void (*close_hook) (const std::string&);

    class dynlib_rep
    {
    public:

      dynlib_rep (void)
        : count (1), file (), tm_loaded (time_t ()), fcn_names () { }

    protected:

      dynlib_rep (const std::string& f);

    public:

      virtual ~dynlib_rep (void)
      {
        instances.erase (file);
      }

      virtual bool is_open (void) const
      { return false; }

      virtual void *search (const std::string&, name_mangler = 0)
      { return 0; }

      bool is_out_of_date (void) const;


      static dynlib_rep *new_instance (const std::string& f);

      static dynlib_rep *get_instance (const std::string& f, bool fake);

      octave::sys::time time_loaded (void) const
      { return tm_loaded; }

      std::string file_name (void) const
      { return file; }

      size_t num_fcn_names (void) const { return fcn_names.size (); }

      void add_fcn_name (const std::string&);

      bool remove_fcn_name (const std::string&);

      void do_close_hook (close_hook cl_hook);

    public:

      octave_refcount<int> count;

    protected:

      void fake_reload (void);

      std::string file;
      octave::sys::time tm_loaded;


      typedef std::map<std::string, size_t>::iterator fcn_names_iterator;
      typedef std::map<std::string, size_t>::const_iterator fcn_names_const_iterator;

      std::map<std::string, size_t> fcn_names;

      static std::map<std::string, dynlib_rep *> instances;
    };

  private:

    static dynlib_rep nil_rep;

  public:

    dynamic_library (void) : rep (&nil_rep) { rep->count++; }

    dynamic_library (const std::string& f, bool fake = true)
      : rep (dynlib_rep::get_instance (f, fake)) { }

    ~dynamic_library (void)
    {
      if (--rep->count == 0)
        delete rep;
    }

    dynamic_library (const dynamic_library& sl)
      : rep (sl.rep)
    {
      rep->count++;
    }

    dynamic_library& operator = (const dynamic_library& sl)
    {
      if (rep != sl.rep)
        {
          if (--rep->count == 0)
            delete rep;

          rep = sl.rep;
          rep->count++;
        }

      return *this;
    }

    bool operator == (const dynamic_library& sl) const
    { return (rep == sl.rep); }

    operator bool () const { return rep->is_open (); }

    void open (const std::string& f)
    { *this = dynamic_library (f); }

    void close (close_hook cl_hook = 0)
    {
      if (cl_hook)
        rep->do_close_hook (cl_hook);

      *this = dynamic_library ();
    }

    void *search (const std::string& nm, name_mangler mangler = 0) const
    {
      void *f = rep->search (nm, mangler);
      if (f)
        rep->add_fcn_name (nm);

      return f;
    }

    void add (const std::string& name)
    { rep->add_fcn_name (name); }

    bool remove (const std::string& name)
    { return rep->remove_fcn_name (name); }

    size_t number_of_functions_loaded (void) const
    { return rep->num_fcn_names (); }

    bool is_out_of_date (void) const
    { return rep->is_out_of_date (); }

    std::string file_name (void) const
    { return rep->file_name (); }

    octave::sys::time time_loaded (void) const
    { return rep->time_loaded (); }

  private:

    dynlib_rep *rep;
  };
}



__attribute__ ((__deprecated__))
typedef octave::dynamic_library octave_shlib;
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/ov-dld-fcn.h" 2





class octave_value;
class octave_value_list;



class

octave_dld_function : public octave_builtin
{
public:

  octave_dld_function (void)
    : sh_lib (), t_checked (), system_fcn_file ()
  { }

  octave_dld_function (octave_builtin::fcn ff, const octave::dynamic_library& shl,
                       const std::string& nm = "",
                       const std::string& ds = "");

  ~octave_dld_function (void);

  void mark_fcn_file_up_to_date (const octave::sys::time& t) { t_checked = t; }

  std::string fcn_file_name (void) const;

  octave::sys::time time_parsed (void) const;

  octave::sys::time time_checked (void) const { return t_checked; }

  bool is_system_fcn_file (void) const { return system_fcn_file; }

  bool is_builtin_function (void) const { return false; }

  bool is_dld_function (void) const { return true; }

  static octave_dld_function* create (octave_builtin::fcn ff,
                                      const octave::dynamic_library& shl,
                                      const std::string& nm = "",
                                      const std::string& ds = "");

  octave::dynamic_library get_shlib (void) const
  { return sh_lib; }

private:

  octave::dynamic_library sh_lib;



  mutable octave::sys::time t_checked;




  bool system_fcn_file;



  octave_dld_function (const octave_dld_function& fn);

  octave_dld_function& operator = (const octave_dld_function& fn);

  public: int type_id (void) const { return t_id; } std::string type_name (void) const { return t_name; } std::string class_name (void) const { return c_name; } static int static_type_id (void) { return t_id; } static std::string static_type_name (void) { return t_name; } static std::string static_class_name (void) { return c_name; } static void register_type (void); private: static int t_id; static const std::string t_name; static const std::string c_name;
};
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-int.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/version.h" 1
# 53 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/version.h"
extern std::string octave_www_statement (bool html = false);

extern std::string octave_contrib_statement (bool html = false);

extern std::string octave_bugs_statement (bool html = false);

extern std::string octave_name_version_and_copyright (void);

extern std::string
octave_name_version_copyright_copying_and_warranty
  (bool html = false, const std::string& extra_info = "");

extern std::string
octave_name_version_copyright_copying_warranty_and_bugs
  (bool html = false, const std::string& extra_info = "");

extern std::string octave_startup_message (bool html = false);
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-int.h" 2

class octave_value;

extern void print_usage (void);
extern void print_usage (const std::string&);

extern void check_version (const std::string& version,
                                         const std::string& fcn);

extern void
install_builtin_function (octave_builtin::fcn f, const std::string& name,
                          const std::string& file, const std::string& doc,
                          bool can_hide_function = true);

extern void
install_dld_function (octave_dld_function::fcn f, const std::string& name,
                      const octave::dynamic_library& shl, const std::string& doc,
                      bool relative = false);

extern void
install_mex_function (void *fptr, bool fmex, const std::string& name,
                      const octave::dynamic_library& shl, bool relative = false);

extern void
alias_builtin (const std::string& alias, const std::string& name);


extern octave::dynamic_library
get_current_shlib (void);





class octave_auto_shlib : public octave::dynamic_library
{
public:
  octave_auto_shlib (void)
    : octave::dynamic_library (get_current_shlib ()) { }
  octave_auto_shlib (const octave::dynamic_library& shl)
    : octave::dynamic_library (shl) { }
};

extern bool
defun_isargout (int, int);

extern void
defun_isargout (int, int, bool *);
# 101 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-int.h"
typedef bool (*octave_dld_fcn_installer) (const octave::dynamic_library&, bool relative);

typedef octave_function *
  (*octave_dld_fcn_getter) (const octave::dynamic_library&, bool relative);
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/defun-dld.h" 2
# 33 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/errwarn.h" 1
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/errwarn.h"
class octave_value;
namespace octave
{
  class execution_exception;
}





__attribute__ ((__noreturn__)) extern void
err_2_or_3_dim_plot (void);

__attribute__ ((__noreturn__)) extern void
err_data_conversion (const char *from, const char *to);

__attribute__ ((__noreturn__)) extern void
err_disabled_feature (const std::string& fcn, const std::string& feature,
                      const std::string& pkg = "Octave");

__attribute__ ((__noreturn__)) extern void
err_indexed_cs_list (void);

__attribute__ ((__noreturn__)) extern void
err_invalid_conversion (const std::string& from, const std::string& to);

__attribute__ ((__noreturn__)) extern void
err_invalid_inquiry_subscript (void);

__attribute__ ((__noreturn__)) extern void
err_nonbraced_cs_list_assignment (void);

__attribute__ ((__noreturn__)) extern void
err_nonconformant (void);

__attribute__ ((__noreturn__)) extern void
err_nonconformant (octave_idx_type r1, octave_idx_type c1,
                   octave_idx_type r2, octave_idx_type c2);

__attribute__ ((__noreturn__)) extern void
err_not_implemented (const char *);

__attribute__ ((__noreturn__)) extern void
err_range_invalid (void);

__attribute__ ((__noreturn__)) extern void
err_square_matrix_required (const char *fcn, const char *name);

__attribute__ ((__noreturn__)) extern void
err_string_invalid (void);

__attribute__ ((__noreturn__)) extern void
err_unrecognized_data_fmt (const char *name);

__attribute__ ((__noreturn__)) extern void
err_unrecognized_float_fmt (void);

__attribute__ ((__noreturn__)) extern void
err_user_returned_invalid (const char *name);

__attribute__ ((__noreturn__)) extern void
err_user_supplied_eval (const char *name);

__attribute__ ((__noreturn__)) extern void
err_user_supplied_eval (octave::execution_exception& e, const char *name);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (const char *name, const char *s);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (octave::execution_exception& e, const char *name,
                    const char *s);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (const char *name, const std::string& s);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (octave::execution_exception& e, const char *name,
                    const std::string& s);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (const char *name, const octave_value& tc);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (octave::execution_exception& e, const char *name,
                    const octave_value& tc);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (const std::string& name, const octave_value& tc);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (octave::execution_exception& e, const std::string& name,
                    const octave_value& tc);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (const char *s);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (octave::execution_exception& e, const char *s);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (const std::string& s);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (octave::execution_exception& e, const std::string& s);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (const octave_value& tc);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg (octave::execution_exception& e, const octave_value& tc);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg_for_binary_op (const octave_value& op);

__attribute__ ((__noreturn__)) extern void
err_wrong_type_arg_for_unary_op (const octave_value& op);

              extern void
warn_array_as_logical (const dim_vector& dv);

              extern void
warn_complex_cmp (void);

              extern void
warn_data_file_in_path (const std::string& fcn, const std::string& file);

              extern void
warn_disabled_feature (const std::string& fcn, const std::string& feature,
                       const std::string& pkg = "Octave");

              extern void
warn_divide_by_zero (void);

              extern void
warn_empty_arg (const char *name);

              extern void
warn_implicit_conversion (const char *id, const char *from, const char *to);

              extern void
warn_implicit_conversion (const std::string& id, const std::string& from,
                          const std::string& to);

              extern void
warn_invalid_value_specified (const char *name);

              extern void
warn_logical_conversion (void);

              extern void
warn_wrong_type_arg (const char *name, const octave_value& tc);
# 35 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/gripes.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/gripes.h"
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-array-gripes.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/lo-array-gripes.h"
__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_nan_to_logical_conversion (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_nan_to_character_conversion (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_nonconformant (const char *op,
                     octave_idx_type op1_len,
                     octave_idx_type op2_len);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_nonconformant (const char *op,
                     octave_idx_type op1_nr, octave_idx_type op1_nc,
                     octave_idx_type op2_nr, octave_idx_type op2_nc);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_nonconformant (const char *op, const dim_vector& op1_dims,
                     const dim_vector& op2_dims);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_index_out_of_range (int nd, int dim,
                          octave_idx_type iext, octave_idx_type ext,
                          const dim_vector& d);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_index_out_of_range (int nd, int dim,
                          octave_idx_type iext, octave_idx_type ext);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_del_index_out_of_range (bool is1d, octave_idx_type iext,
                              octave_idx_type ext);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_invalid_index (double, octave_idx_type nd = 0,
                     octave_idx_type dim = 0,
                     const std::string& var = "");

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                     octave_idx_type dim = 0,
                     const std::string& var = "");

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                     octave_idx_type dim = 0,
                     const std::string& var = "");

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_invalid_resize (void);

__attribute__ ((__deprecated__))
           extern void
gripe_singular_matrix (double rcond = 0.0);
# 32 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/gripes.h" 2

class octave_value;
namespace octave
{
  class execution_exception;
}





__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_2_or_3_dim_plot (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_data_conversion (const char *from, const char *to);

__attribute__ ((__deprecated__))
              extern void
gripe_data_file_in_path (const std::string& fcn, const std::string& file);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_disabled_feature (const std::string& fcn,
                        const std::string& feature,
                        const std::string& pkg="Octave");

__attribute__ ((__deprecated__))
              extern void
gripe_divide_by_zero (void);

__attribute__ ((__deprecated__))
              extern void
gripe_empty_arg (const char *name, bool is_error);

__attribute__ ((__deprecated__))
              extern void
gripe_implicit_conversion (const char *id, const char *from, const char *to);

__attribute__ ((__deprecated__))
              extern void
gripe_implicit_conversion (const std::string& id, const std::string& from,
                           const std::string& to);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_indexed_cs_list (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_invalid_conversion (const std::string& from, const std::string& to);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_invalid_inquiry_subscript (void);

__attribute__ ((__deprecated__))
              extern void
gripe_invalid_value_specified (const char *name);

__attribute__ ((__deprecated__))
              extern void
gripe_logical_conversion (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_nonbraced_cs_list_assignment (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_nonconformant (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
                     octave_idx_type r2, octave_idx_type c2);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_not_implemented (const char *);


__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_not_supported (const char *);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_range_invalid (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_square_matrix_required (const char *name);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_string_invalid (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_unrecognized_data_fmt (const char *warn_for);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_unrecognized_float_fmt (void);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_user_returned_invalid (const char *name);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_user_supplied_eval (const char *name);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_user_supplied_eval (octave::execution_exception& e, const char *name);

__attribute__ ((__deprecated__))
              extern void
gripe_warn_complex_cmp (void);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (const char *name, const char *s,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (octave::execution_exception& e,
                      const char *name, const char *s,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (const char *name, const std::string& s,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (octave::execution_exception& e,
                      const char *name, const std::string& s,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (const char *name, const octave_value& tc,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (octave::execution_exception& e,
                      const char *name, const octave_value& tc,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (octave::execution_exception& e,
                      const std::string& name, const octave_value& tc,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (const char *s, bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (octave::execution_exception& e, const char *s,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (const std::string& s, bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (octave::execution_exception& e, const std::string& s,
                      bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (const octave_value& tc, bool is_error = true);

__attribute__ ((__deprecated__))
              extern void
gripe_wrong_type_arg (octave::execution_exception& e, const octave_value& tc,
                      bool is_error = true);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_wrong_type_arg_for_binary_op (const octave_value& op);

__attribute__ ((__deprecated__))
__attribute__ ((__noreturn__)) extern void
gripe_wrong_type_arg_for_unary_op (const octave_value& op);
# 37 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/help.h" 1
# 31 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/help.h"
class string_vector;

extern string_vector make_name_list (void);

extern std::string raw_help (const std::string&, bool&);



extern std::string Vdoc_cache_file;




extern std::string Vtexi_macros_file;



extern std::string Vinfo_file;



extern std::string Vinfo_program;

extern std::string do_which (const std::string& name);
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2

# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/pager.h" 1
# 34 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/pager.h"
class

octave_pager_buf : public std::stringbuf
{
public:

  octave_pager_buf (void) : std::stringbuf (), diary_skip (0) { }

  void flush_current_contents_to_diary (void);

  void set_diary_skip (void);

protected:

  int sync (void);

private:

  size_t diary_skip;
};

class

octave_pager_stream : public std::ostream
{
protected:

  octave_pager_stream (void);

public:

  ~octave_pager_stream (void);

  static void flush_current_contents_to_diary (void);

  static void set_diary_skip (void);

  static std::ostream& stream (void);

  static void reset (void);

private:

  void do_flush_current_contents_to_diary (void);

  void do_set_diary_skip (void);

  void do_reset (void);

  static octave_pager_stream *instance;

  static bool instance_ok (void);

  static void cleanup_instance (void) { delete instance; instance = 0; }

  octave_pager_buf *pb;



  octave_pager_stream (const octave_pager_stream&);

  octave_pager_stream& operator = (const octave_pager_stream&);
};

class

octave_diary_buf : public std::stringbuf
{
public:

  octave_diary_buf (void) : std::stringbuf () { }

protected:

  int sync (void);
};

class

octave_diary_stream : public std::ostream
{
protected:

  octave_diary_stream (void);

public:

  ~octave_diary_stream (void);

  static std::ostream& stream (void);

  static void reset (void);

private:

  void do_reset (void);

  static octave_diary_stream *instance;

  static bool instance_ok (void);

  static void cleanup_instance (void) { delete instance; instance = 0; }

  octave_diary_buf *db;



  octave_diary_stream (const octave_diary_stream&);

  octave_diary_stream& operator = (const octave_diary_stream&);
};





extern void flush_octave_stdout (void);
# 40 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/utils.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/utils.h"
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdarg" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cstdarg" 3
# 29 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/utils.h" 2








class octave_value;
class octave_value_list;
class string_vector;

extern bool valid_identifier (const char *s);
extern bool valid_identifier (const std::string& s);

extern bool
same_file (const std::string& f, const std::string& g);

extern int almost_match (const std::string& std,
                                       const std::string& s,
                                       int min_match_len = 1,
                                       int case_sens = 1);

extern int
keyword_almost_match (const char * const *std, int *min_len,
                      const std::string& s, int min_toks_to_match,
                      int max_toks);

__attribute__ ((__deprecated__))
extern int empty_arg (const char *name, octave_idx_type nr,
                                    octave_idx_type nc);

extern std::string
search_path_for_file (const std::string&, const string_vector&);

extern string_vector
search_path_for_all_files (const std::string&, const string_vector&);

extern std::string
file_in_path (const std::string&, const std::string&);

extern std::string
find_data_file_in_load_path (const std::string& fcn,
                              const std::string& file,
                              bool require_regular_file = false);

extern std::string contents_file_in_path (const std::string&);

extern std::string fcn_file_in_path (const std::string&);

__attribute__ ((__deprecated__))
extern std::string oct_file_in_path (const std::string&);

__attribute__ ((__deprecated__))
extern std::string mex_file_in_path (const std::string&);

extern std::string do_string_escapes (const std::string& s);

extern const char *undo_string_escape (char c);

extern std::string undo_string_escapes (const std::string& s);

extern void
check_dimensions (dim_vector& dim, const char *warnfor);

extern void
get_dimensions (const octave_value& a, const char *warn_for,
                dim_vector& dim);

extern void
get_dimensions (const octave_value& a, const octave_value& b,
                const char *warn_for, octave_idx_type& nr,
                octave_idx_type& nc);

extern void
get_dimensions (const octave_value& a,const char *warn_for,
                octave_idx_type& nr, octave_idx_type& nc);

extern octave_idx_type
dims_to_numel (const dim_vector& dims, const octave_value_list& idx);

extern Matrix
identity_matrix (octave_idx_type nr, octave_idx_type nc);

extern FloatMatrix
float_identity_matrix (octave_idx_type nr, octave_idx_type nc);

extern size_t
octave_format (std::ostream& os, const char *fmt, ...);

extern size_t
octave_vformat (std::ostream& os, const char *fmt, va_list args);

extern std::string
octave_vasprintf (const char *fmt, va_list args);

extern std::string octave_asprintf (const char *fmt, ...);

extern void octave_sleep (double seconds);

extern
octave_value_list
do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
                   const char *fun_name, const octave_value_list& args,
                   int nargout);

extern
octave_value
do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
                   const char *fun_name, const octave_value_list& args);
# 41 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2
# 1 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/variables.h" 1
# 28 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/variables.h"
class octave_function;
class octave_user_function;

class tree_identifier;
class octave_value;
class octave_value_list;
class octave_builtin;
class string_vector;


# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cfloat" 1 3
# 40 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cfloat" 3

# 1 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\float.h" 1 3
# 33 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\float.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\float.h" 1 3
# 289 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\float.h" 3
# 1 "C:\\Octave\\Octave-4.2.1\\include\\float.h" 1 3
# 290 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\float.h" 2 3


# 1 "C:\\Octave\\Octave-4.2.1\\include\\float.h" 1 3
# 293 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\float.h" 2 3
# 34 "C:\\Program Files\\LLVM\\bin\\..\\lib\\clang\\3.9.1\\include\\float.h" 2 3
# 42 "C:\\Octave\\Octave-4.2.1\\lib\\gcc\\x86_64-w64-mingw32\\4.9.4\\include\\c++\\cfloat" 2 3
# 38 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/variables.h" 2
# 48 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/variables.h"
extern void clear_mex_functions (void);

extern octave_function *
is_valid_function (const octave_value&, const std::string& = "",
                   bool warn = false);

extern octave_function *
is_valid_function (const std::string&, const std::string& = "",
                   bool warn = false);

extern octave_function *
extract_function (const octave_value& arg, const std::string& warn_for,
                  const std::string& fname, const std::string& header,
                  const std::string& trailer);

extern string_vector
get_struct_elts (const std::string& text);

extern string_vector
generate_struct_completions (const std::string& text, std::string& prefix,
                             std::string& hint);

extern bool
looks_like_struct (const std::string& text, char prev_char);

extern int
symbol_exist (const std::string& name, const std::string& type = "any");

extern std::string
unique_symbol_name (const std::string& basename);

extern octave_value
lookup_function_handle (const std::string& nm);

extern octave_value
get_global_value (const std::string& nm, bool silent = false);

extern void
set_global_value (const std::string& nm, const octave_value& val);

extern octave_value
get_top_level_value (const std::string& nm, bool silent = false);

extern void
set_top_level_value (const std::string& nm, const octave_value& val);

extern octave_value
set_internal_variable (bool& var, const octave_value_list& args,
                       int nargout, const char *nm);

extern octave_value
set_internal_variable (char& var, const octave_value_list& args,
                       int nargout, const char *nm);

extern octave_value
set_internal_variable (int& var, const octave_value_list& args,
                       int nargout, const char *nm,
                       int minval = std::numeric_limits<int>::min (),
                       int maxval = std::numeric_limits<int>::max ());

extern octave_value
set_internal_variable (double& var, const octave_value_list& args,
                       int nargout, const char *nm,
                       double minval = -octave::numeric_limits<double>::Inf (),
                       double maxval = octave::numeric_limits<double>::Inf ());

extern octave_value
set_internal_variable (std::string& var, const octave_value_list& args,
                       int nargout, const char *nm, bool empty_ok = true);

extern octave_value
set_internal_variable (std::string& var, const octave_value_list& args,
                       int nargout, const char *nm, const char **choices);

extern octave_value
set_internal_variable (int& var, const octave_value_list& args,
                       int nargout, const char *nm, const char **choices);
# 139 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave/variables.h"
extern std::string builtin_string_variable (const std::string&);
extern int builtin_real_scalar_variable (const std::string&,
                                                       double&);
extern octave_value builtin_any_variable (const std::string&);

extern void bind_ans (const octave_value& val, bool print);

__attribute__ ((__deprecated__))
              extern void
bind_internal_variable (const std::string& fname, const octave_value& val);

extern void mlock (void);
extern void munlock (const std::string&);
extern bool mislocked (const std::string&);

extern void clear_function (const std::string& nm);
extern void clear_variable (const std::string& nm);
extern void clear_symbol (const std::string& nm);

extern void maybe_missing_function_hook (const std::string& name);
# 42 "C:/Octave/Octave-4.2.1/include/octave-4.2.1/octave\\oct.h" 2
# 3 "bindgen.h" 2

